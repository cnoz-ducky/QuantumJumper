#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NGDUI

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"
#include "NGDUI_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class NGDUI.UserWidgetBase
// 0x0008 (0x0238 - 0x0230)
class UUserWidgetBase : public UUserWidget
{
public:
	uint8                                         Pad_230[0x8];                                      // 0x0230(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWidget* CreateWidgetComponent(TSubclassOf<class UWidget> WidgetClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserWidgetBase">();
	}
	static class UUserWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserWidgetBase>();
	}
};
static_assert(alignof(UUserWidgetBase) == 0x000008, "Wrong alignment on UUserWidgetBase");
static_assert(sizeof(UUserWidgetBase) == 0x000238, "Wrong size on UUserWidgetBase");

// Class NGDUI.NGDManagedLayer
// 0x0028 (0x0260 - 0x0238)
class UNGDManagedLayer final : public UUserWidgetBase
{
public:
	TArray<class UNGDHUDState*>                   LayerStates;                                       // 0x0238(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UNGDWidgetContainer*>            LayerWidgets;                                      // 0x0248(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FLayerConfig                           LayerConfig;                                       // 0x0258(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)

public:
	void AddNewWidgetContainer(const struct FWidgetContainerConfig& NewWidgetContainerData);
	class UNGDHUDState* CreateHUDState(TSubclassOf<class UNGDHUDState> StateClass);
	class UNGDWidgetContainer* CreateWidgetContainer(const struct FWidgetContainerConfig& WidgetData);
	class UNGDHUDState* GetCurrentState();
	int32 GetLayerID();
	class UNGDHUDState* GetState(TSubclassOf<class UNGDHUDState> StateClass, int32 Offset, const class FString& Name_0);
	int32 GetZOrder();
	void InitializeLayer(const struct FLayerConfig& InLayerConfig);
	class UNGDHUDState* PopStateByClass(TSubclassOf<class UNGDHUDState> StateClassToPop, bool Inclusive);
	class UNGDHUDState* PopStateByName(const class FString& StateToPopName, bool Inclusive);
	class UNGDHUDState* PushState(class UNGDHUDState* StateToPush);
	class UNGDHUDState* PushStateByClass(TSubclassOf<class UNGDHUDState> StateClassToPush);
	void RemoveWidget(TSubclassOf<class UNGDWidgetContainer> WidgetClassToRemove);

	class UNGDWidgetContainer* GetWidget(TSubclassOf<class UNGDWidgetContainer> WidgetClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDManagedLayer">();
	}
	static class UNGDManagedLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDManagedLayer>();
	}
};
static_assert(alignof(UNGDManagedLayer) == 0x000008, "Wrong alignment on UNGDManagedLayer");
static_assert(sizeof(UNGDManagedLayer) == 0x000260, "Wrong size on UNGDManagedLayer");
static_assert(offsetof(UNGDManagedLayer, LayerStates) == 0x000238, "Member 'UNGDManagedLayer::LayerStates' has a wrong offset!");
static_assert(offsetof(UNGDManagedLayer, LayerWidgets) == 0x000248, "Member 'UNGDManagedLayer::LayerWidgets' has a wrong offset!");
static_assert(offsetof(UNGDManagedLayer, LayerConfig) == 0x000258, "Member 'UNGDManagedLayer::LayerConfig' has a wrong offset!");

// Class NGDUI.NGDPopupButton
// 0x0028 (0x0260 - 0x0238)
class UNGDPopupButton : public UUserWidgetBase
{
public:
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                Button_CallBack;                                   // 0x0250(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TextBlock_ButtonText;                              // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDPopupButton">();
	}
	static class UNGDPopupButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDPopupButton>();
	}
};
static_assert(alignof(UNGDPopupButton) == 0x000008, "Wrong alignment on UNGDPopupButton");
static_assert(sizeof(UNGDPopupButton) == 0x000260, "Wrong size on UNGDPopupButton");
static_assert(offsetof(UNGDPopupButton, Button_CallBack) == 0x000250, "Member 'UNGDPopupButton::Button_CallBack' has a wrong offset!");
static_assert(offsetof(UNGDPopupButton, TextBlock_ButtonText) == 0x000258, "Member 'UNGDPopupButton::TextBlock_ButtonText' has a wrong offset!");

// Class NGDUI.NGDWidgetContainer
// 0x0010 (0x0248 - 0x0238)
class UNGDWidgetContainer : public UUserWidgetBase
{
public:
	class UNGDHUDState*                           OwnerState;                                        // 0x0238(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         WidgetZOrder;                                      // 0x0240(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UNGDHUDState* GetOwnerHUDState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDWidgetContainer">();
	}
	static class UNGDWidgetContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDWidgetContainer>();
	}
};
static_assert(alignof(UNGDWidgetContainer) == 0x000008, "Wrong alignment on UNGDWidgetContainer");
static_assert(sizeof(UNGDWidgetContainer) == 0x000248, "Wrong size on UNGDWidgetContainer");
static_assert(offsetof(UNGDWidgetContainer, OwnerState) == 0x000238, "Member 'UNGDWidgetContainer::OwnerState' has a wrong offset!");
static_assert(offsetof(UNGDWidgetContainer, WidgetZOrder) == 0x000240, "Member 'UNGDWidgetContainer::WidgetZOrder' has a wrong offset!");

// Class NGDUI.NGDGenericPopup
// 0x0078 (0x02C0 - 0x0248)
class UNGDGenericPopup : public UNGDWidgetContainer
{
public:
	struct FMargin                                ButtonPadding;                                     // 0x0248(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UNGDPopupButton>            ButtonWidget;                                      // 0x0258(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TextBlock_Title;                                   // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Horizontal_ButtonContainer;                        // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EPopUpButtonDefault, class UNGDPopupButton*> DefaultButtons;                                // 0x0270(0x0050)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDGenericPopup">();
	}
	static class UNGDGenericPopup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDGenericPopup>();
	}
};
static_assert(alignof(UNGDGenericPopup) == 0x000008, "Wrong alignment on UNGDGenericPopup");
static_assert(sizeof(UNGDGenericPopup) == 0x0002C0, "Wrong size on UNGDGenericPopup");
static_assert(offsetof(UNGDGenericPopup, ButtonPadding) == 0x000248, "Member 'UNGDGenericPopup::ButtonPadding' has a wrong offset!");
static_assert(offsetof(UNGDGenericPopup, ButtonWidget) == 0x000258, "Member 'UNGDGenericPopup::ButtonWidget' has a wrong offset!");
static_assert(offsetof(UNGDGenericPopup, TextBlock_Title) == 0x000260, "Member 'UNGDGenericPopup::TextBlock_Title' has a wrong offset!");
static_assert(offsetof(UNGDGenericPopup, Horizontal_ButtonContainer) == 0x000268, "Member 'UNGDGenericPopup::Horizontal_ButtonContainer' has a wrong offset!");
static_assert(offsetof(UNGDGenericPopup, DefaultButtons) == 0x000270, "Member 'UNGDGenericPopup::DefaultButtons' has a wrong offset!");

// Class NGDUI.NGDHUDBase
// 0x0000 (0x0308 - 0x0308)
class ANGDHUDBase : public AHUD
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDHUDBase">();
	}
	static class ANGDHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANGDHUDBase>();
	}
};
static_assert(alignof(ANGDHUDBase) == 0x000008, "Wrong alignment on ANGDHUDBase");
static_assert(sizeof(ANGDHUDBase) == 0x000308, "Wrong size on ANGDHUDBase");

// Class NGDUI.NGDHUDState
// 0x0030 (0x0268 - 0x0238)
class UNGDHUDState : public UUserWidgetBase
{
public:
	class FString                                 StateName;                                         // 0x0238(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWidgetContainerConfig>         WidgetContainerConfigs;                            // 0x0248(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UNGDWidgetContainer*>            ActiveWidgets;                                     // 0x0258(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void Clear();
	class UNGDWidgetContainer* GetWidgetContainer(TSubclassOf<class UNGDWidgetContainer> WidgetContainerClass);
	bool IsMultipleStateAllowed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDHUDState">();
	}
	static class UNGDHUDState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDHUDState>();
	}
};
static_assert(alignof(UNGDHUDState) == 0x000008, "Wrong alignment on UNGDHUDState");
static_assert(sizeof(UNGDHUDState) == 0x000268, "Wrong size on UNGDHUDState");
static_assert(offsetof(UNGDHUDState, StateName) == 0x000238, "Member 'UNGDHUDState::StateName' has a wrong offset!");
static_assert(offsetof(UNGDHUDState, WidgetContainerConfigs) == 0x000248, "Member 'UNGDHUDState::WidgetContainerConfigs' has a wrong offset!");
static_assert(offsetof(UNGDHUDState, ActiveWidgets) == 0x000258, "Member 'UNGDHUDState::ActiveWidgets' has a wrong offset!");

// Class NGDUI.NGDLayeredHUD
// 0x0098 (0x03A0 - 0x0308)
class ANGDLayeredHUD : public ANGDHUDBase
{
public:
	TMulticastInlineDelegate<void(class UNGDHUDState* PresentedState)> OnHUDStatePresented;          // 0x0308(0x0010)(ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FLayerConfig>                   LayerConfigs;                                      // 0x0318(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UNGDManagedLayer*>               HUDLayers;                                         // 0x0328(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UNGDHUDState>>       AvailableHUDStates;                                // 0x0338(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UNGDHUDState>, TSubclassOf<class UNGDHUDState>> HUDStatesMap;             // 0x0348(0x0050)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bIsHUDVisible;                                     // 0x0398(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWasHudInitialized;                                // 0x0399(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39A[0x6];                                      // 0x039A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UNGDManagedLayer* GetDefaultLayer(const class UObject* WorldContextObject);
	static class UNGDManagedLayer* GetLayer(const class UObject* WorldContextObject, int32 LayerIndex);
	static class UNGDManagedLayer* GetPopupLayer(const class UObject* WorldContextObject);
	static class ANGDLayeredHUD* GetWorldHUD(const class UObject* WorldContextObject);
	static class UNGDGenericPopup* ShowPopup(const class UObject* WorldContextObject, const class FText& Title, const TArray<struct FPopUpButtonSettings>& Buttons, int32 Priority, TSubclassOf<class UNGDPopupHUDState> HUDState);

	void BeginPlay();
	void InitializeHUD();
	bool OnConfirm();
	bool OnEscape();

	bool IsHUDInitialized() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDLayeredHUD">();
	}
	static class ANGDLayeredHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANGDLayeredHUD>();
	}
};
static_assert(alignof(ANGDLayeredHUD) == 0x000008, "Wrong alignment on ANGDLayeredHUD");
static_assert(sizeof(ANGDLayeredHUD) == 0x0003A0, "Wrong size on ANGDLayeredHUD");
static_assert(offsetof(ANGDLayeredHUD, OnHUDStatePresented) == 0x000308, "Member 'ANGDLayeredHUD::OnHUDStatePresented' has a wrong offset!");
static_assert(offsetof(ANGDLayeredHUD, LayerConfigs) == 0x000318, "Member 'ANGDLayeredHUD::LayerConfigs' has a wrong offset!");
static_assert(offsetof(ANGDLayeredHUD, HUDLayers) == 0x000328, "Member 'ANGDLayeredHUD::HUDLayers' has a wrong offset!");
static_assert(offsetof(ANGDLayeredHUD, AvailableHUDStates) == 0x000338, "Member 'ANGDLayeredHUD::AvailableHUDStates' has a wrong offset!");
static_assert(offsetof(ANGDLayeredHUD, HUDStatesMap) == 0x000348, "Member 'ANGDLayeredHUD::HUDStatesMap' has a wrong offset!");
static_assert(offsetof(ANGDLayeredHUD, bIsHUDVisible) == 0x000398, "Member 'ANGDLayeredHUD::bIsHUDVisible' has a wrong offset!");
static_assert(offsetof(ANGDLayeredHUD, bWasHudInitialized) == 0x000399, "Member 'ANGDLayeredHUD::bWasHudInitialized' has a wrong offset!");

// Class NGDUI.NGDPopupHUDState
// 0x0008 (0x0270 - 0x0268)
class UNGDPopupHUDState : public UNGDHUDState
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDPopupHUDState">();
	}
	static class UNGDPopupHUDState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDPopupHUDState>();
	}
};
static_assert(alignof(UNGDPopupHUDState) == 0x000008, "Wrong alignment on UNGDPopupHUDState");
static_assert(sizeof(UNGDPopupHUDState) == 0x000270, "Wrong size on UNGDPopupHUDState");

}

