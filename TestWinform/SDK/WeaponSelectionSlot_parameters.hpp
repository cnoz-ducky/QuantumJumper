#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponSelectionSlot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "TimeWatch_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WeaponSelectionSlot.WeaponSelectionSlot_C.ExecuteUbergraph_WeaponSelectionSlot
// 0x00D8 (0x00D8 - 0x0000)
struct WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)> K2Node_CreateDelegate_OutputDelegate; // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0020(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsDesiredWeapon;                     // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0078(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0090(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFluxCapacitorStates                          K2Node_CustomEvent_OldState;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFluxCapacitorStates                          K2Node_CustomEvent_NewState;                       // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATimeWatchGameState*                    K2Node_DynamicCast_AsTime_Watch_Game_State;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot) == 0x000008, "Wrong alignment on WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot");
static_assert(sizeof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot) == 0x0000D8, "Wrong size on WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, EntryPoint) == 0x000000, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, K2Node_Event_MyGeometry) == 0x000020, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, K2Node_Event_InDeltaTime) == 0x000058, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, K2Node_Event_bIsDesiredWeapon) == 0x00005C, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::K2Node_Event_bIsDesiredWeapon' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_BreakVector2D_X) == 0x000060, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_BreakVector2D_Y) == 0x000064, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000068, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_MakeVector2D_ReturnValue) == 0x000070, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_GetText_ReturnValue) == 0x000078, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_TextToUpper_ReturnValue) == 0x000090, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000A8, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_GetGameState_ReturnValue) == 0x0000B0, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, K2Node_CustomEvent_OldState) == 0x0000B8, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::K2Node_CustomEvent_OldState' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, K2Node_CustomEvent_NewState) == 0x0000B9, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::K2Node_CustomEvent_NewState' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, K2Node_DynamicCast_AsTime_Watch_Game_State) == 0x0000C0, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::K2Node_DynamicCast_AsTime_Watch_Game_State' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot, CallFunc_PlayAnimation_ReturnValue_2) == 0x0000D0, "Member 'WeaponSelectionSlot_C_ExecuteUbergraph_WeaponSelectionSlot::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function WeaponSelectionSlot.WeaponSelectionSlot_C.OnStateChanged_Event
// 0x0002 (0x0002 - 0x0000)
struct WeaponSelectionSlot_C_OnStateChanged_Event final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponSelectionSlot_C_OnStateChanged_Event) == 0x000001, "Wrong alignment on WeaponSelectionSlot_C_OnStateChanged_Event");
static_assert(sizeof(WeaponSelectionSlot_C_OnStateChanged_Event) == 0x000002, "Wrong size on WeaponSelectionSlot_C_OnStateChanged_Event");
static_assert(offsetof(WeaponSelectionSlot_C_OnStateChanged_Event, OldState) == 0x000000, "Member 'WeaponSelectionSlot_C_OnStateChanged_Event::OldState' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_OnStateChanged_Event, NewState) == 0x000001, "Member 'WeaponSelectionSlot_C_OnStateChanged_Event::NewState' has a wrong offset!");

// Function WeaponSelectionSlot.WeaponSelectionSlot_C.BP_SetDesiredStatus
// 0x0001 (0x0001 - 0x0000)
struct WeaponSelectionSlot_C_BP_SetDesiredStatus final
{
public:
	bool                                          bIsDesiredWeapon;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WeaponSelectionSlot_C_BP_SetDesiredStatus) == 0x000001, "Wrong alignment on WeaponSelectionSlot_C_BP_SetDesiredStatus");
static_assert(sizeof(WeaponSelectionSlot_C_BP_SetDesiredStatus) == 0x000001, "Wrong size on WeaponSelectionSlot_C_BP_SetDesiredStatus");
static_assert(offsetof(WeaponSelectionSlot_C_BP_SetDesiredStatus, bIsDesiredWeapon) == 0x000000, "Member 'WeaponSelectionSlot_C_BP_SetDesiredStatus::bIsDesiredWeapon' has a wrong offset!");

// Function WeaponSelectionSlot.WeaponSelectionSlot_C.Tick
// 0x003C (0x003C - 0x0000)
struct WeaponSelectionSlot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WeaponSelectionSlot_C_Tick) == 0x000004, "Wrong alignment on WeaponSelectionSlot_C_Tick");
static_assert(sizeof(WeaponSelectionSlot_C_Tick) == 0x00003C, "Wrong size on WeaponSelectionSlot_C_Tick");
static_assert(offsetof(WeaponSelectionSlot_C_Tick, MyGeometry) == 0x000000, "Member 'WeaponSelectionSlot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WeaponSelectionSlot_C_Tick, InDeltaTime) == 0x000038, "Member 'WeaponSelectionSlot_C_Tick::InDeltaTime' has a wrong offset!");

}

