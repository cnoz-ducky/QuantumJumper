#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CaptureCompass

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "TimeWatch_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CaptureCompass.CaptureCompass_C.ExecuteUbergraph_CaptureCompass
// 0x0058 (0x0058 - 0x0000)
struct CaptureCompass_C_ExecuteUbergraph_CaptureCompass final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECaptureState                                 K2Node_Event_NewState;                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_Color;                                // 0x0044(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CaptureCompass_C_ExecuteUbergraph_CaptureCompass) == 0x000004, "Wrong alignment on CaptureCompass_C_ExecuteUbergraph_CaptureCompass");
static_assert(sizeof(CaptureCompass_C_ExecuteUbergraph_CaptureCompass) == 0x000058, "Wrong size on CaptureCompass_C_ExecuteUbergraph_CaptureCompass");
static_assert(offsetof(CaptureCompass_C_ExecuteUbergraph_CaptureCompass, EntryPoint) == 0x000000, "Member 'CaptureCompass_C_ExecuteUbergraph_CaptureCompass::EntryPoint' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_ExecuteUbergraph_CaptureCompass, K2Node_Event_MyGeometry) == 0x000004, "Member 'CaptureCompass_C_ExecuteUbergraph_CaptureCompass::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_ExecuteUbergraph_CaptureCompass, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'CaptureCompass_C_ExecuteUbergraph_CaptureCompass::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_ExecuteUbergraph_CaptureCompass, K2Node_Event_NewState) == 0x000040, "Member 'CaptureCompass_C_ExecuteUbergraph_CaptureCompass::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_ExecuteUbergraph_CaptureCompass, K2Node_Event_Color) == 0x000044, "Member 'CaptureCompass_C_ExecuteUbergraph_CaptureCompass::K2Node_Event_Color' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_ExecuteUbergraph_CaptureCompass, K2Node_SwitchEnum_CmpSuccess) == 0x000054, "Member 'CaptureCompass_C_ExecuteUbergraph_CaptureCompass::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function CaptureCompass.CaptureCompass_C.OnStateChanged
// 0x0014 (0x0014 - 0x0000)
struct CaptureCompass_C_OnStateChanged final
{
public:
	ECaptureState                                 NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CaptureCompass_C_OnStateChanged) == 0x000004, "Wrong alignment on CaptureCompass_C_OnStateChanged");
static_assert(sizeof(CaptureCompass_C_OnStateChanged) == 0x000014, "Wrong size on CaptureCompass_C_OnStateChanged");
static_assert(offsetof(CaptureCompass_C_OnStateChanged, NewState) == 0x000000, "Member 'CaptureCompass_C_OnStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_OnStateChanged, Color) == 0x000004, "Member 'CaptureCompass_C_OnStateChanged::Color' has a wrong offset!");

// Function CaptureCompass.CaptureCompass_C.Tick
// 0x003C (0x003C - 0x0000)
struct CaptureCompass_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CaptureCompass_C_Tick) == 0x000004, "Wrong alignment on CaptureCompass_C_Tick");
static_assert(sizeof(CaptureCompass_C_Tick) == 0x00003C, "Wrong size on CaptureCompass_C_Tick");
static_assert(offsetof(CaptureCompass_C_Tick, MyGeometry) == 0x000000, "Member 'CaptureCompass_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_Tick, InDeltaTime) == 0x000038, "Member 'CaptureCompass_C_Tick::InDeltaTime' has a wrong offset!");

// Function CaptureCompass.CaptureCompass_C.GetStrokeVisibility
// 0x0006 (0x0006 - 0x0000)
struct CaptureCompass_C_GetStrokeVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShowCapturePointStroke_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CaptureCompass_C_GetStrokeVisibility) == 0x000001, "Wrong alignment on CaptureCompass_C_GetStrokeVisibility");
static_assert(sizeof(CaptureCompass_C_GetStrokeVisibility) == 0x000006, "Wrong size on CaptureCompass_C_GetStrokeVisibility");
static_assert(offsetof(CaptureCompass_C_GetStrokeVisibility, ReturnValue) == 0x000000, "Member 'CaptureCompass_C_GetStrokeVisibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_GetStrokeVisibility, Temp_bool_Variable) == 0x000001, "Member 'CaptureCompass_C_GetStrokeVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_GetStrokeVisibility, Temp_byte_Variable) == 0x000002, "Member 'CaptureCompass_C_GetStrokeVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_GetStrokeVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'CaptureCompass_C_GetStrokeVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_GetStrokeVisibility, CallFunc_ShowCapturePointStroke_ReturnValue) == 0x000004, "Member 'CaptureCompass_C_GetStrokeVisibility::CallFunc_ShowCapturePointStroke_ReturnValue' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_GetStrokeVisibility, K2Node_Select_Default) == 0x000005, "Member 'CaptureCompass_C_GetStrokeVisibility::K2Node_Select_Default' has a wrong offset!");

// Function CaptureCompass.CaptureCompass_C.GetPointName
// 0x0030 (0x0030 - 0x0000)
struct CaptureCompass_C_GetPointName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class FText                                   CallFunc_GetCompassName_ReturnValue;               // 0x0018(0x0018)()
};
static_assert(alignof(CaptureCompass_C_GetPointName) == 0x000008, "Wrong alignment on CaptureCompass_C_GetPointName");
static_assert(sizeof(CaptureCompass_C_GetPointName) == 0x000030, "Wrong size on CaptureCompass_C_GetPointName");
static_assert(offsetof(CaptureCompass_C_GetPointName, ReturnValue) == 0x000000, "Member 'CaptureCompass_C_GetPointName::ReturnValue' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_GetPointName, CallFunc_GetCompassName_ReturnValue) == 0x000018, "Member 'CaptureCompass_C_GetPointName::CallFunc_GetCompassName_ReturnValue' has a wrong offset!");

// Function CaptureCompass.CaptureCompass_C.Get Point State Visibility
// 0x0006 (0x0006 - 0x0000)
struct CaptureCompass_C_Get_Point_State_Visibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShowCaptureStateText_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CaptureCompass_C_Get_Point_State_Visibility) == 0x000001, "Wrong alignment on CaptureCompass_C_Get_Point_State_Visibility");
static_assert(sizeof(CaptureCompass_C_Get_Point_State_Visibility) == 0x000006, "Wrong size on CaptureCompass_C_Get_Point_State_Visibility");
static_assert(offsetof(CaptureCompass_C_Get_Point_State_Visibility, ReturnValue) == 0x000000, "Member 'CaptureCompass_C_Get_Point_State_Visibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_Get_Point_State_Visibility, Temp_bool_Variable) == 0x000001, "Member 'CaptureCompass_C_Get_Point_State_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_Get_Point_State_Visibility, Temp_byte_Variable) == 0x000002, "Member 'CaptureCompass_C_Get_Point_State_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_Get_Point_State_Visibility, Temp_byte_Variable_1) == 0x000003, "Member 'CaptureCompass_C_Get_Point_State_Visibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_Get_Point_State_Visibility, CallFunc_ShowCaptureStateText_ReturnValue) == 0x000004, "Member 'CaptureCompass_C_Get_Point_State_Visibility::CallFunc_ShowCaptureStateText_ReturnValue' has a wrong offset!");
static_assert(offsetof(CaptureCompass_C_Get_Point_State_Visibility, K2Node_Select_Default) == 0x000005, "Member 'CaptureCompass_C_Get_Point_State_Visibility::K2Node_Select_Default' has a wrong offset!");

}

