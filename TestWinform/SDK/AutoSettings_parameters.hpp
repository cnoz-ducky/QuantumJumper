#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutoSettings

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"
#include "AutoSettings_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function AutoSettings.InputLabel.MappingsChanged
// 0x0008 (0x0008 - 0x0000)
struct InputLabel_MappingsChanged final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputLabel_MappingsChanged) == 0x000008, "Wrong alignment on InputLabel_MappingsChanged");
static_assert(sizeof(InputLabel_MappingsChanged) == 0x000008, "Wrong size on InputLabel_MappingsChanged");
static_assert(offsetof(InputLabel_MappingsChanged, Player) == 0x000000, "Member 'InputLabel_MappingsChanged::Player' has a wrong offset!");

// Function AutoSettings.InputMapping.BindChord
// 0x0020 (0x0020 - 0x0000)
struct InputMapping_BindChord final
{
public:
	struct FInputChord                            InChord;                                           // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMapping_BindChord) == 0x000008, "Wrong alignment on InputMapping_BindChord");
static_assert(sizeof(InputMapping_BindChord) == 0x000020, "Wrong size on InputMapping_BindChord");
static_assert(offsetof(InputMapping_BindChord, InChord) == 0x000000, "Member 'InputMapping_BindChord::InChord' has a wrong offset!");

// Function AutoSettings.InputMapping.ChordCaptured
// 0x0020 (0x0020 - 0x0000)
struct InputMapping_ChordCaptured final
{
public:
	struct FInputChord                            InChord;                                           // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMapping_ChordCaptured) == 0x000008, "Wrong alignment on InputMapping_ChordCaptured");
static_assert(sizeof(InputMapping_ChordCaptured) == 0x000020, "Wrong size on InputMapping_ChordCaptured");
static_assert(offsetof(InputMapping_ChordCaptured, InChord) == 0x000000, "Member 'InputMapping_ChordCaptured::InChord' has a wrong offset!");

// Function AutoSettings.AutoSettingWidget.ApplySettingValue
// 0x0018 (0x0018 - 0x0000)
struct AutoSettingWidget_ApplySettingValue final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveIfPossible;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoSettingWidget_ApplySettingValue) == 0x000008, "Wrong alignment on AutoSettingWidget_ApplySettingValue");
static_assert(sizeof(AutoSettingWidget_ApplySettingValue) == 0x000018, "Wrong size on AutoSettingWidget_ApplySettingValue");
static_assert(offsetof(AutoSettingWidget_ApplySettingValue, Value) == 0x000000, "Member 'AutoSettingWidget_ApplySettingValue::Value' has a wrong offset!");
static_assert(offsetof(AutoSettingWidget_ApplySettingValue, bSaveIfPossible) == 0x000010, "Member 'AutoSettingWidget_ApplySettingValue::bSaveIfPossible' has a wrong offset!");

// Function AutoSettings.AutoSettingWidget.UpdateSelection
// 0x0010 (0x0010 - 0x0000)
struct AutoSettingWidget_UpdateSelection final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingWidget_UpdateSelection) == 0x000008, "Wrong alignment on AutoSettingWidget_UpdateSelection");
static_assert(sizeof(AutoSettingWidget_UpdateSelection) == 0x000010, "Wrong size on AutoSettingWidget_UpdateSelection");
static_assert(offsetof(AutoSettingWidget_UpdateSelection, Value) == 0x000000, "Member 'AutoSettingWidget_UpdateSelection::Value' has a wrong offset!");

// Function AutoSettings.AutoSettingWidget.HasUnappliedChange
// 0x0001 (0x0001 - 0x0000)
struct AutoSettingWidget_HasUnappliedChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingWidget_HasUnappliedChange) == 0x000001, "Wrong alignment on AutoSettingWidget_HasUnappliedChange");
static_assert(sizeof(AutoSettingWidget_HasUnappliedChange) == 0x000001, "Wrong size on AutoSettingWidget_HasUnappliedChange");
static_assert(offsetof(AutoSettingWidget_HasUnappliedChange, ReturnValue) == 0x000000, "Member 'AutoSettingWidget_HasUnappliedChange::ReturnValue' has a wrong offset!");

// Function AutoSettings.AutoSettingWidget.HasUnsavedChange
// 0x0001 (0x0001 - 0x0000)
struct AutoSettingWidget_HasUnsavedChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingWidget_HasUnsavedChange) == 0x000001, "Wrong alignment on AutoSettingWidget_HasUnsavedChange");
static_assert(sizeof(AutoSettingWidget_HasUnsavedChange) == 0x000001, "Wrong size on AutoSettingWidget_HasUnsavedChange");
static_assert(offsetof(AutoSettingWidget_HasUnsavedChange, ReturnValue) == 0x000000, "Member 'AutoSettingWidget_HasUnsavedChange::ReturnValue' has a wrong offset!");

// Function AutoSettings.AutoSettingsConfig.GetKeyFriendlyNameStatic
// 0x0030 (0x0030 - 0x0000)
struct AutoSettingsConfig_GetKeyFriendlyNameStatic final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsConfig_GetKeyFriendlyNameStatic) == 0x000008, "Wrong alignment on AutoSettingsConfig_GetKeyFriendlyNameStatic");
static_assert(sizeof(AutoSettingsConfig_GetKeyFriendlyNameStatic) == 0x000030, "Wrong size on AutoSettingsConfig_GetKeyFriendlyNameStatic");
static_assert(offsetof(AutoSettingsConfig_GetKeyFriendlyNameStatic, Key) == 0x000000, "Member 'AutoSettingsConfig_GetKeyFriendlyNameStatic::Key' has a wrong offset!");
static_assert(offsetof(AutoSettingsConfig_GetKeyFriendlyNameStatic, ReturnValue) == 0x000018, "Member 'AutoSettingsConfig_GetKeyFriendlyNameStatic::ReturnValue' has a wrong offset!");

// Function AutoSettings.AutoSettingsConfig.GetKeyGroupStatic
// 0x0020 (0x0020 - 0x0000)
struct AutoSettingsConfig_GetKeyGroupStatic final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsConfig_GetKeyGroupStatic) == 0x000008, "Wrong alignment on AutoSettingsConfig_GetKeyGroupStatic");
static_assert(sizeof(AutoSettingsConfig_GetKeyGroupStatic) == 0x000020, "Wrong size on AutoSettingsConfig_GetKeyGroupStatic");
static_assert(offsetof(AutoSettingsConfig_GetKeyGroupStatic, Key) == 0x000000, "Member 'AutoSettingsConfig_GetKeyGroupStatic::Key' has a wrong offset!");
static_assert(offsetof(AutoSettingsConfig_GetKeyGroupStatic, ReturnValue) == 0x000018, "Member 'AutoSettingsConfig_GetKeyGroupStatic::ReturnValue' has a wrong offset!");

// Function AutoSettings.AutoSettingsPlayer.SaveInputMappings
// 0x0040 (0x0040 - 0x0000)
struct AutoSettingsPlayer_SaveInputMappings final
{
public:
	struct FPlayerInputMappings                   InputMappings;                                     // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsPlayer_SaveInputMappings) == 0x000008, "Wrong alignment on AutoSettingsPlayer_SaveInputMappings");
static_assert(sizeof(AutoSettingsPlayer_SaveInputMappings) == 0x000040, "Wrong size on AutoSettingsPlayer_SaveInputMappings");
static_assert(offsetof(AutoSettingsPlayer_SaveInputMappings, InputMappings) == 0x000000, "Member 'AutoSettingsPlayer_SaveInputMappings::InputMappings' has a wrong offset!");

// Function AutoSettings.AutoSettingsPlayer.GetDefaultInputMappingPreset
// 0x0020 (0x0020 - 0x0000)
struct AutoSettingsPlayer_GetDefaultInputMappingPreset final
{
public:
	struct FInputMappingPreset                    ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsPlayer_GetDefaultInputMappingPreset) == 0x000008, "Wrong alignment on AutoSettingsPlayer_GetDefaultInputMappingPreset");
static_assert(sizeof(AutoSettingsPlayer_GetDefaultInputMappingPreset) == 0x000020, "Wrong size on AutoSettingsPlayer_GetDefaultInputMappingPreset");
static_assert(offsetof(AutoSettingsPlayer_GetDefaultInputMappingPreset, ReturnValue) == 0x000000, "Member 'AutoSettingsPlayer_GetDefaultInputMappingPreset::ReturnValue' has a wrong offset!");

// Function AutoSettings.AutoSettingsPlayer.GetInputMappings
// 0x0048 (0x0048 - 0x0000)
struct AutoSettingsPlayer_GetInputMappings final
{
public:
	struct FPlayerInputMappings                   InputMappings;                                     // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutoSettingsPlayer_GetInputMappings) == 0x000008, "Wrong alignment on AutoSettingsPlayer_GetInputMappings");
static_assert(sizeof(AutoSettingsPlayer_GetInputMappings) == 0x000048, "Wrong size on AutoSettingsPlayer_GetInputMappings");
static_assert(offsetof(AutoSettingsPlayer_GetInputMappings, InputMappings) == 0x000000, "Member 'AutoSettingsPlayer_GetInputMappings::InputMappings' has a wrong offset!");
static_assert(offsetof(AutoSettingsPlayer_GetInputMappings, ReturnValue) == 0x000040, "Member 'AutoSettingsPlayer_GetInputMappings::ReturnValue' has a wrong offset!");

// Function AutoSettings.AutoSettingsPlayer.GetUniquePlayerIdentifier
// 0x0010 (0x0010 - 0x0000)
struct AutoSettingsPlayer_GetUniquePlayerIdentifier final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutoSettingsPlayer_GetUniquePlayerIdentifier) == 0x000008, "Wrong alignment on AutoSettingsPlayer_GetUniquePlayerIdentifier");
static_assert(sizeof(AutoSettingsPlayer_GetUniquePlayerIdentifier) == 0x000010, "Wrong size on AutoSettingsPlayer_GetUniquePlayerIdentifier");
static_assert(offsetof(AutoSettingsPlayer_GetUniquePlayerIdentifier, ReturnValue) == 0x000000, "Member 'AutoSettingsPlayer_GetUniquePlayerIdentifier::ReturnValue' has a wrong offset!");

// Function AutoSettings.BindCaptureButton.ChordCaptured
// 0x0020 (0x0020 - 0x0000)
struct BindCaptureButton_ChordCaptured final
{
public:
	struct FInputChord                            Chord;                                             // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindCaptureButton_ChordCaptured) == 0x000008, "Wrong alignment on BindCaptureButton_ChordCaptured");
static_assert(sizeof(BindCaptureButton_ChordCaptured) == 0x000020, "Wrong size on BindCaptureButton_ChordCaptured");
static_assert(offsetof(BindCaptureButton_ChordCaptured, Chord) == 0x000000, "Member 'BindCaptureButton_ChordCaptured::Chord' has a wrong offset!");

// Function AutoSettings.BindCaptureButton.InitializePrompt
// 0x0008 (0x0008 - 0x0000)
struct BindCaptureButton_InitializePrompt final
{
public:
	class UBindCapturePrompt*                     PromptWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindCaptureButton_InitializePrompt) == 0x000008, "Wrong alignment on BindCaptureButton_InitializePrompt");
static_assert(sizeof(BindCaptureButton_InitializePrompt) == 0x000008, "Wrong size on BindCaptureButton_InitializePrompt");
static_assert(offsetof(BindCaptureButton_InitializePrompt, PromptWidget) == 0x000000, "Member 'BindCaptureButton_InitializePrompt::PromptWidget' has a wrong offset!");

// Function AutoSettings.BindCaptureButton.StartCapture
// 0x0008 (0x0008 - 0x0000)
struct BindCaptureButton_StartCapture final
{
public:
	class UBindCapturePrompt*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindCaptureButton_StartCapture) == 0x000008, "Wrong alignment on BindCaptureButton_StartCapture");
static_assert(sizeof(BindCaptureButton_StartCapture) == 0x000008, "Wrong size on BindCaptureButton_StartCapture");
static_assert(offsetof(BindCaptureButton_StartCapture, ReturnValue) == 0x000000, "Member 'BindCaptureButton_StartCapture::ReturnValue' has a wrong offset!");

// Function AutoSettings.BindCapturePrompt.IsKeyAllowed
// 0x0020 (0x0020 - 0x0000)
struct BindCapturePrompt_IsKeyAllowed final
{
public:
	struct FKey                                   PrimaryKey;                                        // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BindCapturePrompt_IsKeyAllowed) == 0x000008, "Wrong alignment on BindCapturePrompt_IsKeyAllowed");
static_assert(sizeof(BindCapturePrompt_IsKeyAllowed) == 0x000020, "Wrong size on BindCapturePrompt_IsKeyAllowed");
static_assert(offsetof(BindCapturePrompt_IsKeyAllowed, PrimaryKey) == 0x000000, "Member 'BindCapturePrompt_IsKeyAllowed::PrimaryKey' has a wrong offset!");
static_assert(offsetof(BindCapturePrompt_IsKeyAllowed, ReturnValue) == 0x000018, "Member 'BindCapturePrompt_IsKeyAllowed::ReturnValue' has a wrong offset!");

// Function AutoSettings.BindCapturePrompt.GetKeyGroup
// 0x0008 (0x0008 - 0x0000)
struct BindCapturePrompt_GetKeyGroup final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BindCapturePrompt_GetKeyGroup) == 0x000004, "Wrong alignment on BindCapturePrompt_GetKeyGroup");
static_assert(sizeof(BindCapturePrompt_GetKeyGroup) == 0x000008, "Wrong size on BindCapturePrompt_GetKeyGroup");
static_assert(offsetof(BindCapturePrompt_GetKeyGroup, ReturnValue) == 0x000000, "Member 'BindCapturePrompt_GetKeyGroup::ReturnValue' has a wrong offset!");

// Function AutoSettings.ToggleSetting.ToggleStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct ToggleSetting_ToggleStateUpdated final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleSetting_ToggleStateUpdated) == 0x000001, "Wrong alignment on ToggleSetting_ToggleStateUpdated");
static_assert(sizeof(ToggleSetting_ToggleStateUpdated) == 0x000001, "Wrong size on ToggleSetting_ToggleStateUpdated");
static_assert(offsetof(ToggleSetting_ToggleStateUpdated, State) == 0x000000, "Member 'ToggleSetting_ToggleStateUpdated::State' has a wrong offset!");

// Function AutoSettings.ToggleSetting.UpdateToggleState
// 0x0001 (0x0001 - 0x0000)
struct ToggleSetting_UpdateToggleState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToggleSetting_UpdateToggleState) == 0x000001, "Wrong alignment on ToggleSetting_UpdateToggleState");
static_assert(sizeof(ToggleSetting_UpdateToggleState) == 0x000001, "Wrong size on ToggleSetting_UpdateToggleState");
static_assert(offsetof(ToggleSetting_UpdateToggleState, State) == 0x000000, "Member 'ToggleSetting_UpdateToggleState::State' has a wrong offset!");

// Function AutoSettings.CheckBoxSetting.CheckBoxStateChanged
// 0x0001 (0x0001 - 0x0000)
struct CheckBoxSetting_CheckBoxStateChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckBoxSetting_CheckBoxStateChanged) == 0x000001, "Wrong alignment on CheckBoxSetting_CheckBoxStateChanged");
static_assert(sizeof(CheckBoxSetting_CheckBoxStateChanged) == 0x000001, "Wrong size on CheckBoxSetting_CheckBoxStateChanged");
static_assert(offsetof(CheckBoxSetting_CheckBoxStateChanged, IsChecked) == 0x000000, "Member 'CheckBoxSetting_CheckBoxStateChanged::IsChecked' has a wrong offset!");

// Function AutoSettings.SelectSetting.UpdateOptions
// 0x0010 (0x0010 - 0x0000)
struct SelectSetting_UpdateOptions final
{
public:
	TArray<struct FSettingOption>                 InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectSetting_UpdateOptions) == 0x000008, "Wrong alignment on SelectSetting_UpdateOptions");
static_assert(sizeof(SelectSetting_UpdateOptions) == 0x000010, "Wrong size on SelectSetting_UpdateOptions");
static_assert(offsetof(SelectSetting_UpdateOptions, InOptions) == 0x000000, "Member 'SelectSetting_UpdateOptions::InOptions' has a wrong offset!");

// Function AutoSettings.SelectSetting.GetOptionByLabel
// 0x0040 (0x0040 - 0x0000)
struct SelectSetting_GetOptionByLabel final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FSettingOption                         ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectSetting_GetOptionByLabel) == 0x000008, "Wrong alignment on SelectSetting_GetOptionByLabel");
static_assert(sizeof(SelectSetting_GetOptionByLabel) == 0x000040, "Wrong size on SelectSetting_GetOptionByLabel");
static_assert(offsetof(SelectSetting_GetOptionByLabel, Label) == 0x000000, "Member 'SelectSetting_GetOptionByLabel::Label' has a wrong offset!");
static_assert(offsetof(SelectSetting_GetOptionByLabel, ReturnValue) == 0x000018, "Member 'SelectSetting_GetOptionByLabel::ReturnValue' has a wrong offset!");

// Function AutoSettings.SelectSetting.GetOptionByValue
// 0x0038 (0x0038 - 0x0000)
struct SelectSetting_GetOptionByValue final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSettingOption                         ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectSetting_GetOptionByValue) == 0x000008, "Wrong alignment on SelectSetting_GetOptionByValue");
static_assert(sizeof(SelectSetting_GetOptionByValue) == 0x000038, "Wrong size on SelectSetting_GetOptionByValue");
static_assert(offsetof(SelectSetting_GetOptionByValue, Value) == 0x000000, "Member 'SelectSetting_GetOptionByValue::Value' has a wrong offset!");
static_assert(offsetof(SelectSetting_GetOptionByValue, ReturnValue) == 0x000010, "Member 'SelectSetting_GetOptionByValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.ComboBoxSetting.ComboBoxSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct ComboBoxSetting_ComboBoxSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ComboBoxSetting_ComboBoxSelectionChanged) == 0x000008, "Wrong alignment on ComboBoxSetting_ComboBoxSelectionChanged");
static_assert(sizeof(ComboBoxSetting_ComboBoxSelectionChanged) == 0x000018, "Wrong size on ComboBoxSetting_ComboBoxSelectionChanged");
static_assert(offsetof(ComboBoxSetting_ComboBoxSelectionChanged, SelectedItem) == 0x000000, "Member 'ComboBoxSetting_ComboBoxSelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(ComboBoxSetting_ComboBoxSelectionChanged, SelectionType) == 0x000010, "Member 'ComboBoxSetting_ComboBoxSelectionChanged::SelectionType' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.GetBoolCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetBoolCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_GetBoolCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetBoolCVar");
static_assert(sizeof(ConsoleUtils_GetBoolCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetBoolCVar");
static_assert(offsetof(ConsoleUtils_GetBoolCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_GetBoolCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetBoolCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetBoolCVar::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.GetFloatCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetFloatCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetFloatCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetFloatCVar");
static_assert(sizeof(ConsoleUtils_GetFloatCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetFloatCVar");
static_assert(offsetof(ConsoleUtils_GetFloatCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_GetFloatCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetFloatCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetFloatCVar::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.GetIntCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetIntCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetIntCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetIntCVar");
static_assert(sizeof(ConsoleUtils_GetIntCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetIntCVar");
static_assert(offsetof(ConsoleUtils_GetIntCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_GetIntCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetIntCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetIntCVar::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.GetStringCVar
// 0x0018 (0x0018 - 0x0000)
struct ConsoleUtils_GetStringCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetStringCVar) == 0x000008, "Wrong alignment on ConsoleUtils_GetStringCVar");
static_assert(sizeof(ConsoleUtils_GetStringCVar) == 0x000018, "Wrong size on ConsoleUtils_GetStringCVar");
static_assert(offsetof(ConsoleUtils_GetStringCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_GetStringCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetStringCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetStringCVar::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.IsCVarRegistered
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_IsCVarRegistered final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_IsCVarRegistered) == 0x000004, "Wrong alignment on ConsoleUtils_IsCVarRegistered");
static_assert(sizeof(ConsoleUtils_IsCVarRegistered) == 0x00000C, "Wrong size on ConsoleUtils_IsCVarRegistered");
static_assert(offsetof(ConsoleUtils_IsCVarRegistered, Name_0) == 0x000000, "Member 'ConsoleUtils_IsCVarRegistered::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_IsCVarRegistered, ReturnValue) == 0x000008, "Member 'ConsoleUtils_IsCVarRegistered::ReturnValue' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.SetBoolCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetBoolCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_SetBoolCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetBoolCVar");
static_assert(sizeof(ConsoleUtils_SetBoolCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetBoolCVar");
static_assert(offsetof(ConsoleUtils_SetBoolCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_SetBoolCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetBoolCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetBoolCVar::Value' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.SetFloatCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetFloatCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetFloatCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetFloatCVar");
static_assert(sizeof(ConsoleUtils_SetFloatCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetFloatCVar");
static_assert(offsetof(ConsoleUtils_SetFloatCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_SetFloatCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetFloatCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetFloatCVar::Value' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.SetIntCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetIntCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetIntCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetIntCVar");
static_assert(sizeof(ConsoleUtils_SetIntCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetIntCVar");
static_assert(offsetof(ConsoleUtils_SetIntCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_SetIntCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetIntCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetIntCVar::Value' has a wrong offset!");

// Function AutoSettings.ConsoleUtils.SetStringCVar
// 0x0018 (0x0018 - 0x0000)
struct ConsoleUtils_SetStringCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetStringCVar) == 0x000008, "Wrong alignment on ConsoleUtils_SetStringCVar");
static_assert(sizeof(ConsoleUtils_SetStringCVar) == 0x000018, "Wrong size on ConsoleUtils_SetStringCVar");
static_assert(offsetof(ConsoleUtils_SetStringCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_SetStringCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetStringCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetStringCVar::Value' has a wrong offset!");

// Function AutoSettings.CVarChangeListenerManager.AddBoolCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddBoolCVarCallbackStatic final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool NewValue)>                ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddBoolCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddBoolCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddBoolCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddBoolCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, Name_0) == 0x000000, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::Name_0' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.CVarChangeListenerManager.AddFloatCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddFloatCVarCallbackStatic final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float NewValue)>               ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddFloatCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddFloatCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddFloatCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddFloatCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, Name_0) == 0x000000, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::Name_0' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.CVarChangeListenerManager.AddIntCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddIntCVarCallbackStatic final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 NewValue)>               ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddIntCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddIntCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddIntCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddIntCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, Name_0) == 0x000000, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::Name_0' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.CVarChangeListenerManager.AddStringCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddStringCVarCallbackStatic final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& NewValue)> ChangedCallback;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddStringCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddStringCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddStringCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddStringCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, Name_0) == 0x000000, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::Name_0' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.GlobalKeyIconTagManager.GetIconForKey
// 0x0040 (0x0040 - 0x0000)
struct GlobalKeyIconTagManager_GetIconForKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IconTags;                                          // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalKeyIconTagManager_GetIconForKey) == 0x000008, "Wrong alignment on GlobalKeyIconTagManager_GetIconForKey");
static_assert(sizeof(GlobalKeyIconTagManager_GetIconForKey) == 0x000040, "Wrong size on GlobalKeyIconTagManager_GetIconForKey");
static_assert(offsetof(GlobalKeyIconTagManager_GetIconForKey, InKey) == 0x000000, "Member 'GlobalKeyIconTagManager_GetIconForKey::InKey' has a wrong offset!");
static_assert(offsetof(GlobalKeyIconTagManager_GetIconForKey, IconTags) == 0x000018, "Member 'GlobalKeyIconTagManager_GetIconForKey::IconTags' has a wrong offset!");
static_assert(offsetof(GlobalKeyIconTagManager_GetIconForKey, ReturnValue) == 0x000038, "Member 'GlobalKeyIconTagManager_GetIconForKey::ReturnValue' has a wrong offset!");

// Function AutoSettings.GlobalKeyIconTagManager.SetGlobalKeyIconTags
// 0x0020 (0x0020 - 0x0000)
struct GlobalKeyIconTagManager_SetGlobalKeyIconTags final
{
public:
	struct FGameplayTagContainer                  InGlobalIconTags;                                  // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalKeyIconTagManager_SetGlobalKeyIconTags) == 0x000008, "Wrong alignment on GlobalKeyIconTagManager_SetGlobalKeyIconTags");
static_assert(sizeof(GlobalKeyIconTagManager_SetGlobalKeyIconTags) == 0x000020, "Wrong size on GlobalKeyIconTagManager_SetGlobalKeyIconTags");
static_assert(offsetof(GlobalKeyIconTagManager_SetGlobalKeyIconTags, InGlobalIconTags) == 0x000000, "Member 'GlobalKeyIconTagManager_SetGlobalKeyIconTags::InGlobalIconTags' has a wrong offset!");

// Function AutoSettings.InputMappingManager.AddPlayerActionOverrideStatic
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_AddPlayerActionOverrideStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 NewMapping;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyKeyGroup;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_AddPlayerActionOverrideStatic) == 0x000008, "Wrong alignment on InputMappingManager_AddPlayerActionOverrideStatic");
static_assert(sizeof(InputMappingManager_AddPlayerActionOverrideStatic) == 0x000038, "Wrong size on InputMappingManager_AddPlayerActionOverrideStatic");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverrideStatic, Player) == 0x000000, "Member 'InputMappingManager_AddPlayerActionOverrideStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverrideStatic, NewMapping) == 0x000008, "Member 'InputMappingManager_AddPlayerActionOverrideStatic::NewMapping' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverrideStatic, MappingGroup) == 0x000030, "Member 'InputMappingManager_AddPlayerActionOverrideStatic::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverrideStatic, bAnyKeyGroup) == 0x000034, "Member 'InputMappingManager_AddPlayerActionOverrideStatic::bAnyKeyGroup' has a wrong offset!");

// Function AutoSettings.InputMappingManager.AddPlayerAxisOverrideStatic
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_AddPlayerAxisOverrideStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   NewMapping;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyKeyGroup;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_AddPlayerAxisOverrideStatic) == 0x000008, "Wrong alignment on InputMappingManager_AddPlayerAxisOverrideStatic");
static_assert(sizeof(InputMappingManager_AddPlayerAxisOverrideStatic) == 0x000038, "Wrong size on InputMappingManager_AddPlayerAxisOverrideStatic");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverrideStatic, Player) == 0x000000, "Member 'InputMappingManager_AddPlayerAxisOverrideStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverrideStatic, NewMapping) == 0x000008, "Member 'InputMappingManager_AddPlayerAxisOverrideStatic::NewMapping' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverrideStatic, MappingGroup) == 0x000030, "Member 'InputMappingManager_AddPlayerAxisOverrideStatic::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverrideStatic, bAnyKeyGroup) == 0x000034, "Member 'InputMappingManager_AddPlayerAxisOverrideStatic::bAnyKeyGroup' has a wrong offset!");

// Function AutoSettings.InputMappingManager.GetDefaultInputPresets
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_GetDefaultInputPresets final
{
public:
	TArray<struct FInputMappingPreset>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetDefaultInputPresets) == 0x000008, "Wrong alignment on InputMappingManager_GetDefaultInputPresets");
static_assert(sizeof(InputMappingManager_GetDefaultInputPresets) == 0x000010, "Wrong size on InputMappingManager_GetDefaultInputPresets");
static_assert(offsetof(InputMappingManager_GetDefaultInputPresets, ReturnValue) == 0x000000, "Member 'InputMappingManager_GetDefaultInputPresets::ReturnValue' has a wrong offset!");

// Function AutoSettings.InputMappingManager.GetPlayerActionMappingStatic
// 0x0040 (0x0040 - 0x0000)
struct InputMappingManager_GetPlayerActionMappingStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerActionMappingStatic) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerActionMappingStatic");
static_assert(sizeof(InputMappingManager_GetPlayerActionMappingStatic) == 0x000040, "Wrong size on InputMappingManager_GetPlayerActionMappingStatic");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappingStatic, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerActionMappingStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappingStatic, ActionName) == 0x000008, "Member 'InputMappingManager_GetPlayerActionMappingStatic::ActionName' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappingStatic, MappingGroup) == 0x000010, "Member 'InputMappingManager_GetPlayerActionMappingStatic::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerActionMappingStatic, ReturnValue) == 0x000018, "Member 'InputMappingManager_GetPlayerActionMappingStatic::ReturnValue' has a wrong offset!");

// Function AutoSettings.InputMappingManager.GetPlayerAxisMappingStatic
// 0x0040 (0x0040 - 0x0000)
struct InputMappingManager_GetPlayerAxisMappingStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerAxisMappingStatic) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerAxisMappingStatic");
static_assert(sizeof(InputMappingManager_GetPlayerAxisMappingStatic) == 0x000040, "Wrong size on InputMappingManager_GetPlayerAxisMappingStatic");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, AxisName) == 0x000008, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::AxisName' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, Scale) == 0x000010, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::Scale' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, MappingGroup) == 0x000014, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerAxisMappingStatic, ReturnValue) == 0x000018, "Member 'InputMappingManager_GetPlayerAxisMappingStatic::ReturnValue' has a wrong offset!");

// Function AutoSettings.InputMappingManager.GetPlayerInputMappingsStatic
// 0x0048 (0x0048 - 0x0000)
struct InputMappingManager_GetPlayerInputMappingsStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerInputMappings                   ReturnValue;                                       // 0x0008(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerInputMappingsStatic) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerInputMappingsStatic");
static_assert(sizeof(InputMappingManager_GetPlayerInputMappingsStatic) == 0x000048, "Wrong size on InputMappingManager_GetPlayerInputMappingsStatic");
static_assert(offsetof(InputMappingManager_GetPlayerInputMappingsStatic, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerInputMappingsStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerInputMappingsStatic, ReturnValue) == 0x000008, "Member 'InputMappingManager_GetPlayerInputMappingsStatic::ReturnValue' has a wrong offset!");

// Function AutoSettings.InputMappingManager.GetPlayerKeyGroupStatic
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_GetPlayerKeyGroupStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_GetPlayerKeyGroupStatic) == 0x000008, "Wrong alignment on InputMappingManager_GetPlayerKeyGroupStatic");
static_assert(sizeof(InputMappingManager_GetPlayerKeyGroupStatic) == 0x000010, "Wrong size on InputMappingManager_GetPlayerKeyGroupStatic");
static_assert(offsetof(InputMappingManager_GetPlayerKeyGroupStatic, Player) == 0x000000, "Member 'InputMappingManager_GetPlayerKeyGroupStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_GetPlayerKeyGroupStatic, ReturnValue) == 0x000008, "Member 'InputMappingManager_GetPlayerKeyGroupStatic::ReturnValue' has a wrong offset!");

// Function AutoSettings.InputMappingManager.InitializePlayerInputOverridesStatic
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_InitializePlayerInputOverridesStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_InitializePlayerInputOverridesStatic) == 0x000008, "Wrong alignment on InputMappingManager_InitializePlayerInputOverridesStatic");
static_assert(sizeof(InputMappingManager_InitializePlayerInputOverridesStatic) == 0x000010, "Wrong size on InputMappingManager_InitializePlayerInputOverridesStatic");
static_assert(offsetof(InputMappingManager_InitializePlayerInputOverridesStatic, Player) == 0x000000, "Member 'InputMappingManager_InitializePlayerInputOverridesStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_InitializePlayerInputOverridesStatic, ReturnValue) == 0x000008, "Member 'InputMappingManager_InitializePlayerInputOverridesStatic::ReturnValue' has a wrong offset!");

// Function AutoSettings.InputMappingManager.SetPlayerInputPresetByTag
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_SetPlayerInputPresetByTag final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PresetTag;                                         // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_SetPlayerInputPresetByTag) == 0x000008, "Wrong alignment on InputMappingManager_SetPlayerInputPresetByTag");
static_assert(sizeof(InputMappingManager_SetPlayerInputPresetByTag) == 0x000010, "Wrong size on InputMappingManager_SetPlayerInputPresetByTag");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetByTag, Player) == 0x000000, "Member 'InputMappingManager_SetPlayerInputPresetByTag::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetByTag, PresetTag) == 0x000008, "Member 'InputMappingManager_SetPlayerInputPresetByTag::PresetTag' has a wrong offset!");

// Function AutoSettings.InputMappingManager.SetPlayerInputPresetStatic
// 0x0030 (0x0030 - 0x0000)
struct InputMappingManager_SetPlayerInputPresetStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputMappingPreset                    Preset;                                            // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsCustomized;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_SetPlayerInputPresetStatic) == 0x000008, "Wrong alignment on InputMappingManager_SetPlayerInputPresetStatic");
static_assert(sizeof(InputMappingManager_SetPlayerInputPresetStatic) == 0x000030, "Wrong size on InputMappingManager_SetPlayerInputPresetStatic");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetStatic, Player) == 0x000000, "Member 'InputMappingManager_SetPlayerInputPresetStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetStatic, Preset) == 0x000008, "Member 'InputMappingManager_SetPlayerInputPresetStatic::Preset' has a wrong offset!");
static_assert(offsetof(InputMappingManager_SetPlayerInputPresetStatic, bIsCustomized) == 0x000028, "Member 'InputMappingManager_SetPlayerInputPresetStatic::bIsCustomized' has a wrong offset!");

// Function AutoSettings.InputMappingManager.SetPlayerKeyGroupStatic
// 0x0010 (0x0010 - 0x0000)
struct InputMappingManager_SetPlayerKeyGroupStatic final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_SetPlayerKeyGroupStatic) == 0x000008, "Wrong alignment on InputMappingManager_SetPlayerKeyGroupStatic");
static_assert(sizeof(InputMappingManager_SetPlayerKeyGroupStatic) == 0x000010, "Wrong size on InputMappingManager_SetPlayerKeyGroupStatic");
static_assert(offsetof(InputMappingManager_SetPlayerKeyGroupStatic, Player) == 0x000000, "Member 'InputMappingManager_SetPlayerKeyGroupStatic::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_SetPlayerKeyGroupStatic, KeyGroup) == 0x000008, "Member 'InputMappingManager_SetPlayerKeyGroupStatic::KeyGroup' has a wrong offset!");

// Function AutoSettings.InputMappingManager.AddPlayerActionOverride
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_AddPlayerActionOverride final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 NewMapping;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyKeyGroup;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_AddPlayerActionOverride) == 0x000008, "Wrong alignment on InputMappingManager_AddPlayerActionOverride");
static_assert(sizeof(InputMappingManager_AddPlayerActionOverride) == 0x000038, "Wrong size on InputMappingManager_AddPlayerActionOverride");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverride, Player) == 0x000000, "Member 'InputMappingManager_AddPlayerActionOverride::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverride, NewMapping) == 0x000008, "Member 'InputMappingManager_AddPlayerActionOverride::NewMapping' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverride, MappingGroup) == 0x000030, "Member 'InputMappingManager_AddPlayerActionOverride::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerActionOverride, bAnyKeyGroup) == 0x000034, "Member 'InputMappingManager_AddPlayerActionOverride::bAnyKeyGroup' has a wrong offset!");

// Function AutoSettings.InputMappingManager.AddPlayerAxisOverride
// 0x0038 (0x0038 - 0x0000)
struct InputMappingManager_AddPlayerAxisOverride final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   NewMapping;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyKeyGroup;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputMappingManager_AddPlayerAxisOverride) == 0x000008, "Wrong alignment on InputMappingManager_AddPlayerAxisOverride");
static_assert(sizeof(InputMappingManager_AddPlayerAxisOverride) == 0x000038, "Wrong size on InputMappingManager_AddPlayerAxisOverride");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverride, Player) == 0x000000, "Member 'InputMappingManager_AddPlayerAxisOverride::Player' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverride, NewMapping) == 0x000008, "Member 'InputMappingManager_AddPlayerAxisOverride::NewMapping' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverride, MappingGroup) == 0x000030, "Member 'InputMappingManager_AddPlayerAxisOverride::MappingGroup' has a wrong offset!");
static_assert(offsetof(InputMappingManager_AddPlayerAxisOverride, bAnyKeyGroup) == 0x000034, "Member 'InputMappingManager_AddPlayerAxisOverride::bAnyKeyGroup' has a wrong offset!");

// Function AutoSettings.InputMappingManager.OnRegisteredPlayerControllerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct InputMappingManager_OnRegisteredPlayerControllerDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputMappingManager_OnRegisteredPlayerControllerDestroyed) == 0x000008, "Wrong alignment on InputMappingManager_OnRegisteredPlayerControllerDestroyed");
static_assert(sizeof(InputMappingManager_OnRegisteredPlayerControllerDestroyed) == 0x000008, "Wrong size on InputMappingManager_OnRegisteredPlayerControllerDestroyed");
static_assert(offsetof(InputMappingManager_OnRegisteredPlayerControllerDestroyed, DestroyedActor) == 0x000000, "Member 'InputMappingManager_OnRegisteredPlayerControllerDestroyed::DestroyedActor' has a wrong offset!");

// Function AutoSettings.KeyLabel.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct KeyLabel_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetDisplayName) == 0x000008, "Wrong alignment on KeyLabel_GetDisplayName");
static_assert(sizeof(KeyLabel_GetDisplayName) == 0x000018, "Wrong size on KeyLabel_GetDisplayName");
static_assert(offsetof(KeyLabel_GetDisplayName, ReturnValue) == 0x000000, "Member 'KeyLabel_GetDisplayName::ReturnValue' has a wrong offset!");

// Function AutoSettings.KeyLabel.GetDisplayNameVisibility
// 0x0001 (0x0001 - 0x0000)
struct KeyLabel_GetDisplayNameVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetDisplayNameVisibility) == 0x000001, "Wrong alignment on KeyLabel_GetDisplayNameVisibility");
static_assert(sizeof(KeyLabel_GetDisplayNameVisibility) == 0x000001, "Wrong size on KeyLabel_GetDisplayNameVisibility");
static_assert(offsetof(KeyLabel_GetDisplayNameVisibility, ReturnValue) == 0x000000, "Member 'KeyLabel_GetDisplayNameVisibility::ReturnValue' has a wrong offset!");

// Function AutoSettings.KeyLabel.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct KeyLabel_GetIcon final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetIcon) == 0x000008, "Wrong alignment on KeyLabel_GetIcon");
static_assert(sizeof(KeyLabel_GetIcon) == 0x000008, "Wrong size on KeyLabel_GetIcon");
static_assert(offsetof(KeyLabel_GetIcon, ReturnValue) == 0x000000, "Member 'KeyLabel_GetIcon::ReturnValue' has a wrong offset!");

// Function AutoSettings.KeyLabel.GetIconBrush
// 0x0088 (0x0088 - 0x0000)
struct KeyLabel_GetIconBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetIconBrush) == 0x000008, "Wrong alignment on KeyLabel_GetIconBrush");
static_assert(sizeof(KeyLabel_GetIconBrush) == 0x000088, "Wrong size on KeyLabel_GetIconBrush");
static_assert(offsetof(KeyLabel_GetIconBrush, ReturnValue) == 0x000000, "Member 'KeyLabel_GetIconBrush::ReturnValue' has a wrong offset!");

// Function AutoSettings.KeyLabel.GetIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct KeyLabel_GetIconVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_GetIconVisibility) == 0x000001, "Wrong alignment on KeyLabel_GetIconVisibility");
static_assert(sizeof(KeyLabel_GetIconVisibility) == 0x000001, "Wrong size on KeyLabel_GetIconVisibility");
static_assert(offsetof(KeyLabel_GetIconVisibility, ReturnValue) == 0x000000, "Member 'KeyLabel_GetIconVisibility::ReturnValue' has a wrong offset!");

// Function AutoSettings.KeyLabel.HasIcon
// 0x0001 (0x0001 - 0x0000)
struct KeyLabel_HasIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_HasIcon) == 0x000001, "Wrong alignment on KeyLabel_HasIcon");
static_assert(sizeof(KeyLabel_HasIcon) == 0x000001, "Wrong size on KeyLabel_HasIcon");
static_assert(offsetof(KeyLabel_HasIcon, ReturnValue) == 0x000000, "Member 'KeyLabel_HasIcon::ReturnValue' has a wrong offset!");

// Function AutoSettings.KeyLabel.HasValidKey
// 0x0001 (0x0001 - 0x0000)
struct KeyLabel_HasValidKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyLabel_HasValidKey) == 0x000001, "Wrong alignment on KeyLabel_HasValidKey");
static_assert(sizeof(KeyLabel_HasValidKey) == 0x000001, "Wrong size on KeyLabel_HasValidKey");
static_assert(offsetof(KeyLabel_HasValidKey, ReturnValue) == 0x000000, "Member 'KeyLabel_HasValidKey::ReturnValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.OnSliderValueUpdated
// 0x0008 (0x0008 - 0x0000)
struct SliderSetting_OnSliderValueUpdated final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_OnSliderValueUpdated) == 0x000004, "Wrong alignment on SliderSetting_OnSliderValueUpdated");
static_assert(sizeof(SliderSetting_OnSliderValueUpdated) == 0x000008, "Wrong size on SliderSetting_OnSliderValueUpdated");
static_assert(offsetof(SliderSetting_OnSliderValueUpdated, NormalizedValue) == 0x000000, "Member 'SliderSetting_OnSliderValueUpdated::NormalizedValue' has a wrong offset!");
static_assert(offsetof(SliderSetting_OnSliderValueUpdated, RawValue) == 0x000004, "Member 'SliderSetting_OnSliderValueUpdated::RawValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.SliderValueUpdated
// 0x0004 (0x0004 - 0x0000)
struct SliderSetting_SliderValueUpdated final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_SliderValueUpdated) == 0x000004, "Wrong alignment on SliderSetting_SliderValueUpdated");
static_assert(sizeof(SliderSetting_SliderValueUpdated) == 0x000004, "Wrong size on SliderSetting_SliderValueUpdated");
static_assert(offsetof(SliderSetting_SliderValueUpdated, NormalizedValue) == 0x000000, "Member 'SliderSetting_SliderValueUpdated::NormalizedValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.UpdateSliderValue
// 0x0008 (0x0008 - 0x0000)
struct SliderSetting_UpdateSliderValue final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_UpdateSliderValue) == 0x000004, "Wrong alignment on SliderSetting_UpdateSliderValue");
static_assert(sizeof(SliderSetting_UpdateSliderValue) == 0x000008, "Wrong size on SliderSetting_UpdateSliderValue");
static_assert(offsetof(SliderSetting_UpdateSliderValue, NormalizedValue) == 0x000000, "Member 'SliderSetting_UpdateSliderValue::NormalizedValue' has a wrong offset!");
static_assert(offsetof(SliderSetting_UpdateSliderValue, RawValue) == 0x000004, "Member 'SliderSetting_UpdateSliderValue::RawValue' has a wrong offset!");

// Function AutoSettings.SliderSetting.ShouldSaveCurrentValue
// 0x0001 (0x0001 - 0x0000)
struct SliderSetting_ShouldSaveCurrentValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SliderSetting_ShouldSaveCurrentValue) == 0x000001, "Wrong alignment on SliderSetting_ShouldSaveCurrentValue");
static_assert(sizeof(SliderSetting_ShouldSaveCurrentValue) == 0x000001, "Wrong size on SliderSetting_ShouldSaveCurrentValue");
static_assert(offsetof(SliderSetting_ShouldSaveCurrentValue, ReturnValue) == 0x000000, "Member 'SliderSetting_ShouldSaveCurrentValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.NativeSliderSetting.SliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct NativeSliderSetting_SliderValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NativeSliderSetting_SliderValueChanged) == 0x000004, "Wrong alignment on NativeSliderSetting_SliderValueChanged");
static_assert(sizeof(NativeSliderSetting_SliderValueChanged) == 0x000004, "Wrong size on NativeSliderSetting_SliderValueChanged");
static_assert(offsetof(NativeSliderSetting_SliderValueChanged, NewValue) == 0x000000, "Member 'NativeSliderSetting_SliderValueChanged::NewValue' has a wrong offset!");

// Function AutoSettings.NativeSliderSetting.UpdateSliderAndText
// 0x0004 (0x0004 - 0x0000)
struct NativeSliderSetting_UpdateSliderAndText final
{
public:
	float                                         RawValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NativeSliderSetting_UpdateSliderAndText) == 0x000004, "Wrong alignment on NativeSliderSetting_UpdateSliderAndText");
static_assert(sizeof(NativeSliderSetting_UpdateSliderAndText) == 0x000004, "Wrong size on NativeSliderSetting_UpdateSliderAndText");
static_assert(offsetof(NativeSliderSetting_UpdateSliderAndText, RawValue) == 0x000000, "Member 'NativeSliderSetting_UpdateSliderAndText::RawValue' has a wrong offset!");

// Function AutoSettings.RadioButton.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct RadioButton_SetLabel final
{
public:
	class FText                                   InLabel;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetLabel) == 0x000008, "Wrong alignment on RadioButton_SetLabel");
static_assert(sizeof(RadioButton_SetLabel) == 0x000018, "Wrong size on RadioButton_SetLabel");
static_assert(offsetof(RadioButton_SetLabel, InLabel) == 0x000000, "Member 'RadioButton_SetLabel::InLabel' has a wrong offset!");

// Function AutoSettings.RadioButton.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_SetSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetSelected) == 0x000001, "Wrong alignment on RadioButton_SetSelected");
static_assert(sizeof(RadioButton_SetSelected) == 0x000001, "Wrong size on RadioButton_SetSelected");
static_assert(offsetof(RadioButton_SetSelected, InSelected) == 0x000000, "Member 'RadioButton_SetSelected::InSelected' has a wrong offset!");

// Function AutoSettings.RadioButton.SetValue
// 0x0010 (0x0010 - 0x0000)
struct RadioButton_SetValue final
{
public:
	class FString                                 InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetValue) == 0x000008, "Wrong alignment on RadioButton_SetValue");
static_assert(sizeof(RadioButton_SetValue) == 0x000010, "Wrong size on RadioButton_SetValue");
static_assert(offsetof(RadioButton_SetValue, InValue) == 0x000000, "Member 'RadioButton_SetValue::InValue' has a wrong offset!");

// Function AutoSettings.RadioButton.UpdateLabel
// 0x0018 (0x0018 - 0x0000)
struct RadioButton_UpdateLabel final
{
public:
	class FText                                   InLabel;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_UpdateLabel) == 0x000008, "Wrong alignment on RadioButton_UpdateLabel");
static_assert(sizeof(RadioButton_UpdateLabel) == 0x000018, "Wrong size on RadioButton_UpdateLabel");
static_assert(offsetof(RadioButton_UpdateLabel, InLabel) == 0x000000, "Member 'RadioButton_UpdateLabel::InLabel' has a wrong offset!");

// Function AutoSettings.RadioButton.UpdateSelected
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_UpdateSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_UpdateSelected) == 0x000001, "Wrong alignment on RadioButton_UpdateSelected");
static_assert(sizeof(RadioButton_UpdateSelected) == 0x000001, "Wrong size on RadioButton_UpdateSelected");
static_assert(offsetof(RadioButton_UpdateSelected, InSelected) == 0x000000, "Member 'RadioButton_UpdateSelected::InSelected' has a wrong offset!");

// Function AutoSettings.RadioButton.GetLabel
// 0x0018 (0x0018 - 0x0000)
struct RadioButton_GetLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_GetLabel) == 0x000008, "Wrong alignment on RadioButton_GetLabel");
static_assert(sizeof(RadioButton_GetLabel) == 0x000018, "Wrong size on RadioButton_GetLabel");
static_assert(offsetof(RadioButton_GetLabel, ReturnValue) == 0x000000, "Member 'RadioButton_GetLabel::ReturnValue' has a wrong offset!");

// Function AutoSettings.RadioButton.GetSelected
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_GetSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_GetSelected) == 0x000001, "Wrong alignment on RadioButton_GetSelected");
static_assert(sizeof(RadioButton_GetSelected) == 0x000001, "Wrong size on RadioButton_GetSelected");
static_assert(offsetof(RadioButton_GetSelected, ReturnValue) == 0x000000, "Member 'RadioButton_GetSelected::ReturnValue' has a wrong offset!");

// Function AutoSettings.RadioButton.GetValue
// 0x0010 (0x0010 - 0x0000)
struct RadioButton_GetValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_GetValue) == 0x000008, "Wrong alignment on RadioButton_GetValue");
static_assert(sizeof(RadioButton_GetValue) == 0x000010, "Wrong size on RadioButton_GetValue");
static_assert(offsetof(RadioButton_GetValue, ReturnValue) == 0x000000, "Member 'RadioButton_GetValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.RadioSelect.ButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_ButtonSelected final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_ButtonSelected) == 0x000008, "Wrong alignment on RadioSelect_ButtonSelected");
static_assert(sizeof(RadioSelect_ButtonSelected) == 0x000010, "Wrong size on RadioSelect_ButtonSelected");
static_assert(offsetof(RadioSelect_ButtonSelected, Value) == 0x000000, "Member 'RadioSelect_ButtonSelected::Value' has a wrong offset!");

// Function AutoSettings.RadioSelect.Select
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_Select final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_Select) == 0x000008, "Wrong alignment on RadioSelect_Select");
static_assert(sizeof(RadioSelect_Select) == 0x000010, "Wrong size on RadioSelect_Select");
static_assert(offsetof(RadioSelect_Select, Value) == 0x000000, "Member 'RadioSelect_Select::Value' has a wrong offset!");

// Function AutoSettings.RadioSelect.SetOptions
// 0x0010 (0x0010 - 0x0000)
struct RadioSelect_SetOptions final
{
public:
	TArray<struct FSettingOption>                 InOptions;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelect_SetOptions) == 0x000008, "Wrong alignment on RadioSelect_SetOptions");
static_assert(sizeof(RadioSelect_SetOptions) == 0x000010, "Wrong size on RadioSelect_SetOptions");
static_assert(offsetof(RadioSelect_SetOptions, InOptions) == 0x000000, "Member 'RadioSelect_SetOptions::InOptions' has a wrong offset!");

// Function AutoSettings.RadioSelectSetting.RadioSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct RadioSelectSetting_RadioSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioSelectSetting_RadioSelectionChanged) == 0x000008, "Wrong alignment on RadioSelectSetting_RadioSelectionChanged");
static_assert(sizeof(RadioSelectSetting_RadioSelectionChanged) == 0x000010, "Wrong size on RadioSelectSetting_RadioSelectionChanged");
static_assert(offsetof(RadioSelectSetting_RadioSelectionChanged, Value) == 0x000000, "Member 'RadioSelectSetting_RadioSelectionChanged::Value' has a wrong offset!");

// Function AutoSettings.SettingOptionFactory.ConstructOptions
// 0x0010 (0x0010 - 0x0000)
struct SettingOptionFactory_ConstructOptions final
{
public:
	TArray<struct FSettingOption>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingOptionFactory_ConstructOptions) == 0x000008, "Wrong alignment on SettingOptionFactory_ConstructOptions");
static_assert(sizeof(SettingOptionFactory_ConstructOptions) == 0x000010, "Wrong size on SettingOptionFactory_ConstructOptions");
static_assert(offsetof(SettingOptionFactory_ConstructOptions, ReturnValue) == 0x000000, "Member 'SettingOptionFactory_ConstructOptions::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingValueMask.MaskValue
// 0x0020 (0x0020 - 0x0000)
struct SettingValueMask_MaskValue final
{
public:
	class FString                                 ConsoleValue;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingValueMask_MaskValue) == 0x000008, "Wrong alignment on SettingValueMask_MaskValue");
static_assert(sizeof(SettingValueMask_MaskValue) == 0x000020, "Wrong size on SettingValueMask_MaskValue");
static_assert(offsetof(SettingValueMask_MaskValue, ConsoleValue) == 0x000000, "Member 'SettingValueMask_MaskValue::ConsoleValue' has a wrong offset!");
static_assert(offsetof(SettingValueMask_MaskValue, ReturnValue) == 0x000010, "Member 'SettingValueMask_MaskValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingValueMask.RecombineValues
// 0x0030 (0x0030 - 0x0000)
struct SettingValueMask_RecombineValues final
{
public:
	class FString                                 SettingValue;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConsoleValue;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingValueMask_RecombineValues) == 0x000008, "Wrong alignment on SettingValueMask_RecombineValues");
static_assert(sizeof(SettingValueMask_RecombineValues) == 0x000030, "Wrong size on SettingValueMask_RecombineValues");
static_assert(offsetof(SettingValueMask_RecombineValues, SettingValue) == 0x000000, "Member 'SettingValueMask_RecombineValues::SettingValue' has a wrong offset!");
static_assert(offsetof(SettingValueMask_RecombineValues, ConsoleValue) == 0x000010, "Member 'SettingValueMask_RecombineValues::ConsoleValue' has a wrong offset!");
static_assert(offsetof(SettingValueMask_RecombineValues, ReturnValue) == 0x000020, "Member 'SettingValueMask_RecombineValues::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.ApplyChildSettings
// 0x0010 (0x0010 - 0x0000)
struct SettingContainerUtils_ApplyChildSettings final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingContainerUtils_ApplyChildSettings) == 0x000008, "Wrong alignment on SettingContainerUtils_ApplyChildSettings");
static_assert(sizeof(SettingContainerUtils_ApplyChildSettings) == 0x000010, "Wrong size on SettingContainerUtils_ApplyChildSettings");
static_assert(offsetof(SettingContainerUtils_ApplyChildSettings, UserWidget) == 0x000000, "Member 'SettingContainerUtils_ApplyChildSettings::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_ApplyChildSettings, Parent) == 0x000008, "Member 'SettingContainerUtils_ApplyChildSettings::Parent' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.CancelChildSettings
// 0x0010 (0x0010 - 0x0000)
struct SettingContainerUtils_CancelChildSettings final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingContainerUtils_CancelChildSettings) == 0x000008, "Wrong alignment on SettingContainerUtils_CancelChildSettings");
static_assert(sizeof(SettingContainerUtils_CancelChildSettings) == 0x000010, "Wrong size on SettingContainerUtils_CancelChildSettings");
static_assert(offsetof(SettingContainerUtils_CancelChildSettings, UserWidget) == 0x000000, "Member 'SettingContainerUtils_CancelChildSettings::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_CancelChildSettings, Parent) == 0x000008, "Member 'SettingContainerUtils_CancelChildSettings::Parent' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.DoesAnyChildSettingHaveUnappliedChange
// 0x0018 (0x0018 - 0x0000)
struct SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange) == 0x000008, "Wrong alignment on SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange");
static_assert(sizeof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange) == 0x000018, "Wrong size on SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange, UserWidget) == 0x000000, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange, Parent) == 0x000008, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange::Parent' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange, ReturnValue) == 0x000010, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnappliedChange::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.DoesAnyChildSettingHaveUnsavedChange
// 0x0018 (0x0018 - 0x0000)
struct SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange) == 0x000008, "Wrong alignment on SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange");
static_assert(sizeof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange) == 0x000018, "Wrong size on SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange, UserWidget) == 0x000000, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange, Parent) == 0x000008, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange::Parent' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange, ReturnValue) == 0x000010, "Member 'SettingContainerUtils_DoesAnyChildSettingHaveUnsavedChange::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.GetChildSettings
// 0x0020 (0x0020 - 0x0000)
struct SettingContainerUtils_GetChildSettings final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAutoSettingWidget*>             ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingContainerUtils_GetChildSettings) == 0x000008, "Wrong alignment on SettingContainerUtils_GetChildSettings");
static_assert(sizeof(SettingContainerUtils_GetChildSettings) == 0x000020, "Wrong size on SettingContainerUtils_GetChildSettings");
static_assert(offsetof(SettingContainerUtils_GetChildSettings, UserWidget) == 0x000000, "Member 'SettingContainerUtils_GetChildSettings::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_GetChildSettings, Parent) == 0x000008, "Member 'SettingContainerUtils_GetChildSettings::Parent' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_GetChildSettings, ReturnValue) == 0x000010, "Member 'SettingContainerUtils_GetChildSettings::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingContainerUtils.SaveChildSettings
// 0x0010 (0x0010 - 0x0000)
struct SettingContainerUtils_SaveChildSettings final
{
public:
	class UUserWidget*                            UserWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingContainerUtils_SaveChildSettings) == 0x000008, "Wrong alignment on SettingContainerUtils_SaveChildSettings");
static_assert(sizeof(SettingContainerUtils_SaveChildSettings) == 0x000010, "Wrong size on SettingContainerUtils_SaveChildSettings");
static_assert(offsetof(SettingContainerUtils_SaveChildSettings, UserWidget) == 0x000000, "Member 'SettingContainerUtils_SaveChildSettings::UserWidget' has a wrong offset!");
static_assert(offsetof(SettingContainerUtils_SaveChildSettings, Parent) == 0x000008, "Member 'SettingContainerUtils_SaveChildSettings::Parent' has a wrong offset!");

// Function AutoSettings.SettingsManager.ApplySettingStatic
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_ApplySettingStatic final
{
public:
	struct FAutoSettingData                       SettingData;                                       // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_ApplySettingStatic) == 0x000008, "Wrong alignment on SettingsManager_ApplySettingStatic");
static_assert(sizeof(SettingsManager_ApplySettingStatic) == 0x000038, "Wrong size on SettingsManager_ApplySettingStatic");
static_assert(offsetof(SettingsManager_ApplySettingStatic, SettingData) == 0x000000, "Member 'SettingsManager_ApplySettingStatic::SettingData' has a wrong offset!");

// Function AutoSettings.SettingsManager.GetInitialValue
// 0x0018 (0x0018 - 0x0000)
struct SettingsManager_GetInitialValue final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_GetInitialValue) == 0x000008, "Wrong alignment on SettingsManager_GetInitialValue");
static_assert(sizeof(SettingsManager_GetInitialValue) == 0x000018, "Wrong size on SettingsManager_GetInitialValue");
static_assert(offsetof(SettingsManager_GetInitialValue, Key) == 0x000000, "Member 'SettingsManager_GetInitialValue::Key' has a wrong offset!");
static_assert(offsetof(SettingsManager_GetInitialValue, ReturnValue) == 0x000008, "Member 'SettingsManager_GetInitialValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingsManager.GetValue
// 0x0020 (0x0020 - 0x0000)
struct SettingsManager_GetValue final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreferConfigValue;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_GetValue) == 0x000008, "Wrong alignment on SettingsManager_GetValue");
static_assert(sizeof(SettingsManager_GetValue) == 0x000020, "Wrong size on SettingsManager_GetValue");
static_assert(offsetof(SettingsManager_GetValue, Key) == 0x000000, "Member 'SettingsManager_GetValue::Key' has a wrong offset!");
static_assert(offsetof(SettingsManager_GetValue, bPreferConfigValue) == 0x000008, "Member 'SettingsManager_GetValue::bPreferConfigValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_GetValue, ReturnValue) == 0x000010, "Member 'SettingsManager_GetValue::ReturnValue' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterBoolCVarSetting
// 0x0020 (0x0020 - 0x0000)
struct SettingsManager_RegisterBoolCVarSetting final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultValue;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_RegisterBoolCVarSetting) == 0x000008, "Wrong alignment on SettingsManager_RegisterBoolCVarSetting");
static_assert(sizeof(SettingsManager_RegisterBoolCVarSetting) == 0x000020, "Wrong size on SettingsManager_RegisterBoolCVarSetting");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSetting, Name_0) == 0x000000, "Member 'SettingsManager_RegisterBoolCVarSetting::Name_0' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSetting, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterBoolCVarSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSetting, Help) == 0x000010, "Member 'SettingsManager_RegisterBoolCVarSetting::Help' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterBoolCVarSettingWithCallback
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_RegisterBoolCVarSettingWithCallback final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultValue;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool NewValue)>                ChangedCallback;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsManager_RegisterBoolCVarSettingWithCallback) == 0x000008, "Wrong alignment on SettingsManager_RegisterBoolCVarSettingWithCallback");
static_assert(sizeof(SettingsManager_RegisterBoolCVarSettingWithCallback) == 0x000038, "Wrong size on SettingsManager_RegisterBoolCVarSettingWithCallback");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, Name_0) == 0x000000, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::Name_0' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, Help) == 0x000010, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::Help' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, ChangedCallback) == 0x000020, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::ChangedCallback' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterBoolCVarSettingWithCallback, CallbackImmediately) == 0x000030, "Member 'SettingsManager_RegisterBoolCVarSettingWithCallback::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterFloatCVarSetting
// 0x0020 (0x0020 - 0x0000)
struct SettingsManager_RegisterFloatCVarSetting final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_RegisterFloatCVarSetting) == 0x000008, "Wrong alignment on SettingsManager_RegisterFloatCVarSetting");
static_assert(sizeof(SettingsManager_RegisterFloatCVarSetting) == 0x000020, "Wrong size on SettingsManager_RegisterFloatCVarSetting");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSetting, Name_0) == 0x000000, "Member 'SettingsManager_RegisterFloatCVarSetting::Name_0' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSetting, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterFloatCVarSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSetting, Help) == 0x000010, "Member 'SettingsManager_RegisterFloatCVarSetting::Help' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterFloatCVarSettingWithCallback
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_RegisterFloatCVarSettingWithCallback final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float NewValue)>               ChangedCallback;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsManager_RegisterFloatCVarSettingWithCallback) == 0x000008, "Wrong alignment on SettingsManager_RegisterFloatCVarSettingWithCallback");
static_assert(sizeof(SettingsManager_RegisterFloatCVarSettingWithCallback) == 0x000038, "Wrong size on SettingsManager_RegisterFloatCVarSettingWithCallback");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, Name_0) == 0x000000, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::Name_0' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, Help) == 0x000010, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::Help' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, ChangedCallback) == 0x000020, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::ChangedCallback' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterFloatCVarSettingWithCallback, CallbackImmediately) == 0x000030, "Member 'SettingsManager_RegisterFloatCVarSettingWithCallback::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterIntCVarSetting
// 0x0020 (0x0020 - 0x0000)
struct SettingsManager_RegisterIntCVarSetting final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_RegisterIntCVarSetting) == 0x000008, "Wrong alignment on SettingsManager_RegisterIntCVarSetting");
static_assert(sizeof(SettingsManager_RegisterIntCVarSetting) == 0x000020, "Wrong size on SettingsManager_RegisterIntCVarSetting");
static_assert(offsetof(SettingsManager_RegisterIntCVarSetting, Name_0) == 0x000000, "Member 'SettingsManager_RegisterIntCVarSetting::Name_0' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSetting, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterIntCVarSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSetting, Help) == 0x000010, "Member 'SettingsManager_RegisterIntCVarSetting::Help' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterIntCVarSettingWithCallback
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_RegisterIntCVarSettingWithCallback final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 NewValue)>               ChangedCallback;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsManager_RegisterIntCVarSettingWithCallback) == 0x000008, "Wrong alignment on SettingsManager_RegisterIntCVarSettingWithCallback");
static_assert(sizeof(SettingsManager_RegisterIntCVarSettingWithCallback) == 0x000038, "Wrong size on SettingsManager_RegisterIntCVarSettingWithCallback");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, Name_0) == 0x000000, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::Name_0' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, Help) == 0x000010, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::Help' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, ChangedCallback) == 0x000020, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::ChangedCallback' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterIntCVarSettingWithCallback, CallbackImmediately) == 0x000030, "Member 'SettingsManager_RegisterIntCVarSettingWithCallback::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterStringCVarSetting
// 0x0028 (0x0028 - 0x0000)
struct SettingsManager_RegisterStringCVarSetting final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Help;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_RegisterStringCVarSetting) == 0x000008, "Wrong alignment on SettingsManager_RegisterStringCVarSetting");
static_assert(sizeof(SettingsManager_RegisterStringCVarSetting) == 0x000028, "Wrong size on SettingsManager_RegisterStringCVarSetting");
static_assert(offsetof(SettingsManager_RegisterStringCVarSetting, Name_0) == 0x000000, "Member 'SettingsManager_RegisterStringCVarSetting::Name_0' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSetting, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterStringCVarSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSetting, Help) == 0x000018, "Member 'SettingsManager_RegisterStringCVarSetting::Help' has a wrong offset!");

// Function AutoSettings.SettingsManager.RegisterStringCVarSettingWithCallback
// 0x0040 (0x0040 - 0x0000)
struct SettingsManager_RegisterStringCVarSettingWithCallback final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Help;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& NewValue)> ChangedCallback;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsManager_RegisterStringCVarSettingWithCallback) == 0x000008, "Wrong alignment on SettingsManager_RegisterStringCVarSettingWithCallback");
static_assert(sizeof(SettingsManager_RegisterStringCVarSettingWithCallback) == 0x000040, "Wrong size on SettingsManager_RegisterStringCVarSettingWithCallback");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, Name_0) == 0x000000, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::Name_0' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, DefaultValue) == 0x000008, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::DefaultValue' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, Help) == 0x000018, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::Help' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, ChangedCallback) == 0x000028, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::ChangedCallback' has a wrong offset!");
static_assert(offsetof(SettingsManager_RegisterStringCVarSettingWithCallback, CallbackImmediately) == 0x000038, "Member 'SettingsManager_RegisterStringCVarSettingWithCallback::CallbackImmediately' has a wrong offset!");

// Function AutoSettings.SettingsManager.SaveSettingStatic
// 0x0038 (0x0038 - 0x0000)
struct SettingsManager_SaveSettingStatic final
{
public:
	struct FAutoSettingData                       SettingData;                                       // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsManager_SaveSettingStatic) == 0x000008, "Wrong alignment on SettingsManager_SaveSettingStatic");
static_assert(sizeof(SettingsManager_SaveSettingStatic) == 0x000038, "Wrong size on SettingsManager_SaveSettingStatic");
static_assert(offsetof(SettingsManager_SaveSettingStatic, SettingData) == 0x000000, "Member 'SettingsManager_SaveSettingStatic::SettingData' has a wrong offset!");

// Function AutoSettings.Spinner.SelectIndex
// 0x0004 (0x0004 - 0x0000)
struct Spinner_SelectIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_SelectIndex) == 0x000004, "Wrong alignment on Spinner_SelectIndex");
static_assert(sizeof(Spinner_SelectIndex) == 0x000004, "Wrong size on Spinner_SelectIndex");
static_assert(offsetof(Spinner_SelectIndex, Index_0) == 0x000000, "Member 'Spinner_SelectIndex::Index_0' has a wrong offset!");

// Function AutoSettings.Spinner.SelectValue
// 0x0010 (0x0010 - 0x0000)
struct Spinner_SelectValue final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_SelectValue) == 0x000008, "Wrong alignment on Spinner_SelectValue");
static_assert(sizeof(Spinner_SelectValue) == 0x000010, "Wrong size on Spinner_SelectValue");
static_assert(offsetof(Spinner_SelectValue, Value) == 0x000000, "Member 'Spinner_SelectValue::Value' has a wrong offset!");

// Function AutoSettings.Spinner.GetCurrentIndex
// 0x0004 (0x0004 - 0x0000)
struct Spinner_GetCurrentIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_GetCurrentIndex) == 0x000004, "Wrong alignment on Spinner_GetCurrentIndex");
static_assert(sizeof(Spinner_GetCurrentIndex) == 0x000004, "Wrong size on Spinner_GetCurrentIndex");
static_assert(offsetof(Spinner_GetCurrentIndex, ReturnValue) == 0x000000, "Member 'Spinner_GetCurrentIndex::ReturnValue' has a wrong offset!");

// Function AutoSettings.Spinner.GetCurrentOption
// 0x0028 (0x0028 - 0x0000)
struct Spinner_GetCurrentOption final
{
public:
	struct FSettingOption                         ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_GetCurrentOption) == 0x000008, "Wrong alignment on Spinner_GetCurrentOption");
static_assert(sizeof(Spinner_GetCurrentOption) == 0x000028, "Wrong size on Spinner_GetCurrentOption");
static_assert(offsetof(Spinner_GetCurrentOption, ReturnValue) == 0x000000, "Member 'Spinner_GetCurrentOption::ReturnValue' has a wrong offset!");

// Function AutoSettings.Spinner.HasValidNext
// 0x0001 (0x0001 - 0x0000)
struct Spinner_HasValidNext final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_HasValidNext) == 0x000001, "Wrong alignment on Spinner_HasValidNext");
static_assert(sizeof(Spinner_HasValidNext) == 0x000001, "Wrong size on Spinner_HasValidNext");
static_assert(offsetof(Spinner_HasValidNext, ReturnValue) == 0x000000, "Member 'Spinner_HasValidNext::ReturnValue' has a wrong offset!");

// Function AutoSettings.Spinner.HasValidPrevious
// 0x0001 (0x0001 - 0x0000)
struct Spinner_HasValidPrevious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Spinner_HasValidPrevious) == 0x000001, "Wrong alignment on Spinner_HasValidPrevious");
static_assert(sizeof(Spinner_HasValidPrevious) == 0x000001, "Wrong size on Spinner_HasValidPrevious");
static_assert(offsetof(Spinner_HasValidPrevious, ReturnValue) == 0x000000, "Member 'Spinner_HasValidPrevious::ReturnValue' has a wrong offset!");

// Function AutoSettings.SpinnerSetting.SpinnerSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct SpinnerSetting_SpinnerSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpinnerSetting_SpinnerSelectionChanged) == 0x000008, "Wrong alignment on SpinnerSetting_SpinnerSelectionChanged");
static_assert(sizeof(SpinnerSetting_SpinnerSelectionChanged) == 0x000010, "Wrong size on SpinnerSetting_SpinnerSelectionChanged");
static_assert(offsetof(SpinnerSetting_SpinnerSelectionChanged, Value) == 0x000000, "Member 'SpinnerSetting_SpinnerSelectionChanged::Value' has a wrong offset!");

}

