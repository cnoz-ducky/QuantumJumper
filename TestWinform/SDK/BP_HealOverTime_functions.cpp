#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HealOverTime

#include "Basic.hpp"

#include "BP_HealOverTime_classes.hpp"
#include "BP_HealOverTime_parameters.hpp"


namespace SDK
{

// Function BP_HealOverTime.BP_HealOverTime_C.ExecuteUbergraph_BP_HealOverTime
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HealOverTime_C::ExecuteUbergraph_BP_HealOverTime(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "ExecuteUbergraph_BP_HealOverTime");

	Params::BP_HealOverTime_C_ExecuteUbergraph_BP_HealOverTime Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.BP_OnResume
// (Event, Public, BlueprintEvent)

void UBP_HealOverTime_C::BP_OnResume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "BP_OnResume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealOverTime.BP_HealOverTime_C.BP_OnPause
// (Event, Public, BlueprintEvent)

void UBP_HealOverTime_C::BP_OnPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "BP_OnPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealOverTime.BP_HealOverTime_C.BP_OnRestoreAfterNonResetOvertime
// (Event, Public, BlueprintEvent)

void UBP_HealOverTime_C::BP_OnRestoreAfterNonResetOvertime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "BP_OnRestoreAfterNonResetOvertime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealOverTime.BP_HealOverTime_C.OnGameStateChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFluxCapacitorStates                    NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HealOverTime_C::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "OnGameStateChanged");

	Params::BP_HealOverTime_C_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.OnDamageReceived
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              DamageReceiver                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageInstigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HealOverTime_C::OnDamageReceived(class ATimeWatchCharacter* DamageReceiver, class AActor* DamageInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "OnDamageReceived");

	Params::BP_HealOverTime_C_OnDamageReceived Parms{};

	Parms.DamageReceiver = DamageReceiver;
	Parms.DamageInstigator = DamageInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.Observer Generic Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTimeWatchEvent*                  Event                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HealOverTime_C::Observer_Generic_Event(class UTimeWatchEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "Observer Generic Event");

	Params::BP_HealOverTime_C_Observer_Generic_Event Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.BP_OnFinished
// (Event, Public, BlueprintEvent)

void UBP_HealOverTime_C::BP_OnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "BP_OnFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealOverTime.BP_HealOverTime_C.BP_OnPreActivated
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTWGameplayAbilitySystem*         InTWAbilitySystem                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTWAbilitiesComponent*            Caster_AbilityComp                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HealOverTime_C::BP_OnPreActivated(class UTWGameplayAbilitySystem* InTWAbilitySystem, class UTWAbilitiesComponent* Caster_AbilityComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "BP_OnPreActivated");

	Params::BP_HealOverTime_C_BP_OnPreActivated Parms{};

	Parms.InTWAbilitySystem = InTWAbilitySystem;
	Parms.Caster_AbilityComp = Caster_AbilityComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.BP_Update
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HealOverTime_C::BP_Update(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "BP_Update");

	Params::BP_HealOverTime_C_BP_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.BP_OnActivated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UTWGameplayAbilitySystem*         InTWAbilitySystem                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTWAbilityCustomDataHandle&AbilityDataHandle                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const bool                              bShouldTriggerLogic                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_HealOverTime_C::BP_OnActivated(class UTWGameplayAbilitySystem* InTWAbilitySystem, const struct FTWAbilityCustomDataHandle& AbilityDataHandle, const bool bShouldTriggerLogic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "BP_OnActivated");

	Params::BP_HealOverTime_C_BP_OnActivated Parms{};

	Parms.InTWAbilitySystem = InTWAbilitySystem;
	Parms.AbilityDataHandle = std::move(AbilityDataHandle);
	Parms.bShouldTriggerLogic = bShouldTriggerLogic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.Heal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Heal_Percent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HealOverTime_C::Heal(int32 Heal_Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "Heal");

	Params::BP_HealOverTime_C_Heal Parms{};

	Parms.Heal_Percent = Heal_Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.InterruptAbility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              TWCharacter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_HealOverTime_C::InterruptAbility(class ATimeWatchCharacter* TWCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "InterruptAbility");

	Params::BP_HealOverTime_C_InterruptAbility Parms{};

	Parms.TWCharacter = TWCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealOverTime.BP_HealOverTime_C.PlayHealingSound
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_HealOverTime_C::PlayHealingSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "PlayHealingSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealOverTime.BP_HealOverTime_C.StopHealingSound
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_HealOverTime_C::StopHealingSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealOverTime_C", "StopHealingSound");

	UObject::ProcessEvent(Func, nullptr);
}

}

