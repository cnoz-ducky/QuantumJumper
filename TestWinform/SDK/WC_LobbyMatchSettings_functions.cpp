#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WC_LobbyMatchSettings

#include "Basic.hpp"

#include "WC_LobbyMatchSettings_classes.hpp"
#include "WC_LobbyMatchSettings_parameters.hpp"


namespace SDK
{

// Function WC_LobbyMatchSettings.WC_LobbyMatchSettings_C.ExecuteUbergraph_WC_LobbyMatchSettings
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWC_LobbyMatchSettings_C::ExecuteUbergraph_WC_LobbyMatchSettings(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WC_LobbyMatchSettings_C", "ExecuteUbergraph_WC_LobbyMatchSettings");

	Params::WC_LobbyMatchSettings_C_ExecuteUbergraph_WC_LobbyMatchSettings Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WC_LobbyMatchSettings.WC_LobbyMatchSettings_C.ToggleMatchSettingsSpinnerInteractable
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USpinner*                         Spinner                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInteractable                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWC_LobbyMatchSettings_C::ToggleMatchSettingsSpinnerInteractable(class USpinner* Spinner, bool bInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WC_LobbyMatchSettings_C", "ToggleMatchSettingsSpinnerInteractable");

	Params::WC_LobbyMatchSettings_C_ToggleMatchSettingsSpinnerInteractable Parms{};

	Parms.Spinner = Spinner;
	Parms.bInteractable = bInteractable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WC_LobbyMatchSettings.WC_LobbyMatchSettings_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWC_LobbyMatchSettings_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WC_LobbyMatchSettings_C", "Tick");

	Params::WC_LobbyMatchSettings_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WC_LobbyMatchSettings.WC_LobbyMatchSettings_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWC_LobbyMatchSettings_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WC_LobbyMatchSettings_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WC_LobbyMatchSettings.WC_LobbyMatchSettings_C.CheckFirstControllerInputPressed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool*                                   Pressed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWC_LobbyMatchSettings_C::CheckFirstControllerInputPressed(const struct FKey& Key, bool* Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WC_LobbyMatchSettings_C", "CheckFirstControllerInputPressed");

	Params::WC_LobbyMatchSettings_C_CheckFirstControllerInputPressed Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	if (Pressed != nullptr)
		*Pressed = Parms.Pressed;
}

}

