#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChromaSDKPlugin

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "ChromaSDKPlugin_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class ChromaSDKPlugin.ChromaSDKPluginAnimation1DObject
// 0x0050 (0x0078 - 0x0028)
class UChromaSDKPluginAnimation1DObject final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColorFrame1D>         Frames;                                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsLoaded();
	void Unload();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChromaSDKPluginAnimation1DObject">();
	}
	static class UChromaSDKPluginAnimation1DObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChromaSDKPluginAnimation1DObject>();
	}
};
static_assert(alignof(UChromaSDKPluginAnimation1DObject) == 0x000008, "Wrong alignment on UChromaSDKPluginAnimation1DObject");
static_assert(sizeof(UChromaSDKPluginAnimation1DObject) == 0x000078, "Wrong size on UChromaSDKPluginAnimation1DObject");
static_assert(offsetof(UChromaSDKPluginAnimation1DObject, Device) == 0x000030, "Member 'UChromaSDKPluginAnimation1DObject::Device' has a wrong offset!");
static_assert(offsetof(UChromaSDKPluginAnimation1DObject, Frames) == 0x000038, "Member 'UChromaSDKPluginAnimation1DObject::Frames' has a wrong offset!");

// Class ChromaSDKPlugin.ChromaSDKPluginAnimation2DObject
// 0x0050 (0x0078 - 0x0028)
class UChromaSDKPluginAnimation2DObject final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColorFrame2D>         Frames;                                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsLoaded();
	void Unload();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChromaSDKPluginAnimation2DObject">();
	}
	static class UChromaSDKPluginAnimation2DObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChromaSDKPluginAnimation2DObject>();
	}
};
static_assert(alignof(UChromaSDKPluginAnimation2DObject) == 0x000008, "Wrong alignment on UChromaSDKPluginAnimation2DObject");
static_assert(sizeof(UChromaSDKPluginAnimation2DObject) == 0x000078, "Wrong size on UChromaSDKPluginAnimation2DObject");
static_assert(offsetof(UChromaSDKPluginAnimation2DObject, Device) == 0x000030, "Member 'UChromaSDKPluginAnimation2DObject::Device' has a wrong offset!");
static_assert(offsetof(UChromaSDKPluginAnimation2DObject, Frames) == 0x000038, "Member 'UChromaSDKPluginAnimation2DObject::Frames' has a wrong offset!");

// Class ChromaSDKPlugin.ChromaSDKPluginBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UChromaSDKPluginBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddNonZeroAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId);
	static void AddNonZeroAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId);
	static void AddNonZeroAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static void AddNonZeroAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 Offset);
	static void AddNonZeroAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 Offset);
	static void AddNonZeroAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId);
	static void AddNonZeroTargetAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId);
	static void AddNonZeroTargetAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static void AddNonZeroTargetAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 Offset);
	static void AddNonZeroTargetAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 Offset);
	static void AppendAllFrames(int32 sourceAnimationId, int32 targetAnimationId);
	static void AppendAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static struct FChromaSDKEffectResult ChromaSDKCreateEffectCustom1D(EChromaSDKDevice1DEnum Device, const TArray<struct FLinearColor>& Colors);
	static struct FChromaSDKEffectResult ChromaSDKCreateEffectCustom2D(EChromaSDKDevice2DEnum Device, const TArray<struct FChromaSDKColors>& Colors);
	static struct FChromaSDKEffectResult ChromaSDKCreateEffectKeyboardCustom2D(const TArray<struct FChromaSDKColors>& Colors);
	static struct FChromaSDKEffectResult ChromaSDKCreateEffectNone(EChromaSDKDeviceEnum Device);
	static struct FChromaSDKEffectResult ChromaSDKCreateEffectStatic(EChromaSDKDeviceEnum Device, const struct FLinearColor& colorParam);
	static int32 ChromaSDKDeleteEffect(const struct FChromaSDKGuid& EffectId);
	static int32 ChromaSDKInit();
	static int32 ChromaSDKSetEffect(const struct FChromaSDKGuid& EffectId);
	static int32 ChromaSDKUnInit();
	static void ClearAll();
	static void ClearAnimationType(EChromaSDKDeviceEnum Device);
	static void CloseAnimation(const int32 animationId);
	static void CloseAnimationName(const class FString& animationName);
	static void CopyAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId);
	static void CopyAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId);
	static void CopyAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static void CopyAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId);
	static void CopyAnimation(int32 sourceAnimationId, const class FString& targetAnimationName);
	static void CopyAnimationName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static void CopyKeyColor(int32 sourceAnimationId, int32 targetAnimationId, int32 frameIndex, EChromaSDKKeyboardKey Key);
	static void CopyKeyColorName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const int32 frameIndex, EChromaSDKKeyboardKey Key);
	static void CopyKeysColor(int32 sourceAnimationId, int32 targetAnimationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys);
	static void CopyKeysColorAllFrames(int32 sourceAnimationId, int32 targetAnimationId, const TArray<EChromaSDKKeyboardKey>& Keys);
	static void CopyKeysColorAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const TArray<EChromaSDKKeyboardKey>& Keys);
	static void CopyKeysColorName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys);
	static void CopyNonZeroAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId);
	static void CopyNonZeroAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId);
	static void CopyNonZeroAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static void CopyNonZeroAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 Offset);
	static void CopyNonZeroAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 Offset);
	static void CopyNonZeroAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId);
	static void CopyNonZeroAllKeysOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId, int32 Offset);
	static void CopyNonZeroAllKeysOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId, int32 Offset);
	static void CopyNonZeroKeyColor(int32 sourceAnimationId, int32 targetAnimationId, int32 frameIndex, EChromaSDKKeyboardKey Key);
	static void CopyNonZeroKeyColorName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const int32 frameIndex, EChromaSDKKeyboardKey Key);
	static void CopyNonZeroKeysColor(int32 sourceAnimationId, int32 targetAnimationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys);
	static void CopyNonZeroKeysColorAllFrames(int32 sourceAnimationId, int32 targetAnimationId, const TArray<EChromaSDKKeyboardKey>& Keys);
	static void CopyNonZeroKeysColorAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const TArray<EChromaSDKKeyboardKey>& Keys);
	static void CopyNonZeroKeysColorName(const class FString& sourceAnimationName, const class FString& targetAnimationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys);
	static void CopyNonZeroTargetAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId);
	static void CopyNonZeroTargetAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId);
	static void CopyNonZeroTargetAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static void CopyNonZeroTargetAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 Offset);
	static void CopyNonZeroTargetAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 Offset);
	static void CopyNonZeroTargetAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId);
	static TArray<struct FLinearColor> CreateColors1D(EChromaSDKDevice1DEnum Device);
	static TArray<struct FChromaSDKColors> CreateColors2D(EChromaSDKDevice2DEnum Device);
	static TArray<struct FLinearColor> CreateRandomColors1D(EChromaSDKDevice1DEnum Device);
	static TArray<struct FChromaSDKColors> CreateRandomColors2D(EChromaSDKDevice2DEnum Device);
	static TArray<struct FLinearColor> CreateRandomColorsBlackAndWhite1D(EChromaSDKDevice1DEnum Device);
	static TArray<struct FChromaSDKColors> CreateRandomColorsBlackAndWhite2D(EChromaSDKDevice2DEnum Device);
	static void DuplicateFirstFrame(int32 animationId, int32 frameCount);
	static void DuplicateFirstFrameName(const class FString& animationName, int32 frameCount);
	static void DuplicateFrames(int32 animationId);
	static void DuplicateFramesName(const class FString& animationName);
	static void DuplicateMirrorFrames(int32 animationId);
	static void DuplicateMirrorFramesName(const class FString& animationName);
	static void FadeEndFrames(int32 animationId, int32 fade);
	static void FadeEndFramesName(const class FString& animationName, int32 fade);
	static void FadeStartFrames(int32 animationId, int32 fade);
	static void FadeStartFramesName(const class FString& animationName, int32 fade);
	static void FillColor(int32 animationId, int32 frameId, const struct FLinearColor& colorParam);
	static void FillColorAllFrames(int32 animationId, const struct FLinearColor& colorParam);
	static void FillColorAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam);
	static void FillColorAllFramesRGB(int32 animationId, int32 red, int32 green, int32 blue);
	static void FillColorAllFramesRGBName(const class FString& animationName, int32 red, int32 green, int32 blue);
	static void FillColorName(const class FString& animationName, int32 frameId, const struct FLinearColor& colorParam);
	static void FillColorRGB(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue);
	static void FillColorRGBName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue);
	static void FillNonZeroColor(int32 animationId, int32 frameId, const struct FLinearColor& colorParam);
	static void FillNonZeroColorAllFrames(int32 animationId, const struct FLinearColor& colorParam);
	static void FillNonZeroColorAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam);
	static void FillNonZeroColorAllFramesRGB(int32 animationId, int32 red, int32 green, int32 blue);
	static void FillNonZeroColorAllFramesRGBName(const class FString& animationName, int32 red, int32 green, int32 blue);
	static void FillNonZeroColorName(const class FString& animationName, int32 frameId, const struct FLinearColor& colorParam);
	static void FillNonZeroColorRGB(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue);
	static void FillNonZeroColorRGBName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue);
	static void FillRandomColors(int32 animationId, int32 frameId);
	static void FillRandomColorsAllFrames(int32 animationId);
	static void FillRandomColorsAllFramesName(const class FString& animationName);
	static void FillRandomColorsBlackAndWhite(int32 animationId, int32 frameId);
	static void FillRandomColorsBlackAndWhiteAllFrames(int32 animationId);
	static void FillRandomColorsBlackAndWhiteAllFramesName(const class FString& animationName);
	static void FillRandomColorsBlackAndWhiteName(const class FString& animationName, int32 frameId);
	static void FillRandomColorsName(const class FString& animationName, int32 frameId);
	static void FillThresholdColorsAllFrames(int32 animationId, int32 Threshold, const struct FLinearColor& colorParam);
	static void FillThresholdColorsAllFramesName(const class FString& animationName, int32 Threshold, const struct FLinearColor& colorParam);
	static void FillThresholdColorsAllFramesRGB(int32 animationId, int32 Threshold, int32 red, int32 green, int32 blue);
	static void FillThresholdColorsAllFramesRGBName(const class FString& animationName, int32 Threshold, int32 red, int32 green, int32 blue);
	static void FillThresholdColorsMinMaxAllFramesRGB(int32 animationId, int32 minThreshold, int32 minRed, int32 minGreen, int32 minBlue, int32 maxThreshold, int32 maxRed, int32 maxGreen, int32 maxBlue);
	static void FillThresholdColorsMinMaxAllFramesRGBName(const class FString& animationName, int32 minThreshold, int32 minRed, int32 minGreen, int32 minBlue, int32 maxThreshold, int32 maxRed, int32 maxGreen, int32 maxBlue);
	static void FillThresholdColorsRGB(int32 animationId, int32 frameId, int32 Threshold, int32 red, int32 green, int32 blue);
	static void FillThresholdColorsRGBName(const class FString& animationName, int32 frameId, int32 Threshold, int32 red, int32 green, int32 blue);
	static void FillThresholdRGBColorsAllFramesRGB(int32 animationId, int32 redThreshold, int32 greenThreshold, int32 blueThreshold, int32 red, int32 green, int32 blue);
	static void FillThresholdRGBColorsAllFramesRGBName(const class FString& animationName, int32 redThreshold, int32 greenThreshold, int32 blueThreshold, int32 red, int32 green, int32 blue);
	static void FillZeroColor(int32 animationId, int32 frameId, const struct FLinearColor& colorParam);
	static void FillZeroColorAllFrames(int32 animationId, const struct FLinearColor& colorParam);
	static void FillZeroColorAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam);
	static void FillZeroColorAllFramesRGB(int32 animationId, int32 red, int32 green, int32 blue);
	static void FillZeroColorAllFramesRGBName(const class FString& animationName, int32 red, int32 green, int32 blue);
	static void FillZeroColorName(const class FString& animationName, int32 frameId, const struct FLinearColor& colorParam);
	static void FillZeroColorRGB(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue);
	static void FillZeroColorRGBName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue);
	static int32 GetAnimation(const class FString& animationName);
	static int32 GetAnimationCount();
	static int32 GetAnimationId(const class FString& animationName);
	static int32 GetAnimationIdByIndex(int32 Index_0);
	static class FString GetAnimationName(const int32 animationId);
	static int32 GetFrameCount(const int32 animationId);
	static int32 GetFrameCountName(const class FString& animationName);
	static struct FLinearColor GetKeyboardKeyColor(EChromaSDKKeyboardKey Key, TArray<struct FChromaSDKColors>& Colors);
	static EChromaSDKKeyboardKey GetKeyboardRazerKey(const struct FKey& Key);
	static struct FLinearColor GetKeyColor(int32 animationId, int32 frameIndex, EChromaSDKKeyboardKey Key);
	static struct FLinearColor GetKeyColorName(const class FString& animationName, const int32 frameIndex, EChromaSDKKeyboardKey Key);
	static int32 GetMaxColumn(EChromaSDKDevice2DEnum Device);
	static int32 GetMaxLeds(EChromaSDKDevice1DEnum Device);
	static int32 GetMaxRow(EChromaSDKDevice2DEnum Device);
	static struct FLinearColor GetMouseLedColor(EChromaSDKMouseLed led, TArray<struct FChromaSDKColors>& Colors);
	static int32 GetPlayingAnimationCount();
	static int32 GetPlayingAnimationId(int32 Index_0);
	static struct FLinearColor GetRGB(int32 red, int32 green, int32 blue);
	static void InsertDelay(int32 animationId, int32 frameId, int32 Delay);
	static void InsertDelayName(const class FString& animationName, int32 frameId, int32 Delay);
	static void InsertFrame(int32 animationId, int32 sourceFrame, int32 targetFrame);
	static void InsertFrameName(const class FString& animationName, int32 sourceFrame, int32 targetFrame);
	static void InvertColorsAllFrames(int32 animationId);
	static void InvertColorsAllFramesName(const class FString& animationName);
	static bool IsAnimationPlaying(const class FString& animationName);
	static bool IsAnimationTypePlaying(EChromaSDKDeviceEnum Device);
	static bool IsInitialized();
	static bool IsPlatformWindows();
	static float Lerp(float Start, float End, float amt);
	static struct FLinearColor LerpColor(const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2, float T);
	static int32 LerpColorBGR(int32 from, int32 to, float T);
	static void LoadAnimation(const int32 animationId);
	static void LoadAnimationName(const class FString& animationName);
	static void MakeBlankFrames(int32 animationId, int32 frameCount, float Duration, const struct FLinearColor& colorParam);
	static void MakeBlankFramesName(const class FString& animationName, int32 frameCount, float Duration, const struct FLinearColor& colorParam);
	static void MakeBlankFramesRandom(int32 animationId, int32 frameCount, float Duration);
	static void MakeBlankFramesRandomBlackAndWhite(int32 animationId, int32 frameCount, float Duration);
	static void MakeBlankFramesRandomBlackAndWhiteName(const class FString& animationName, int32 frameCount, float Duration);
	static void MakeBlankFramesRandomName(const class FString& animationName, int32 frameCount, float Duration);
	static void MakeBlankFramesRGB(int32 animationId, int32 frameCount, float Duration, int32 red, int32 green, int32 blue);
	static void MakeBlankFramesRGBName(const class FString& animationName, int32 frameCount, float Duration, int32 red, int32 green, int32 blue);
	static void MultiplyColorLerpAllFrames(int32 animationId, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2);
	static void MultiplyColorLerpAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2);
	static void MultiplyIntensity(int32 animationId, int32 frameId, float Intensity);
	static void MultiplyIntensityAllFrames(int32 animationId, float Intensity);
	static void MultiplyIntensityAllFramesName(const class FString& animationName, float Intensity);
	static void MultiplyIntensityAllFramesRGB(int32 animationId, float redIntensity, float greenIntensity, float blueIntensity);
	static void MultiplyIntensityAllFramesRGBName(const class FString& animationName, float redIntensity, float greenIntensity, float blueIntensity);
	static void MultiplyIntensityColor(int32 animationId, int32 frameId, const struct FLinearColor& colorParam);
	static void MultiplyIntensityColorAllFrames(int32 animationId, const struct FLinearColor& colorParam);
	static void MultiplyIntensityColorAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam);
	static void MultiplyIntensityColorName(const class FString& animationName, int32 frameId, const struct FLinearColor& colorParam);
	static void MultiplyIntensityName(const class FString& animationName, int32 frameId, float Intensity);
	static void MultiplyIntensityRGB(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue);
	static void MultiplyIntensityRGBName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue);
	static void MultiplyNonZeroTargetColorLerpAllFrames(int32 animationId, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2);
	static void MultiplyNonZeroTargetColorLerpAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2);
	static void MultiplyTargetColorLerpAllFrames(int32 animationId, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2);
	static void MultiplyTargetColorLerpAllFramesName(const class FString& animationName, const struct FLinearColor& colorParam1, const struct FLinearColor& colorParam2);
	static void OffsetColors(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue);
	static void OffsetColorsAllFrames(int32 animationId, int32 red, int32 green, int32 blue);
	static void OffsetColorsAllFramesName(const class FString& animationName, int32 red, int32 green, int32 blue);
	static void OffsetColorsName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue);
	static void OffsetNonZeroColors(int32 animationId, int32 frameId, int32 red, int32 green, int32 blue);
	static void OffsetNonZeroColorsAllFrames(int32 animationId, int32 red, int32 green, int32 blue);
	static void OffsetNonZeroColorsAllFramesName(const class FString& animationName, int32 red, int32 green, int32 blue);
	static void OffsetNonZeroColorsName(const class FString& animationName, int32 frameId, int32 red, int32 green, int32 blue);
	static void OverrideFrameDurationName(const class FString& animationName, float Duration);
	static void PlayAnimation(const class FString& animationName, bool Loop);
	static void PlayAnimationComposite(const class FString& animationName, bool Loop);
	static void PlayAnimationName(const class FString& animationName, bool Loop);
	static void PlayAnimations(const TArray<class FString>& animationNames, bool Loop);
	static int32 PreviewFrame(int32 animationId, int32 frameId);
	static void PreviewFrameName(const class FString& animationName, int32 frameId);
	static void ReduceFrames(int32 animationId, int32 N);
	static void ReduceFramesName(const class FString& animationName, int32 N);
	static void ReverseAllFrames(int32 animationId);
	static void ReverseAllFramesName(const class FString& animationName);
	static void SetChromaCustomColorAllFramesName(const class FString& animationName);
	static void SetChromaCustomFlagName(const class FString& animationName, bool flag);
	static void SetKeyboardKeyColor(EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam, TArray<struct FChromaSDKColors>& Colors);
	static void SetKeyColor(int32 animationId, int32 frameIndex, EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam);
	static void SetKeyColorAllFrames(int32 animationId, EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam);
	static void SetKeyColorAllFramesName(const class FString& animationName, EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam);
	static void SetKeyColorName(const class FString& animationName, const int32 frameIndex, EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam);
	static void SetKeyNonZeroColor(int32 animationId, int32 frameIndex, EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam);
	static void SetKeyNonZeroColorAllFrames(int32 animationId, EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam);
	static void SetKeyNonZeroColorAllFramesName(const class FString& animationName, EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam);
	static void SetKeyNonZeroColorName(const class FString& animationName, const int32 frameIndex, EChromaSDKKeyboardKey Key, const struct FLinearColor& colorParam);
	static void SetKeysColor(int32 animationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys, const struct FLinearColor& colorParam);
	static void SetKeysColorAllFrames(int32 animationId, const TArray<EChromaSDKKeyboardKey>& Keys, const struct FLinearColor& colorParam);
	static void SetKeysColorAllFramesName(const class FString& animationName, const TArray<EChromaSDKKeyboardKey>& Keys, const struct FLinearColor& colorParam);
	static void SetKeysColorAllFramesRGB(int32 animationId, const TArray<EChromaSDKKeyboardKey>& Keys, int32 red, int32 green, int32 blue);
	static void SetKeysColorAllFramesRGBName(const class FString& animationName, const TArray<EChromaSDKKeyboardKey>& Keys, int32 red, int32 green, int32 blue);
	static void SetKeysColorName(const class FString& animationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys, const struct FLinearColor& colorParam);
	static void SetKeysColorRGB(int32 animationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys, int32 red, int32 green, int32 blue);
	static void SetKeysColorRGBName(const class FString& animationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys, int32 red, int32 green, int32 blue);
	static void SetKeysNonZeroColor(int32 animationId, int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys, const struct FLinearColor& colorParam);
	static void SetKeysNonZeroColorAllFrames(int32 animationId, const TArray<EChromaSDKKeyboardKey>& Keys, const struct FLinearColor& colorParam);
	static void SetKeysNonZeroColorAllFramesName(const class FString& animationName, const TArray<EChromaSDKKeyboardKey>& Keys, const struct FLinearColor& colorParam);
	static void SetKeysNonZeroColorName(const class FString& animationName, const int32 frameIndex, const TArray<EChromaSDKKeyboardKey>& Keys, const struct FLinearColor& colorParam);
	static void SetMouseLedColor(EChromaSDKMouseLed led, const struct FLinearColor& colorParam, TArray<struct FChromaSDKColors>& Colors);
	static void StopAll();
	static void StopAnimation(const class FString& animationName);
	static void StopAnimationComposite(const class FString& animationName);
	static void StopAnimations(const TArray<class FString>& animationNames);
	static void StopAnimationType(EChromaSDKDeviceEnum Device);
	static void SubtractNonZeroAllKeys(int32 sourceAnimationId, int32 targetAnimationId, int32 frameId);
	static void SubtractNonZeroAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId);
	static void SubtractNonZeroAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static void SubtractNonZeroAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 Offset);
	static void SubtractNonZeroAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 Offset);
	static void SubtractNonZeroAllKeysName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 frameId);
	static void SubtractNonZeroTargetAllKeysAllFrames(int32 sourceAnimationId, int32 targetAnimationId);
	static void SubtractNonZeroTargetAllKeysAllFramesName(const class FString& sourceAnimationName, const class FString& targetAnimationName);
	static void SubtractNonZeroTargetAllKeysAllFramesOffset(int32 sourceAnimationId, int32 targetAnimationId, int32 Offset);
	static void SubtractNonZeroTargetAllKeysAllFramesOffsetName(const class FString& sourceAnimationName, const class FString& targetAnimationName, int32 Offset);
	static int32 ToBGR(const struct FLinearColor& colorParam);
	static struct FLinearColor ToLinearColor(int32 colorParam);
	static void TrimEndFrames(int32 animationId, int32 lastFrameId);
	static void TrimEndFramesName(const class FString& animationName, int32 lastFrameId);
	static void TrimFrame(int32 animationId, int32 frameId);
	static void TrimFrameName(const class FString& animationName, int32 frameId);
	static void TrimStartFrames(int32 animationId, int32 numberOfFrames);
	static void TrimStartFramesName(const class FString& animationName, int32 numberOfFrames);
	static void UnloadAnimation(const int32 animationId);
	static void UnloadAnimationName(const class FString& animationName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChromaSDKPluginBPLibrary">();
	}
	static class UChromaSDKPluginBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChromaSDKPluginBPLibrary>();
	}
};
static_assert(alignof(UChromaSDKPluginBPLibrary) == 0x000008, "Wrong alignment on UChromaSDKPluginBPLibrary");
static_assert(sizeof(UChromaSDKPluginBPLibrary) == 0x000028, "Wrong size on UChromaSDKPluginBPLibrary");

// Class ChromaSDKPlugin.NGDChromaWrapper
// 0x0158 (0x0180 - 0x0028)
class UNGDChromaWrapper final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimationsPath;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x140];                                     // 0x0040(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UNGDChromaWrapper* GetChromaWrapper();

	void AddKeyOverride(const struct FChromaKeyColor& KeyColor);
	void AddKeysOverride(const TArray<struct FChromaKeyColor>& ChromaKeys);
	void AddKeysOverrideExistentGroup(const TArray<struct FChromaKeyColor>& ChromaKeys, const class FString& Group);
	void AddKeysOverrideExistentGroups(const TArray<struct FChromaKeyColor>& ChromaKeys);
	void AddKeysOverrideExistentGroupSingleColor(const TArray<struct FKey>& Keys, const class FString& Group, const struct FLinearColor& Color);
	void ClearAllDevicesColors();
	void ClearAllKeyOverrides();
	void ClearKeyOverrides(const class FString& Group);
	void Init();
	bool IsInitialized();
	void PlayBackgroundAnim(const EChromaDevice& Device, const class FString& AnimName, bool ForcePlay);
	void PlayTemporalAnim(const EChromaDevice& Device, const class FString& AnimName);
	void SetAnimationsPath(const class FString& NewAnimationsPath);
	void SetColorToDevice(const EChromaDevice& Device, const struct FLinearColor& Color);
	void UnInit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDChromaWrapper">();
	}
	static class UNGDChromaWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDChromaWrapper>();
	}
};
static_assert(alignof(UNGDChromaWrapper) == 0x000008, "Wrong alignment on UNGDChromaWrapper");
static_assert(sizeof(UNGDChromaWrapper) == 0x000180, "Wrong size on UNGDChromaWrapper");
static_assert(offsetof(UNGDChromaWrapper, AnimationsPath) == 0x000030, "Member 'UNGDChromaWrapper::AnimationsPath' has a wrong offset!");

}

