#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_impact

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_impact.BP_impact_C
// 0x0038 (0x0250 - 0x0218)
class ABP_impact_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0218(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDecalComponent*                        Decal;                                             // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Emisive_6AEC33D242AE0A9692543EABC7C06B03; // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_6AEC33D242AE0A9692543EABC7C06B03; // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Minimum_Size;                                      // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Maximum_Size;                                      // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_impact(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void RandomizeOrientationAndScale();
	void EventOnDestroy(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_impact_C">();
	}
	static class ABP_impact_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_impact_C>();
	}
};
static_assert(alignof(ABP_impact_C) == 0x000008, "Wrong alignment on ABP_impact_C");
static_assert(sizeof(ABP_impact_C) == 0x000250, "Wrong size on ABP_impact_C");
static_assert(offsetof(ABP_impact_C, UberGraphFrame) == 0x000218, "Member 'ABP_impact_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_impact_C, Decal) == 0x000220, "Member 'ABP_impact_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_impact_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_impact_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_impact_C, Timeline_0_Emisive_6AEC33D242AE0A9692543EABC7C06B03) == 0x000230, "Member 'ABP_impact_C::Timeline_0_Emisive_6AEC33D242AE0A9692543EABC7C06B03' has a wrong offset!");
static_assert(offsetof(ABP_impact_C, Timeline_0__Direction_6AEC33D242AE0A9692543EABC7C06B03) == 0x000234, "Member 'ABP_impact_C::Timeline_0__Direction_6AEC33D242AE0A9692543EABC7C06B03' has a wrong offset!");
static_assert(offsetof(ABP_impact_C, Timeline_0) == 0x000238, "Member 'ABP_impact_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_impact_C, Minimum_Size) == 0x000240, "Member 'ABP_impact_C::Minimum_Size' has a wrong offset!");
static_assert(offsetof(ABP_impact_C, Maximum_Size) == 0x000244, "Member 'ABP_impact_C::Maximum_Size' has a wrong offset!");
static_assert(offsetof(ABP_impact_C, DynamicMaterial) == 0x000248, "Member 'ABP_impact_C::DynamicMaterial' has a wrong offset!");

}

