#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AkAudio

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class AkAudio.MovieSceneAkTrack
// 0x0018 (0x0070 - 0x0058)
class UMovieSceneAkTrack : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0058(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         bIsAMasterTrack : 1;                               // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkTrack">();
	}
	static class UMovieSceneAkTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkTrack>();
	}
};
static_assert(alignof(UMovieSceneAkTrack) == 0x000008, "Wrong alignment on UMovieSceneAkTrack");
static_assert(sizeof(UMovieSceneAkTrack) == 0x000070, "Wrong size on UMovieSceneAkTrack");
static_assert(offsetof(UMovieSceneAkTrack, Sections) == 0x000058, "Member 'UMovieSceneAkTrack::Sections' has a wrong offset!");

// Class AkAudio.AkAcousticPortal
// 0x0090 (0x02E0 - 0x0250)
class AAkAcousticPortal final : public AVolume
{
public:
	EAkAcousticPortalState                        InitialState;                                      // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstructionRefreshInterval;                        // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ObstructionCollisionChannel;                       // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x87];                                     // 0x0259(0x0087)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClosePortal();
	void OpenPortal();

	EAkAcousticPortalState GetCurrentState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAcousticPortal">();
	}
	static class AAkAcousticPortal* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkAcousticPortal>();
	}
};
static_assert(alignof(AAkAcousticPortal) == 0x000008, "Wrong alignment on AAkAcousticPortal");
static_assert(sizeof(AAkAcousticPortal) == 0x0002E0, "Wrong size on AAkAcousticPortal");
static_assert(offsetof(AAkAcousticPortal, InitialState) == 0x000250, "Member 'AAkAcousticPortal::InitialState' has a wrong offset!");
static_assert(offsetof(AAkAcousticPortal, ObstructionRefreshInterval) == 0x000254, "Member 'AAkAcousticPortal::ObstructionRefreshInterval' has a wrong offset!");
static_assert(offsetof(AAkAcousticPortal, ObstructionCollisionChannel) == 0x000258, "Member 'AAkAcousticPortal::ObstructionCollisionChannel' has a wrong offset!");

// Class AkAudio.MovieSceneAkAudioEventTrack
// 0x0000 (0x0070 - 0x0070)
class UMovieSceneAkAudioEventTrack final : public UMovieSceneAkTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioEventTrack">();
	}
	static class UMovieSceneAkAudioEventTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioEventTrack>();
	}
};
static_assert(alignof(UMovieSceneAkAudioEventTrack) == 0x000008, "Wrong alignment on UMovieSceneAkAudioEventTrack");
static_assert(sizeof(UMovieSceneAkAudioEventTrack) == 0x000070, "Wrong size on UMovieSceneAkAudioEventTrack");

// Class AkAudio.AkPortalComponent
// 0x0000 (0x01F0 - 0x01F0)
class UAkPortalComponent final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPortalComponent">();
	}
	static class UAkPortalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPortalComponent>();
	}
};
static_assert(alignof(UAkPortalComponent) == 0x000010, "Wrong alignment on UAkPortalComponent");
static_assert(sizeof(UAkPortalComponent) == 0x0001F0, "Wrong size on UAkPortalComponent");

// Class AkAudio.MovieSceneAkAudioRTPCSection
// 0x0160 (0x0240 - 0x00E0)
class UMovieSceneAkAudioRTPCSection final : public UMovieSceneSection
{
public:
	class FString                                 Name_0;                                            // 0x00E0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRichCurve                             FloatCurve;                                        // 0x00F0(0x0080)(Protected, NativeAccessSpecifierProtected)
	struct FMovieSceneFloatChannelSerializationHelper FloatChannelSerializationHelper;               // 0x0170(0x0030)(Protected, NativeAccessSpecifierProtected)
	struct FMovieSceneFloatChannel                RTPCChannel;                                       // 0x01A0(0x00A0)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioRTPCSection">();
	}
	static class UMovieSceneAkAudioRTPCSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioRTPCSection>();
	}
};
static_assert(alignof(UMovieSceneAkAudioRTPCSection) == 0x000008, "Wrong alignment on UMovieSceneAkAudioRTPCSection");
static_assert(sizeof(UMovieSceneAkAudioRTPCSection) == 0x000240, "Wrong size on UMovieSceneAkAudioRTPCSection");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, Name_0) == 0x0000E0, "Member 'UMovieSceneAkAudioRTPCSection::Name_0' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, FloatCurve) == 0x0000F0, "Member 'UMovieSceneAkAudioRTPCSection::FloatCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, FloatChannelSerializationHelper) == 0x000170, "Member 'UMovieSceneAkAudioRTPCSection::FloatChannelSerializationHelper' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioRTPCSection, RTPCChannel) == 0x0001A0, "Member 'UMovieSceneAkAudioRTPCSection::RTPCChannel' has a wrong offset!");

// Class AkAudio.AkAcousticTexture
// 0x0000 (0x0028 - 0x0028)
class UAkAcousticTexture final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAcousticTexture">();
	}
	static class UAkAcousticTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAcousticTexture>();
	}
};
static_assert(alignof(UAkAcousticTexture) == 0x000008, "Wrong alignment on UAkAcousticTexture");
static_assert(sizeof(UAkAcousticTexture) == 0x000028, "Wrong size on UAkAcousticTexture");

// Class AkAudio.MovieSceneAkAudioRTPCTrack
// 0x0000 (0x0070 - 0x0070)
class UMovieSceneAkAudioRTPCTrack final : public UMovieSceneAkTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioRTPCTrack">();
	}
	static class UMovieSceneAkAudioRTPCTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioRTPCTrack>();
	}
};
static_assert(alignof(UMovieSceneAkAudioRTPCTrack) == 0x000008, "Wrong alignment on UMovieSceneAkAudioRTPCTrack");
static_assert(sizeof(UMovieSceneAkAudioRTPCTrack) == 0x000070, "Wrong size on UMovieSceneAkAudioRTPCTrack");

// Class AkAudio.AkActivatedPlugins
// 0x0050 (0x0078 - 0x0028)
class UAkActivatedPlugins final : public UObject
{
public:
	TMap<class FString, struct FAkPluginList>     Platforms;                                         // 0x0028(0x0050)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkActivatedPlugins">();
	}
	static class UAkActivatedPlugins* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkActivatedPlugins>();
	}
};
static_assert(alignof(UAkActivatedPlugins) == 0x000008, "Wrong alignment on UAkActivatedPlugins");
static_assert(sizeof(UAkActivatedPlugins) == 0x000078, "Wrong size on UAkActivatedPlugins");
static_assert(offsetof(UAkActivatedPlugins, Platforms) == 0x000028, "Member 'UAkActivatedPlugins::Platforms' has a wrong offset!");

// Class AkAudio.AkAmbientSound
// 0x0040 (0x0258 - 0x0218)
class AAkAmbientSound final : public AActor
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0218(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopWhenOwnerIsDestroyed;                          // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A[0x2E];                                     // 0x022A(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartAmbientSound();
	void StopAmbientSound();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAmbientSound">();
	}
	static class AAkAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkAmbientSound>();
	}
};
static_assert(alignof(AAkAmbientSound) == 0x000008, "Wrong alignment on AAkAmbientSound");
static_assert(sizeof(AAkAmbientSound) == 0x000258, "Wrong size on AAkAmbientSound");
static_assert(offsetof(AAkAmbientSound, AkAudioEvent) == 0x000218, "Member 'AAkAmbientSound::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, AkComponent) == 0x000220, "Member 'AAkAmbientSound::AkComponent' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, StopWhenOwnerIsDestroyed) == 0x000228, "Member 'AAkAmbientSound::StopWhenOwnerIsDestroyed' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, AutoPost) == 0x000229, "Member 'AAkAmbientSound::AutoPost' has a wrong offset!");

// Class AkAudio.AkAndroidInitializationSettings
// 0x00D0 (0x00F8 - 0x0028)
class UAkAndroidInitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                             // 0x0028(0x0068)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                   // 0x0090(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAndroidAdvancedInitializationSettings AdvancedSettings;                                // 0x00B8(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAndroidInitializationSettings">();
	}
	static class UAkAndroidInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAndroidInitializationSettings>();
	}
};
static_assert(alignof(UAkAndroidInitializationSettings) == 0x000008, "Wrong alignment on UAkAndroidInitializationSettings");
static_assert(sizeof(UAkAndroidInitializationSettings) == 0x0000F8, "Wrong size on UAkAndroidInitializationSettings");
static_assert(offsetof(UAkAndroidInitializationSettings, CommonSettings) == 0x000028, "Member 'UAkAndroidInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkAndroidInitializationSettings, CommunicationSettings) == 0x000090, "Member 'UAkAndroidInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkAndroidInitializationSettings, AdvancedSettings) == 0x0000B8, "Member 'UAkAndroidInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkAudioBank
// 0x0008 (0x0030 - 0x0028)
class UAkAudioBank final : public UObject
{
public:
	bool                                          AutoLoad;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioBank">();
	}
	static class UAkAudioBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioBank>();
	}
};
static_assert(alignof(UAkAudioBank) == 0x000008, "Wrong alignment on UAkAudioBank");
static_assert(sizeof(UAkAudioBank) == 0x000030, "Wrong size on UAkAudioBank");
static_assert(offsetof(UAkAudioBank, AutoLoad) == 0x000028, "Member 'UAkAudioBank::AutoLoad' has a wrong offset!");

// Class AkAudio.AkAudioEvent
// 0x0018 (0x0040 - 0x0028)
class UAkAudioEvent final : public UObject
{
public:
	class UAkAudioBank*                           RequiredBank;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAttenuationRadius;                              // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInfinite;                                        // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDuration;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDuration;                                   // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioEvent">();
	}
	static class UAkAudioEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioEvent>();
	}
};
static_assert(alignof(UAkAudioEvent) == 0x000008, "Wrong alignment on UAkAudioEvent");
static_assert(sizeof(UAkAudioEvent) == 0x000040, "Wrong size on UAkAudioEvent");
static_assert(offsetof(UAkAudioEvent, RequiredBank) == 0x000028, "Member 'UAkAudioEvent::RequiredBank' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, MaxAttenuationRadius) == 0x000030, "Member 'UAkAudioEvent::MaxAttenuationRadius' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, IsInfinite) == 0x000034, "Member 'UAkAudioEvent::IsInfinite' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, MinimumDuration) == 0x000038, "Member 'UAkAudioEvent::MinimumDuration' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, MaximumDuration) == 0x00003C, "Member 'UAkAudioEvent::MaximumDuration' has a wrong offset!");

// Class AkAudio.AkGameObject
// 0x0020 (0x0210 - 0x01F0)
class UAkGameObject : public USceneComponent
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208[0x8];                                      // 0x0208(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 PostAkEvent(class UAkAudioEvent* AkEvent, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const TArray<struct FAkExternalSourceInfo>& ExternalSources, const class FString& in_EventName);
	int32 PostAssociatedAkEvent(int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const TArray<struct FAkExternalSourceInfo>& ExternalSources);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGameObject">();
	}
	static class UAkGameObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGameObject>();
	}
};
static_assert(alignof(UAkGameObject) == 0x000010, "Wrong alignment on UAkGameObject");
static_assert(sizeof(UAkGameObject) == 0x000210, "Wrong size on UAkGameObject");
static_assert(offsetof(UAkGameObject, AkAudioEvent) == 0x0001F0, "Member 'UAkGameObject::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(UAkGameObject, EventName) == 0x0001F8, "Member 'UAkGameObject::EventName' has a wrong offset!");

// Class AkAudio.AkComponent
// 0x01C0 (0x03D0 - 0x0210)
class UAkComponent : public UAkGameObject
{
public:
	bool                                          bUseSpatialAudio;                                  // 0x0210(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         EnableSpotReflectors : 1;                          // 0x021C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              EarlyReflectionAuxBus;                             // 0x0220(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 EarlyReflectionAuxBusName;                         // 0x0228(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EarlyReflectionOrder;                              // 0x0238(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyReflectionBusSendGain;                        // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyReflectionMaxPathLength;                      // 0x0240(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         roomReverbAuxBusGain;                              // 0x0244(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         diffractionMaxEdges;                               // 0x0248(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         diffractionMaxPaths;                               // 0x024C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         diffractionMaxPathLength;                          // 0x0250(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DrawFirstOrderReflections : 1;                     // 0x0254(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawSecondOrderReflections : 1;                    // 0x0254(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawHigherOrderReflections : 1;                    // 0x0254(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawDiffraction : 1;                               // 0x0254(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          StopWhenOwnerDestroyed;                            // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationScalingFactor;                          // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseReverbVolumes;                                 // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265[0x16B];                                    // 0x0265(0x016B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetRTPCValue(const class FString& RTPC, ERTPCValueType InputValueType, float* Value, ERTPCValueType* OutputValueType, int32 PlayingID);
	int32 PostAkEventAndWaitForEnd(class UAkAudioEvent* AkEvent, const class FString& in_EventName, const TArray<struct FAkExternalSourceInfo>& ExternalSources, const struct FLatentActionInfo& LatentInfo);
	int32 PostAkEventByName(const class FString& in_EventName);
	int32 PostAssociatedAkEventAndWaitForEnd(const TArray<struct FAkExternalSourceInfo>& ExternalSources, const struct FLatentActionInfo& LatentInfo);
	void PostTrigger(const class FString& Trigger);
	void SetAttenuationScalingFactor(float Value);
	void SetEarlyReflectionsAuxBus(const class FString& AuxBusName);
	void SetEarlyReflectionsVolume(float SendVolume);
	void SetListeners(const TArray<class UAkComponent*>& Listeners);
	void SetOutputBusVolume(float BusVolume);
	void SetRTPCValue(const class FString& RTPC, float Value, int32 InterpolationTimeMs);
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);
	void SetSwitch(const class FString& SwitchGroup, const class FString& SwitchState);
	void UseEarlyReflections(class UAkAuxBus* AuxBus, int32 Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, const class FString& AuxBusName);
	void UseReverbVolumes(bool inUseReverbVolumes);

	float GetAttenuationRadius() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkComponent">();
	}
	static class UAkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkComponent>();
	}
};
static_assert(alignof(UAkComponent) == 0x000010, "Wrong alignment on UAkComponent");
static_assert(sizeof(UAkComponent) == 0x0003D0, "Wrong size on UAkComponent");
static_assert(offsetof(UAkComponent, bUseSpatialAudio) == 0x000210, "Member 'UAkComponent::bUseSpatialAudio' has a wrong offset!");
static_assert(offsetof(UAkComponent, OcclusionCollisionChannel) == 0x000218, "Member 'UAkComponent::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkComponent, EarlyReflectionAuxBus) == 0x000220, "Member 'UAkComponent::EarlyReflectionAuxBus' has a wrong offset!");
static_assert(offsetof(UAkComponent, EarlyReflectionAuxBusName) == 0x000228, "Member 'UAkComponent::EarlyReflectionAuxBusName' has a wrong offset!");
static_assert(offsetof(UAkComponent, EarlyReflectionOrder) == 0x000238, "Member 'UAkComponent::EarlyReflectionOrder' has a wrong offset!");
static_assert(offsetof(UAkComponent, EarlyReflectionBusSendGain) == 0x00023C, "Member 'UAkComponent::EarlyReflectionBusSendGain' has a wrong offset!");
static_assert(offsetof(UAkComponent, EarlyReflectionMaxPathLength) == 0x000240, "Member 'UAkComponent::EarlyReflectionMaxPathLength' has a wrong offset!");
static_assert(offsetof(UAkComponent, roomReverbAuxBusGain) == 0x000244, "Member 'UAkComponent::roomReverbAuxBusGain' has a wrong offset!");
static_assert(offsetof(UAkComponent, diffractionMaxEdges) == 0x000248, "Member 'UAkComponent::diffractionMaxEdges' has a wrong offset!");
static_assert(offsetof(UAkComponent, diffractionMaxPaths) == 0x00024C, "Member 'UAkComponent::diffractionMaxPaths' has a wrong offset!");
static_assert(offsetof(UAkComponent, diffractionMaxPathLength) == 0x000250, "Member 'UAkComponent::diffractionMaxPathLength' has a wrong offset!");
static_assert(offsetof(UAkComponent, StopWhenOwnerDestroyed) == 0x000258, "Member 'UAkComponent::StopWhenOwnerDestroyed' has a wrong offset!");
static_assert(offsetof(UAkComponent, AttenuationScalingFactor) == 0x00025C, "Member 'UAkComponent::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(UAkComponent, OcclusionRefreshInterval) == 0x000260, "Member 'UAkComponent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkComponent, bUseReverbVolumes) == 0x000264, "Member 'UAkComponent::bUseReverbVolumes' has a wrong offset!");

// Class AkAudio.AkAudioInputComponent
// 0x0010 (0x03E0 - 0x03D0)
class UAkAudioInputComponent final : public UAkComponent
{
public:
	uint8                                         Pad_3D0[0x10];                                     // 0x03D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 PostAssociatedAudioInputEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioInputComponent">();
	}
	static class UAkAudioInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioInputComponent>();
	}
};
static_assert(alignof(UAkAudioInputComponent) == 0x000010, "Wrong alignment on UAkAudioInputComponent");
static_assert(sizeof(UAkAudioInputComponent) == 0x0003E0, "Wrong size on UAkAudioInputComponent");

// Class AkAudio.AkAuxBus
// 0x0010 (0x0038 - 0x0028)
class UAkAuxBus final : public UObject
{
public:
	class UAkAudioBank*                           RequiredBank;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAuxBus">();
	}
	static class UAkAuxBus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAuxBus>();
	}
};
static_assert(alignof(UAkAuxBus) == 0x000008, "Wrong alignment on UAkAuxBus");
static_assert(sizeof(UAkAuxBus) == 0x000038, "Wrong size on UAkAuxBus");
static_assert(offsetof(UAkAuxBus, RequiredBank) == 0x000028, "Member 'UAkAuxBus::RequiredBank' has a wrong offset!");

// Class AkAudio.AkCheckBox
// 0x09F8 (0x0B18 - 0x0120)
class UAkCheckBox final : public UContentWidget
{
public:
	uint8                                         Pad_120[0x388];                                    // 0x0120(0x0388)(Fixing Size After Last Property [ Dumper-7 ])
	ECheckBoxState                                CheckedState;                                      // 0x04A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             CheckedStateDelegate;                              // 0x04AC(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCheckBoxStyle                         WidgetStyle;                                       // 0x04C0(0x0580)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0A40(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0A41(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A42[0x6];                                      // 0x0A42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkBoolPropertyToControl               ThePropertyToControl;                              // 0x0A48(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FAkWwiseItemToControl                  ItemToControl;                                     // 0x0A58(0x0040)(Edit, Config, EditConst, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsChecked)> AkOnCheckStateChanged;                           // 0x0A98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGuid& ItemDroppedID)> OnItemDropped;                 // 0x0AA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PropertyDropped)> OnPropertyDropped;          // 0x0AB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC8[0x50];                                     // 0x0AC8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAkBoolProperty(const class FString& ItemProperty);
	void SetAkItemId(const struct FGuid& ItemId);
	void SetCheckedState(ECheckBoxState InCheckedState);
	void SetIsChecked(bool InIsChecked);

	const struct FGuid GetAkItemId() const;
	const class FString GetAkProperty() const;
	ECheckBoxState GetCheckedState() const;
	bool IsChecked() const;
	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCheckBox">();
	}
	static class UAkCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkCheckBox>();
	}
};
static_assert(alignof(UAkCheckBox) == 0x000008, "Wrong alignment on UAkCheckBox");
static_assert(sizeof(UAkCheckBox) == 0x000B18, "Wrong size on UAkCheckBox");
static_assert(offsetof(UAkCheckBox, CheckedState) == 0x0004A8, "Member 'UAkCheckBox::CheckedState' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, CheckedStateDelegate) == 0x0004AC, "Member 'UAkCheckBox::CheckedStateDelegate' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, WidgetStyle) == 0x0004C0, "Member 'UAkCheckBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, HorizontalAlignment) == 0x000A40, "Member 'UAkCheckBox::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, IsFocusable) == 0x000A41, "Member 'UAkCheckBox::IsFocusable' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, ThePropertyToControl) == 0x000A48, "Member 'UAkCheckBox::ThePropertyToControl' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, ItemToControl) == 0x000A58, "Member 'UAkCheckBox::ItemToControl' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, AkOnCheckStateChanged) == 0x000A98, "Member 'UAkCheckBox::AkOnCheckStateChanged' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, OnItemDropped) == 0x000AA8, "Member 'UAkCheckBox::OnItemDropped' has a wrong offset!");
static_assert(offsetof(UAkCheckBox, OnPropertyDropped) == 0x000AB8, "Member 'UAkCheckBox::OnPropertyDropped' has a wrong offset!");

// Class AkAudio.AkGameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UAkGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static void AddOutputCaptureMarker(const class FString& MarkerText);
	static void CancelEventCallback(const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	static void ClearBanks();
	static void ExecuteActionOnEvent(class UAkAudioEvent* AkEvent, EAkActionOnEventType ActionType, class AActor* Actor, int32 TransitionDuration, EAkCurveInterpolation FadeCurve, int32 PlayingID);
	static void ExecuteActionOnPlayingID(EAkActionOnEventType ActionType, int32 PlayingID, int32 TransitionDuration, EAkCurveInterpolation FadeCurve);
	static class UAkComponent* GetAkComponent(class USceneComponent* AttachToComponent, bool* ComponentCreated, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType);
	static float GetOcclusionScalingFactor();
	static void GetRTPCValue(class FName RTPC, int32 PlayingID, ERTPCValueType InputValueType, float* Value, ERTPCValueType* OutputValueType, class AActor* Actor);
	static void GetSpeakerAngles(TArray<float>* SpeakerAngles, float* HeightAngle, const class FString& DeviceShareset);
	static bool IsEditor();
	static bool IsGame(class UObject* WorldContextObject);
	static void LoadBank(class UAkAudioBank* Bank, const class FString& BankName, const struct FLatentActionInfo& LatentInfo, class UObject* WorldContextObject);
	static void LoadBankAsync(class UAkAudioBank* Bank, const TDelegate<void(EAkResult Result)>& BankLoadedCallback);
	static void LoadBankByName(const class FString& BankName);
	static void LoadBanks(const TArray<class UAkAudioBank*>& SoundBanks, bool SynchronizeSoundBanks);
	static void LoadInitBank();
	static int32 PostAndWaitForEndOfEvent(class UAkAudioEvent* AkEvent, class AActor* Actor, bool bStopWhenAttachedToDestroyed, const TArray<struct FAkExternalSourceInfo>& ExternalSources, const class FString& EventName, const struct FLatentActionInfo& LatentInfo);
	static int32 PostEvent(class UAkAudioEvent* AkEvent, class AActor* Actor, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const TArray<struct FAkExternalSourceInfo>& ExternalSources, bool bStopWhenAttachedToDestroyed, const class FString& EventName);
	static int32 PostEventAtLocation(class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation, const class FString& EventName, class UObject* WorldContextObject);
	static void PostEventAtLocationByName(const class FString& EventName, const struct FVector& Location, const struct FRotator& Orientation, class UObject* WorldContextObject);
	static int32 PostEventAttached(class UAkAudioEvent* AkEvent, class AActor* Actor, class FName AttachPointName, bool bStopWhenAttachedToDestroyed, const class FString& EventName);
	static void PostEventByName(const class FString& EventName, class AActor* Actor, bool bStopWhenAttachedToDestroyed);
	static void PostTrigger(class FName Trigger, class AActor* Actor);
	static void SetBusConfig(const class FString& BusName, EAkChannelConfiguration ChannelConfiguration);
	static void SetMultipleChannelEmitterPositions(class UAkComponent* GameObjectAkComponent, const TArray<EAkChannelConfiguration>& ChannelMasks, const TArray<struct FTransform>& Positions, EAkMultiPositionType MultiPositionType);
	static void SetMultipleChannelMaskEmitterPositions(class UAkComponent* GameObjectAkComponent, const TArray<struct FAkChannelMask>& ChannelMasks, const TArray<struct FTransform>& Positions, EAkMultiPositionType MultiPositionType);
	static void SetMultiplePositions(class UAkComponent* GameObjectAkComponent, const TArray<struct FTransform>& Positions, EAkMultiPositionType MultiPositionType);
	static void SetOcclusionRefreshInterval(float RefreshInterval, class AActor* Actor);
	static void SetOcclusionScalingFactor(float ScalingFactor);
	static void SetOutputBusVolume(float BusVolume, class AActor* Actor);
	static void SetPanningRule(EPanningRule PanRule);
	static void SetReflectionsOrder(int32 Order, bool RefreshPaths);
	static void SetRTPCValue(class FName RTPC, float Value, int32 InterpolationTimeMs, class AActor* Actor);
	static void SetSpeakerAngles(const TArray<float>& SpeakerAngles, float HeightAngle, const class FString& DeviceShareset);
	static void SetState(class FName StateGroup, class FName State);
	static void SetSwitch(class FName SwitchGroup, class FName SwitchState, class AActor* Actor);
	static class UAkComponent* SpawnAkComponentAtLocation(class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation, bool AutoPost, const class FString& EventName, bool AutoDestroy);
	static void StartAllAmbientSounds(class UObject* WorldContextObject);
	static void StartOutputCapture(const class FString& Filename);
	static void StartProfilerCapture(const class FString& Filename);
	static void StopActor(class AActor* Actor);
	static void StopAll();
	static void StopAllAmbientSounds(class UObject* WorldContextObject);
	static void StopOutputCapture();
	static void StopProfilerCapture();
	static void UnloadBank(class UAkAudioBank* Bank, const class FString& BankName, const struct FLatentActionInfo& LatentInfo, class UObject* WorldContextObject);
	static void UnloadBankAsync(class UAkAudioBank* Bank, const TDelegate<void(EAkResult Result)>& BankUnloadedCallback);
	static void UnloadBankByName(const class FString& BankName);
	static void UseEarlyReflections(class AActor* Actor, class UAkAuxBus* AuxBus, int32 Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, const class FString& AuxBusName);
	static void UseReverbVolumes(bool inUseReverbVolumes, class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGameplayStatics">();
	}
	static class UAkGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGameplayStatics>();
	}
};
static_assert(alignof(UAkGameplayStatics) == 0x000008, "Wrong alignment on UAkGameplayStatics");
static_assert(sizeof(UAkGameplayStatics) == 0x000028, "Wrong size on UAkGameplayStatics");

// Class AkAudio.AkCallbackInfo
// 0x0008 (0x0030 - 0x0028)
class UAkCallbackInfo : public UObject
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCallbackInfo">();
	}
	static class UAkCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkCallbackInfo>();
	}
};
static_assert(alignof(UAkCallbackInfo) == 0x000008, "Wrong alignment on UAkCallbackInfo");
static_assert(sizeof(UAkCallbackInfo) == 0x000030, "Wrong size on UAkCallbackInfo");
static_assert(offsetof(UAkCallbackInfo, AkComponent) == 0x000028, "Member 'UAkCallbackInfo::AkComponent' has a wrong offset!");

// Class AkAudio.AkEventCallbackInfo
// 0x0008 (0x0038 - 0x0030)
class UAkEventCallbackInfo : public UAkCallbackInfo
{
public:
	int32                                         PlayingID;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventId;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkEventCallbackInfo">();
	}
	static class UAkEventCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkEventCallbackInfo>();
	}
};
static_assert(alignof(UAkEventCallbackInfo) == 0x000008, "Wrong alignment on UAkEventCallbackInfo");
static_assert(sizeof(UAkEventCallbackInfo) == 0x000038, "Wrong size on UAkEventCallbackInfo");
static_assert(offsetof(UAkEventCallbackInfo, PlayingID) == 0x000030, "Member 'UAkEventCallbackInfo::PlayingID' has a wrong offset!");
static_assert(offsetof(UAkEventCallbackInfo, EventId) == 0x000034, "Member 'UAkEventCallbackInfo::EventId' has a wrong offset!");

// Class AkAudio.AkMIDIEventCallbackInfo
// 0x0008 (0x0040 - 0x0038)
class UAkMIDIEventCallbackInfo final : public UAkEventCallbackInfo
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCc(struct FAkMidiCc* AsCc);
	uint8 GetChannel();
	bool GetChannelAftertouch(struct FAkMidiChannelAftertouch* AsChannelAftertouch);
	bool GetGeneric(struct FAkMidiGeneric* AsGeneric);
	bool GetNoteAftertouch(struct FAkMidiNoteAftertouch* AsNoteAftertouch);
	bool GetNoteOff(struct FAkMidiNoteOnOff* AsNoteOff);
	bool GetNoteOn(struct FAkMidiNoteOnOff* AsNoteOn);
	bool GetPitchBend(struct FAkMidiPitchBend* AsPitchBend);
	bool GetProgramChange(struct FAkMidiProgramChange* AsProgramChange);
	EAkMidiEventType GetType();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMIDIEventCallbackInfo">();
	}
	static class UAkMIDIEventCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMIDIEventCallbackInfo>();
	}
};
static_assert(alignof(UAkMIDIEventCallbackInfo) == 0x000008, "Wrong alignment on UAkMIDIEventCallbackInfo");
static_assert(sizeof(UAkMIDIEventCallbackInfo) == 0x000040, "Wrong size on UAkMIDIEventCallbackInfo");

// Class AkAudio.AkMarkerCallbackInfo
// 0x0018 (0x0050 - 0x0038)
class UAkMarkerCallbackInfo final : public UAkEventCallbackInfo
{
public:
	int32                                         Identifier;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMarkerCallbackInfo">();
	}
	static class UAkMarkerCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMarkerCallbackInfo>();
	}
};
static_assert(alignof(UAkMarkerCallbackInfo) == 0x000008, "Wrong alignment on UAkMarkerCallbackInfo");
static_assert(sizeof(UAkMarkerCallbackInfo) == 0x000050, "Wrong size on UAkMarkerCallbackInfo");
static_assert(offsetof(UAkMarkerCallbackInfo, Identifier) == 0x000038, "Member 'UAkMarkerCallbackInfo::Identifier' has a wrong offset!");
static_assert(offsetof(UAkMarkerCallbackInfo, Position) == 0x00003C, "Member 'UAkMarkerCallbackInfo::Position' has a wrong offset!");
static_assert(offsetof(UAkMarkerCallbackInfo, Label) == 0x000040, "Member 'UAkMarkerCallbackInfo::Label' has a wrong offset!");

// Class AkAudio.AkDurationCallbackInfo
// 0x0018 (0x0050 - 0x0038)
class UAkDurationCallbackInfo final : public UAkEventCallbackInfo
{
public:
	float                                         Duration;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EstimatedDuration;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioNodeID;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MediaID;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreaming;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkDurationCallbackInfo">();
	}
	static class UAkDurationCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkDurationCallbackInfo>();
	}
};
static_assert(alignof(UAkDurationCallbackInfo) == 0x000008, "Wrong alignment on UAkDurationCallbackInfo");
static_assert(sizeof(UAkDurationCallbackInfo) == 0x000050, "Wrong size on UAkDurationCallbackInfo");
static_assert(offsetof(UAkDurationCallbackInfo, Duration) == 0x000038, "Member 'UAkDurationCallbackInfo::Duration' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, EstimatedDuration) == 0x00003C, "Member 'UAkDurationCallbackInfo::EstimatedDuration' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, AudioNodeID) == 0x000040, "Member 'UAkDurationCallbackInfo::AudioNodeID' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, MediaID) == 0x000044, "Member 'UAkDurationCallbackInfo::MediaID' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, bStreaming) == 0x000048, "Member 'UAkDurationCallbackInfo::bStreaming' has a wrong offset!");

// Class AkAudio.AkMusicSyncCallbackInfo
// 0x0040 (0x0070 - 0x0030)
class UAkMusicSyncCallbackInfo final : public UAkCallbackInfo
{
public:
	int32                                         PlayingID;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAkSegmentInfo                         SegmentInfo;                                       // 0x0034(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EAkCallbackType                               MusicSyncType;                                     // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserCueName;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMusicSyncCallbackInfo">();
	}
	static class UAkMusicSyncCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMusicSyncCallbackInfo>();
	}
};
static_assert(alignof(UAkMusicSyncCallbackInfo) == 0x000008, "Wrong alignment on UAkMusicSyncCallbackInfo");
static_assert(sizeof(UAkMusicSyncCallbackInfo) == 0x000070, "Wrong size on UAkMusicSyncCallbackInfo");
static_assert(offsetof(UAkMusicSyncCallbackInfo, PlayingID) == 0x000030, "Member 'UAkMusicSyncCallbackInfo::PlayingID' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, SegmentInfo) == 0x000034, "Member 'UAkMusicSyncCallbackInfo::SegmentInfo' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, MusicSyncType) == 0x000058, "Member 'UAkMusicSyncCallbackInfo::MusicSyncType' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, UserCueName) == 0x000060, "Member 'UAkMusicSyncCallbackInfo::UserCueName' has a wrong offset!");

// Class AkAudio.AkGeometryComponent
// 0x0120 (0x0310 - 0x01F0)
class UAkGeometryComponent final : public USceneComponent
{
public:
	EAkMeshType                                   MeshType;                                          // 0x01F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LOD;                                               // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UMaterialInterface*, struct FAkGeometrySurfaceOverride> StaticMeshSurfaceOverride;    // 0x01F8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAkGeometrySurfaceOverride             CollisionMeshSurfaceOverride;                      // 0x0248(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bEnableDiffraction : 1;                            // 0x0258(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableDiffractionOnBoundaryEdges : 1;             // 0x0258(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AssociatedRoom;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkGeometryData                        GeometryData;                                      // 0x0270(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x50];                                     // 0x02C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConvertMesh();
	void RemoveGeometry();
	void UpdateGeometry();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGeometryComponent">();
	}
	static class UAkGeometryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGeometryComponent>();
	}
};
static_assert(alignof(UAkGeometryComponent) == 0x000010, "Wrong alignment on UAkGeometryComponent");
static_assert(sizeof(UAkGeometryComponent) == 0x000310, "Wrong size on UAkGeometryComponent");
static_assert(offsetof(UAkGeometryComponent, MeshType) == 0x0001F0, "Member 'UAkGeometryComponent::MeshType' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, LOD) == 0x0001F4, "Member 'UAkGeometryComponent::LOD' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, StaticMeshSurfaceOverride) == 0x0001F8, "Member 'UAkGeometryComponent::StaticMeshSurfaceOverride' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, CollisionMeshSurfaceOverride) == 0x000248, "Member 'UAkGeometryComponent::CollisionMeshSurfaceOverride' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, AssociatedRoom) == 0x000260, "Member 'UAkGeometryComponent::AssociatedRoom' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, GeometryData) == 0x000270, "Member 'UAkGeometryComponent::GeometryData' has a wrong offset!");

// Class AkAudio.AkIOSInitializationSettings
// 0x00D8 (0x0100 - 0x0028)
class UAkIOSInitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                             // 0x0028(0x0068)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAudioSession                        AudioSession;                                      // 0x0090(0x000C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                   // 0x00A0(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettings      AdvancedSettings;                                  // 0x00C8(0x0034)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkIOSInitializationSettings">();
	}
	static class UAkIOSInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkIOSInitializationSettings>();
	}
};
static_assert(alignof(UAkIOSInitializationSettings) == 0x000008, "Wrong alignment on UAkIOSInitializationSettings");
static_assert(sizeof(UAkIOSInitializationSettings) == 0x000100, "Wrong size on UAkIOSInitializationSettings");
static_assert(offsetof(UAkIOSInitializationSettings, CommonSettings) == 0x000028, "Member 'UAkIOSInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, AudioSession) == 0x000090, "Member 'UAkIOSInitializationSettings::AudioSession' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, CommunicationSettings) == 0x0000A0, "Member 'UAkIOSInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, AdvancedSettings) == 0x0000C8, "Member 'UAkIOSInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkItemBoolPropertiesConv
// 0x0000 (0x0028 - 0x0028)
class UAkItemBoolPropertiesConv final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAkBoolPropertyToControlToString(const struct FAkBoolPropertyToControl& INAkBoolPropertyToControl);
	static class FText Conv_FAkBoolPropertyToControlToText(const struct FAkBoolPropertyToControl& INAkBoolPropertyToControl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkItemBoolPropertiesConv">();
	}
	static class UAkItemBoolPropertiesConv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkItemBoolPropertiesConv>();
	}
};
static_assert(alignof(UAkItemBoolPropertiesConv) == 0x000008, "Wrong alignment on UAkItemBoolPropertiesConv");
static_assert(sizeof(UAkItemBoolPropertiesConv) == 0x000028, "Wrong size on UAkItemBoolPropertiesConv");

// Class AkAudio.AkItemBoolProperties
// 0x0040 (0x0148 - 0x0108)
class UAkItemBoolProperties final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const class FString& PropertySelected)> OnSelectionChanged;        // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PropertyDragged)> OnPropertyDragged;          // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x20];                                     // 0x0128(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSearchText(const class FString& newText);

	class FString GetSearchText() const;
	class FString GetSelectedProperty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkItemBoolProperties">();
	}
	static class UAkItemBoolProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkItemBoolProperties>();
	}
};
static_assert(alignof(UAkItemBoolProperties) == 0x000008, "Wrong alignment on UAkItemBoolProperties");
static_assert(sizeof(UAkItemBoolProperties) == 0x000148, "Wrong size on UAkItemBoolProperties");
static_assert(offsetof(UAkItemBoolProperties, OnSelectionChanged) == 0x000108, "Member 'UAkItemBoolProperties::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UAkItemBoolProperties, OnPropertyDragged) == 0x000118, "Member 'UAkItemBoolProperties::OnPropertyDragged' has a wrong offset!");

// Class AkAudio.AkItemPropertiesConv
// 0x0000 (0x0028 - 0x0028)
class UAkItemPropertiesConv final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAkPropertyToControlToString(const struct FAkPropertyToControl& INAkPropertyToControl);
	static class FText Conv_FAkPropertyToControlToText(const struct FAkPropertyToControl& INAkPropertyToControl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkItemPropertiesConv">();
	}
	static class UAkItemPropertiesConv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkItemPropertiesConv>();
	}
};
static_assert(alignof(UAkItemPropertiesConv) == 0x000008, "Wrong alignment on UAkItemPropertiesConv");
static_assert(sizeof(UAkItemPropertiesConv) == 0x000028, "Wrong size on UAkItemPropertiesConv");

// Class AkAudio.AkItemProperties
// 0x0040 (0x0148 - 0x0108)
class UAkItemProperties final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const class FString& PropertySelected)> OnSelectionChanged;        // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PropertyDragged)> OnPropertyDragged;          // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x20];                                     // 0x0128(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSearchText(const class FString& newText);

	class FString GetSearchText() const;
	class FString GetSelectedProperty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkItemProperties">();
	}
	static class UAkItemProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkItemProperties>();
	}
};
static_assert(alignof(UAkItemProperties) == 0x000008, "Wrong alignment on UAkItemProperties");
static_assert(sizeof(UAkItemProperties) == 0x000148, "Wrong size on UAkItemProperties");
static_assert(offsetof(UAkItemProperties, OnSelectionChanged) == 0x000108, "Member 'UAkItemProperties::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UAkItemProperties, OnPropertyDragged) == 0x000118, "Member 'UAkItemProperties::OnPropertyDragged' has a wrong offset!");

// Class AkAudio.AkLateReverbComponent
// 0x0040 (0x0230 - 0x01F0)
class UAkLateReverbComponent final : public USceneComponent
{
public:
	uint8                                         bEnable : 1;                                       // 0x01F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBus;                                            // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuxBusName;                                        // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendLevel;                                         // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeRate;                                          // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkLateReverbComponent*                 NextLowerPriorityComponent;                        // 0x0220(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x8];                                      // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLateReverbComponent">();
	}
	static class UAkLateReverbComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLateReverbComponent>();
	}
};
static_assert(alignof(UAkLateReverbComponent) == 0x000010, "Wrong alignment on UAkLateReverbComponent");
static_assert(sizeof(UAkLateReverbComponent) == 0x000230, "Wrong size on UAkLateReverbComponent");
static_assert(offsetof(UAkLateReverbComponent, AuxBus) == 0x0001F8, "Member 'UAkLateReverbComponent::AuxBus' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AuxBusName) == 0x000200, "Member 'UAkLateReverbComponent::AuxBusName' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, SendLevel) == 0x000210, "Member 'UAkLateReverbComponent::SendLevel' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, FadeRate) == 0x000214, "Member 'UAkLateReverbComponent::FadeRate' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, Priority) == 0x000218, "Member 'UAkLateReverbComponent::Priority' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, NextLowerPriorityComponent) == 0x000220, "Member 'UAkLateReverbComponent::NextLowerPriorityComponent' has a wrong offset!");

// Class AkAudio.AkLinuxInitializationSettings
// 0x00C8 (0x00F0 - 0x0028)
class UAkLinuxInitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                             // 0x0028(0x0068)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                   // 0x0090(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                 // 0x00B8(0x0038)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinuxInitializationSettings">();
	}
	static class UAkLinuxInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLinuxInitializationSettings>();
	}
};
static_assert(alignof(UAkLinuxInitializationSettings) == 0x000008, "Wrong alignment on UAkLinuxInitializationSettings");
static_assert(sizeof(UAkLinuxInitializationSettings) == 0x0000F0, "Wrong size on UAkLinuxInitializationSettings");
static_assert(offsetof(UAkLinuxInitializationSettings, CommonSettings) == 0x000028, "Member 'UAkLinuxInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkLinuxInitializationSettings, CommunicationSettings) == 0x000090, "Member 'UAkLinuxInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkLinuxInitializationSettings, AdvancedSettings) == 0x0000B8, "Member 'UAkLinuxInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkLuminInitializationSettings
// 0x00C8 (0x00F0 - 0x0028)
class UAkLuminInitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                             // 0x0028(0x0068)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                   // 0x0090(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                 // 0x00B8(0x0038)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLuminInitializationSettings">();
	}
	static class UAkLuminInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLuminInitializationSettings>();
	}
};
static_assert(alignof(UAkLuminInitializationSettings) == 0x000008, "Wrong alignment on UAkLuminInitializationSettings");
static_assert(sizeof(UAkLuminInitializationSettings) == 0x0000F0, "Wrong size on UAkLuminInitializationSettings");
static_assert(offsetof(UAkLuminInitializationSettings, CommonSettings) == 0x000028, "Member 'UAkLuminInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkLuminInitializationSettings, CommunicationSettings) == 0x000090, "Member 'UAkLuminInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkLuminInitializationSettings, AdvancedSettings) == 0x0000B8, "Member 'UAkLuminInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkMacInitializationSettings
// 0x00C8 (0x00F0 - 0x0028)
class UAkMacInitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                             // 0x0028(0x0068)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                   // 0x0090(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                 // 0x00B8(0x0038)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMacInitializationSettings">();
	}
	static class UAkMacInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMacInitializationSettings>();
	}
};
static_assert(alignof(UAkMacInitializationSettings) == 0x000008, "Wrong alignment on UAkMacInitializationSettings");
static_assert(sizeof(UAkMacInitializationSettings) == 0x0000F0, "Wrong size on UAkMacInitializationSettings");
static_assert(offsetof(UAkMacInitializationSettings, CommonSettings) == 0x000028, "Member 'UAkMacInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkMacInitializationSettings, CommunicationSettings) == 0x000090, "Member 'UAkMacInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkMacInitializationSettings, AdvancedSettings) == 0x0000B8, "Member 'UAkMacInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkPS4InitializationSettings
// 0x00C8 (0x00F0 - 0x0028)
class UAkPS4InitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettings        CommonSettings;                                    // 0x0028(0x0060)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                   // 0x0088(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkPS4AdvancedInitializationSettings   AdvancedSettings;                                  // 0x00B0(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPS4InitializationSettings">();
	}
	static class UAkPS4InitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPS4InitializationSettings>();
	}
};
static_assert(alignof(UAkPS4InitializationSettings) == 0x000008, "Wrong alignment on UAkPS4InitializationSettings");
static_assert(sizeof(UAkPS4InitializationSettings) == 0x0000F0, "Wrong size on UAkPS4InitializationSettings");
static_assert(offsetof(UAkPS4InitializationSettings, CommonSettings) == 0x000028, "Member 'UAkPS4InitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkPS4InitializationSettings, CommunicationSettings) == 0x000088, "Member 'UAkPS4InitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkPS4InitializationSettings, AdvancedSettings) == 0x0000B0, "Member 'UAkPS4InitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkReverbVolume
// 0x0038 (0x0288 - 0x0250)
class AAkReverbVolume final : public AVolume
{
public:
	uint8                                         bEnabled : 1;                                      // 0x0250(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBus;                                            // 0x0258(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuxBusName;                                        // 0x0260(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendLevel;                                         // 0x0270(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeRate;                                          // 0x0274(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0278(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkLateReverbComponent*                 LateReverbComponent;                               // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkReverbVolume">();
	}
	static class AAkReverbVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkReverbVolume>();
	}
};
static_assert(alignof(AAkReverbVolume) == 0x000008, "Wrong alignment on AAkReverbVolume");
static_assert(sizeof(AAkReverbVolume) == 0x000288, "Wrong size on AAkReverbVolume");
static_assert(offsetof(AAkReverbVolume, AuxBus) == 0x000258, "Member 'AAkReverbVolume::AuxBus' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, AuxBusName) == 0x000260, "Member 'AAkReverbVolume::AuxBusName' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, SendLevel) == 0x000270, "Member 'AAkReverbVolume::SendLevel' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, FadeRate) == 0x000274, "Member 'AAkReverbVolume::FadeRate' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, Priority) == 0x000278, "Member 'AAkReverbVolume::Priority' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, LateReverbComponent) == 0x000280, "Member 'AAkReverbVolume::LateReverbComponent' has a wrong offset!");

// Class AkAudio.AkRoomComponent
// 0x0030 (0x0240 - 0x0210)
class UAkRoomComponent final : public UAkGameObject
{
public:
	uint8                                         bEnable : 1;                                       // 0x0210(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkRoomComponent*                       NextLowerPriorityComponent;                        // 0x0218(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallOcclusion;                                     // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuxSendLevel;                                      // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D[0x13];                                     // 0x022D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRoomComponent">();
	}
	static class UAkRoomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkRoomComponent>();
	}
};
static_assert(alignof(UAkRoomComponent) == 0x000010, "Wrong alignment on UAkRoomComponent");
static_assert(sizeof(UAkRoomComponent) == 0x000240, "Wrong size on UAkRoomComponent");
static_assert(offsetof(UAkRoomComponent, NextLowerPriorityComponent) == 0x000218, "Member 'UAkRoomComponent::NextLowerPriorityComponent' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, Priority) == 0x000220, "Member 'UAkRoomComponent::Priority' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, WallOcclusion) == 0x000224, "Member 'UAkRoomComponent::WallOcclusion' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, AuxSendLevel) == 0x000228, "Member 'UAkRoomComponent::AuxSendLevel' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, AutoPost) == 0x00022C, "Member 'UAkRoomComponent::AutoPost' has a wrong offset!");

// Class AkAudio.AkSettings
// 0x00E8 (0x0110 - 0x0028)
class UAkSettings final : public UObject
{
public:
	uint8                                         MaxSimultaneousReverbVolumes;                      // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilePath                              WwiseProjectPath;                                  // 0x0030(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         WwiseSoundBankFolder;                              // 0x0040(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bAutoConnectToWAAPI;                               // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DefaultOcclusionCollisionChannel;                  // 0x0051(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSoftObjectPtr<class UPhysicalMaterial>, struct FAkGeometrySurfacePropertiesToMap> AkGeometryMap; // 0x0058(0x0050)(Edit, EditFixedSize, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bEnableMultiCoreRendering;                         // 0x00A8(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MigratedEnableMultiCoreRendering;                  // 0x00A9(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         WwiseWindowsInstallationPath;                      // 0x00B0(0x0010)(Config, Deprecated, NativeAccessSpecifierPublic)
	struct FFilePath                              WwiseMacInstallationPath;                          // 0x00C0(0x0010)(Config, Deprecated, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x40];                                      // 0x00D0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSettings">();
	}
	static class UAkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSettings>();
	}
};
static_assert(alignof(UAkSettings) == 0x000008, "Wrong alignment on UAkSettings");
static_assert(sizeof(UAkSettings) == 0x000110, "Wrong size on UAkSettings");
static_assert(offsetof(UAkSettings, MaxSimultaneousReverbVolumes) == 0x000028, "Member 'UAkSettings::MaxSimultaneousReverbVolumes' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseProjectPath) == 0x000030, "Member 'UAkSettings::WwiseProjectPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseSoundBankFolder) == 0x000040, "Member 'UAkSettings::WwiseSoundBankFolder' has a wrong offset!");
static_assert(offsetof(UAkSettings, bAutoConnectToWAAPI) == 0x000050, "Member 'UAkSettings::bAutoConnectToWAAPI' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultOcclusionCollisionChannel) == 0x000051, "Member 'UAkSettings::DefaultOcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkSettings, AkGeometryMap) == 0x000058, "Member 'UAkSettings::AkGeometryMap' has a wrong offset!");
static_assert(offsetof(UAkSettings, bEnableMultiCoreRendering) == 0x0000A8, "Member 'UAkSettings::bEnableMultiCoreRendering' has a wrong offset!");
static_assert(offsetof(UAkSettings, MigratedEnableMultiCoreRendering) == 0x0000A9, "Member 'UAkSettings::MigratedEnableMultiCoreRendering' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseWindowsInstallationPath) == 0x0000B0, "Member 'UAkSettings::WwiseWindowsInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseMacInstallationPath) == 0x0000C0, "Member 'UAkSettings::WwiseMacInstallationPath' has a wrong offset!");

// Class AkAudio.AkSettingsPerUser
// 0x0038 (0x0060 - 0x0028)
class UAkSettingsPerUser final : public UObject
{
public:
	struct FDirectoryPath                         WwiseWindowsInstallationPath;                      // 0x0028(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	struct FFilePath                              WwiseMacInstallationPath;                          // 0x0038(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	class FString                                 WaapiIPAddress;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WaapiPort;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuppressWwiseProjectPathWarnings;                  // 0x005C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSettingsPerUser">();
	}
	static class UAkSettingsPerUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSettingsPerUser>();
	}
};
static_assert(alignof(UAkSettingsPerUser) == 0x000008, "Wrong alignment on UAkSettingsPerUser");
static_assert(sizeof(UAkSettingsPerUser) == 0x000060, "Wrong size on UAkSettingsPerUser");
static_assert(offsetof(UAkSettingsPerUser, WwiseWindowsInstallationPath) == 0x000028, "Member 'UAkSettingsPerUser::WwiseWindowsInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WwiseMacInstallationPath) == 0x000038, "Member 'UAkSettingsPerUser::WwiseMacInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiIPAddress) == 0x000048, "Member 'UAkSettingsPerUser::WaapiIPAddress' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiPort) == 0x000058, "Member 'UAkSettingsPerUser::WaapiPort' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, SuppressWwiseProjectPathWarnings) == 0x00005C, "Member 'UAkSettingsPerUser::SuppressWwiseProjectPathWarnings' has a wrong offset!");

// Class AkAudio.AkSlider
// 0x0428 (0x0530 - 0x0108)
class UAkSlider final : public UWidget
{
public:
	float                                         Value;                                             // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x010C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSliderStyle                           WidgetStyle;                                       // 0x0120(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x0460(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SliderBarColor;                                    // 0x0464(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleColor;                                 // 0x0474(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentHandle;                                      // 0x0484(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0485(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_486[0x2];                                      // 0x0486(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepSize;                                          // 0x0488(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x048C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkPropertyToControl                   ThePropertyToControl;                              // 0x0490(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FAkWwiseItemToControl                  ItemToControl;                                     // 0x04A0(0x0040)(Edit, Config, EditConst, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGuid& ItemDroppedID)> OnItemDropped;                 // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PropertyDropped)> OnPropertyDropped;          // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_510[0x20];                                     // 0x0510(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAkSliderItemId(const struct FGuid& ItemId);
	void SetAkSliderItemProperty(const class FString& ItemProperty);
	void SetIndentHandle(bool InValue);
	void SetLocked(bool InValue);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetStepSize(float InValue);
	void SetValue(float InValue);

	const struct FGuid GetAkSliderItemId() const;
	const class FString GetAkSliderItemProperty() const;
	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSlider">();
	}
	static class UAkSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSlider>();
	}
};
static_assert(alignof(UAkSlider) == 0x000008, "Wrong alignment on UAkSlider");
static_assert(sizeof(UAkSlider) == 0x000530, "Wrong size on UAkSlider");
static_assert(offsetof(UAkSlider, Value) == 0x000108, "Member 'UAkSlider::Value' has a wrong offset!");
static_assert(offsetof(UAkSlider, ValueDelegate) == 0x00010C, "Member 'UAkSlider::ValueDelegate' has a wrong offset!");
static_assert(offsetof(UAkSlider, WidgetStyle) == 0x000120, "Member 'UAkSlider::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UAkSlider, Orientation) == 0x000460, "Member 'UAkSlider::Orientation' has a wrong offset!");
static_assert(offsetof(UAkSlider, SliderBarColor) == 0x000464, "Member 'UAkSlider::SliderBarColor' has a wrong offset!");
static_assert(offsetof(UAkSlider, SliderHandleColor) == 0x000474, "Member 'UAkSlider::SliderHandleColor' has a wrong offset!");
static_assert(offsetof(UAkSlider, IndentHandle) == 0x000484, "Member 'UAkSlider::IndentHandle' has a wrong offset!");
static_assert(offsetof(UAkSlider, Locked) == 0x000485, "Member 'UAkSlider::Locked' has a wrong offset!");
static_assert(offsetof(UAkSlider, StepSize) == 0x000488, "Member 'UAkSlider::StepSize' has a wrong offset!");
static_assert(offsetof(UAkSlider, IsFocusable) == 0x00048C, "Member 'UAkSlider::IsFocusable' has a wrong offset!");
static_assert(offsetof(UAkSlider, ThePropertyToControl) == 0x000490, "Member 'UAkSlider::ThePropertyToControl' has a wrong offset!");
static_assert(offsetof(UAkSlider, ItemToControl) == 0x0004A0, "Member 'UAkSlider::ItemToControl' has a wrong offset!");
static_assert(offsetof(UAkSlider, OnValueChanged) == 0x0004E0, "Member 'UAkSlider::OnValueChanged' has a wrong offset!");
static_assert(offsetof(UAkSlider, OnItemDropped) == 0x0004F0, "Member 'UAkSlider::OnItemDropped' has a wrong offset!");
static_assert(offsetof(UAkSlider, OnPropertyDropped) == 0x000500, "Member 'UAkSlider::OnPropertyDropped' has a wrong offset!");

// Class AkAudio.AkSpatialAudioVolume
// 0x0018 (0x0268 - 0x0250)
class AAkSpatialAudioVolume final : public AVolume
{
public:
	class UAkSurfaceReflectorSetComponent*        SurfaceReflectorSet;                               // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkLateReverbComponent*                 LateReverb;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkRoomComponent*                       Room;                                              // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSpatialAudioVolume">();
	}
	static class AAkSpatialAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkSpatialAudioVolume>();
	}
};
static_assert(alignof(AAkSpatialAudioVolume) == 0x000008, "Wrong alignment on AAkSpatialAudioVolume");
static_assert(sizeof(AAkSpatialAudioVolume) == 0x000268, "Wrong size on AAkSpatialAudioVolume");
static_assert(offsetof(AAkSpatialAudioVolume, SurfaceReflectorSet) == 0x000250, "Member 'AAkSpatialAudioVolume::SurfaceReflectorSet' has a wrong offset!");
static_assert(offsetof(AAkSpatialAudioVolume, LateReverb) == 0x000258, "Member 'AAkSpatialAudioVolume::LateReverb' has a wrong offset!");
static_assert(offsetof(AAkSpatialAudioVolume, Room) == 0x000260, "Member 'AAkSpatialAudioVolume::Room' has a wrong offset!");

// Class AkAudio.AkSpotReflector
// 0x0028 (0x0240 - 0x0218)
class AAkSpotReflector final : public AActor
{
public:
	class UAkAuxBus*                              EarlyReflectionAuxBus;                             // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EarlyReflectionAuxBusName;                         // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAcousticTexture*                     AcousticTexture;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceScalingFactor;                             // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSpotReflector">();
	}
	static class AAkSpotReflector* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkSpotReflector>();
	}
};
static_assert(alignof(AAkSpotReflector) == 0x000008, "Wrong alignment on AAkSpotReflector");
static_assert(sizeof(AAkSpotReflector) == 0x000240, "Wrong size on AAkSpotReflector");
static_assert(offsetof(AAkSpotReflector, EarlyReflectionAuxBus) == 0x000218, "Member 'AAkSpotReflector::EarlyReflectionAuxBus' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, EarlyReflectionAuxBusName) == 0x000220, "Member 'AAkSpotReflector::EarlyReflectionAuxBusName' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, AcousticTexture) == 0x000230, "Member 'AAkSpotReflector::AcousticTexture' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, DistanceScalingFactor) == 0x000238, "Member 'AAkSpotReflector::DistanceScalingFactor' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, Level) == 0x00023C, "Member 'AAkSpotReflector::Level' has a wrong offset!");

// Class AkAudio.AkSurfaceReflectorSetComponent
// 0x0040 (0x0230 - 0x01F0)
class UAkSurfaceReflectorSetComponent final : public USceneComponent
{
public:
	uint8                                         bEnableSurfaceReflectors : 1;                      // 0x01F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkPoly>                        AcousticPolys;                                     // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bEnableDiffraction : 1;                            // 0x0208(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableDiffractionOnBoundaryEdges : 1;             // 0x0208(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AssociatedRoom;                                    // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218[0x18];                                     // 0x0218(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RemoveSurfaceReflectorSet();
	void SendSurfaceReflectorSet();
	void UpdateSurfaceReflectorSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSurfaceReflectorSetComponent">();
	}
	static class UAkSurfaceReflectorSetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSurfaceReflectorSetComponent>();
	}
};
static_assert(alignof(UAkSurfaceReflectorSetComponent) == 0x000010, "Wrong alignment on UAkSurfaceReflectorSetComponent");
static_assert(sizeof(UAkSurfaceReflectorSetComponent) == 0x000230, "Wrong size on UAkSurfaceReflectorSetComponent");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, AcousticPolys) == 0x0001F8, "Member 'UAkSurfaceReflectorSetComponent::AcousticPolys' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, AssociatedRoom) == 0x000210, "Member 'UAkSurfaceReflectorSetComponent::AssociatedRoom' has a wrong offset!");

// Class AkAudio.AkSwitchInitializationSettings
// 0x00C0 (0x00E8 - 0x0028)
class UAkSwitchInitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                             // 0x0028(0x0068)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettings               CommunicationSettings;                             // 0x0090(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                 // 0x00B0(0x0038)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSwitchInitializationSettings">();
	}
	static class UAkSwitchInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSwitchInitializationSettings>();
	}
};
static_assert(alignof(UAkSwitchInitializationSettings) == 0x000008, "Wrong alignment on UAkSwitchInitializationSettings");
static_assert(sizeof(UAkSwitchInitializationSettings) == 0x0000E8, "Wrong size on UAkSwitchInitializationSettings");
static_assert(offsetof(UAkSwitchInitializationSettings, CommonSettings) == 0x000028, "Member 'UAkSwitchInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkSwitchInitializationSettings, CommunicationSettings) == 0x000090, "Member 'UAkSwitchInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkSwitchInitializationSettings, AdvancedSettings) == 0x0000B0, "Member 'UAkSwitchInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkWaapiCalls
// 0x0000 (0x0028 - 0x0028)
class UAkWaapiCalls final : public UBlueprintFunctionLibrary
{
public:
	static struct FAKWaapiJsonObject CallWaapi(const struct FAkWaapiUri& WaapiUri, const struct FAKWaapiJsonObject& WaapiArgs, const struct FAKWaapiJsonObject& WaapiOptions);
	static class FString Conv_FAkWaapiSubscriptionIdToString(const struct FAkWaapiSubscriptionId& INAkWaapiSubscriptionId);
	static class FText Conv_FAkWaapiSubscriptionIdToText(const struct FAkWaapiSubscriptionId& INAkWaapiSubscriptionId);
	static int32 GetSubscriptionID(const struct FAkWaapiSubscriptionId& Subscription);
	static bool RegisterWaapiConnectionLostCallback(const TDelegate<void()>& Callback);
	static bool RegisterWaapiProjectLoadedCallback(const TDelegate<void()>& Callback);
	static void SetSubscriptionID(const struct FAkWaapiSubscriptionId& Subscription, int32 ID);
	static struct FAKWaapiJsonObject SubscribeToWaapi(const struct FAkWaapiUri& WaapiUri, const struct FAKWaapiJsonObject& WaapiOptions, const TDelegate<void(const struct FAkWaapiSubscriptionId& SubscriptionId, const struct FAKWaapiJsonObject& WaapiJsonObject)>& Callback, struct FAkWaapiSubscriptionId* SubscriptionId, bool* SubscriptionDone);
	static struct FAKWaapiJsonObject Unsubscribe(const struct FAkWaapiSubscriptionId& SubscriptionId, bool* UnsubscriptionDone);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWaapiCalls">();
	}
	static class UAkWaapiCalls* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWaapiCalls>();
	}
};
static_assert(alignof(UAkWaapiCalls) == 0x000008, "Wrong alignment on UAkWaapiCalls");
static_assert(sizeof(UAkWaapiCalls) == 0x000028, "Wrong size on UAkWaapiCalls");

// Class AkAudio.SAkWaapiFieldNamesConv
// 0x0000 (0x0028 - 0x0028)
class USAkWaapiFieldNamesConv final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAkWaapiFieldNamesToString(const struct FAkWaapiFieldNames& INAkWaapiFieldNames);
	static class FText Conv_FAkWaapiFieldNamesToText(const struct FAkWaapiFieldNames& INAkWaapiFieldNames);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SAkWaapiFieldNamesConv">();
	}
	static class USAkWaapiFieldNamesConv* GetDefaultObj()
	{
		return GetDefaultObjImpl<USAkWaapiFieldNamesConv>();
	}
};
static_assert(alignof(USAkWaapiFieldNamesConv) == 0x000008, "Wrong alignment on USAkWaapiFieldNamesConv");
static_assert(sizeof(USAkWaapiFieldNamesConv) == 0x000028, "Wrong size on USAkWaapiFieldNamesConv");

// Class AkAudio.AkWaapiJsonManager
// 0x0000 (0x0028 - 0x0028)
class UAkWaapiJsonManager final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAKWaapiJsonObjectToString(const struct FAKWaapiJsonObject& INAKWaapiJsonObject);
	static class FText Conv_FAKWaapiJsonObjectToText(const struct FAKWaapiJsonObject& INAKWaapiJsonObject);
	static const TArray<struct FAKWaapiJsonObject> GetArrayField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& Target);
	static bool GetBoolField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& Target);
	static int32 GetIntegerField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& Target);
	static float GetNumberField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& Target);
	static struct FAKWaapiJsonObject GetObjectField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& Target);
	static class FString GetStringField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& Target);
	static struct FAKWaapiJsonObject SetArrayObjectFields(const struct FAkWaapiFieldNames& FieldName, const TArray<struct FAKWaapiJsonObject>& FieldObjectValues, const struct FAKWaapiJsonObject& Target);
	static struct FAKWaapiJsonObject SetArrayStringFields(const struct FAkWaapiFieldNames& FieldName, const TArray<class FString>& FieldStringValues, const struct FAKWaapiJsonObject& Target);
	static struct FAKWaapiJsonObject SetBoolField(const struct FAkWaapiFieldNames& FieldName, bool FieldValue, const struct FAKWaapiJsonObject& Target);
	static struct FAKWaapiJsonObject SetNumberField(const struct FAkWaapiFieldNames& FieldName, float FieldValue, const struct FAKWaapiJsonObject& Target);
	static struct FAKWaapiJsonObject SetObjectField(const struct FAkWaapiFieldNames& FieldName, const struct FAKWaapiJsonObject& FieldValue, const struct FAKWaapiJsonObject& Target);
	static struct FAKWaapiJsonObject SetStringField(const struct FAkWaapiFieldNames& FieldName, const class FString& FieldValue, const struct FAKWaapiJsonObject& Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWaapiJsonManager">();
	}
	static class UAkWaapiJsonManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWaapiJsonManager>();
	}
};
static_assert(alignof(UAkWaapiJsonManager) == 0x000008, "Wrong alignment on UAkWaapiJsonManager");
static_assert(sizeof(UAkWaapiJsonManager) == 0x000028, "Wrong size on UAkWaapiJsonManager");

// Class AkAudio.AkWaapiUriConv
// 0x0000 (0x0028 - 0x0028)
class UAkWaapiUriConv final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_FAkWaapiUriToString(const struct FAkWaapiUri& INAkWaapiUri);
	static class FText Conv_FAkWaapiUriToText(const struct FAkWaapiUri& INAkWaapiUri);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWaapiUriConv">();
	}
	static class UAkWaapiUriConv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWaapiUriConv>();
	}
};
static_assert(alignof(UAkWaapiUriConv) == 0x000008, "Wrong alignment on UAkWaapiUriConv");
static_assert(sizeof(UAkWaapiUriConv) == 0x000028, "Wrong size on UAkWaapiUriConv");

// Class AkAudio.AkWindowsInitializationSettings
// 0x00D0 (0x00F8 - 0x0028)
class UAkWindowsInitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                             // 0x0028(0x0068)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                   // 0x0090(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkWindowsAdvancedInitializationSettings AdvancedSettings;                                // 0x00B8(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWindowsInitializationSettings">();
	}
	static class UAkWindowsInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWindowsInitializationSettings>();
	}
};
static_assert(alignof(UAkWindowsInitializationSettings) == 0x000008, "Wrong alignment on UAkWindowsInitializationSettings");
static_assert(sizeof(UAkWindowsInitializationSettings) == 0x0000F8, "Wrong size on UAkWindowsInitializationSettings");
static_assert(offsetof(UAkWindowsInitializationSettings, CommonSettings) == 0x000028, "Member 'UAkWindowsInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkWindowsInitializationSettings, CommunicationSettings) == 0x000090, "Member 'UAkWindowsInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkWindowsInitializationSettings, AdvancedSettings) == 0x0000B8, "Member 'UAkWindowsInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkWwiseTree
// 0x0040 (0x0148 - 0x0108)
class UAkWwiseTree final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const struct FGuid& ItemSelectedID)> OnSelectionChanged;           // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGuid& ItemDraggedID, const class FString& ItemDraggedName)> OnItemDragged; // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x20];                                     // 0x0128(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSearchText(const class FString& newText);

	class FString GetSearchText() const;
	struct FAkWwiseObjectDetails GetSelectedItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWwiseTree">();
	}
	static class UAkWwiseTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWwiseTree>();
	}
};
static_assert(alignof(UAkWwiseTree) == 0x000008, "Wrong alignment on UAkWwiseTree");
static_assert(sizeof(UAkWwiseTree) == 0x000148, "Wrong size on UAkWwiseTree");
static_assert(offsetof(UAkWwiseTree, OnSelectionChanged) == 0x000108, "Member 'UAkWwiseTree::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UAkWwiseTree, OnItemDragged) == 0x000118, "Member 'UAkWwiseTree::OnItemDragged' has a wrong offset!");

// Class AkAudio.AkWwiseTreeSelector
// 0x0060 (0x0168 - 0x0108)
class UAkWwiseTreeSelector final : public UWidget
{
public:
	TMulticastInlineDelegate<void(const struct FGuid& ItemSelectedID)> OnSelectionChanged;           // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGuid& ItemDraggedID, const class FString& ItemDraggedName)> OnItemDragged; // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x40];                                     // 0x0128(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWwiseTreeSelector">();
	}
	static class UAkWwiseTreeSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWwiseTreeSelector>();
	}
};
static_assert(alignof(UAkWwiseTreeSelector) == 0x000008, "Wrong alignment on UAkWwiseTreeSelector");
static_assert(sizeof(UAkWwiseTreeSelector) == 0x000168, "Wrong size on UAkWwiseTreeSelector");
static_assert(offsetof(UAkWwiseTreeSelector, OnSelectionChanged) == 0x000108, "Member 'UAkWwiseTreeSelector::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UAkWwiseTreeSelector, OnItemDragged) == 0x000118, "Member 'UAkWwiseTreeSelector::OnItemDragged' has a wrong offset!");

// Class AkAudio.AkXboxOneInitializationSettings
// 0x00D0 (0x00F8 - 0x0028)
class UAkXboxOneInitializationSettings final : public UObject
{
public:
	struct FAkCommonInitializationSettings        CommonSettings;                                    // 0x0028(0x0060)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkXboxOneApuHeapInitializationSettings ApuHeapSettings;                                  // 0x0088(0x0008)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                   // 0x0090(0x0028)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkXboxOneAdvancedInitializationSettings AdvancedSettings;                                // 0x00B8(0x003C)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkXboxOneInitializationSettings">();
	}
	static class UAkXboxOneInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkXboxOneInitializationSettings>();
	}
};
static_assert(alignof(UAkXboxOneInitializationSettings) == 0x000008, "Wrong alignment on UAkXboxOneInitializationSettings");
static_assert(sizeof(UAkXboxOneInitializationSettings) == 0x0000F8, "Wrong size on UAkXboxOneInitializationSettings");
static_assert(offsetof(UAkXboxOneInitializationSettings, CommonSettings) == 0x000028, "Member 'UAkXboxOneInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkXboxOneInitializationSettings, ApuHeapSettings) == 0x000088, "Member 'UAkXboxOneInitializationSettings::ApuHeapSettings' has a wrong offset!");
static_assert(offsetof(UAkXboxOneInitializationSettings, CommunicationSettings) == 0x000090, "Member 'UAkXboxOneInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkXboxOneInitializationSettings, AdvancedSettings) == 0x0000B8, "Member 'UAkXboxOneInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.InterpTrackAkAudioEvent
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackAkAudioEvent final : public UInterpTrackVectorBase
{
public:
	TArray<struct FAkAudioEventTrackKey>          Events;                                            // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bContinueEventOnMatineeEnd : 1;                    // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackAkAudioEvent">();
	}
	static class UInterpTrackAkAudioEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackAkAudioEvent>();
	}
};
static_assert(alignof(UInterpTrackAkAudioEvent) == 0x000008, "Wrong alignment on UInterpTrackAkAudioEvent");
static_assert(sizeof(UInterpTrackAkAudioEvent) == 0x0000A8, "Wrong size on UInterpTrackAkAudioEvent");
static_assert(offsetof(UInterpTrackAkAudioEvent, Events) == 0x000090, "Member 'UInterpTrackAkAudioEvent::Events' has a wrong offset!");

// Class AkAudio.InterpTrackAkAudioRTPC
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackAkAudioRTPC final : public UInterpTrackFloatBase
{
public:
	class FString                                 Param;                                             // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPlayOnReverse : 1;                                // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bContinueRTPCOnMatineeEnd : 1;                     // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackAkAudioRTPC">();
	}
	static class UInterpTrackAkAudioRTPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackAkAudioRTPC>();
	}
};
static_assert(alignof(UInterpTrackAkAudioRTPC) == 0x000008, "Wrong alignment on UInterpTrackAkAudioRTPC");
static_assert(sizeof(UInterpTrackAkAudioRTPC) == 0x0000A8, "Wrong size on UInterpTrackAkAudioRTPC");
static_assert(offsetof(UInterpTrackAkAudioRTPC, Param) == 0x000090, "Member 'UInterpTrackAkAudioRTPC::Param' has a wrong offset!");

// Class AkAudio.InterpTrackInstAkAudioEvent
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstAkAudioEvent final : public UInterpTrackInst
{
public:
	float                                         LastUpdatePosition;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstAkAudioEvent">();
	}
	static class UInterpTrackInstAkAudioEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstAkAudioEvent>();
	}
};
static_assert(alignof(UInterpTrackInstAkAudioEvent) == 0x000008, "Wrong alignment on UInterpTrackInstAkAudioEvent");
static_assert(sizeof(UInterpTrackInstAkAudioEvent) == 0x000030, "Wrong size on UInterpTrackInstAkAudioEvent");
static_assert(offsetof(UInterpTrackInstAkAudioEvent, LastUpdatePosition) == 0x000028, "Member 'UInterpTrackInstAkAudioEvent::LastUpdatePosition' has a wrong offset!");

// Class AkAudio.InterpTrackInstAkAudioRTPC
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstAkAudioRTPC final : public UInterpTrackInst
{
public:
	float                                         LastUpdatePosition;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterpTrackInstAkAudioRTPC">();
	}
	static class UInterpTrackInstAkAudioRTPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterpTrackInstAkAudioRTPC>();
	}
};
static_assert(alignof(UInterpTrackInstAkAudioRTPC) == 0x000008, "Wrong alignment on UInterpTrackInstAkAudioRTPC");
static_assert(sizeof(UInterpTrackInstAkAudioRTPC) == 0x000030, "Wrong size on UInterpTrackInstAkAudioRTPC");
static_assert(offsetof(UInterpTrackInstAkAudioRTPC, LastUpdatePosition) == 0x000028, "Member 'UInterpTrackInstAkAudioRTPC::LastUpdatePosition' has a wrong offset!");

// Class AkAudio.MovieSceneAkAudioEventSection
// 0x00E8 (0x01C8 - 0x00E0)
class UMovieSceneAkAudioEventSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_E0[0x40];                                      // 0x00E0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Event;                                             // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          RetriggerEvent;                                    // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScrubTailLengthMs;                                 // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          StopAtSectionEnd;                                  // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0138(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x20];                                     // 0x0148(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSourceDuration;                                 // 0x0168(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaxDurationSourceID;                               // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x48];                                     // 0x0180(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioEventSection">();
	}
	static class UMovieSceneAkAudioEventSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioEventSection>();
	}
};
static_assert(alignof(UMovieSceneAkAudioEventSection) == 0x000008, "Wrong alignment on UMovieSceneAkAudioEventSection");
static_assert(sizeof(UMovieSceneAkAudioEventSection) == 0x0001C8, "Wrong size on UMovieSceneAkAudioEventSection");
static_assert(offsetof(UMovieSceneAkAudioEventSection, Event) == 0x000120, "Member 'UMovieSceneAkAudioEventSection::Event' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, RetriggerEvent) == 0x000128, "Member 'UMovieSceneAkAudioEventSection::RetriggerEvent' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, ScrubTailLengthMs) == 0x00012C, "Member 'UMovieSceneAkAudioEventSection::ScrubTailLengthMs' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, StopAtSectionEnd) == 0x000130, "Member 'UMovieSceneAkAudioEventSection::StopAtSectionEnd' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, EventName) == 0x000138, "Member 'UMovieSceneAkAudioEventSection::EventName' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, MaxSourceDuration) == 0x000168, "Member 'UMovieSceneAkAudioEventSection::MaxSourceDuration' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, MaxDurationSourceID) == 0x000170, "Member 'UMovieSceneAkAudioEventSection::MaxDurationSourceID' has a wrong offset!");

}

