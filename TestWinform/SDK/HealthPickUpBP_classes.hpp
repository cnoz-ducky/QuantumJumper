#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HealthPickUpBP

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass HealthPickUpBP.HealthPickUpBP_C
// 0x0068 (0x02C0 - 0x0258)
class AHealthPickUpBP_C final : public ATWHealthPackActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Mesh_HealArea;                                     // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNGDAkComponent*                        AkHealthPickup;                                    // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Cone;                                         // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Pickup;                                       // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Base;                                         // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTWInteractableTimeline*                TWInteractableTimeline;                            // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial_Pickup;                            // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Speed;                                    // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start_Location;                                    // 0x029C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial_Cone;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HealthKitPickup_C*                  VFXActor;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPoisoned;                                        // 0x02B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_HealthPickUpBP(int32 EntryPoint);
	void BP_TriggerHealOverTime(class ATimeWatchCharacter* Character, bool bWasReSynced);
	void OnReset();
	void ReceiveBeginPlay();
	void OnHealthPickUp(class ATimeWatchCharacter* HealedCharacter, bool WasRevived);
	void BP_Authority_OnInteraction(int32 ID, class AActor* Interactor);
	void ReceiveTick(float DeltaSeconds);
	void Construction();
	void SetPoisonStatus(bool Status);
	void OnRep_IsPoisoned();
	void CosmeticOnly_UpdateColor();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HealthPickUpBP_C">();
	}
	static class AHealthPickUpBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHealthPickUpBP_C>();
	}
};
static_assert(alignof(AHealthPickUpBP_C) == 0x000008, "Wrong alignment on AHealthPickUpBP_C");
static_assert(sizeof(AHealthPickUpBP_C) == 0x0002C0, "Wrong size on AHealthPickUpBP_C");
static_assert(offsetof(AHealthPickUpBP_C, UberGraphFrame) == 0x000258, "Member 'AHealthPickUpBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, Mesh_HealArea) == 0x000260, "Member 'AHealthPickUpBP_C::Mesh_HealArea' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, AkHealthPickup) == 0x000268, "Member 'AHealthPickUpBP_C::AkHealthPickup' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, Mesh_Cone) == 0x000270, "Member 'AHealthPickUpBP_C::Mesh_Cone' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, Mesh_Pickup) == 0x000278, "Member 'AHealthPickUpBP_C::Mesh_Pickup' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, Mesh_Base) == 0x000280, "Member 'AHealthPickUpBP_C::Mesh_Base' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, TWInteractableTimeline) == 0x000288, "Member 'AHealthPickUpBP_C::TWInteractableTimeline' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, DynamicMaterial_Pickup) == 0x000290, "Member 'AHealthPickUpBP_C::DynamicMaterial_Pickup' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, Rotation_Speed) == 0x000298, "Member 'AHealthPickUpBP_C::Rotation_Speed' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, Start_Location) == 0x00029C, "Member 'AHealthPickUpBP_C::Start_Location' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, DynamicMaterial_Cone) == 0x0002A8, "Member 'AHealthPickUpBP_C::DynamicMaterial_Cone' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, VFXActor) == 0x0002B0, "Member 'AHealthPickUpBP_C::VFXActor' has a wrong offset!");
static_assert(offsetof(AHealthPickUpBP_C, IsPoisoned) == 0x0002B8, "Member 'AHealthPickUpBP_C::IsPoisoned' has a wrong offset!");

}

