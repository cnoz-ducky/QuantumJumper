#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NGDBackend

#include "Basic.hpp"

#include "NGDBackend_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Class NGDBackend.NGDBackendAccount
// 0x0690 (0x06B8 - 0x0028)
class UNGDBackendAccount final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& ServerImpostorData)> OnServerImpostorData;    // 0x0028(0x0010)(ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString)> OnLoginComplete; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString)> OnPlayerDataUpdateComplete; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString)> OnPlayerInventoryUpdateComplete; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, const class FString& SKU, int32 newCoinsAmmount)> OnPlayerBuyItemComplete; // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, const struct FNGDBackendReceivedRewards& RewardData)> OnChallengeCompletedResponse; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, TArray<struct FNGDBackendGlobalLeaderboardEntry>* LeaderboardEntries, const struct FNGDBackendGlobalLeaderboardEntry& OwnEntry)> OnGlobalLeaderboardsRequestComplete; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, const struct FNGDBackendDailyStoreData& DailyStoreData)> OnDailyStoreRequestComplete; // 0x0098(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, const struct FNGDBackendQuarkStoreData& QuarkStoreData)> OnQuarkStoreRequestComplete; // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& RedeemCodeResult, const struct FNGDBackendReceivedRewards& RewardData)> OnRedeemCodeRequestComplete; // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x40];                                      // 0x00C8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnConnectToServer;                                 // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x40];                                     // 0x0118(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString)> OnTournamentJoinComplete; // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, bool bEntryFound, const struct FNGDBackendTournamentBoardEntry& UserLeaderboardEntry)> OnTournamentGetScoreComplete; // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, bool bLeaderboardFound, const TArray<struct FNGDBackendTournamentBoardEntry>& LeaderboardEntries)> OnTournamentGetLeaderboardComplete; // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ENGDBackendServerErrorResponse Response, const class FString& ErrorCode)> OnServerErrorResponse; // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, const TArray<struct FNGDBackendNewsEntry>& NewsEntries)> OnGetPlayerNewsResult; // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, int32 OrderId, const class FString& TransactionId)> OnSteamMicroTxnStartResult; // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString, bool Authorized, int32 OrderId, const class FString& TransactionId, const struct FNGDBackendReceivedRewards& RewardData)> OnSteamMicroTxnAuthorizedResult; // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString)> OnSetRegistryComplete; // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x1E8];                                    // 0x01D8(0x01E8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InititalPollInterval;                              // 0x03C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PollIntervalMultiplier;                            // 0x03C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPollInterval;                                   // 0x03C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PollIntervalFuzz;                                  // 0x03CC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNGDBackendAccountPlayerStats          PlayerStats;                                       // 0x03D0(0x0068)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FNGDBackendPlayerBoost                 PlayerBoost;                                       // 0x0438(0x0020)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FNGDBackendRewardTrack                 RewardTrack;                                       // 0x0458(0x0040)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, struct FNGDBackendReceivedRewards> ChallengesRewards;                        // 0x0498(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E8[0x18];                                     // 0x04E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClientTravelDelay;                                 // 0x0500(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentLobbyID;                                    // 0x0508(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CurrentLobbyQueue;                                 // 0x0518(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CurrentAutoconnectRule;                            // 0x0528(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CurrentAutoconnectClientGameVersion;               // 0x0538(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CurrentAutoconnectMatchData;                       // 0x0548(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             avatar;                                            // 0x0558(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FNGDStoreItem>     CharacterStoreItemsMap;                            // 0x0560(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FNGDStoreItem>     WeaponsStoreItemsMap;                              // 0x05B0(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FNGDStoreItem>     PlayerTitleItemsMap;                               // 0x0600(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FNGDBackendItemData> BackendItemsDataMap;                             // 0x0650(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6A0[0x8];                                      // 0x06A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImpostorServerAddress;                             // 0x06A8(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AwsLatencyFake(const class FString& TargetRegion);
	void AwsLatencyPrint();
	bool CheckGameSessionStatusResponse(const class FString& BackendResult, ENGDBackendGameSessionResult ExpectedResult);
	bool CheckMatchmakingStatusResponse(const class FString& BackendResult, ENGDBackendMatchmakingResult ExpectedResult);
	void GameSessionPlacementAutoconnectStart(const class FString& PlacementId);
	void GameSessionPlacementAutoconnectStop();
	void GameSessionPlacementPoll();
	void GameSessionPlacementStop();
	void GetLeaderboardTournament();
	void GetPlayerNews();
	void GetScoreTournament();
	void JoinTournament(int32 AttemptIndex);
	void MatchmakingAutoconnectStart(const class FString& RuleName, const class FString& ClientGameVersion, const class FString& LastPlayedMap);
	void MatchmakingAutoconnectStartWithLobby(const class FString& QueueName, const class FString& LobbyID, const class FString& ClientGameVersion, const class FString& LastPlayedMap, const class FString& LobbyRuleName, const class FString& MatchData);
	void MatchmakingAutoconnectStartWithTicket(const class FString& MatchmakingTicketId);
	void MatchmakingAutoconnectStop();
	void MatchmakingAutoconnectStopWithLobby();
	void MatchmakingLobbyPoll();
	void MatchmakingPoll();
	void MatchmakingStart(const class FString& RuleName, const class FString& ClientGameVersion, const class FString& LastPlayedMap);
	void MatchmakingStop();
	void RequestDailyStore();
	void RequestDailyStoreBuy(const class FString& SKU);
	void RequestGlobalLeaderboards(int32 Start, int32 Stop, const class FString& BoardType, const class FString& MatchType, const class FString& TeamType, const class FString& Period);
	void RequestQuarksBundles();
	void SetImpostorServerAddress(const class FString& NewImpostorServerAddress);
	void UpdatePlayerData();
	void UpdatePlayerInventory();

	class FString GetAccountTicket() const;
	class FString GetPlayerName() const;
	class FString GetSavedUserName() const;
	class UTexture2D* GetUserAvatar() const;
	class FString GetUserId() const;
	int32 GetWalletBalance(const class FString& Currency) const;
	bool IsLoggedIn() const;
	bool IsMatchmaking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDBackendAccount">();
	}
	static class UNGDBackendAccount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDBackendAccount>();
	}
};
static_assert(alignof(UNGDBackendAccount) == 0x000008, "Wrong alignment on UNGDBackendAccount");
static_assert(sizeof(UNGDBackendAccount) == 0x0006B8, "Wrong size on UNGDBackendAccount");
static_assert(offsetof(UNGDBackendAccount, OnServerImpostorData) == 0x000028, "Member 'UNGDBackendAccount::OnServerImpostorData' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnLoginComplete) == 0x000038, "Member 'UNGDBackendAccount::OnLoginComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnPlayerDataUpdateComplete) == 0x000048, "Member 'UNGDBackendAccount::OnPlayerDataUpdateComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnPlayerInventoryUpdateComplete) == 0x000058, "Member 'UNGDBackendAccount::OnPlayerInventoryUpdateComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnPlayerBuyItemComplete) == 0x000068, "Member 'UNGDBackendAccount::OnPlayerBuyItemComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnChallengeCompletedResponse) == 0x000078, "Member 'UNGDBackendAccount::OnChallengeCompletedResponse' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnGlobalLeaderboardsRequestComplete) == 0x000088, "Member 'UNGDBackendAccount::OnGlobalLeaderboardsRequestComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnDailyStoreRequestComplete) == 0x000098, "Member 'UNGDBackendAccount::OnDailyStoreRequestComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnQuarkStoreRequestComplete) == 0x0000A8, "Member 'UNGDBackendAccount::OnQuarkStoreRequestComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnRedeemCodeRequestComplete) == 0x0000B8, "Member 'UNGDBackendAccount::OnRedeemCodeRequestComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnConnectToServer) == 0x000108, "Member 'UNGDBackendAccount::OnConnectToServer' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnTournamentJoinComplete) == 0x000158, "Member 'UNGDBackendAccount::OnTournamentJoinComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnTournamentGetScoreComplete) == 0x000168, "Member 'UNGDBackendAccount::OnTournamentGetScoreComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnTournamentGetLeaderboardComplete) == 0x000178, "Member 'UNGDBackendAccount::OnTournamentGetLeaderboardComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnServerErrorResponse) == 0x000188, "Member 'UNGDBackendAccount::OnServerErrorResponse' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnGetPlayerNewsResult) == 0x000198, "Member 'UNGDBackendAccount::OnGetPlayerNewsResult' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnSteamMicroTxnStartResult) == 0x0001A8, "Member 'UNGDBackendAccount::OnSteamMicroTxnStartResult' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnSteamMicroTxnAuthorizedResult) == 0x0001B8, "Member 'UNGDBackendAccount::OnSteamMicroTxnAuthorizedResult' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, OnSetRegistryComplete) == 0x0001C8, "Member 'UNGDBackendAccount::OnSetRegistryComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, InititalPollInterval) == 0x0003C0, "Member 'UNGDBackendAccount::InititalPollInterval' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, PollIntervalMultiplier) == 0x0003C4, "Member 'UNGDBackendAccount::PollIntervalMultiplier' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, MaxPollInterval) == 0x0003C8, "Member 'UNGDBackendAccount::MaxPollInterval' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, PollIntervalFuzz) == 0x0003CC, "Member 'UNGDBackendAccount::PollIntervalFuzz' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, PlayerStats) == 0x0003D0, "Member 'UNGDBackendAccount::PlayerStats' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, PlayerBoost) == 0x000438, "Member 'UNGDBackendAccount::PlayerBoost' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, RewardTrack) == 0x000458, "Member 'UNGDBackendAccount::RewardTrack' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, ChallengesRewards) == 0x000498, "Member 'UNGDBackendAccount::ChallengesRewards' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, ClientTravelDelay) == 0x000500, "Member 'UNGDBackendAccount::ClientTravelDelay' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, CurrentLobbyID) == 0x000508, "Member 'UNGDBackendAccount::CurrentLobbyID' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, CurrentLobbyQueue) == 0x000518, "Member 'UNGDBackendAccount::CurrentLobbyQueue' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, CurrentAutoconnectRule) == 0x000528, "Member 'UNGDBackendAccount::CurrentAutoconnectRule' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, CurrentAutoconnectClientGameVersion) == 0x000538, "Member 'UNGDBackendAccount::CurrentAutoconnectClientGameVersion' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, CurrentAutoconnectMatchData) == 0x000548, "Member 'UNGDBackendAccount::CurrentAutoconnectMatchData' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, avatar) == 0x000558, "Member 'UNGDBackendAccount::avatar' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, CharacterStoreItemsMap) == 0x000560, "Member 'UNGDBackendAccount::CharacterStoreItemsMap' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, WeaponsStoreItemsMap) == 0x0005B0, "Member 'UNGDBackendAccount::WeaponsStoreItemsMap' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, PlayerTitleItemsMap) == 0x000600, "Member 'UNGDBackendAccount::PlayerTitleItemsMap' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, BackendItemsDataMap) == 0x000650, "Member 'UNGDBackendAccount::BackendItemsDataMap' has a wrong offset!");
static_assert(offsetof(UNGDBackendAccount, ImpostorServerAddress) == 0x0006A8, "Member 'UNGDBackendAccount::ImpostorServerAddress' has a wrong offset!");

// Class NGDBackend.NGDBackendLobby
// 0x00F8 (0x0120 - 0x0028)
class UNGDBackendLobby final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& ErrorString)> OnRequestError;                 // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUpdateReceived;                                  // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInvitedToTeam;                                   // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTeamUpdated;                                     // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGameStarted;                                     // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInviteDeclined;                                  // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x44];                                      // 0x0088(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PollInterval;                                      // 0x00CC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FLobbyPlayerInfo>               PlayerList;                                        // 0x00D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLobbyPlayerInfo>               TeamList;                                          // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FString                                 InvitedTeamId;                                     // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CurrentTeamId;                                     // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MatchmakingTicket;                                 // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AcceptTeamInvite();
	void ExitLobby();
	void InvitePlayerToTeam(const class FString& UserId);
	void StartGame();
	void StartLobby(const class FString& UserName);

	bool IsTeamOwner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDBackendLobby">();
	}
	static class UNGDBackendLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDBackendLobby>();
	}
};
static_assert(alignof(UNGDBackendLobby) == 0x000008, "Wrong alignment on UNGDBackendLobby");
static_assert(sizeof(UNGDBackendLobby) == 0x000120, "Wrong size on UNGDBackendLobby");
static_assert(offsetof(UNGDBackendLobby, OnRequestError) == 0x000028, "Member 'UNGDBackendLobby::OnRequestError' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, OnUpdateReceived) == 0x000038, "Member 'UNGDBackendLobby::OnUpdateReceived' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, OnInvitedToTeam) == 0x000048, "Member 'UNGDBackendLobby::OnInvitedToTeam' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, OnTeamUpdated) == 0x000058, "Member 'UNGDBackendLobby::OnTeamUpdated' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, OnGameStarted) == 0x000068, "Member 'UNGDBackendLobby::OnGameStarted' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, OnInviteDeclined) == 0x000078, "Member 'UNGDBackendLobby::OnInviteDeclined' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, PollInterval) == 0x0000CC, "Member 'UNGDBackendLobby::PollInterval' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, PlayerList) == 0x0000D0, "Member 'UNGDBackendLobby::PlayerList' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, TeamList) == 0x0000E0, "Member 'UNGDBackendLobby::TeamList' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, InvitedTeamId) == 0x0000F0, "Member 'UNGDBackendLobby::InvitedTeamId' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, CurrentTeamId) == 0x000100, "Member 'UNGDBackendLobby::CurrentTeamId' has a wrong offset!");
static_assert(offsetof(UNGDBackendLobby, MatchmakingTicket) == 0x000110, "Member 'UNGDBackendLobby::MatchmakingTicket' has a wrong offset!");

// Class NGDBackend.NGDBackendServer
// 0x0040 (0x0068 - 0x0028)
class UNGDBackendServer final : public UObject
{
public:
	TMulticastInlineDelegate<void(const struct FUniqueNetIdRepl& PlayerStateUniqueId, const class FString& AccountTicket, const class FString& UserId, int32 CoinBalance, const class FString& UserName, bool bWasSuccessful, const class FString& ErrorString, int32 AttemptIndex)> OnValidateAccountComplete; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful, const class FString& ErrorString)> OnUpdateBalanceComplete; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& MatchResultJsonString, bool bWasSuccessful, const class FString& ErrorString)> OnUpdateMatchResultComplete; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDBackendServer">();
	}
	static class UNGDBackendServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDBackendServer>();
	}
};
static_assert(alignof(UNGDBackendServer) == 0x000008, "Wrong alignment on UNGDBackendServer");
static_assert(sizeof(UNGDBackendServer) == 0x000068, "Wrong size on UNGDBackendServer");
static_assert(offsetof(UNGDBackendServer, OnValidateAccountComplete) == 0x000028, "Member 'UNGDBackendServer::OnValidateAccountComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendServer, OnUpdateBalanceComplete) == 0x000038, "Member 'UNGDBackendServer::OnUpdateBalanceComplete' has a wrong offset!");
static_assert(offsetof(UNGDBackendServer, OnUpdateMatchResultComplete) == 0x000048, "Member 'UNGDBackendServer::OnUpdateMatchResultComplete' has a wrong offset!");

}

