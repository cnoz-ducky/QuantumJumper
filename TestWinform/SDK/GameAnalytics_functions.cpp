#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameAnalytics

#include "Basic.hpp"

#include "GameAnalytics_classes.hpp"
#include "GameAnalytics_parameters.hpp"


namespace SDK
{

// Function GameAnalytics.GameAnalytics.AddAdEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAAdAction                             Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGAAdType                               adType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    adSdkName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    adPlacement                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddAdEvent(EGAAdAction Action, EGAAdType adType, const class FString& adSdkName, const class FString& adPlacement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddAdEvent");

	Params::GameAnalytics_AddAdEvent Parms{};

	Parms.Action = Action;
	Parms.adType = adType;
	Parms.adSdkName = std::move(adSdkName);
	Parms.adPlacement = std::move(adPlacement);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddAdEventWithDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAAdAction                             Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGAAdType                               adType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    adSdkName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    adPlacement                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddAdEventWithDuration(EGAAdAction Action, EGAAdType adType, const class FString& adSdkName, const class FString& adPlacement, int64 Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddAdEventWithDuration");

	Params::GameAnalytics_AddAdEventWithDuration Parms{};

	Parms.Action = Action;
	Parms.adType = adType;
	Parms.adSdkName = std::move(adSdkName);
	Parms.adPlacement = std::move(adPlacement);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddAdEventWithNoAdReason
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAAdAction                             Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGAAdType                               adType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    adSdkName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    adPlacement                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGAAdError                              noAdReason                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddAdEventWithNoAdReason(EGAAdAction Action, EGAAdType adType, const class FString& adSdkName, const class FString& adPlacement, EGAAdError noAdReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddAdEventWithNoAdReason");

	Params::GameAnalytics_AddAdEventWithNoAdReason Parms{};

	Parms.Action = Action;
	Parms.adType = adType;
	Parms.adSdkName = std::move(adSdkName);
	Parms.adPlacement = std::move(adPlacement);
	Parms.noAdReason = noAdReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddBusinessEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CartType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddBusinessEvent(const class FString& Currency, int32 Amount, const class FString& ItemType, const class FString& ItemId, const class FString& CartType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddBusinessEvent");

	Params::GameAnalytics_AddBusinessEvent Parms{};

	Parms.Currency = std::move(Currency);
	Parms.Amount = Amount;
	Parms.ItemType = std::move(ItemType);
	Parms.ItemId = std::move(ItemId);
	Parms.CartType = std::move(CartType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddBusinessEventAndAutoFetchReceipt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CartType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddBusinessEventAndAutoFetchReceipt(const class FString& Currency, int32 Amount, const class FString& ItemType, const class FString& ItemId, const class FString& CartType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddBusinessEventAndAutoFetchReceipt");

	Params::GameAnalytics_AddBusinessEventAndAutoFetchReceipt Parms{};

	Parms.Currency = std::move(Currency);
	Parms.Amount = Amount;
	Parms.ItemType = std::move(ItemType);
	Parms.ItemId = std::move(ItemId);
	Parms.CartType = std::move(CartType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddBusinessEventAndroid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CartType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Receipt                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Signature                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddBusinessEventAndroid(const class FString& Currency, int32 Amount, const class FString& ItemType, const class FString& ItemId, const class FString& CartType, const class FString& Receipt, const class FString& Signature)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddBusinessEventAndroid");

	Params::GameAnalytics_AddBusinessEventAndroid Parms{};

	Parms.Currency = std::move(Currency);
	Parms.Amount = Amount;
	Parms.ItemType = std::move(ItemType);
	Parms.ItemId = std::move(ItemId);
	Parms.CartType = std::move(CartType);
	Parms.Receipt = std::move(Receipt);
	Parms.Signature = std::move(Signature);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddBusinessEventIOS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CartType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Receipt                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddBusinessEventIOS(const class FString& Currency, int32 Amount, const class FString& ItemType, const class FString& ItemId, const class FString& CartType, const class FString& Receipt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddBusinessEventIOS");

	Params::GameAnalytics_AddBusinessEventIOS Parms{};

	Parms.Currency = std::move(Currency);
	Parms.Amount = Amount;
	Parms.ItemType = std::move(ItemType);
	Parms.ItemId = std::move(ItemId);
	Parms.CartType = std::move(CartType);
	Parms.Receipt = std::move(Receipt);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddDesignEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    EventId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddDesignEvent(const class FString& EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddDesignEvent");

	Params::GameAnalytics_AddDesignEvent Parms{};

	Parms.EventId = std::move(EventId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddDesignEventWithValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    EventId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddDesignEventWithValue(const class FString& EventId, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddDesignEventWithValue");

	Params::GameAnalytics_AddDesignEventWithValue Parms{};

	Parms.EventId = std::move(EventId);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddErrorEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAErrorSeverity                        Severity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddErrorEvent(EGAErrorSeverity Severity, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddErrorEvent");

	Params::GameAnalytics_AddErrorEvent Parms{};

	Parms.Severity = Severity;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOne
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAProgressionStatus                    ProgressionStatus                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression01                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddProgressionEventWithOne(EGAProgressionStatus ProgressionStatus, const class FString& Progression01)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddProgressionEventWithOne");

	Params::GameAnalytics_AddProgressionEventWithOne Parms{};

	Parms.ProgressionStatus = ProgressionStatus;
	Parms.Progression01 = std::move(Progression01);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneAndScore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAProgressionStatus                    ProgressionStatus                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression01                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddProgressionEventWithOneAndScore(EGAProgressionStatus ProgressionStatus, const class FString& Progression01, int32 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddProgressionEventWithOneAndScore");

	Params::GameAnalytics_AddProgressionEventWithOneAndScore Parms{};

	Parms.ProgressionStatus = ProgressionStatus;
	Parms.Progression01 = std::move(Progression01);
	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneAndTwo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAProgressionStatus                    ProgressionStatus                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression01                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression02                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddProgressionEventWithOneAndTwo(EGAProgressionStatus ProgressionStatus, const class FString& Progression01, const class FString& Progression02)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddProgressionEventWithOneAndTwo");

	Params::GameAnalytics_AddProgressionEventWithOneAndTwo Parms{};

	Parms.ProgressionStatus = ProgressionStatus;
	Parms.Progression01 = std::move(Progression01);
	Parms.Progression02 = std::move(Progression02);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoAndScore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAProgressionStatus                    ProgressionStatus                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression01                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression02                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddProgressionEventWithOneTwoAndScore(EGAProgressionStatus ProgressionStatus, const class FString& Progression01, const class FString& Progression02, int32 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddProgressionEventWithOneTwoAndScore");

	Params::GameAnalytics_AddProgressionEventWithOneTwoAndScore Parms{};

	Parms.ProgressionStatus = ProgressionStatus;
	Parms.Progression01 = std::move(Progression01);
	Parms.Progression02 = std::move(Progression02);
	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoAndThree
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAProgressionStatus                    ProgressionStatus                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression01                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression02                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression03                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddProgressionEventWithOneTwoAndThree(EGAProgressionStatus ProgressionStatus, const class FString& Progression01, const class FString& Progression02, const class FString& Progression03)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddProgressionEventWithOneTwoAndThree");

	Params::GameAnalytics_AddProgressionEventWithOneTwoAndThree Parms{};

	Parms.ProgressionStatus = ProgressionStatus;
	Parms.Progression01 = std::move(Progression01);
	Parms.Progression02 = std::move(Progression02);
	Parms.Progression03 = std::move(Progression03);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoThreeAndScore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAProgressionStatus                    ProgressionStatus                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression01                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression02                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Progression03                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddProgressionEventWithOneTwoThreeAndScore(EGAProgressionStatus ProgressionStatus, const class FString& Progression01, const class FString& Progression02, const class FString& Progression03, int32 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddProgressionEventWithOneTwoThreeAndScore");

	Params::GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore Parms{};

	Parms.ProgressionStatus = ProgressionStatus;
	Parms.Progression01 = std::move(Progression01);
	Parms.Progression02 = std::move(Progression02);
	Parms.Progression03 = std::move(Progression03);
	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.AddResourceEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGAResourceFlowType                     FlowType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::AddResourceEvent(EGAResourceFlowType FlowType, const class FString& Currency, float Amount, const class FString& ItemType, const class FString& ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "AddResourceEvent");

	Params::GameAnalytics_AddResourceEvent Parms{};

	Parms.FlowType = FlowType;
	Parms.Currency = std::move(Currency);
	Parms.Amount = Amount;
	Parms.ItemType = std::move(ItemType);
	Parms.ItemId = std::move(ItemId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.GetABTestingId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGameAnalytics::GetABTestingId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "GetABTestingId");

	Params::GameAnalytics_GetABTestingId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameAnalytics.GameAnalytics.GetABTestingVariantId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGameAnalytics::GetABTestingVariantId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "GetABTestingVariantId");

	Params::GameAnalytics_GetABTestingVariantId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameAnalytics.GameAnalytics.GetRemoteConfigsContentAsString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGameAnalytics::GetRemoteConfigsContentAsString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "GetRemoteConfigsContentAsString");

	Params::GameAnalytics_GetRemoteConfigsContentAsString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameAnalytics.GameAnalytics.GetRemoteConfigsValueAsString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGameAnalytics::GetRemoteConfigsValueAsString(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "GetRemoteConfigsValueAsString");

	Params::GameAnalytics_GetRemoteConfigsValueAsString Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameAnalytics.GameAnalytics.GetRemoteConfigsValueAsStringWithDefaultValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DefaultValue                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGameAnalytics::GetRemoteConfigsValueAsStringWithDefaultValue(const class FString& Key, const class FString& DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "GetRemoteConfigsValueAsStringWithDefaultValue");

	Params::GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue Parms{};

	Parms.Key = std::move(Key);
	Parms.DefaultValue = std::move(DefaultValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameAnalytics.GameAnalytics.IsRemoteConfigsReady
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameAnalytics::IsRemoteConfigsReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "IsRemoteConfigsReady");

	Params::GameAnalytics_IsRemoteConfigsReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameAnalytics.GameAnalytics.OnQuit
// (Final, Native, Static, Public, BlueprintCallable)

void UGameAnalytics::OnQuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "OnQuit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.SetCustomDimension01
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CustomDimension                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::SetCustomDimension01(const class FString& CustomDimension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "SetCustomDimension01");

	Params::GameAnalytics_SetCustomDimension01 Parms{};

	Parms.CustomDimension = std::move(CustomDimension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.SetCustomDimension02
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CustomDimension                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::SetCustomDimension02(const class FString& CustomDimension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "SetCustomDimension02");

	Params::GameAnalytics_SetCustomDimension02 Parms{};

	Parms.CustomDimension = std::move(CustomDimension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameAnalytics.GameAnalytics.SetCustomDimension03
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CustomDimension                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameAnalytics::SetCustomDimension03(const class FString& CustomDimension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameAnalytics", "SetCustomDimension03");

	Params::GameAnalytics_SetCustomDimension03 Parms{};

	Parms.CustomDimension = std::move(CustomDimension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

