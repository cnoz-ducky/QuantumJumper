#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TimeWatch

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "TimeWatch_parameters.hpp"


namespace SDK
{

// Function TimeWatch.TWItemDataAsset.GetDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTWItemDataAsset::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWItemDataAsset", "GetDisplayName");

	Params::TWItemDataAsset_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilityTargetActor.CancelTargeting
// (Native, Public, BlueprintCallable)

void ATWGameplayAbilityTargetActor::CancelTargeting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilityTargetActor", "CancelTargeting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayAbilityTargetActor.ConfirmTargeting
// (Native, Public, BlueprintCallable)

void ATWGameplayAbilityTargetActor::ConfirmTargeting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilityTargetActor", "ConfirmTargeting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayAbilityTargetActor.GenericAxisChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWGameplayAbilityTargetActor::GenericAxisChanged(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilityTargetActor", "GenericAxisChanged");

	Params::TWGameplayAbilityTargetActor_GenericAxisChanged Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWGameplayAbilityTargetActor.OnGenericLocalCancel
// (Native, Event, Public, BlueprintEvent)

void ATWGameplayAbilityTargetActor::OnGenericLocalCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilityTargetActor", "OnGenericLocalCancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayAbilityTargetActor.OnGenericLocalConfirm
// (Native, Event, Public, BlueprintEvent)

void ATWGameplayAbilityTargetActor::OnGenericLocalConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilityTargetActor", "OnGenericLocalConfirm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayAbilityTargetActor.StartTargeting
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UTWAbility*                       Ability                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWGameplayAbilityTargetActor::StartTargeting(class UTWAbility* Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilityTargetActor", "StartTargeting");

	Params::TWGameplayAbilityTargetActor_StartTargeting Parms{};

	Parms.Ability = Ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.Actuate.Animate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   InAnimDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InInitialState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFinalState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTween*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTween* AActuate::Animate(float InAnimDuration, float InInitialState, float InFinalState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Actuate", "Animate");

	Params::Actuate_Animate Parms{};

	Parms.InAnimDuration = InAnimDuration;
	Parms.InInitialState = InInitialState;
	Parms.InFinalState = InFinalState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.AutomaticTurretBase.OnShootTriggerOverlapBegin
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AAutomaticTurretBase::OnShootTriggerOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutomaticTurretBase", "OnShootTriggerOverlapBegin");

	Params::AutomaticTurretBase_OnShootTriggerOverlapBegin Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.AutomaticTurretBase.OnShootTriggerOverlapEnd
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAutomaticTurretBase::OnShootTriggerOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutomaticTurretBase", "OnShootTriggerOverlapEnd");

	Params::AutomaticTurretBase_OnShootTriggerOverlapEnd Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.AutomaticTurretBase.GetRelativeCooldown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AAutomaticTurretBase::GetRelativeCooldown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AutomaticTurretBase", "GetRelativeCooldown");

	Params::AutomaticTurretBase_GetRelativeCooldown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameModeBase.OnSeamlessTravelPlayerReady
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFluxPlayerController*            Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameModeBase::OnSeamlessTravelPlayerReady(class AFluxPlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameModeBase", "OnSeamlessTravelPlayerReady");

	Params::TimeWatchGameModeBase_OnSeamlessTravelPlayerReady Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TimeWatchGameMode.GetScoreIncrement
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameMode::GetScoreIncrement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameMode", "GetScoreIncrement");

	Params::TimeWatchGameMode_GetScoreIncrement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameMode.MatchResultUpdateCompleted
// (Final, Native, Protected)
// Parameters:
// const class FString&                    MatchResultJsonString                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameMode::MatchResultUpdateCompleted(const class FString& MatchResultJsonString, bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameMode", "MatchResultUpdateCompleted");

	Params::TimeWatchGameMode_MatchResultUpdateCompleted Parms{};

	Parms.MatchResultJsonString = std::move(MatchResultJsonString);
	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameMode.OnGameReadyCoolDownCompleted
// (Final, Native, Protected)

void ATimeWatchGameMode::OnGameReadyCoolDownCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameMode", "OnGameReadyCoolDownCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameMode.ProcessTWEvent
// (Final, Native, Protected)
// Parameters:
// class UTimeWatchEvent*                  Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameMode::ProcessTWEvent(class UTimeWatchEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameMode", "ProcessTWEvent");

	Params::TimeWatchGameMode_ProcessTWEvent Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameMode.SetupNewPlayer
// (Native, Protected)
// Parameters:
// class APlayerController*                NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameMode::SetupNewPlayer(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameMode", "SetupNewPlayer");

	Params::TimeWatchGameMode_SetupNewPlayer Parms{};

	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameMode.SwitchToSpectatorMode
// (Native, Public)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameMode::SwitchToSpectatorMode(class APlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameMode", "SwitchToSpectatorMode");

	Params::TimeWatchGameMode_SwitchToSpectatorMode Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameMode.GetScoringTeamID
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameMode::GetScoringTeamID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameMode", "GetScoringTeamID");

	Params::TimeWatchGameMode_GetScoringTeamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameMode.GetTWGameState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchGameState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchGameState* ATimeWatchGameMode::GetTWGameState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameMode", "GetTWGameState");

	Params::TimeWatchGameMode_GetTWGameState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.BenchmarkGameMode.BenchMarkEnd
// (Event, Protected, BlueprintEvent)

void ABenchmarkGameMode::BenchMarkEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BenchmarkGameMode", "BenchMarkEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.BenchmarkGameMode.BenchMarkStart
// (Event, Protected, BlueprintEvent)

void ABenchmarkGameMode::BenchMarkStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BenchmarkGameMode", "BenchMarkStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWGameplayAbilitySystem.AbilityCustomDataFromTargetActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class AActor*>&            TargetActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTWAbilityCustomDataHandle       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTWAbilityCustomDataHandle UTWGameplayAbilitySystem::AbilityCustomDataFromTargetActors(const TArray<class AActor*>& TargetActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayAbilitySystem", "AbilityCustomDataFromTargetActors");

	Params::TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors Parms{};

	Parms.TargetActors = std::move(TargetActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilitySystem.AbilityCustomDataFromVectors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<struct FVector>&           InVectors                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTWAbilityCustomDataHandle       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTWAbilityCustomDataHandle UTWGameplayAbilitySystem::AbilityCustomDataFromVectors(const TArray<struct FVector>& InVectors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayAbilitySystem", "AbilityCustomDataFromVectors");

	Params::TWGameplayAbilitySystem_AbilityCustomDataFromVectors Parms{};

	Parms.InVectors = std::move(InVectors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilitySystem.CopyDataToHandle_TargetActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTWAbilityCustomDataHandle&      InDataHandle                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTWAbilityCustomDataHandle*      OutDataHandle                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// const struct FTWAbilityCustomData_TargetActors&InData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWGameplayAbilitySystem::CopyDataToHandle_TargetActors(struct FTWAbilityCustomDataHandle& InDataHandle, struct FTWAbilityCustomDataHandle* OutDataHandle, const struct FTWAbilityCustomData_TargetActors& InData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayAbilitySystem", "CopyDataToHandle_TargetActors");

	Params::TWGameplayAbilitySystem_CopyDataToHandle_TargetActors Parms{};

	Parms.InDataHandle = std::move(InDataHandle);
	Parms.InData = std::move(InData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InDataHandle = std::move(Parms.InDataHandle);

	if (OutDataHandle != nullptr)
		*OutDataHandle = std::move(Parms.OutDataHandle);

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilitySystem.CopyDataToHandle_Vectors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTWAbilityCustomDataHandle&      InDataHandle                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTWAbilityCustomDataHandle*      OutDataHandle                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// const struct FTWAbilityCustomData_Vectors&InData                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWGameplayAbilitySystem::CopyDataToHandle_Vectors(struct FTWAbilityCustomDataHandle& InDataHandle, struct FTWAbilityCustomDataHandle* OutDataHandle, const struct FTWAbilityCustomData_Vectors& InData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayAbilitySystem", "CopyDataToHandle_Vectors");

	Params::TWGameplayAbilitySystem_CopyDataToHandle_Vectors Parms{};

	Parms.InDataHandle = std::move(InDataHandle);
	Parms.InData = std::move(InData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InDataHandle = std::move(Parms.InDataHandle);

	if (OutDataHandle != nullptr)
		*OutDataHandle = std::move(Parms.OutDataHandle);

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilitySystem.GetDataCopyFromHandle_TargetActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTWAbilityCustomDataHandle&InDataHandle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FTWAbilityCustomData_TargetActors>*OutData                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWGameplayAbilitySystem::GetDataCopyFromHandle_TargetActors(const struct FTWAbilityCustomDataHandle& InDataHandle, TArray<struct FTWAbilityCustomData_TargetActors>* OutData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayAbilitySystem", "GetDataCopyFromHandle_TargetActors");

	Params::TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors Parms{};

	Parms.InDataHandle = std::move(InDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutData != nullptr)
		*OutData = std::move(Parms.OutData);

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilitySystem.GetDataCopyFromHandle_Vectors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTWAbilityCustomDataHandle&InDataHandle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FTWAbilityCustomData_Vectors>*OutData                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWGameplayAbilitySystem::GetDataCopyFromHandle_Vectors(const struct FTWAbilityCustomDataHandle& InDataHandle, TArray<struct FTWAbilityCustomData_Vectors>* OutData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayAbilitySystem", "GetDataCopyFromHandle_Vectors");

	Params::TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors Parms{};

	Parms.InDataHandle = std::move(InDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutData != nullptr)
		*OutData = std::move(Parms.OutData);

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilitySystem.ShouldTriggerLogic
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTWGameplayAbilitySystem*         TWAbilitySystem                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATimeWatchCharacter*              CasterAvatar                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTWAbilityCustomDataHandle&AbilityDataHandle                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWGameplayAbilitySystem::ShouldTriggerLogic(class UTWGameplayAbilitySystem* TWAbilitySystem, class ATimeWatchCharacter* CasterAvatar, const struct FTWAbilityCustomDataHandle& AbilityDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayAbilitySystem", "ShouldTriggerLogic");

	Params::TWGameplayAbilitySystem_ShouldTriggerLogic Parms{};

	Parms.TWAbilitySystem = TWAbilitySystem;
	Parms.CasterAvatar = CasterAvatar;
	Parms.AbilityDataHandle = std::move(AbilityDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilitySystem.GetAbilityExecutionData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTWAbilityCustomDataHandle&AbilityDataHandle                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTWAbilityExecutionData          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FTWAbilityExecutionData UTWGameplayAbilitySystem::GetAbilityExecutionData(const struct FTWAbilityCustomDataHandle& AbilityDataHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilitySystem", "GetAbilityExecutionData");

	Params::TWGameplayAbilitySystem_GetAbilityExecutionData Parms{};

	Parms.AbilityDataHandle = std::move(AbilityDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilitySystem.GetAbilityTargets
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTWAbilityCustomDataHandle&AbilityDataHandle                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UTWGameplayAbilitySystem::GetAbilityTargets(const struct FTWAbilityCustomDataHandle& AbilityDataHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilitySystem", "GetAbilityTargets");

	Params::TWGameplayAbilitySystem_GetAbilityTargets Parms{};

	Parms.AbilityDataHandle = std::move(AbilityDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchHUD.CleanTWADSEvents
// (Final, Native, Public)

void ATimeWatchHUD::CleanTWADSEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "CleanTWADSEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.CloseChat
// (Final, Native, Public, BlueprintCallable)

void ATimeWatchHUD::CloseChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "CloseChat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.GetCrosshairClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UNGDCrosshairWidget>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UNGDCrosshairWidget> ATimeWatchHUD::GetCrosshairClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "GetCrosshairClass");

	Params::TimeWatchHUD_GetCrosshairClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchHUD.GetCrosshairWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNGDCrosshairWidget*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNGDCrosshairWidget* ATimeWatchHUD::GetCrosshairWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "GetCrosshairWidget");

	Params::TimeWatchHUD_GetCrosshairWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchHUD.HideTWCrossHair
// (Native, Public, BlueprintCallable)

void ATimeWatchHUD::HideTWCrossHair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "HideTWCrossHair");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.InitializeTWHUD
// (Native, Public)

void ATimeWatchHUD::InitializeTWHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "InitializeTWHUD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnChatMessagePostRequested
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      TextMessage                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EChatChannel                            Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::OnChatMessagePostRequested(const class FText& TextMessage, EChatChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnChatMessagePostRequested");

	Params::TimeWatchHUD_OnChatMessagePostRequested Parms{};

	Parms.TextMessage = std::move(TextMessage);
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnEnemyKilled
// (Final, Native, Public)
// Parameters:
// class ATimeWatchCharacter*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::OnEnemyKilled(class ATimeWatchCharacter* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnEnemyKilled");

	Params::TimeWatchHUD_OnEnemyKilled Parms{};

	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnHittingCharacter
// (Final, Native, Public)
// Parameters:
// class AActor*                           InHittedActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InHittedBone                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMeleeHit                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::OnHittingCharacter(class AActor* InHittedActor, class FName InHittedBone, bool bIsMeleeHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnHittingCharacter");

	Params::TimeWatchHUD_OnHittingCharacter Parms{};

	Parms.InHittedActor = InHittedActor;
	Parms.InHittedBone = InHittedBone;
	Parms.bIsMeleeHit = bIsMeleeHit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnPlayerHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FVector&                   HitDirection                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsCritical                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::OnPlayerHit(const struct FVector& HitDirection, const bool IsCritical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnPlayerHit");

	Params::TimeWatchHUD_OnPlayerHit Parms{};

	Parms.HitDirection = std::move(HitDirection);
	Parms.IsCritical = IsCritical;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnStateChanged
// (Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::OnStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnStateChanged");

	Params::TimeWatchHUD_OnStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnStatePresented
// (Final, Native, Protected)
// Parameters:
// class UNGDHUDState*                     PresentedState                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::OnStatePresented(class UNGDHUDState* PresentedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnStatePresented");

	Params::TimeWatchHUD_OnStatePresented Parms{};

	Parms.PresentedState = PresentedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnTeamScoredPoint
// (Native, Protected)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::OnTeamScoredPoint(int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnTeamScoredPoint");

	Params::TimeWatchHUD_OnTeamScoredPoint Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnTWExplosion
// (Final, Native, Public)
// Parameters:
// class AActor*                           InOwner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::OnTWExplosion(class AActor* InOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnTWExplosion");

	Params::TimeWatchHUD_OnTWExplosion Parms{};

	Parms.InOwner = InOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OnVictoryConditionReached
// (Native, Protected)

void ATimeWatchHUD::OnVictoryConditionReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OnVictoryConditionReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.OpenChat
// (Final, Native, Public, BlueprintCallable)

void ATimeWatchHUD::OpenChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "OpenChat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.PushGameEndScreen
// (Final, Native, Protected)

void ATimeWatchHUD::PushGameEndScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "PushGameEndScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.PushMatchResultsScreen
// (Final, Native, Protected)

void ATimeWatchHUD::PushMatchResultsScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "PushMatchResultsScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.RefreshChatStatus
// (Final, Native, Public, BlueprintCallable)

void ATimeWatchHUD::RefreshChatStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "RefreshChatStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.RefreshCrosshairColor
// (Final, Native, Public, BlueprintCallable)

void ATimeWatchHUD::RefreshCrosshairColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "RefreshCrosshairColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.RegisterTWADSEvents
// (Final, Native, Public)
// Parameters:
// class ATimeWatchCharacter*              TWCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::RegisterTWADSEvents(class ATimeWatchCharacter* TWCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "RegisterTWADSEvents");

	Params::TimeWatchHUD_RegisterTWADSEvents Parms{};

	Parms.TWCharacter = TWCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.SetCrosshair
// (Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UNGDCrosshairWidget>  WeaponCrosshairClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::SetCrosshair(TSubclassOf<class UNGDCrosshairWidget> WeaponCrosshairClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "SetCrosshair");

	Params::TimeWatchHUD_SetCrosshair Parms{};

	Parms.WeaponCrosshairClass = WeaponCrosshairClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.SetOthersWantsRematch
// (Final, Native, Protected)
// Parameters:
// bool                                    bOtherWantsRematch                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchHUD::SetOthersWantsRematch(bool bOtherWantsRematch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "SetOthersWantsRematch");

	Params::TimeWatchHUD_SetOthersWantsRematch Parms{};

	Parms.bOtherWantsRematch = bOtherWantsRematch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.ShowMatchResults
// (Native, Protected)

void ATimeWatchHUD::ShowMatchResults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "ShowMatchResults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.ShowTWCrossHair
// (Native, Public, BlueprintCallable)

void ATimeWatchHUD::ShowTWCrossHair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "ShowTWCrossHair");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.VoidRematch
// (Final, Native, Protected)

void ATimeWatchHUD::VoidRematch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "VoidRematch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchHUD.GetCurrentWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATemporalWeapon*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATemporalWeapon* ATimeWatchHUD::GetCurrentWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "GetCurrentWeapon");

	Params::TimeWatchHUD_GetCurrentWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchHUD.GetTWCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* ATimeWatchHUD::GetTWCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "GetTWCharacter");

	Params::TimeWatchHUD_GetTWCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchHUD.GetTWGameState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchGameState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchGameState* ATimeWatchHUD::GetTWGameState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchHUD", "GetTWGameState");

	Params::TimeWatchHUD_GetTWGameState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.ChatWidget.OnChatClosed
// (Event, Protected, BlueprintEvent)

void UChatWidget::OnChatClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "OnChatClosed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.ChatWidget.OnChatOpened
// (Event, Protected, BlueprintEvent)

void UChatWidget::OnChatOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "OnChatOpened");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.ChatWidget.OnMessageEntered
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChatWidget::OnMessageEntered(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "OnMessageEntered");

	Params::ChatWidget_OnMessageEntered Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.DailyBoostItemWidget.SetIsItemCompleted
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// bool                                    IsCompleted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              WidgetColor                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyBoostItemWidget::SetIsItemCompleted(bool IsCompleted, const struct FLinearColor& WidgetColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyBoostItemWidget", "SetIsItemCompleted");

	Params::DailyBoostItemWidget_SetIsItemCompleted Parms{};

	Parms.IsCompleted = IsCompleted;
	Parms.WidgetColor = std::move(WidgetColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.DailyBoostItemWidget.SetItemInfo
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FString&                    ItemInfo                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyBoostItemWidget::SetItemInfo(const class FString& ItemInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyBoostItemWidget", "SetItemInfo");

	Params::DailyBoostItemWidget_SetItemInfo Parms{};

	Parms.ItemInfo = std::move(ItemInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWChallengeObserver.LoadChallenges
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTWChallengeEventData*            DataAssetChallenge                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FTWChallengeEventInfo>&NonDataAssetChallenge                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UTWChallengeObserver::LoadChallenges(class UTWChallengeEventData* DataAssetChallenge, const TArray<struct FTWChallengeEventInfo>& NonDataAssetChallenge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWChallengeObserver", "LoadChallenges");

	Params::TWChallengeObserver_LoadChallenges Parms{};

	Parms.DataAssetChallenge = DataAssetChallenge;
	Parms.NonDataAssetChallenge = std::move(NonDataAssetChallenge);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWChallengeObserver.OnChallengeProgress
// (Final, Native, Public)
// Parameters:
// class UTWChallengeEvent*                ChallengeEvent                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTWChallengeRule&          Rule                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWChallengeObserver::OnChallengeProgress(class UTWChallengeEvent* ChallengeEvent, const struct FTWChallengeRule& Rule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWChallengeObserver", "OnChallengeProgress");

	Params::TWChallengeObserver_OnChallengeProgress Parms{};

	Parms.ChallengeEvent = ChallengeEvent;
	Parms.Rule = std::move(Rule);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWChallengeObserver.UnloadChallenges
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTWChallengeEventData*            DataAssetChallenge                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FTWChallengeEventInfo>&NonDataAssetChallenge                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UTWChallengeObserver::UnloadChallenges(class UTWChallengeEventData* DataAssetChallenge, const TArray<struct FTWChallengeEventInfo>& NonDataAssetChallenge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWChallengeObserver", "UnloadChallenges");

	Params::TWChallengeObserver_UnloadChallenges Parms{};

	Parms.DataAssetChallenge = DataAssetChallenge;
	Parms.NonDataAssetChallenge = std::move(NonDataAssetChallenge);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWChallengeObserver.UpdateChallenge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             RuleName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RuleCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeleteOnCompleted                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWChallengeObserver::UpdateChallenge(class FName RuleName, int32 RuleCount, bool bDeleteOnCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWChallengeObserver", "UpdateChallenge");

	Params::TWChallengeObserver_UpdateChallenge Parms{};

	Parms.RuleName = RuleName;
	Parms.RuleCount = RuleCount;
	Parms.bDeleteOnCompleted = bDeleteOnCompleted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.CaptureCompassWidget.GetCompassName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCaptureCompassWidget::GetCompassName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CaptureCompassWidget", "GetCompassName");

	Params::CaptureCompassWidget_GetCompassName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.CaptureCompassWidget.OnStateChanged
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// ECaptureState                           NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCaptureCompassWidget::OnStateChanged(ECaptureState NewState, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CaptureCompassWidget", "OnStateChanged");

	Params::CaptureCompassWidget_OnStateChanged Parms{};

	Parms.NewState = NewState;
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.CaptureCompassWidget.ShowCapturePointStroke
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCaptureCompassWidget::ShowCapturePointStroke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CaptureCompassWidget", "ShowCapturePointStroke");

	Params::CaptureCompassWidget_ShowCapturePointStroke Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.CaptureCompassWidget.ShowCaptureStateText
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCaptureCompassWidget::ShowCaptureStateText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CaptureCompassWidget", "ShowCaptureStateText");

	Params::CaptureCompassWidget_ShowCaptureStateText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.CaptureCompassWidget.UpdateDominationCompassText
// (Final, Native, Protected)

void UCaptureCompassWidget::UpdateDominationCompassText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CaptureCompassWidget", "UpdateDominationCompassText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.CaptureCompassWidget.UpdateWidgetState
// (Final, Native, Protected)

void UCaptureCompassWidget::UpdateWidgetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CaptureCompassWidget", "UpdateWidgetState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.ScoreAreaVolume.Cosmetic_OnContestingTeamIDChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AScoreAreaVolume::Cosmetic_OnContestingTeamIDChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreAreaVolume", "Cosmetic_OnContestingTeamIDChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.ScoreAreaVolume.OnRep_ContestingTeamID
// (Final, Native, Protected)

void AScoreAreaVolume::OnRep_ContestingTeamID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreAreaVolume", "OnRep_ContestingTeamID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.ScoreAreaVolume.HasCharacterInside
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AScoreAreaVolume::HasCharacterInside() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreAreaVolume", "HasCharacterInside");

	Params::ScoreAreaVolume_HasCharacterInside Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.ScoreAreaVolume.IsInside
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchCharacter*              Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AScoreAreaVolume::IsInside(class ATimeWatchCharacter* Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoreAreaVolume", "IsInside");

	Params::ScoreAreaVolume_IsInside Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWStandardButtonWidget.BP_TWFocusLostEvent
// (Event, Protected, BlueprintEvent)

void UTWStandardButtonWidget::BP_TWFocusLostEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStandardButtonWidget", "BP_TWFocusLostEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWStandardButtonWidget.BP_TWFocusReceivedEvent
// (Event, Protected, BlueprintEvent)

void UTWStandardButtonWidget::BP_TWFocusReceivedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStandardButtonWidget", "BP_TWFocusReceivedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWStandardButtonWidget.ButtonEvents_OnClicked
// (Final, Native, Protected)

void UTWStandardButtonWidget::ButtonEvents_OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStandardButtonWidget", "ButtonEvents_OnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWStandardButtonWidget.ButtonEvents_OnHovered
// (Final, Native, Protected)

void UTWStandardButtonWidget::ButtonEvents_OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStandardButtonWidget", "ButtonEvents_OnHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterButtonWidget.OnCharacterButtonClicked
// (Final, Native, Protected)

void UTWCharacterButtonWidget::OnCharacterButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterButtonWidget", "OnCharacterButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterButtonWidget.OnCharacterButtonFocusChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsFocused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCharacterButtonWidget::OnCharacterButtonFocusChanged(bool IsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterButtonWidget", "OnCharacterButtonFocusChanged");

	Params::TWCharacterButtonWidget_OnCharacterButtonFocusChanged Parms{};

	Parms.IsFocused = IsFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterButtonWidget.OnCharacterButtonHovered
// (Final, Native, Public)

void UTWCharacterButtonWidget::OnCharacterButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterButtonWidget", "OnCharacterButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterButtonWidget.OnCharacterButtonRightClicked
// (Final, Native, Protected)

void UTWCharacterButtonWidget::OnCharacterButtonRightClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterButtonWidget", "OnCharacterButtonRightClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterButtonWidget.OnCharacterButtonUnhovered
// (Final, Native, Public)

void UTWCharacterButtonWidget::OnCharacterButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterButtonWidget", "OnCharacterButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneTimelineWidget.SetDeathIcon_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   TimeValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneTimelineWidget::SetDeathIcon_BP(float TimeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneTimelineWidget", "SetDeathIcon_BP");

	Params::TWCloneTimelineWidget_SetDeathIcon_BP Parms{};

	Parms.TimeValue = TimeValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWCloneTimelineWidget.GetCloneIndex
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTWCloneTimelineWidget::GetCloneIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneTimelineWidget", "GetCloneIndex");

	Params::TWCloneTimelineWidget_GetCloneIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWCloneTimelineWidget.GetOwnerClone
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* UTWCloneTimelineWidget::GetOwnerClone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneTimelineWidget", "GetOwnerClone");

	Params::TWCloneTimelineWidget_GetOwnerClone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWCloneTimelineWidget.GetTWGameState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchGameState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchGameState* UTWCloneTimelineWidget::GetTWGameState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneTimelineWidget", "GetTWGameState");

	Params::TWCloneTimelineWidget_GetTWGameState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.DominationScorePoint.UpdateBackgroundShapeAndColor
// (Final, Native, Protected)

void UDominationScorePoint::UpdateBackgroundShapeAndColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DominationScorePoint", "UpdateBackgroundShapeAndColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.DropDownScrollListElementWidget.OnElementButtonClicked
// (Final, Native, Protected)

void UDropDownScrollListElementWidget::OnElementButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DropDownScrollListElementWidget", "OnElementButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.DropDownScrollListElementWidget.OnElementButtonHovered
// (Final, Native, Protected)

void UDropDownScrollListElementWidget::OnElementButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DropDownScrollListElementWidget", "OnElementButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.DropDownScrollListElementWidget.OnElementButtonUnhovered
// (Final, Native, Protected)

void UDropDownScrollListElementWidget::OnElementButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DropDownScrollListElementWidget", "OnElementButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.DropdownScrollListWidget.OnDropDownElementSelected
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FDropdownScrollListElement&NewSelectedElement                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDropdownScrollListWidget::OnDropDownElementSelected(const struct FDropdownScrollListElement& NewSelectedElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DropdownScrollListWidget", "OnDropDownElementSelected");

	Params::DropdownScrollListWidget_OnDropDownElementSelected Parms{};

	Parms.NewSelectedElement = std::move(NewSelectedElement);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxAnimInstance.OnGameStateChanged
// (Final, Native, Public)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluxAnimInstance::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxAnimInstance", "OnGameStateChanged");

	Params::FluxAnimInstance_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.AddScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScoreIncrement                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBroadcast                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::AddScore(int32 TeamId, int32 ScoreIncrement, bool bBroadcast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "AddScore");

	Params::TimeWatchGameState_AddScore Parms{};

	Parms.TeamId = TeamId;
	Parms.ScoreIncrement = ScoreIncrement;
	Parms.bBroadcast = bBroadcast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.AdvanceState
// (Final, Native, Public, BlueprintCallable)

void ATimeWatchGameState::AdvanceState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "AdvanceState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.AuthorityCyclePlayersClone
// (Final, Native, Protected)
// Parameters:
// int32                                   PlayerPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::AuthorityCyclePlayersClone(int32 PlayerPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "AuthorityCyclePlayersClone");

	Params::TimeWatchGameState_AuthorityCyclePlayersClone Parms{};

	Parms.PlayerPosition = PlayerPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.AuthoritySetFluxState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::AuthoritySetFluxState(EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "AuthoritySetFluxState");

	Params::TimeWatchGameState_AuthoritySetFluxState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.GetCooldownTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchGameState::GetCooldownTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetCooldownTime");

	Params::TimeWatchGameState_GetCooldownTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetCurrentClone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerController*          PC                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* ATimeWatchGameState::GetCurrentClone(const class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetCurrentClone");

	Params::TimeWatchGameState_GetCurrentClone Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetCurrentRelativeTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchGameState::GetCurrentRelativeTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetCurrentRelativeTime");

	Params::TimeWatchGameState_GetCurrentRelativeTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetCustomGameTimeSynchronized
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchGameState::GetCustomGameTimeSynchronized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetCustomGameTimeSynchronized");

	Params::TimeWatchGameState_GetCustomGameTimeSynchronized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetGameEventObserver
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTWGameEventObserver*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWGameEventObserver* ATimeWatchGameState::GetGameEventObserver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetGameEventObserver");

	Params::TimeWatchGameState_GetGameEventObserver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetLoopCounter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetLoopCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetLoopCounter");

	Params::TimeWatchGameState_GetLoopCounter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetRoundcounter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetRoundcounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetRoundcounter");

	Params::TimeWatchGameState_GetRoundcounter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetServerAutoCloseTimer
// (Final, Native, Public)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchGameState::GetServerAutoCloseTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetServerAutoCloseTimer");

	Params::TimeWatchGameState_GetServerAutoCloseTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetTeamScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetTeamScore(int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetTeamScore");

	Params::TimeWatchGameState_GetTeamScore Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetTutorialTooltipManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATWTutorialTooltipManager*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATWTutorialTooltipManager* ATimeWatchGameState::GetTutorialTooltipManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetTutorialTooltipManager");

	Params::TimeWatchGameState_GetTutorialTooltipManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetWinningTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetWinningTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetWinningTeam");

	Params::TimeWatchGameState_GetWinningTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.IsResetClonesEachLoopActive
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::IsResetClonesEachLoopActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "IsResetClonesEachLoopActive");

	Params::TimeWatchGameState_IsResetClonesEachLoopActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.MultiCast_AddPingMarker
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FPingMarker&               NewPing                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ATimeWatchGameState::MultiCast_AddPingMarker(const struct FPingMarker& NewPing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "MultiCast_AddPingMarker");

	Params::TimeWatchGameState_MultiCast_AddPingMarker Parms{};

	Parms.NewPing = std::move(NewPing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.MultiCast_RemovePingMarker
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::MultiCast_RemovePingMarker(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "MultiCast_RemovePingMarker");

	Params::TimeWatchGameState_MultiCast_RemovePingMarker Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.Multicast_SetWeaponSelectionCollapsed
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::Multicast_SetWeaponSelectionCollapsed(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "Multicast_SetWeaponSelectionCollapsed");

	Params::TimeWatchGameState_Multicast_SetWeaponSelectionCollapsed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.Multicast_TriggerTimeBubble
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// uint8                                   UnnecessaryParameter                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::Multicast_TriggerTimeBubble(uint8 UnnecessaryParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "Multicast_TriggerTimeBubble");

	Params::TimeWatchGameState_Multicast_TriggerTimeBubble Parms{};

	Parms.UnnecessaryParameter = UnnecessaryParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.MulticastLoopFinishedWithResult
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// EFluxLoopResult                         Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::MulticastLoopFinishedWithResult(EFluxLoopResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "MulticastLoopFinishedWithResult");

	Params::TimeWatchGameState_MulticastLoopFinishedWithResult Parms{};

	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.MulticastShowAllWeaponSwitchers
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ATimeWatchGameState::MulticastShowAllWeaponSwitchers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "MulticastShowAllWeaponSwitchers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.MulticastStateChanged
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::MulticastStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "MulticastStateChanged");

	Params::TimeWatchGameState_MulticastStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.MulticastTeamScoredPoint
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::MulticastTeamScoredPoint(int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "MulticastTeamScoredPoint");

	Params::TimeWatchGameState_MulticastTeamScoredPoint Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnChangedLoopLength
// (Native, Event, Public, BlueprintEvent)

void ATimeWatchGameState::OnChangedLoopLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnChangedLoopLength");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnRep_CurrentTime_Server
// (Final, Native, Protected)
// Parameters:
// float                                   OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::OnRep_CurrentTime_Server(float OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnRep_CurrentTime_Server");

	Params::TimeWatchGameState_OnRep_CurrentTime_Server Parms{};

	Parms.OldValue = OldValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnRep_MatchDescriptor
// (Final, Native, Private)

void ATimeWatchGameState::OnRep_MatchDescriptor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnRep_MatchDescriptor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnRep_MatchEventLog
// (Final, Native, Private)

void ATimeWatchGameState::OnRep_MatchEventLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnRep_MatchEventLog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnRep_ScoreTable
// (Final, Native, Private)

void ATimeWatchGameState::OnRep_ScoreTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnRep_ScoreTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnRep_ScoringTeam
// (Final, Native, Private)

void ATimeWatchGameState::OnRep_ScoringTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnRep_ScoringTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnRep_TeamAdvantage
// (Final, Native, Private)

void ATimeWatchGameState::OnRep_TeamAdvantage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnRep_TeamAdvantage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnSoundCallback
// (Final, Native, Protected)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::OnSoundCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnSoundCallback");

	Params::TimeWatchGameState_OnSoundCallback Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.OnSoundPosted
// (Final, Native, Protected)
// Parameters:
// const struct FPostSoundParams&          PostParams                                             (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   PlayingID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNGDAkComponent*                  AkComponentInstance                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::OnSoundPosted(const struct FPostSoundParams& PostParams, int32 PlayingID, class UNGDAkComponent* AkComponentInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "OnSoundPosted");

	Params::TimeWatchGameState_OnSoundPosted Parms{};

	Parms.PostParams = std::move(PostParams);
	Parms.PlayingID = PlayingID;
	Parms.AkComponentInstance = AkComponentInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.SetCharaterSelectionStatus
// (Final, Native, Public)
// Parameters:
// bool                                    bIsActive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::SetCharaterSelectionStatus(bool bIsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "SetCharaterSelectionStatus");

	Params::TimeWatchGameState_SetCharaterSelectionStatus Parms{};

	Parms.bIsActive = bIsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.SetCloneCooldown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewCloneCooldown                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::SetCloneCooldown(int32 NewCloneCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "SetCloneCooldown");

	Params::TimeWatchGameState_SetCloneCooldown Parms{};

	Parms.NewCloneCooldown = NewCloneCooldown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.SetGameCooldown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewGameCooldown                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::SetGameCooldown(int32 NewGameCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "SetGameCooldown");

	Params::TimeWatchGameState_SetGameCooldown Parms{};

	Parms.NewGameCooldown = NewGameCooldown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.SetLevelGoal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewGoal                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::SetLevelGoal(int32 NewGoal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "SetLevelGoal");

	Params::TimeWatchGameState_SetLevelGoal Parms{};

	Parms.NewGoal = NewGoal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.SetLoopCooldown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewLoopCooldown                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::SetLoopCooldown(int32 NewLoopCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "SetLoopCooldown");

	Params::TimeWatchGameState_SetLoopCooldown Parms{};

	Parms.NewLoopCooldown = NewLoopCooldown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.SetLoopLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLength                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::SetLoopLength(float NewLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "SetLoopLength");

	Params::TimeWatchGameState_SetLoopLength Parms{};

	Parms.NewLength = NewLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.SetServerAutoCloseTimer
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   InSecondsToClose                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::SetServerAutoCloseTimer(float InSecondsToClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "SetServerAutoCloseTimer");

	Params::TimeWatchGameState_SetServerAutoCloseTimer Parms{};

	Parms.InSecondsToClose = InSecondsToClose;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.SetWinner
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndGameReason                          Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::SetWinner(int32 TeamId, EEndGameReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "SetWinner");

	Params::TimeWatchGameState_SetWinner Parms{};

	Parms.TeamId = TeamId;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.ShowChallengeEndPopUp
// (Final, Native, Public, BlueprintCallable)

void ATimeWatchGameState::ShowChallengeEndPopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "ShowChallengeEndPopUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.ShowSkipChallengePopup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    PauseOnShow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      LocTitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ATimeWatchGameState::ShowSkipChallengePopup(bool PauseOnShow, const class FText& LocTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "ShowSkipChallengePopup");

	Params::TimeWatchGameState_ShowSkipChallengePopup Parms{};

	Parms.PauseOnShow = PauseOnShow;
	Parms.LocTitle = std::move(LocTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.StartCooldown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CooldownTimeToSet                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchGameState::StartCooldown(float CooldownTimeToSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "StartCooldown");

	Params::TimeWatchGameState_StartCooldown Parms{};

	Parms.CooldownTimeToSet = CooldownTimeToSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameState.TryDestroyTimeBubble
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::TryDestroyTimeBubble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "TryDestroyTimeBubble");

	Params::TimeWatchGameState_TryDestroyTimeBubble Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.UpdateScoringTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewScoringTeam                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::UpdateScoringTeam(int32 NewScoringTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "UpdateScoringTeam");

	Params::TimeWatchGameState_UpdateScoringTeam Parms{};

	Parms.NewScoringTeam = NewScoringTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.AreGameplayFeedbackActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::AreGameplayFeedbackActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "AreGameplayFeedbackActive");

	Params::TimeWatchGameState_AreGameplayFeedbackActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetAllAlliedClones
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamPlayerID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ATimeWatchCharacter*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ATimeWatchCharacter*> ATimeWatchGameState::GetAllAlliedClones(int32 TeamPlayerID, int32 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetAllAlliedClones");

	Params::TimeWatchGameState_GetAllAlliedClones Parms{};

	Parms.TeamPlayerID = TeamPlayerID;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetAllClones
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class ATimeWatchCharacter*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ATimeWatchCharacter*> ATimeWatchGameState::GetAllClones() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetAllClones");

	Params::TimeWatchGameState_GetAllClones Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetAllClonesByLoopIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LoopIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ATimeWatchCharacter*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ATimeWatchCharacter*> ATimeWatchGameState::GetAllClonesByLoopIndex(int32 LoopIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetAllClonesByLoopIndex");

	Params::TimeWatchGameState_GetAllClonesByLoopIndex Parms{};

	Parms.LoopIndex = LoopIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetAllClonesForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ATimeWatchCharacter*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ATimeWatchCharacter*> ATimeWatchGameState::GetAllClonesForPlayer(int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetAllClonesForPlayer");

	Params::TimeWatchGameState_GetAllClonesForPlayer Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetAllClonesForTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ATimeWatchCharacter*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ATimeWatchCharacter*> ATimeWatchGameState::GetAllClonesForTeam(int32 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetAllClonesForTeam");

	Params::TimeWatchGameState_GetAllClonesForTeam Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetChallengeObserver
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWChallengeObserver*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWChallengeObserver* ATimeWatchGameState::GetChallengeObserver() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetChallengeObserver");

	Params::TimeWatchGameState_GetChallengeObserver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetClone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CloneId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* ATimeWatchGameState::GetClone(int32 TeamId, int32 CloneId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetClone");

	Params::TimeWatchGameState_GetClone Parms{};

	Parms.TeamId = TeamId;
	Parms.CloneId = CloneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetCloneCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetCloneCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetCloneCount");

	Params::TimeWatchGameState_GetCloneCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetCloneForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CloneId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* ATimeWatchGameState::GetCloneForPlayer(int32 PlayerId, int32 CloneId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetCloneForPlayer");

	Params::TimeWatchGameState_GetCloneForPlayer Parms{};

	Parms.PlayerId = PlayerId;
	Parms.CloneId = CloneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetCurrentCloneIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetCurrentCloneIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetCurrentCloneIndex");

	Params::TimeWatchGameState_GetCurrentCloneIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetCurrentTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchGameState::GetCurrentTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetCurrentTime");

	Params::TimeWatchGameState_GetCurrentTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetEndGameReason
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EEndGameReason                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EEndGameReason ATimeWatchGameState::GetEndGameReason() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetEndGameReason");

	Params::TimeWatchGameState_GetEndGameReason Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetLastLoopResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFluxLoopResult                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFluxLoopResult ATimeWatchGameState::GetLastLoopResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetLastLoopResult");

	Params::TimeWatchGameState_GetLastLoopResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetLastScoringTeamID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetLastScoringTeamID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetLastScoringTeamID");

	Params::TimeWatchGameState_GetLastScoringTeamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetLevelGoal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetLevelGoal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetLevelGoal");

	Params::TimeWatchGameState_GetLevelGoal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetLoopLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchGameState::GetLoopLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetLoopLength");

	Params::TimeWatchGameState_GetLoopLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetMatchEventLog
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMatchEventLog*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMatchEventLog* ATimeWatchGameState::GetMatchEventLog() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetMatchEventLog");

	Params::TimeWatchGameState_GetMatchEventLog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetOverTimeMode
// (Final, Native, Public, Const)
// Parameters:
// EOvertimeMode                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOvertimeMode ATimeWatchGameState::GetOverTimeMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetOverTimeMode");

	Params::TimeWatchGameState_GetOverTimeMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetPlayerCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetPlayerCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetPlayerCount");

	Params::TimeWatchGameState_GetPlayerCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetPlayRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchGameState::GetPlayRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetPlayRate");

	Params::TimeWatchGameState_GetPlayRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.GetScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             TeamId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchGameState::GetScore(const int32 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "GetScore");

	Params::TimeWatchGameState_GetScore Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.HasGameStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::HasGameStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "HasGameStarted");

	Params::TimeWatchGameState_HasGameStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.IsServerUnresponsive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::IsServerUnresponsive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "IsServerUnresponsive");

	Params::TimeWatchGameState_IsServerUnresponsive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.IsTimeFreeze
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::IsTimeFreeze() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "IsTimeFreeze");

	Params::TimeWatchGameState_IsTimeFreeze Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.IsTimeGoingBackwards
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::IsTimeGoingBackwards() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "IsTimeGoingBackwards");

	Params::TimeWatchGameState_IsTimeGoingBackwards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.IsTimeGoingForward
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::IsTimeGoingForward() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "IsTimeGoingForward");

	Params::TimeWatchGameState_IsTimeGoingForward Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.IsWaitingForPlayerSync
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::IsWaitingForPlayerSync() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "IsWaitingForPlayerSync");

	Params::TimeWatchGameState_IsWaitingForPlayerSync Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.ShouldSpawnTimeBubble
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::ShouldSpawnTimeBubble() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "ShouldSpawnTimeBubble");

	Params::TimeWatchGameState_ShouldSpawnTimeBubble Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameState.UsingQuantumTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchGameState::UsingQuantumTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameState", "UsingQuantumTime");

	Params::TimeWatchGameState_UsingQuantumTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxExplodingBarrel.ActivateFuse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ExplosionCauser                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CustomGameTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxExplodingBarrel::ActivateFuse(class AActor* ExplosionCauser, float CustomGameTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "ActivateFuse");

	Params::FluxExplodingBarrel_ActivateFuse Parms{};

	Parms.ExplosionCauser = ExplosionCauser;
	Parms.CustomGameTime = CustomGameTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxExplodingBarrel.Cosmetic_OnFuseTimestampChange
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewFuseTimestamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxExplodingBarrel::Cosmetic_OnFuseTimestampChange(float NewFuseTimestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "Cosmetic_OnFuseTimestampChange");

	Params::FluxExplodingBarrel_Cosmetic_OnFuseTimestampChange Parms{};

	Parms.NewFuseTimestamp = NewFuseTimestamp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.FluxExplodingBarrel.Cosmetic_UpdateBarrelVisibility
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxExplodingBarrel::Cosmetic_UpdateBarrelVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "Cosmetic_UpdateBarrelVisibility");

	Params::FluxExplodingBarrel_Cosmetic_UpdateBarrelVisibility Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.FluxExplodingBarrel.Cosmetic_UpdateExplosionFX
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   VisualExplosionFactor                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxExplodingBarrel::Cosmetic_UpdateExplosionFX(float VisualExplosionFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "Cosmetic_UpdateExplosionFX");

	Params::FluxExplodingBarrel_Cosmetic_UpdateExplosionFX Parms{};

	Parms.VisualExplosionFactor = VisualExplosionFactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.FluxExplodingBarrel.GetExplosionSimulationRelativeSize
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ExplosionFactor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFluxExplodingBarrel::GetExplosionSimulationRelativeSize(float ExplosionFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "GetExplosionSimulationRelativeSize");

	Params::FluxExplodingBarrel_GetExplosionSimulationRelativeSize Parms{};

	Parms.ExplosionFactor = ExplosionFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxExplodingBarrel.GetExplosionVisualRelativeSize
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ExplosionFactor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFluxExplodingBarrel::GetExplosionVisualRelativeSize(float ExplosionFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "GetExplosionVisualRelativeSize");

	Params::FluxExplodingBarrel_GetExplosionVisualRelativeSize Parms{};

	Parms.ExplosionFactor = ExplosionFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxExplodingBarrel.GetFuseFactorCurvedByVisual
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   FuseFactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFluxExplodingBarrel::GetFuseFactorCurvedByVisual(float FuseFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "GetFuseFactorCurvedByVisual");

	Params::FluxExplodingBarrel_GetFuseFactorCurvedByVisual Parms{};

	Parms.FuseFactor = FuseFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxExplodingBarrel.IsBarrelMeshVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFluxExplodingBarrel::IsBarrelMeshVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "IsBarrelMeshVisible");

	Params::FluxExplodingBarrel_IsBarrelMeshVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxExplodingBarrel.MultiCast_ActivateFuse
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           ExplosionCauser                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TriggerTimestamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxExplodingBarrel::MultiCast_ActivateFuse(class AActor* ExplosionCauser, float TriggerTimestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "MultiCast_ActivateFuse");

	Params::FluxExplodingBarrel_MultiCast_ActivateFuse Parms{};

	Parms.ExplosionCauser = ExplosionCauser;
	Parms.TriggerTimestamp = TriggerTimestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxExplodingBarrel.Reset
// (Final, Native, Public, BlueprintCallable)

void AFluxExplodingBarrel::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxExplodingBarrel.GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFluxBarrelState                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFluxBarrelState AFluxExplodingBarrel::GetCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "GetCurrentState");

	Params::FluxExplodingBarrel_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxExplodingBarrel.GetExplosionFactor_Simulation
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFluxExplodingBarrel::GetExplosionFactor_Simulation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "GetExplosionFactor_Simulation");

	Params::FluxExplodingBarrel_GetExplosionFactor_Simulation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxExplodingBarrel.GetExplosionFactor_Visual
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFluxExplodingBarrel::GetExplosionFactor_Visual() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "GetExplosionFactor_Visual");

	Params::FluxExplodingBarrel_GetExplosionFactor_Visual Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxExplodingBarrel.GetFuseFactor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFluxExplodingBarrel::GetFuseFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxExplodingBarrel", "GetFuseFactor");

	Params::FluxExplodingBarrel_GetFuseFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxPlayerController.BP_DrawActorSample
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           RewindableActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::BP_DrawActorSample(class AActor* RewindableActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "BP_DrawActorSample");

	Params::FluxPlayerController_BP_DrawActorSample Parms{};

	Parms.RewindableActor = RewindableActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.BP_DrawActorSampleAtTime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           RewindableActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GameTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::BP_DrawActorSampleAtTime(class AActor* RewindableActor, float GameTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "BP_DrawActorSampleAtTime");

	Params::FluxPlayerController_BP_DrawActorSampleAtTime Parms{};

	Parms.RewindableActor = RewindableActor;
	Parms.GameTime = GameTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.BP_OnGameInitialized
// (Event, Public, BlueprintEvent)

void AFluxPlayerController::BP_OnGameInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "BP_OnGameInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.FluxPlayerController.BP_OnStandaloneGamePause
// (Event, Public, BlueprintEvent)

void AFluxPlayerController::BP_OnStandaloneGamePause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "BP_OnStandaloneGamePause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.FluxPlayerController.BP_OnStandaloneGameResume
// (Event, Public, BlueprintEvent)

void AFluxPlayerController::BP_OnStandaloneGameResume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "BP_OnStandaloneGameResume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.FluxPlayerController.BP_ServerTestBacktrace
// (Final, Native, Public, BlueprintCallable)

void AFluxPlayerController::BP_ServerTestBacktrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "BP_ServerTestBacktrace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.CanDamageClones
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bCanDamageClones                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::CanDamageClones(bool bCanDamageClones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "CanDamageClones");

	Params::FluxPlayerController_CanDamageClones Parms{};

	Parms.bCanDamageClones = bCanDamageClones;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.CheatWeapons
// (Final, Exec, Native, Public)

void AFluxPlayerController::CheatWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "CheatWeapons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.CheckRemoveReplayControllerListener
// (Final, Native, Public)

void AFluxPlayerController::CheckRemoveReplayControllerListener()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "CheckRemoveReplayControllerListener");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Client_DrawActorSAmples
// (Net, NetReliable, Native, Event, Protected, HasDefaults, NetClient)
// Parameters:
// class AActor*                           RewindableActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FActorSample&              ServerSample                                           (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              DebugColor                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::Client_DrawActorSAmples(class AActor* RewindableActor, const struct FActorSample& ServerSample, const struct FLinearColor& DebugColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Client_DrawActorSAmples");

	Params::FluxPlayerController_Client_DrawActorSAmples Parms{};

	Parms.RewindableActor = RewindableActor;
	Parms.ServerSample = std::move(ServerSample);
	Parms.DebugColor = std::move(DebugColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Client_OnPostLogin
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// const struct FPlayerInfo&               NewPlayerInfo                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AFluxPlayerController::Client_OnPostLogin(const struct FPlayerInfo& NewPlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Client_OnPostLogin");

	Params::FluxPlayerController_Client_OnPostLogin Parms{};

	Parms.NewPlayerInfo = std::move(NewPlayerInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Client_ReceiveChatMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class APlayerState*                     Sender                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TextMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EChatChannel                      Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::Client_ReceiveChatMessage(class APlayerState* Sender, const class FString& TextMessage, const EChatChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Client_ReceiveChatMessage");

	Params::FluxPlayerController_Client_ReceiveChatMessage Parms{};

	Parms.Sender = Sender;
	Parms.TextMessage = std::move(TextMessage);
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Client_ReceiveQuickChat
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class APlayerState*                     PS                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                                  QuickChatID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::Client_ReceiveQuickChat(class APlayerState* PS, uint16 QuickChatID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Client_ReceiveQuickChat");

	Params::FluxPlayerController_Client_ReceiveQuickChat Parms{};

	Parms.PS = PS;
	Parms.QuickChatID = QuickChatID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ClientOnMatchResultComplete
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMatchResultDataResponse&  PlayerOldData                                          (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FMatchResultDataResponse&  PlayerNewData                                          (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AFluxPlayerController::ClientOnMatchResultComplete(bool bWasSuccessful, const struct FMatchResultDataResponse& PlayerOldData, const struct FMatchResultDataResponse& PlayerNewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ClientOnMatchResultComplete");

	Params::FluxPlayerController_ClientOnMatchResultComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.PlayerOldData = std::move(PlayerOldData);
	Parms.PlayerNewData = std::move(PlayerNewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ClientOnPlayersReady
// (Net, NetReliable, Native, Event, Public, NetClient)

void AFluxPlayerController::ClientOnPlayersReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ClientOnPlayersReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ClientOnPossesed
// (Net, NetReliable, Native, Event, Public, NetClient)

void AFluxPlayerController::ClientOnPossesed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ClientOnPossesed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ClientOnRematchVoided
// (Net, NetReliable, Native, Event, Public, NetClient)

void AFluxPlayerController::ClientOnRematchVoided()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ClientOnRematchVoided");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ClientOnRivalRematchState
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bRivalWantsToRematch                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::ClientOnRivalRematchState(bool bRivalWantsToRematch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ClientOnRivalRematchState");

	Params::FluxPlayerController_ClientOnRivalRematchState Parms{};

	Parms.bRivalWantsToRematch = bRivalWantsToRematch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ClientSetVelocity
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// class UTimeWatchMovementComponent*      TWMovementComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::ClientSetVelocity(class UTimeWatchMovementComponent* TWMovementComponent, float Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ClientSetVelocity");

	Params::FluxPlayerController_ClientSetVelocity Parms{};

	Parms.TWMovementComponent = TWMovementComponent;
	Parms.Velocity = Velocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ClientShotEnemyEffect
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    IsHeadShot                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::ClientShotEnemyEffect(bool IsHeadShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ClientShotEnemyEffect");

	Params::FluxPlayerController_ClientShotEnemyEffect Parms{};

	Parms.IsHeadShot = IsHeadShot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ClientSyncState
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// const struct FGameStateSyncData&        InResyncData                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AFluxPlayerController::ClientSyncState(const struct FGameStateSyncData& InResyncData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ClientSyncState");

	Params::FluxPlayerController_ClientSyncState Parms{};

	Parms.InResyncData = std::move(InResyncData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.DetectCurrentInputDevice
// (Final, Native, Protected)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::DetectCurrentInputDevice(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "DetectCurrentInputDevice");

	Params::FluxPlayerController_DetectCurrentInputDevice Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.DetectMouseInput
// (Final, Native, Protected)
// Parameters:
// float                                   ammount                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::DetectMouseInput(float ammount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "DetectMouseInput");

	Params::FluxPlayerController_DetectMouseInput Parms{};

	Parms.ammount = ammount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ForceServerCrash
// (Final, Exec, Native, Public, BlueprintCallable)

void AFluxPlayerController::ForceServerCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ForceServerCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Forfeit
// (Final, Exec, Native, Public)

void AFluxPlayerController::Forfeit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Forfeit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.GetTurnMultiplier
// (Final, Native, Public)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFluxPlayerController::GetTurnMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "GetTurnMultiplier");

	Params::FluxPlayerController_GetTurnMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxPlayerController.LoopLength
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Lenght                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::LoopLength(float Lenght)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "LoopLength");

	Params::FluxPlayerController_LoopLength Parms{};

	Parms.Lenght = Lenght;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Next
// (Final, Exec, Native, Public)

void AFluxPlayerController::Next()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Next");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.OnConfirmPressed
// (Final, Native, Protected)

void AFluxPlayerController::OnConfirmPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "OnConfirmPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.OnEscapePressed
// (Final, Native, Protected)

void AFluxPlayerController::OnEscapePressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "OnEscapePressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "OnGameStateChanged");

	Params::FluxPlayerController_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.OnNavigationConfirm
// (Final, Native, Protected)

void AFluxPlayerController::OnNavigationConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "OnNavigationConfirm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.OnPlayerControllerInputChanged
// (Final, Native, Protected)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::OnPlayerControllerInputChanged(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "OnPlayerControllerInputChanged");

	Params::FluxPlayerController_OnPlayerControllerInputChanged Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.OnPlayersReady
// (Event, Protected, BlueprintEvent)

void AFluxPlayerController::OnPlayersReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "OnPlayersReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.FluxPlayerController.OnShotEnemyEffect
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsHeadShot                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::OnShotEnemyEffect(bool IsHeadShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "OnShotEnemyEffect");

	Params::FluxPlayerController_OnShotEnemyEffect Parms{};

	Parms.IsHeadShot = IsHeadShot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.FluxPlayerController.OnToggleHUDCheatPressed
// (Final, Native, Protected)

void AFluxPlayerController::OnToggleHUDCheatPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "OnToggleHUDCheatPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.RefreshGamepadCvarValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CVarName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::RefreshGamepadCvarValue(const class FString& CVarName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "RefreshGamepadCvarValue");

	Params::FluxPlayerController_RefreshGamepadCvarValue Parms{};

	Parms.CVarName = std::move(CVarName);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.RefreshGamepadVariables
// (Final, Native, Public, BlueprintCallable)

void AFluxPlayerController::RefreshGamepadVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "RefreshGamepadVariables");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.RequestSkipPointReplay
// (Final, Native, Public, BlueprintCallable)

void AFluxPlayerController::RequestSkipPointReplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "RequestSkipPointReplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.SelectQuickChat
// (Final, Native, Public)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::SelectQuickChat(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "SelectQuickChat");

	Params::FluxPlayerController_SelectQuickChat Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Server_AddPingMarker
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FPingMarker&               NewPingMarker                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AFluxPlayerController::Server_AddPingMarker(const struct FPingMarker& NewPingMarker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Server_AddPingMarker");

	Params::FluxPlayerController_Server_AddPingMarker Parms{};

	Parms.NewPingMarker = std::move(NewPingMarker);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Server_ForceServerCrash
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AFluxPlayerController::Server_ForceServerCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Server_ForceServerCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Server_PostQuickChat
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// uint16                                  QuickChatID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::Server_PostQuickChat(uint16 QuickChatID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Server_PostQuickChat");

	Params::FluxPlayerController_Server_PostQuickChat Parms{};

	Parms.QuickChatID = QuickChatID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Server_PostTextChatMessage
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const struct FTextChatMessage&          Message                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// const EChatChannel                      Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::Server_PostTextChatMessage(const struct FTextChatMessage& Message, const EChatChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Server_PostTextChatMessage");

	Params::FluxPlayerController_Server_PostTextChatMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Server_RemovePingMarker
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// int32                                   PingMarkerID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::Server_RemovePingMarker(int32 PingMarkerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Server_RemovePingMarker");

	Params::FluxPlayerController_Server_RemovePingMarker Parms{};

	Parms.PingMarkerID = PingMarkerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Server_RequestActorSamples
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AActor*                           RewindableActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SynchronizedGameTime                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::Server_RequestActorSamples(class AActor* RewindableActor, const float SynchronizedGameTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Server_RequestActorSamples");

	Params::FluxPlayerController_Server_RequestActorSamples Parms{};

	Parms.RewindableActor = RewindableActor;
	Parms.SynchronizedGameTime = SynchronizedGameTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerAdvanceFluxState
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AFluxPlayerController::ServerAdvanceFluxState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerAdvanceFluxState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerConfirmPlayerGameStateCatchUp
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AFluxPlayerController::ServerConfirmPlayerGameStateCatchUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerConfirmPlayerGameStateCatchUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerForfeit
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AFluxPlayerController::ServerForfeit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerForfeit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerLoopLengthFluxTime
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// float                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::ServerLoopLengthFluxTime(float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerLoopLengthFluxTime");

	Params::FluxPlayerController_ServerLoopLengthFluxTime Parms{};

	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerOnControllerReady
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AFluxPlayerController::ServerOnControllerReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerOnControllerReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerRequestCustomiztionUpdate
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const struct FCustomizationEntry&       CustomizationEntry                                     (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AFluxPlayerController::ServerRequestCustomiztionUpdate(const struct FCustomizationEntry& CustomizationEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerRequestCustomiztionUpdate");

	Params::FluxPlayerController_ServerRequestCustomiztionUpdate Parms{};

	Parms.CustomizationEntry = std::move(CustomizationEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerRequestPointReviewSkip
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AFluxPlayerController::ServerRequestPointReviewSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerRequestPointReviewSkip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerSetCanDamageClones
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bCanDamageClones                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::ServerSetCanDamageClones(bool bCanDamageClones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerSetCanDamageClones");

	Params::FluxPlayerController_ServerSetCanDamageClones Parms{};

	Parms.bCanDamageClones = bCanDamageClones;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerSetNetworkReady
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AFluxPlayerController::ServerSetNetworkReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerSetNetworkReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerSetRematchState
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    bWantsToRematch                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::ServerSetRematchState(bool bWantsToRematch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerSetRematchState");

	Params::FluxPlayerController_ServerSetRematchState Parms{};

	Parms.bWantsToRematch = bWantsToRematch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerSetVelocity
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::ServerSetVelocity(float Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerSetVelocity");

	Params::FluxPlayerController_ServerSetVelocity Parms{};

	Parms.Velocity = Velocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerShowAmmo
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AFluxPlayerController::ServerShowAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerShowAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerStartFluxTime
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AFluxPlayerController::ServerStartFluxTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerStartFluxTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerStopFluxTime
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AFluxPlayerController::ServerStopFluxTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerStopFluxTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerSwitchToSpectatorMode
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void AFluxPlayerController::ServerSwitchToSpectatorMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerSwitchToSpectatorMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerTestBacktrace
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AFluxPlayerController::ServerTestBacktrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerTestBacktrace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ServerWin
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AFluxPlayerController::ServerWin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ServerWin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.SetActiveGhostVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::SetActiveGhostVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "SetActiveGhostVisibility");

	Params::FluxPlayerController_SetActiveGhostVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.SetAdsSensitivityMultiplier
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewFocusingTurnMultiplier                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::SetAdsSensitivityMultiplier(float NewFocusingTurnMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "SetAdsSensitivityMultiplier");

	Params::FluxPlayerController_SetAdsSensitivityMultiplier Parms{};

	Parms.NewFocusingTurnMultiplier = NewFocusingTurnMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.SetPauseState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bIsPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::SetPauseState(bool bIsPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "SetPauseState");

	Params::FluxPlayerController_SetPauseState Parms{};

	Parms.bIsPaused = bIsPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.SetTurnSensitivity
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewTurnMultiplier                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::SetTurnSensitivity(float NewTurnMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "SetTurnSensitivity");

	Params::FluxPlayerController_SetTurnSensitivity Parms{};

	Parms.NewTurnMultiplier = NewTurnMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.SetVelocity
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::SetVelocity(float Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "SetVelocity");

	Params::FluxPlayerController_SetVelocity Parms{};

	Parms.Velocity = Velocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ShowAmmo
// (Final, Exec, Native, Public)

void AFluxPlayerController::ShowAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ShowAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Start
// (Final, Exec, Native, Public)

void AFluxPlayerController::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Stop
// (Final, Exec, Native, Public)

void AFluxPlayerController::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ToggleHUDVisibility
// (Final, Native, Public, BlueprintCallable)

void AFluxPlayerController::ToggleHUDVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ToggleHUDVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.ToggleQuickChatCategory
// (Final, Native, Public)
// Parameters:
// EQuickChatCategory                      QuickChatCategory                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFluxPlayerController::ToggleQuickChatCategory(EQuickChatCategory QuickChatCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "ToggleQuickChatCategory");

	Params::FluxPlayerController_ToggleQuickChatCategory Parms{};

	Parms.QuickChatCategory = QuickChatCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.Win
// (Final, Exec, Native, Public)

void AFluxPlayerController::Win()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "Win");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerController.GetAkLocalSounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UNGDAkComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNGDAkComponent* AFluxPlayerController::GetAkLocalSounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "GetAkLocalSounds");

	Params::FluxPlayerController_GetAkLocalSounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxPlayerController.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFluxPlayerController::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "GetTeamId");

	Params::FluxPlayerController_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxPlayerController.IsSpectator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFluxPlayerController::IsSpectator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerController", "IsSpectator");

	Params::FluxPlayerController_IsSpectator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWCheatManager.ChangeCulture
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Culture                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCheatManager::ChangeCulture(const class FString& Culture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCheatManager", "ChangeCulture");

	Params::TWCheatManager_ChangeCulture Parms{};

	Parms.Culture = std::move(Culture);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCheatManager.StartSpectate
// (Final, Exec, Native, Public, BlueprintCallable)

void UTWCheatManager::StartSpectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCheatManager", "StartSpectate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCheatManager.ToggleHUD
// (Final, Exec, Native, Public, BlueprintCallable)

void UTWCheatManager::ToggleHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCheatManager", "ToggleHUD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerStart.GetCharacterEyeLocation
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AFluxPlayerStart::GetCharacterEyeLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerStart", "GetCharacterEyeLocation");

	Params::FluxPlayerStart_GetCharacterEyeLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxPlayerState.OnRep_Customization
// (Final, Native, Protected)

void AFluxPlayerState::OnRep_Customization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerState", "OnRep_Customization");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerState.OnRep_PlayerInfo
// (Final, Native, Protected)

void AFluxPlayerState::OnRep_PlayerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerState", "OnRep_PlayerInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerState.ServerSendLocalData
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FPlayerLocalData&          LocalData                                              (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AFluxPlayerState::ServerSendLocalData(const struct FPlayerLocalData& LocalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerState", "ServerSendLocalData");

	Params::FluxPlayerState_ServerSendLocalData Parms{};

	Parms.LocalData = std::move(LocalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerState.ServerValidateCustomization
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FCustomizationEntry&       Customization                                          (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void AFluxPlayerState::ServerValidateCustomization(const struct FCustomizationEntry& Customization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerState", "ServerValidateCustomization");

	Params::FluxPlayerState_ServerValidateCustomization Parms{};

	Parms.Customization = std::move(Customization);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxPlayerState.GetAbilitiesComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWAbilitiesComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWAbilitiesComponent* AFluxPlayerState::GetAbilitiesComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerState", "GetAbilitiesComponent");

	Params::FluxPlayerState_GetAbilitiesComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxPlayerState.GetCharacterIdentifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AFluxPlayerState::GetCharacterIdentifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerState", "GetCharacterIdentifier");

	Params::FluxPlayerState_GetCharacterIdentifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxPlayerState.GetCharacterName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AFluxPlayerState::GetCharacterName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxPlayerState", "GetCharacterName");

	Params::FluxPlayerState_GetCharacterName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxTimelineCharacter.LoadTimeline
// (Native, Public, BlueprintCallable)

void UFluxTimelineCharacter::LoadTimeline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxTimelineCharacter", "LoadTimeline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxTimelineCharacter.GetLastSaved1PPose
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPoseSnapshot                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPoseSnapshot UFluxTimelineCharacter::GetLastSaved1PPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxTimelineCharacter", "GetLastSaved1PPose");

	Params::FluxTimelineCharacter_GetLastSaved1PPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxTimelineCharacter.GetLastSaved3PPose
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPoseSnapshot                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPoseSnapshot UFluxTimelineCharacter::GetLastSaved3PPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxTimelineCharacter", "GetLastSaved3PPose");

	Params::FluxTimelineCharacter_GetLastSaved3PPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxTimelineCharacter.GetLastSavedActorLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UFluxTimelineCharacter::GetLastSavedActorLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxTimelineCharacter", "GetLastSavedActorLocation");

	Params::FluxTimelineCharacter_GetLastSavedActorLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxTimelineCharacter.GetLastSavedControllerRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UFluxTimelineCharacter::GetLastSavedControllerRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxTimelineCharacter", "GetLastSavedControllerRotation");

	Params::FluxTimelineCharacter_GetLastSavedControllerRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.FluxTimelineStaticActor.Multicast_SetLivePhysics
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluxTimelineStaticActor::Multicast_SetLivePhysics(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxTimelineStaticActor", "Multicast_SetLivePhysics");

	Params::FluxTimelineStaticActor_Multicast_SetLivePhysics Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxTimelineStaticActor.Multicast_TrimTimeline
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// float                                   InTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluxTimelineStaticActor::Multicast_TrimTimeline(float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxTimelineStaticActor", "Multicast_TrimTimeline");

	Params::FluxTimelineStaticActor_Multicast_TrimTimeline Parms{};

	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FluxTimelineStaticActor.OnProjectileBounce
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           Projectile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                InImpactResult                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVector&                   InImpactVelocity                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFluxTimelineStaticActor::OnProjectileBounce(class AActor* Projectile, const struct FHitResult& InImpactResult, const struct FVector& InImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FluxTimelineStaticActor", "OnProjectileBounce");

	Params::FluxTimelineStaticActor_OnProjectileBounce Parms{};

	Parms.Projectile = Projectile;
	Parms.InImpactResult = std::move(InImpactResult);
	Parms.InImpactVelocity = std::move(InImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FollowPoseableComponent.CleanBonesAndSetSkeletalMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    NewMesh                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReinitPose                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFollowPoseableComponent::CleanBonesAndSetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FollowPoseableComponent", "CleanBonesAndSetSkeletalMesh");

	Params::FollowPoseableComponent_CleanBonesAndSetSkeletalMesh Parms{};

	Parms.NewMesh = NewMesh;
	Parms.bReinitPose = bReinitPose;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListItemWidget.BP_OnInviteTimeExpired
// (Event, Protected, BlueprintEvent)

void UFriendsListItemWidget::BP_OnInviteTimeExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListItemWidget", "BP_OnInviteTimeExpired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.FriendsListItemWidget.NativeTick
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFriendsListItemWidget::NativeTick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListItemWidget", "NativeTick");

	Params::FriendsListItemWidget_NativeTick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListItemWidget.OnFriendClicked
// (Final, Native, Protected)

void UFriendsListItemWidget::OnFriendClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListItemWidget", "OnFriendClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListItemWidget.OnInviteTimeExpired
// (Final, Native, Protected)

void UFriendsListItemWidget::OnInviteTimeExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListItemWidget", "OnInviteTimeExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListItemWidget.SetFriend
// (Final, Native, Public)
// Parameters:
// const struct FFriendData&               InFriend                                               (Parm, NativeAccessSpecifierPublic)

void UFriendsListItemWidget::SetFriend(const struct FFriendData& InFriend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListItemWidget", "SetFriend");

	Params::FriendsListItemWidget_SetFriend Parms{};

	Parms.InFriend = std::move(InFriend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListItemWidget.SetInvited
// (Final, Native, Public)
// Parameters:
// bool                                    bIsInvited                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFriendsListItemWidget::SetInvited(bool bIsInvited)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListItemWidget", "SetInvited");

	Params::FriendsListItemWidget_SetInvited Parms{};

	Parms.bIsInvited = bIsInvited;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListItemWidget.SetLocked
// (Final, Native, Public)
// Parameters:
// bool                                    bLocked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFriendsListItemWidget::SetLocked(bool bLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListItemWidget", "SetLocked");

	Params::FriendsListItemWidget_SetLocked Parms{};

	Parms.bLocked = bLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListSeparatorWidget.SetName
// (Final, Native, Public)
// Parameters:
// const class FText&                      Name_0                                                 (Parm, NativeAccessSpecifierPublic)

void UFriendsListSeparatorWidget::SetName(const class FText& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListSeparatorWidget", "SetName");

	Params::FriendsListSeparatorWidget_SetName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListWidget.Close
// (Final, Native, Public)

void UFriendsListWidget::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListWidget", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListWidget.FillList
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FFriendData>&       FriendList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFriendsListWidget::FillList(const TArray<struct FFriendData>& FriendList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListWidget", "FillList");

	Params::FriendsListWidget_FillList Parms{};

	Parms.FriendList = std::move(FriendList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListWidget.OnFriendListUpdated
// (Final, Native, Protected)

void UFriendsListWidget::OnFriendListUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListWidget", "OnFriendListUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListWidget.OnPartyStatusUpdate
// (Final, Native, Protected)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFriendsListWidget::OnPartyStatusUpdate(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListWidget", "OnPartyStatusUpdate");

	Params::FriendsListWidget_OnPartyStatusUpdate Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListWidget.Open
// (Final, Native, Public)

void UFriendsListWidget::Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListWidget", "Open");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.FriendsListWidget.IsOpen
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFriendsListWidget::IsOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FriendsListWidget", "IsOpen");

	Params::FriendsListWidget_IsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.HUDStateBaseGamePlay.OnStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDStateBaseGamePlay::OnStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStateBaseGamePlay", "OnStateChanged");

	Params::HUDStateBaseGamePlay_OnStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.HUDStateBaseGamePlay.OnTeamScoredPoint
// (Final, Native, Protected)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDStateBaseGamePlay::OnTeamScoredPoint(int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStateBaseGamePlay", "OnTeamScoredPoint");

	Params::HUDStateBaseGamePlay_OnTeamScoredPoint Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.HUDStateBaseReplay.OnMatchEnded
// (Final, Native, Public)

void UHUDStateBaseReplay::OnMatchEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStateBaseReplay", "OnMatchEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWExplosionGhost.Cosmetic_Setup
// (Event, Public, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              ExplosionOwner                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWExplosionGhost::Cosmetic_Setup(class ATimeWatchCharacter* ExplosionOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWExplosionGhost", "Cosmetic_Setup");

	Params::TWExplosionGhost_Cosmetic_Setup Parms{};

	Parms.ExplosionOwner = ExplosionOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWExplosionGhost.GetExplosionFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWExplosionGhost::GetExplosionFactor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWExplosionGhost", "GetExplosionFactor");

	Params::TWExplosionGhost_GetExplosionFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.HUDStateCaptureGamePlay.OnStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDStateCaptureGamePlay::OnStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStateCaptureGamePlay", "OnStateChanged");

	Params::HUDStateCaptureGamePlay_OnStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.HUDStateDeathMatchGamePlay.OnStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDStateDeathMatchGamePlay::OnStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStateDeathMatchGamePlay", "OnStateChanged");

	Params::HUDStateDeathMatchGamePlay_OnStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.HUDStateDominationGamePlay.OnStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDStateDominationGamePlay::OnStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStateDominationGamePlay", "OnStateChanged");

	Params::HUDStateDominationGamePlay_OnStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameEventObserver.Multicast_BroadcastEvent
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// const struct FEventReplicationData&     ReplicationData                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UTWGameEventObserver::Multicast_BroadcastEvent(const struct FEventReplicationData& ReplicationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameEventObserver", "Multicast_BroadcastEvent");

	Params::TWGameEventObserver_Multicast_BroadcastEvent Parms{};

	Parms.ReplicationData = std::move(ReplicationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameEventObserver.OnGameStateChange
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWGameEventObserver::OnGameStateChange(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameEventObserver", "OnGameStateChange");

	Params::TWGameEventObserver_OnGameStateChange Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayTask_VisualizeTargeting.WaitTargetData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ATWGameplayAbilityTargetActor>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTWGameplayTask_VisualizeTargeting*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWGameplayTask_VisualizeTargeting* UTWGameplayTask_VisualizeTargeting::WaitTargetData(class UTWAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class ATWGameplayAbilityTargetActor> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayTask_VisualizeTargeting", "WaitTargetData");

	Params::TWGameplayTask_VisualizeTargeting_WaitTargetData Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayTask_VisualizeTargeting.BeginSpawningActor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ATWGameplayAbilityTargetActor>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATWGameplayAbilityTargetActor**   SpawnedActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWGameplayTask_VisualizeTargeting::BeginSpawningActor(class UTWAbility* OwningAbility, TSubclassOf<class ATWGameplayAbilityTargetActor> Class_0, class ATWGameplayAbilityTargetActor** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_VisualizeTargeting", "BeginSpawningActor");

	Params::TWGameplayTask_VisualizeTargeting_BeginSpawningActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayTask_VisualizeTargeting.FinishSpawningActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATWGameplayAbilityTargetActor*    SpawnedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWGameplayTask_VisualizeTargeting::FinishSpawningActor(class UTWAbility* OwningAbility, class ATWGameplayAbilityTargetActor* SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_VisualizeTargeting", "FinishSpawningActor");

	Params::TWGameplayTask_VisualizeTargeting_FinishSpawningActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.SpawnedActor = SpawnedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayTask_VisualizeTargeting.OnTargetDataCancelledCallback
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FTWAbilityCustomDataHandle&CustomDataHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTWGameplayTask_VisualizeTargeting::OnTargetDataCancelledCallback(const struct FTWAbilityCustomDataHandle& CustomDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_VisualizeTargeting", "OnTargetDataCancelledCallback");

	Params::TWGameplayTask_VisualizeTargeting_OnTargetDataCancelledCallback Parms{};

	Parms.CustomDataHandle = std::move(CustomDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayTask_VisualizeTargeting.OnTargetDataReadyCallback
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FTWAbilityCustomDataHandle&CustomDataHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTWGameplayTask_VisualizeTargeting::OnTargetDataReadyCallback(const struct FTWAbilityCustomDataHandle& CustomDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_VisualizeTargeting", "OnTargetDataReadyCallback");

	Params::TWGameplayTask_VisualizeTargeting_OnTargetDataReadyCallback Parms{};

	Parms.CustomDataHandle = std::move(CustomDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.InviteRecievedWidget.OnAcceptClicked
// (Final, Native, Protected)

void UInviteRecievedWidget::OnAcceptClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InviteRecievedWidget", "OnAcceptClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.InviteRecievedWidget.OnDeclineClicked
// (Final, Native, Protected)

void UInviteRecievedWidget::OnDeclineClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InviteRecievedWidget", "OnDeclineClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.InviteRecievedWidget.Open
// (Final, Native, Public)
// Parameters:
// const class FString&                    InInviterId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InInviterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInviteRecievedWidget::Open(const class FString& InInviterId, const class FString& InInviterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InviteRecievedWidget", "Open");

	Params::InviteRecievedWidget_Open Parms{};

	Parms.InInviterId = std::move(InInviterId);
	Parms.InInviterName = std::move(InInviterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWInteractable.OnInteraction_Internal
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Interactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITWInteractable::OnInteraction_Internal(int32 ID, class AActor* Interactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TWInteractable", "OnInteraction_Internal");

	Params::TWInteractable_OnInteraction_Internal Parms{};

	Parms.ID = ID;
	Parms.Interactor = Interactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWInteractableRewindable.OnInteractionUndo_Internal
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Interactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITWInteractableRewindable::OnInteractionUndo_Internal(int32 ID, class AActor* Interactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TWInteractableRewindable", "OnInteractionUndo_Internal");

	Params::TWInteractableRewindable_OnInteractionUndo_Internal Parms{};

	Parms.ID = ID;
	Parms.Interactor = Interactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGlobals.GetChromaColorScheme
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWChromaColorSchemeDataAsset*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWChromaColorSchemeDataAsset* UTWGlobals::GetChromaColorScheme() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGlobals", "GetChromaColorScheme");

	Params::TWGlobals_GetChromaColorScheme Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGlobals.GetColorScheme
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWColorSchemeDataAsset*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWColorSchemeDataAsset* UTWGlobals::GetColorScheme() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGlobals", "GetColorScheme");

	Params::TWGlobals_GetColorScheme Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGlobals.GetGameGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWGameGlobals*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWGameGlobals* UTWGlobals::GetGameGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGlobals", "GetGameGlobals");

	Params::TWGlobals_GetGameGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGlobals.GetStoreGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWStoreGlobals*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWStoreGlobals* UTWGlobals::GetStoreGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGlobals", "GetStoreGlobals");

	Params::TWGlobals_GetStoreGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.LobbyHUD.OnStatePresented
// (Final, Native, Protected)
// Parameters:
// class UNGDHUDState*                     PresentedState                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALobbyHUD::OnStatePresented(class UNGDHUDState* PresentedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyHUD", "OnStatePresented");

	Params::LobbyHUD_OnStatePresented Parms{};

	Parms.PresentedState = PresentedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.LobbyPlayerController.ClientOnMatchStarted
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ETWMatchType                            MatchType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALobbyPlayerController::ClientOnMatchStarted(ETWMatchType MatchType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerController", "ClientOnMatchStarted");

	Params::LobbyPlayerController_ClientOnMatchStarted Parms{};

	Parms.MatchType = MatchType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.LobbyPlayerController.ClientPostLogin
// (Net, NetReliable, Native, Event, Public, NetClient)

void ALobbyPlayerController::ClientPostLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerController", "ClientPostLogin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.LobbyPlayerController.ClientShowMatchSettings
// (Net, NetReliable, Native, Event, Public, NetClient)

void ALobbyPlayerController::ClientShowMatchSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerController", "ClientShowMatchSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.LobbyPlayerController.ClientStartCustomMatchFail
// (Net, NetReliable, Native, Event, Public, NetClient)

void ALobbyPlayerController::ClientStartCustomMatchFail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerController", "ClientStartCustomMatchFail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.LobbyPlayerController.ServerExpoSetDoublesState
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALobbyPlayerController::ServerExpoSetDoublesState(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerController", "ServerExpoSetDoublesState");

	Params::LobbyPlayerController_ServerExpoSetDoublesState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.LobbyPlayerController.ServerSendMatchInfo
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    IsCustomMatch                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpoTeamIdOverride                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsExpoSpectator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALobbyPlayerController::ServerSendMatchInfo(bool IsCustomMatch, int32 ExpoTeamIdOverride, bool IsExpoSpectator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerController", "ServerSendMatchInfo");

	Params::LobbyPlayerController_ServerSendMatchInfo Parms{};

	Parms.IsCustomMatch = IsCustomMatch;
	Parms.ExpoTeamIdOverride = ExpoTeamIdOverride;
	Parms.IsExpoSpectator = IsExpoSpectator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.LobbyPlayerController.ServerStartCustomMatch
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FMatchDescriptor&          CustomMatchDescriptor                                  (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ALobbyPlayerController::ServerStartCustomMatch(const struct FMatchDescriptor& CustomMatchDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyPlayerController", "ServerStartCustomMatch");

	Params::LobbyPlayerController_ServerStartCustomMatch Parms{};

	Parms.CustomMatchDescriptor = std::move(CustomMatchDescriptor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayTask_SpawnActor.SpawnActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ATWGameplayActorHandle>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTWGameplayTask_SpawnActor*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWGameplayTask_SpawnActor* UTWGameplayTask_SpawnActor::SpawnActor(class UTWAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class ATWGameplayActorHandle> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayTask_SpawnActor", "SpawnActor");

	Params::TWGameplayTask_SpawnActor_SpawnActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayTask_SpawnActor.BeginSpawningActor
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ATWGameplayActorHandle>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATWGameplayActorHandle**          SpawnedActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWGameplayTask_SpawnActor::BeginSpawningActor(class UTWAbility* OwningAbility, TSubclassOf<class ATWGameplayActorHandle> Class_0, class ATWGameplayActorHandle** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_SpawnActor", "BeginSpawningActor");

	Params::TWGameplayTask_SpawnActor_BeginSpawningActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayTask_SpawnActor.FinishSpawningActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATWGameplayActorHandle*           SpawnedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWGameplayTask_SpawnActor::FinishSpawningActor(class UTWAbility* OwningAbility, class ATWGameplayActorHandle* SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_SpawnActor", "FinishSpawningActor");

	Params::TWGameplayTask_SpawnActor_FinishSpawningActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.SpawnedActor = SpawnedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.BP_ShowFirstPerson
// (Event, Public, BlueprintEvent)

void AMainMenuHUD::BP_ShowFirstPerson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "BP_ShowFirstPerson");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.MainMenuHUD.BP_ShowVersusPictures
// (Event, Public, BlueprintEvent)

void AMainMenuHUD::BP_ShowVersusPictures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "BP_ShowVersusPictures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.MainMenuHUD.ConnectToLocalServer
// (Final, Native, Public)

void AMainMenuHUD::ConnectToLocalServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "ConnectToLocalServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.ExpoModeResetConfigs
// (Final, Native, Protected)

void AMainMenuHUD::ExpoModeResetConfigs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "ExpoModeResetConfigs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.ExpoUpdateChromaTeamColor
// (Final, Native, Protected)

void AMainMenuHUD::ExpoUpdateChromaTeamColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "ExpoUpdateChromaTeamColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.Host_StartCustomMatch
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FMatchDescriptor&          HostCustomMatchDescriptor                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AMainMenuHUD::Host_StartCustomMatch(const struct FMatchDescriptor& HostCustomMatchDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "Host_StartCustomMatch");

	Params::MainMenuHUD_Host_StartCustomMatch Parms{};

	Parms.HostCustomMatchDescriptor = std::move(HostCustomMatchDescriptor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.IsOnParty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMainMenuHUD::IsOnParty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "IsOnParty");

	Params::MainMenuHUD_IsOnParty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.MainMenuHUD.OnFlexmatchMatchmakingStartComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETWMatchmakingType                      MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnFlexmatchMatchmakingStartComplete(bool bWasSuccessful, const class FString& ErrorString, ETWMatchmakingType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnFlexmatchMatchmakingStartComplete");

	Params::MainMenuHUD_OnFlexmatchMatchmakingStartComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnFriendInviteAccepted
// (Final, Native, Private)
// Parameters:
// const struct FOnlineSessionSearchResultContainer&InviteResult                                           (Parm, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnFriendInviteAccepted(const struct FOnlineSessionSearchResultContainer& InviteResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnFriendInviteAccepted");

	Params::MainMenuHUD_OnFriendInviteAccepted Parms{};

	Parms.InviteResult = std::move(InviteResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnFriendInviteReceived
// (Final, Native, Private)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOnlineSessionSearchResultContainer&InviteResult                                           (Parm, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnFriendInviteReceived(const class FString& UserId, const struct FOnlineSessionSearchResultContainer& InviteResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnFriendInviteReceived");

	Params::MainMenuHUD_OnFriendInviteReceived Parms{};

	Parms.UserId = std::move(UserId);
	Parms.InviteResult = std::move(InviteResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnGameStart
// (Final, Native, Public)

void AMainMenuHUD::OnGameStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnGameStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnLobbyMatchmakingComplete
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Ticket                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETWMatchmakingType                      MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnLobbyMatchmakingComplete(const class FString& Ticket, ETWMatchmakingType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnLobbyMatchmakingComplete");

	Params::MainMenuHUD_OnLobbyMatchmakingComplete Parms{};

	Parms.Ticket = std::move(Ticket);
	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnLobbyMatchmakingFailed
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETWMatchmakingType                      MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnLobbyMatchmakingFailed(const class FString& Reason, ETWMatchmakingType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnLobbyMatchmakingFailed");

	Params::MainMenuHUD_OnLobbyMatchmakingFailed Parms{};

	Parms.Reason = std::move(Reason);
	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnLoginComplete
// (Final, Native, Public)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnLoginComplete(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnLoginComplete");

	Params::MainMenuHUD_OnLoginComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnMatchmakingPollComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Status                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerSessionId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    IpAddress                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnMatchmakingPollComplete(bool bWasSuccessful, const class FString& Status, const class FString& PlayerSessionId, const class FString& IpAddress, int32 Port, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnMatchmakingPollComplete");

	Params::MainMenuHUD_OnMatchmakingPollComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.Status = std::move(Status);
	Parms.PlayerSessionId = std::move(PlayerSessionId);
	Parms.IpAddress = std::move(IpAddress);
	Parms.Port = Port;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnMatchmakingPollTimeOut
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Status                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerSessionId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    IpAddress                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnMatchmakingPollTimeOut(bool bWasSuccessful, const class FString& Status, const class FString& PlayerSessionId, const class FString& IpAddress, int32 Port, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnMatchmakingPollTimeOut");

	Params::MainMenuHUD_OnMatchmakingPollTimeOut Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.Status = std::move(Status);
	Parms.PlayerSessionId = std::move(PlayerSessionId);
	Parms.IpAddress = std::move(IpAddress);
	Parms.Port = Port;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnNewsComplete
// (Final, Native, Protected, HasOutParams)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FNGDBackendNewsEntry>&NewsEntries                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnNewsComplete(bool bWasSuccessful, const class FString& ErrorString, const TArray<struct FNGDBackendNewsEntry>& NewsEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnNewsComplete");

	Params::MainMenuHUD_OnNewsComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.NewsEntries = std::move(NewsEntries);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnPlayerDataUpdateComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnPlayerDataUpdateComplete(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnPlayerDataUpdateComplete");

	Params::MainMenuHUD_OnPlayerDataUpdateComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnPlayerInventoryRequestComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnPlayerInventoryRequestComplete(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnPlayerInventoryRequestComplete");

	Params::MainMenuHUD_OnPlayerInventoryRequestComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnServerErrorResponse
// (Final, Native, Public)
// Parameters:
// ENGDBackendServerErrorResponse          ErrorResponse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorCode                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnServerErrorResponse(ENGDBackendServerErrorResponse ErrorResponse, const class FString& ErrorCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnServerErrorResponse");

	Params::MainMenuHUD_OnServerErrorResponse Parms{};

	Parms.ErrorResponse = ErrorResponse;
	Parms.ErrorCode = std::move(ErrorCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnStatePresented
// (Final, Native, Protected)
// Parameters:
// class UNGDHUDState*                     PresentedState                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnStatePresented(class UNGDHUDState* PresentedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnStatePresented");

	Params::MainMenuHUD_OnStatePresented Parms{};

	Parms.PresentedState = PresentedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.OnTournamentLeaderboardComplete
// (Final, Native, Protected, HasOutParams)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLeaderboardFound                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FNGDBackendTournamentBoardEntry>&NewTournamentEntries                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AMainMenuHUD::OnTournamentLeaderboardComplete(bool bWasSuccessful, const class FString& ErrorString, bool bLeaderboardFound, const TArray<struct FNGDBackendTournamentBoardEntry>& NewTournamentEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "OnTournamentLeaderboardComplete");

	Params::MainMenuHUD_OnTournamentLeaderboardComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.bLeaderboardFound = bLeaderboardFound;
	Parms.NewTournamentEntries = std::move(NewTournamentEntries);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.PartyMatchmakingCancel
// (Final, Native, Public)

void AMainMenuHUD::PartyMatchmakingCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "PartyMatchmakingCancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.PartyMatchmakingStart
// (Final, Native, Public)
// Parameters:
// ETWMatchQueueType                       MatchQueueType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LobbyID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::PartyMatchmakingStart(ETWMatchQueueType MatchQueueType, const class FString& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "PartyMatchmakingStart");

	Params::MainMenuHUD_PartyMatchmakingStart Parms{};

	Parms.MatchQueueType = MatchQueueType;
	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.PlayTransitionSequence_ArrowsToNames
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInReverse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::PlayTransitionSequence_ArrowsToNames(bool bInReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "PlayTransitionSequence_ArrowsToNames");

	Params::MainMenuHUD_PlayTransitionSequence_ArrowsToNames Parms{};

	Parms.bInReverse = bInReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.MainMenuHUD.PlayTransitionSequence_CustomizationToStyleSelection
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInReverse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::PlayTransitionSequence_CustomizationToStyleSelection(bool bInReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "PlayTransitionSequence_CustomizationToStyleSelection");

	Params::MainMenuHUD_PlayTransitionSequence_CustomizationToStyleSelection Parms{};

	Parms.bInReverse = bInReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.MainMenuHUD.PlayTransitionSequence_MenuToCustomization
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInReverse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::PlayTransitionSequence_MenuToCustomization(bool bInReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "PlayTransitionSequence_MenuToCustomization");

	Params::MainMenuHUD_PlayTransitionSequence_MenuToCustomization Parms{};

	Parms.bInReverse = bInReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.MainMenuHUD.RequestLeaderboardUpdate
// (Final, Native, Protected)

void AMainMenuHUD::RequestLeaderboardUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "RequestLeaderboardUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.RequestNewsUpdate
// (Final, Native, Protected)

void AMainMenuHUD::RequestNewsUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "RequestNewsUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.RequestPlayerInventory
// (Final, Native, Protected)

void AMainMenuHUD::RequestPlayerInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "RequestPlayerInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.RequestPlayerStatsUpdate
// (Final, Native, Protected)

void AMainMenuHUD::RequestPlayerStatsUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "RequestPlayerStatsUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.ShowFirstPerson
// (Final, Exec, Native, Public, BlueprintCallable)

void AMainMenuHUD::ShowFirstPerson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "ShowFirstPerson");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.ShowVersusPictures
// (Final, Exec, Native, Public, BlueprintCallable)

void AMainMenuHUD::ShowVersusPictures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "ShowVersusPictures");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.StartListenServer
// (Final, Native, Public)

void AMainMenuHUD::StartListenServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "StartListenServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.StartMainMenu
// (Final, Native, Protected)

void AMainMenuHUD::StartMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "StartMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.StopCustomMatchMatchmaking
// (Final, Native, Public)

void AMainMenuHUD::StopCustomMatchMatchmaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "StopCustomMatchMatchmaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.StopFlexmatchMatchmaking
// (Final, Native, Public)

void AMainMenuHUD::StopFlexmatchMatchmaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "StopFlexmatchMatchmaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.StopGameSessionPoll
// (Final, Native, Protected)

void AMainMenuHUD::StopGameSessionPoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "StopGameSessionPoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.StopLobbyMatchmaking
// (Final, Native, Public)

void AMainMenuHUD::StopLobbyMatchmaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "StopLobbyMatchmaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.StopMatchMakingPoll
// (Final, Native, Protected)

void AMainMenuHUD::StopMatchMakingPoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "StopMatchMakingPoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.ToggleCustomMatchLobby
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::ToggleCustomMatchLobby(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "ToggleCustomMatchLobby");

	Params::MainMenuHUD_ToggleCustomMatchLobby Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.TryInitMainMenu
// (Final, Native, Protected)

void AMainMenuHUD::TryInitMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "TryInitMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuHUD.UpdatePartyData
// (Final, Native, Protected)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuHUD::UpdatePartyData(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuHUD", "UpdatePartyData");

	Params::MainMenuHUD_UpdatePartyData Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuPlayerController.ChangeCulture
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Culture                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuPlayerController::ChangeCulture(const class FString& Culture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuPlayerController", "ChangeCulture");

	Params::MainMenuPlayerController_ChangeCulture Parms{};

	Parms.Culture = std::move(Culture);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuPlayerController.Escape
// (Final, Native, Protected)

void AMainMenuPlayerController::Escape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuPlayerController", "Escape");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuPlayerController.OnVideoEnded
// (Final, Native, Protected)

void AMainMenuPlayerController::OnVideoEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuPlayerController", "OnVideoEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuPlayerController.OnVideoStarted
// (Final, Native, Protected)
// Parameters:
// const class FString&                    OpenedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuPlayerController::OnVideoStarted(const class FString& OpenedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuPlayerController", "OnVideoStarted");

	Params::MainMenuPlayerController_OnVideoStarted Parms{};

	Parms.OpenedUrl = std::move(OpenedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuPlayerController.PrintXP
// (Final, Exec, Native, Public)

void AMainMenuPlayerController::PrintXP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuPlayerController", "PrintXP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MainMenuPlayerController.Scroll
// (Final, Native, Protected)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMainMenuPlayerController::Scroll(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuPlayerController", "Scroll");

	Params::MainMenuPlayerController_Scroll Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MatchEventLog.MulticastAddMatchLog
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// const struct FMatchEvent&               MatcthEvent                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AMatchEventLog::MulticastAddMatchLog(const struct FMatchEvent& MatcthEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchEventLog", "MulticastAddMatchLog");

	Params::MatchEventLog_MulticastAddMatchLog Parms{};

	Parms.MatcthEvent = std::move(MatcthEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MatchEventLog.MulticastClearMatchLogs
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void AMatchEventLog::MulticastClearMatchLogs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchEventLog", "MulticastClearMatchLogs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MatchEventLog.MulticastConfirmMatchLog
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMatchEventLog::MulticastConfirmMatchLog(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchEventLog", "MulticastConfirmMatchLog");

	Params::MatchEventLog_MulticastConfirmMatchLog Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MatchEventLog.MulticastDiscardMatchLog
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMatchEventLog::MulticastDiscardMatchLog(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchEventLog", "MulticastDiscardMatchLog");

	Params::MatchEventLog_MulticastDiscardMatchLog Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWBaseMatchIntroActor.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWBaseMatchIntroActor::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWBaseMatchIntroActor", "OnGameStateChanged");

	Params::TWBaseMatchIntroActor_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWBaseMatchIntroActor.GetPlayerCameraManager
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATWPlayerCameraManager*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATWPlayerCameraManager* ATWBaseMatchIntroActor::GetPlayerCameraManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWBaseMatchIntroActor", "GetPlayerCameraManager");

	Params::TWBaseMatchIntroActor_GetPlayerCameraManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TemporalWeapon.CosmeticOnCharacterHitted
// (Final, Native, Public)
// Parameters:
// class AActor*                           CharacterHitted                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneHitted                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeapon::CosmeticOnCharacterHitted(class AActor* CharacterHitted, class FName BoneHitted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "CosmeticOnCharacterHitted");

	Params::TemporalWeapon_CosmeticOnCharacterHitted Parms{};

	Parms.CharacterHitted = CharacterHitted;
	Parms.BoneHitted = BoneHitted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.FillMuzzleFlashPool
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FMuzzleFlashPool*                PoolToFill                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// TSubclassOf<class ATemporalParticle>*   TemporalParticleClass                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeapon::FillMuzzleFlashPool(struct FMuzzleFlashPool* PoolToFill, TSubclassOf<class ATemporalParticle>* TemporalParticleClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "FillMuzzleFlashPool");

	Params::TemporalWeapon_FillMuzzleFlashPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PoolToFill != nullptr)
		*PoolToFill = std::move(Parms.PoolToFill);

	if (TemporalParticleClass != nullptr)
		*TemporalParticleClass = Parms.TemporalParticleClass;
}


// Function TimeWatch.TemporalWeapon.Multicast_ForceSnapshot
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FTemporalWeaponSnapshot&   AuthorativeSnapshot                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ATemporalWeapon::Multicast_ForceSnapshot(const struct FTemporalWeaponSnapshot& AuthorativeSnapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "Multicast_ForceSnapshot");

	Params::TemporalWeapon_Multicast_ForceSnapshot Parms{};

	Parms.AuthorativeSnapshot = std::move(AuthorativeSnapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.Native_CosmeticsOnProjectileImpact
// (BlueprintCosmetic, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATemporalWeapon::Native_CosmeticsOnProjectileImpact(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "Native_CosmeticsOnProjectileImpact");

	Params::TemporalWeapon_Native_CosmeticsOnProjectileImpact Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.SetDrawDuration
// (Final, Exec, Native, Public)
// Parameters:
// float                                   InDrawDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeapon::SetDrawDuration(float InDrawDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "SetDrawDuration");

	Params::TemporalWeapon_SetDrawDuration Parms{};

	Parms.InDrawDuration = InDrawDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.SetFireRate
// (Final, Exec, Native, Public)
// Parameters:
// float                                   InFireRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeapon::SetFireRate(float InFireRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "SetFireRate");

	Params::TemporalWeapon_SetFireRate Parms{};

	Parms.InFireRate = InFireRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.SetHolsterDuration
// (Final, Exec, Native, Public)
// Parameters:
// float                                   InHolsterDuration                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeapon::SetHolsterDuration(float InHolsterDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "SetHolsterDuration");

	Params::TemporalWeapon_SetHolsterDuration Parms{};

	Parms.InHolsterDuration = InHolsterDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.SetMuzzleSpeed
// (Final, Exec, Native, Public)
// Parameters:
// float                                   InMuzzleSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeapon::SetMuzzleSpeed(float InMuzzleSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "SetMuzzleSpeed");

	Params::TemporalWeapon_SetMuzzleSpeed Parms{};

	Parms.InMuzzleSpeed = InMuzzleSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.SetReloadTime
// (Final, Exec, Native, Public)
// Parameters:
// float                                   InReloadTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeapon::SetReloadTime(float InReloadTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "SetReloadTime");

	Params::TemporalWeapon_SetReloadTime Parms{};

	Parms.InReloadTime = InReloadTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.SpawnMuzzleFlash
// (Final, BlueprintCosmetic, Native, Public)
// Parameters:
// float                                   NewCreationTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeapon::SpawnMuzzleFlash(float NewCreationTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "SpawnMuzzleFlash");

	Params::TemporalWeapon_SpawnMuzzleFlash Parms{};

	Parms.NewCreationTime = NewCreationTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeapon.GetCurrentMuzzleFlashParticleClass
// (Final, Native, Public, Const)
// Parameters:
// TSubclassOf<class ATemporalParticle>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ATemporalParticle> ATemporalWeapon::GetCurrentMuzzleFlashParticleClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "GetCurrentMuzzleFlashParticleClass");

	Params::TemporalWeapon_GetCurrentMuzzleFlashParticleClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TemporalWeapon.GetCurrentMuzzleFlashPool
// (Final, Native, Public, Const)
// Parameters:
// struct FMuzzleFlashPool                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMuzzleFlashPool ATemporalWeapon::GetCurrentMuzzleFlashPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "GetCurrentMuzzleFlashPool");

	Params::TemporalWeapon_GetCurrentMuzzleFlashPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TemporalWeapon.GetHolder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* ATemporalWeapon::GetHolder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "GetHolder");

	Params::TemporalWeapon_GetHolder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TemporalWeapon.GetHUD
// (Final, Native, Private, Const)
// Parameters:
// class ATimeWatchHUD*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchHUD* ATemporalWeapon::GetHUD() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeapon", "GetHUD");

	Params::TemporalWeapon_GetHUD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLaserWeapon.OnImpactStateChange
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWLaserWeapon::OnImpactStateChange(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLaserWeapon", "OnImpactStateChange");

	Params::TWLaserWeapon_OnImpactStateChange Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWLaserWeapon.OnSoundEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// ELaserSoundEventType                    Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsTimeGoingForward                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWLaserWeapon::OnSoundEvent(ELaserSoundEventType Type, bool IsTimeGoingForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLaserWeapon", "OnSoundEvent");

	Params::TWLaserWeapon_OnSoundEvent Parms{};

	Parms.Type = Type;
	Parms.IsTimeGoingForward = IsTimeGoingForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWLaserWeapon.OnStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsFirstPerson                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWLaserWeapon::OnStateChanged(bool bIsFirstPerson, bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLaserWeapon", "OnStateChanged");

	Params::TWLaserWeapon_OnStateChanged Parms{};

	Parms.bIsFirstPerson = bIsFirstPerson;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWLaserWeapon.GetLaserLength
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWLaserWeapon::GetLaserLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLaserWeapon", "GetLaserLength");

	Params::TWLaserWeapon_GetLaserLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLaserWeapon.IsActiveWeapon
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bCosmeticOnly                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWLaserWeapon::IsActiveWeapon(bool bCosmeticOnly) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLaserWeapon", "IsActiveWeapon");

	Params::TWLaserWeapon_IsActiveWeapon Parms{};

	Parms.bCosmeticOnly = bCosmeticOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLaserWeapon.IsBeingUsed
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWLaserWeapon::IsBeingUsed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLaserWeapon", "IsBeingUsed");

	Params::TWLaserWeapon_IsBeingUsed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLaserWeapon.IsWarmingUp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bSkipWarmUpTimeCheck                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWLaserWeapon::IsWarmingUp(bool bSkipWarmUpTimeCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLaserWeapon", "IsWarmingUp");

	Params::TWLaserWeapon_IsWarmingUp Parms{};

	Parms.bSkipWarmUpTimeCheck = bSkipWarmUpTimeCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.MatchIntroActor.BP_CosmeticOnVersusScreenStart
// (Event, Protected, BlueprintEvent)

void AMatchIntroActor::BP_CosmeticOnVersusScreenStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchIntroActor", "BP_CosmeticOnVersusScreenStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.MatchIntroActor.BP_CosmeticPlayAnimation
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   CloneIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMatchIntroActor::BP_CosmeticPlayAnimation(int32 CloneIndex, int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchIntroActor", "BP_CosmeticPlayAnimation");

	Params::MatchIntroActor_BP_CosmeticPlayAnimation Parms{};

	Parms.CloneIndex = CloneIndex;
	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MatchIntroActor.BP_CosmeticSetDynamicMaterialScalarParameter
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   CloneIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InMaterialParameterName                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMatchIntroActor::BP_CosmeticSetDynamicMaterialScalarParameter(int32 CloneIndex, int32 TeamIndex, class FName InMaterialParameterName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchIntroActor", "BP_CosmeticSetDynamicMaterialScalarParameter");

	Params::MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter Parms{};

	Parms.CloneIndex = CloneIndex;
	Parms.TeamIndex = TeamIndex;
	Parms.InMaterialParameterName = InMaterialParameterName;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MatchIntroActor.VersusScreenDebugSetup
// (Final, Native, Protected, BlueprintCallable)

void AMatchIntroActor::VersusScreenDebugSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchIntroActor", "VersusScreenDebugSetup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.MatchIntroActor.GetSkeletalMeshMesh
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   CloneIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AMatchIntroActor::GetSkeletalMeshMesh(int32 CloneIndex, int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchIntroActor", "GetSkeletalMeshMesh");

	Params::MatchIntroActor_GetSkeletalMeshMesh Parms{};

	Parms.CloneIndex = CloneIndex;
	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.MatchLobbyPlayerSlotWidget.BP_ClearPlayerInfo
// (Event, Protected, BlueprintEvent)

void UMatchLobbyPlayerSlotWidget::BP_ClearPlayerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchLobbyPlayerSlotWidget", "BP_ClearPlayerInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.MatchLobbyPlayerSlotWidget.BP_FillPlayer
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTWPartyMember*                   PartyMember                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchLobbyPlayerSlotWidget::BP_FillPlayer(class UTWPartyMember* PartyMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchLobbyPlayerSlotWidget", "BP_FillPlayer");

	Params::MatchLobbyPlayerSlotWidget_BP_FillPlayer Parms{};

	Parms.PartyMember = PartyMember;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWInteractableComponent.CanInteract
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWInteractableComponent::CanInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableComponent", "CanInteract");

	Params::TWInteractableComponent_CanInteract Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWInteractableComponent.IsOnCooldown
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWInteractableComponent::IsOnCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableComponent", "IsOnCooldown");

	Params::TWInteractableComponent_IsOnCooldown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWInteractableComponent.GetElapsedCooldownPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTWInteractableComponent::GetElapsedCooldownPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableComponent", "GetElapsedCooldownPercent");

	Params::TWInteractableComponent_GetElapsedCooldownPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.NewsItemWidget.OnSelectButtonClicked
// (Final, Native, Protected)

void UNewsItemWidget::OnSelectButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewsItemWidget", "OnSelectButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.NewsItemWidget.OnSelectButtonHovered
// (Final, Native, Protected)

void UNewsItemWidget::OnSelectButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewsItemWidget", "OnSelectButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWInteractableActor.BP_Authority_OnInteraction
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Interactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWInteractableActor::BP_Authority_OnInteraction(int32 ID, class AActor* Interactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableActor", "BP_Authority_OnInteraction");

	Params::TWInteractableActor_BP_Authority_OnInteraction Parms{};

	Parms.ID = ID;
	Parms.Interactor = Interactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWInteractableActor.BP_Authority_OnUndoInteraction
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Interactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWInteractableActor::BP_Authority_OnUndoInteraction(int32 ID, class AActor* Interactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableActor", "BP_Authority_OnUndoInteraction");

	Params::TWInteractableActor_BP_Authority_OnUndoInteraction Parms{};

	Parms.ID = ID;
	Parms.Interactor = Interactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWInteractableActor.BP_Cosmetic_OnInteraction
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Interactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWInteractableActor::BP_Cosmetic_OnInteraction(int32 ID, class AActor* Interactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableActor", "BP_Cosmetic_OnInteraction");

	Params::TWInteractableActor_BP_Cosmetic_OnInteraction Parms{};

	Parms.ID = ID;
	Parms.Interactor = Interactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWInteractableActor.BP_Cosmetic_OnUndoInteraction
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Interactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWInteractableActor::BP_Cosmetic_OnUndoInteraction(int32 ID, class AActor* Interactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableActor", "BP_Cosmetic_OnUndoInteraction");

	Params::TWInteractableActor_BP_Cosmetic_OnUndoInteraction Parms{};

	Parms.ID = ID;
	Parms.Interactor = Interactor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWInteractableActor.OnInteraction_Internal
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Interactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWInteractableActor::OnInteraction_Internal(int32 ID, class AActor* Interactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableActor", "OnInteraction_Internal");

	Params::TWInteractableActor_OnInteraction_Internal Parms{};

	Parms.ID = ID;
	Parms.Interactor = Interactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWInteractableActor.OnInteractionUndo_Internal
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Interactor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWInteractableActor::OnInteractionUndo_Internal(int32 ID, class AActor* Interactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractableActor", "OnInteractionUndo_Internal");

	Params::TWInteractableActor_OnInteractionUndo_Internal Parms{};

	Parms.ID = ID;
	Parms.Interactor = Interactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWHealthPackActor.BP_TriggerHealOverTime
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasReSynced                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWHealthPackActor::BP_TriggerHealOverTime(class ATimeWatchCharacter* Character, bool bWasReSynced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWHealthPackActor", "BP_TriggerHealOverTime");

	Params::TWHealthPackActor_BP_TriggerHealOverTime Parms{};

	Parms.Character = Character;
	Parms.bWasReSynced = bWasReSynced;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWHealthPackActor.EndHealArea
// (Final, Native, Protected)

void ATWHealthPackActor::EndHealArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWHealthPackActor", "EndHealArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWHealthPackActor.OnStateChanged
// (Final, Native, Public)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWHealthPackActor::OnStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWHealthPackActor", "OnStateChanged");

	Params::TWHealthPackActor_OnStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWHealthPackActor.OnVolumeBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATWHealthPackActor::OnVolumeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWHealthPackActor", "OnVolumeBeginOverlap");

	Params::TWHealthPackActor_OnVolumeBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWHealthPackActor.TriggerHealOverTime
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class ATimeWatchCharacter*              Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasReSynced                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWHealthPackActor::TriggerHealOverTime(class ATimeWatchCharacter* Character, bool bWasReSynced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWHealthPackActor", "TriggerHealOverTime");

	Params::TWHealthPackActor_TriggerHealOverTime Parms{};

	Parms.Character = Character;
	Parms.bWasReSynced = bWasReSynced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.PartyMemberItemWidget.OnLeaveClicked
// (Final, Native, Protected)

void UPartyMemberItemWidget::OnLeaveClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PartyMemberItemWidget", "OnLeaveClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.PartyMemberItemWidget.SetPartyMemberAvatar
// (Final, Native, Protected)
// Parameters:
// class UTexture2D*                       avatar                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPartyMemberItemWidget::SetPartyMemberAvatar(class UTexture2D* avatar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PartyMemberItemWidget", "SetPartyMemberAvatar");

	Params::PartyMemberItemWidget_SetPartyMemberAvatar Parms{};

	Parms.avatar = avatar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWActivableActor.BP_Update_Behavior
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWActivableActor::BP_Update_Behavior(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActivableActor", "BP_Update_Behavior");

	Params::TWActivableActor_BP_Update_Behavior Parms{};

	Parms.bNewValue = bNewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWActivableActor.BP_Update_Cosmetic
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWActivableActor::BP_Update_Cosmetic(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActivableActor", "BP_Update_Cosmetic");

	Params::TWActivableActor_BP_Update_Cosmetic Parms{};

	Parms.bNewValue = bNewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWActivableActor.OnRep_bIsStatusActive
// (Final, Native, Private)

void ATWActivableActor::OnRep_bIsStatusActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActivableActor", "OnRep_bIsStatusActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWActivableActor.SetActiveStatus
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWActivableActor::SetActiveStatus(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActivableActor", "SetActiveStatus");

	Params::TWActivableActor_SetActiveStatus Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWActivableActor.GetActiveStatus
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWActivableActor::GetActiveStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActivableActor", "GetActiveStatus");

	Params::TWActivableActor_GetActiveStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.PartyWidget.UpdatePartyData
// (Final, Native, Public)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPartyWidget::UpdatePartyData(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PartyWidget", "UpdatePartyData");

	Params::PartyWidget_UpdatePartyData Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLobbyChallengeWidget.AddNewLobbyGrid
// (Final, Native, Private)

void UTWLobbyChallengeWidget::AddNewLobbyGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "AddNewLobbyGrid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLobbyChallengeWidget.AddNewLobbyPlayerRow
// (Final, Native, Private)
// Parameters:
// const struct FLobbyPlayerInfo&          InLobbyPlayerInfo                                      (Parm, NativeAccessSpecifierPublic)
// class UTWLobbyPlayerRowWidget*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWLobbyPlayerRowWidget* UTWLobbyChallengeWidget::AddNewLobbyPlayerRow(const struct FLobbyPlayerInfo& InLobbyPlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "AddNewLobbyPlayerRow");

	Params::TWLobbyChallengeWidget_AddNewLobbyPlayerRow Parms{};

	Parms.InLobbyPlayerInfo = std::move(InLobbyPlayerInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLobbyChallengeWidget.ChangeGridPanel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PanelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTWLobbyChallengeWidget::ChangeGridPanel(int32 PanelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "ChangeGridPanel");

	Params::TWLobbyChallengeWidget_ChangeGridPanel Parms{};

	Parms.PanelIndex = PanelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLobbyChallengeWidget.ClearGridsContainer
// (Final, Native, Public, BlueprintCallable)

void UTWLobbyChallengeWidget::ClearGridsContainer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "ClearGridsContainer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLobbyChallengeWidget.OnLobbyCreated
// (Native, Event, Public, BlueprintEvent)

void UTWLobbyChallengeWidget::OnLobbyCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "OnLobbyCreated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLobbyChallengeWidget.OnUpdateReceivedEvent
// (Final, Native, Public, BlueprintCallable)

void UTWLobbyChallengeWidget::OnUpdateReceivedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "OnUpdateReceivedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLobbyChallengeWidget.SelectServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ServerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWLobbyChallengeWidget::SelectServer(const class FString& ServerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "SelectServer");

	Params::TWLobbyChallengeWidget_SelectServer Parms{};

	Parms.ServerName = std::move(ServerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLobbyChallengeWidget.SetPlayerStats_BP
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FNGDBackendAccountPlayerStats&PlayerStats                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTWLobbyChallengeWidget::SetPlayerStats_BP(const struct FNGDBackendAccountPlayerStats& PlayerStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "SetPlayerStats_BP");

	Params::TWLobbyChallengeWidget_SetPlayerStats_BP Parms{};

	Parms.PlayerStats = std::move(PlayerStats);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWLobbyChallengeWidget.ShowQuickMatchButton
// (Final, Native, Public)

void UTWLobbyChallengeWidget::ShowQuickMatchButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyChallengeWidget", "ShowQuickMatchButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.PhysicsRewindableActor.OnPostUpdateWorkTick
// (Native, Protected)

void APhysicsRewindableActor::OnPostUpdateWorkTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsRewindableActor", "OnPostUpdateWorkTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.PhysicsRewindableActor.GetHitRegistrationCollider
// (Native, Public, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* APhysicsRewindableActor::GetHitRegistrationCollider() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsRewindableActor", "GetHitRegistrationCollider");

	Params::PhysicsRewindableActor_GetHitRegistrationCollider Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.PhysicsRewindableActor.GetRewindableMeshComponent
// (Native, Public, Const)
// Parameters:
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* APhysicsRewindableActor::GetRewindableMeshComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsRewindableActor", "GetRewindableMeshComponent");

	Params::PhysicsRewindableActor_GetRewindableMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.PhysicsRewindableActor.GetRewindCollider
// (Native, Public, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* APhysicsRewindableActor::GetRewindCollider() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsRewindableActor", "GetRewindCollider");

	Params::PhysicsRewindableActor_GetRewindCollider Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.PhysicsRewindableActor.GetRewindComponent
// (Native, Public, Const)
// Parameters:
// class UNGDRewindComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNGDRewindComponent* APhysicsRewindableActor::GetRewindComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsRewindableActor", "GetRewindComponent");

	Params::PhysicsRewindableActor_GetRewindComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.PhysicsRewindableActor.IsRewindRelevant
// (Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APhysicsRewindableActor::IsRewindRelevant() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsRewindableActor", "IsRewindRelevant");

	Params::PhysicsRewindableActor_IsRewindRelevant Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.PingCompassWidget.CosmeticOnPingPlaced
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UPingCompassWidget::CosmeticOnPingPlaced()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingCompassWidget", "CosmeticOnPingPlaced");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.ServerIdleGameMode.OnImpostorData
// (Final, Native, Protected)
// Parameters:
// const class FString&                    ImpostorData                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AServerIdleGameMode::OnImpostorData(const class FString& ImpostorData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerIdleGameMode", "OnImpostorData");

	Params::ServerIdleGameMode_OnImpostorData Parms{};

	Parms.ImpostorData = std::move(ImpostorData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.ServerLobbyGameMode.OnMatchDescriptorReceived
// (Final, Native, Protected)

void AServerLobbyGameMode::OnMatchDescriptorReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerLobbyGameMode", "OnMatchDescriptorReceived");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.ServerLobbyGameMode.TryStartMatch
// (Final, Native, Protected)

void AServerLobbyGameMode::TryStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerLobbyGameMode", "TryStartMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.ShootTarget.OnTargetDestroyed
// (Event, Protected, BlueprintEvent)

void AShootTarget::OnTargetDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShootTarget", "OnTargetDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.ShootTarget.OnTookDamage
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   RelativeDamage                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShootTarget::OnTookDamage(float RelativeDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShootTarget", "OnTookDamage");

	Params::ShootTarget_OnTookDamage Parms{};

	Parms.RelativeDamage = RelativeDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.ShootTarget.TakeBulletDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShootTarget::TakeBulletDamage(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShootTarget", "TakeBulletDamage");

	Params::ShootTarget_TakeBulletDamage Parms{};

	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.ShootTarget.GetNormalizedHitPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AShootTarget::GetNormalizedHitPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShootTarget", "GetNormalizedHitPoint");

	Params::ShootTarget_GetNormalizedHitPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWMatchIntroActor.Blueprint_Start
// (Event, Protected, BlueprintEvent)

void ATWMatchIntroActor::Blueprint_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWMatchIntroActor", "Blueprint_Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWMatchIntroActor.OnIntroEnded
// (Final, Native, Protected, BlueprintCallable)

void ATWMatchIntroActor::OnIntroEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWMatchIntroActor", "OnIntroEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWMatchIntroActor.GetPlayerIntroActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATWPlayerIntroActor*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATWPlayerIntroActor* ATWMatchIntroActor::GetPlayerIntroActor(int32 PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWMatchIntroActor", "GetPlayerIntroActor");

	Params::TWMatchIntroActor_GetPlayerIntroActor Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TemporalParticle.Disable
// (Final, Native, Public, BlueprintCallable)

void ATemporalParticle::Disable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalParticle", "Disable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalParticle.OnParticleEnabled
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalParticle::OnParticleEnabled(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalParticle", "OnParticleEnabled");

	Params::TemporalParticle_OnParticleEnabled Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TemporalParticle.ParticleTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   LifeCylcle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalParticle::ParticleTick(float LifeCylcle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalParticle", "ParticleTick");

	Params::TemporalParticle_ParticleTick Parms{};

	Parms.LifeCylcle = LifeCylcle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TemporalParticle.SetOnlyOwnerSee
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalParticle::SetOnlyOwnerSee(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalParticle", "SetOnlyOwnerSee");

	Params::TemporalParticle_SetOnlyOwnerSee Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalParticle.SetOwnerSee
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalParticle::SetOwnerSee(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalParticle", "SetOwnerSee");

	Params::TemporalParticle_SetOwnerSee Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalParticle.Setup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InSpawnerActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewCreationTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalParticle::Setup(class AActor* InSpawnerActor, float NewCreationTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalParticle", "Setup");

	Params::TemporalParticle_Setup Parms{};

	Parms.InSpawnerActor = InSpawnerActor;
	Parms.NewCreationTime = NewCreationTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalProjectileBase.OnRep_ShootedBy
// (Final, Native, Protected)

void ATemporalProjectileBase::OnRep_ShootedBy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalProjectileBase", "OnRep_ShootedBy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalProjectileBase.OnSetShooter
// (Event, Public, BlueprintEvent)

void ATemporalProjectileBase::OnSetShooter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalProjectileBase", "OnSetShooter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TemporalWeaponSwitcher.MakeAllVisible
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeaponSwitcher::MakeAllVisible(class UObject* Context, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TemporalWeaponSwitcher", "MakeAllVisible");

	Params::TemporalWeaponSwitcher_MakeAllVisible Parms{};

	Parms.Context = Context;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeaponSwitcher.MakeVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATemporalWeaponSwitcher::MakeVisible(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeaponSwitcher", "MakeVisible");

	Params::TemporalWeaponSwitcher_MakeVisible Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeaponSwitcher.OnPickUpOverlapBegin
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATemporalWeaponSwitcher::OnPickUpOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeaponSwitcher", "OnPickUpOverlapBegin");

	Params::TemporalWeaponSwitcher_OnPickUpOverlapBegin Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TemporalWeaponSwitcher.GetWeaponMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ATemporalWeaponSwitcher::GetWeaponMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemporalWeaponSwitcher", "GetWeaponMesh");

	Params::TemporalWeaponSwitcher_GetWeaponMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWMatchClockWidget.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWMatchClockWidget::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWMatchClockWidget", "OnGameStateChanged");

	Params::TWMatchClockWidget_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadHealthBarWidget.InitializeWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FWidgetColorStructure&     NewHealthBarColors                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UTWOverheadHealthBarWidget::InitializeWidget(const struct FWidgetColorStructure& NewHealthBarColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadHealthBarWidget", "InitializeWidget");

	Params::TWOverheadHealthBarWidget_InitializeWidget Parms{};

	Parms.NewHealthBarColors = std::move(NewHealthBarColors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadHealthBarWidget.SetActiveHealthBar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWOverheadHealthBarWidget::SetActiveHealthBar(bool bIsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadHealthBarWidget", "SetActiveHealthBar");

	Params::TWOverheadHealthBarWidget_SetActiveHealthBar Parms{};

	Parms.bIsPlayer = bIsPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadHealthBarWidget.SetHealthBarPercentValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWOverheadHealthBarWidget::SetHealthBarPercentValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadHealthBarWidget", "SetHealthBarPercentValue");

	Params::TWOverheadHealthBarWidget_SetHealthBarPercentValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadHealthBarWidget.SetHitFeedbackPercentValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWOverheadHealthBarWidget::SetHitFeedbackPercentValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadHealthBarWidget", "SetHitFeedbackPercentValue");

	Params::TWOverheadHealthBarWidget_SetHitFeedbackPercentValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.ToPointer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ATimeWatchCharacter*              This                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ATimeWatchCharacter::ToPointer(class ATimeWatchCharacter* This)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchCharacter", "ToPointer");

	Params::TimeWatchCharacter_ToPointer Parms{};

	Parms.This = This;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.ActivateAbility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UTWAbility>           Ability                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::ActivateAbility(TSubclassOf<class UTWAbility> Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "ActivateAbility");

	Params::TimeWatchCharacter_ActivateAbility Parms{};

	Parms.Ability = Ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.BP_ModifyHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InteractedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSet                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::BP_ModifyHealth(class AActor* InteractedActor, float Value, bool bSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "BP_ModifyHealth");

	Params::TimeWatchCharacter_BP_ModifyHealth Parms{};

	Parms.InteractedActor = InteractedActor;
	Parms.Value = Value;
	Parms.bSet = bSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.BP_OnCharacterDoubleJumpEvent
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void ATimeWatchCharacter::BP_OnCharacterDoubleJumpEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "BP_OnCharacterDoubleJumpEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TimeWatchCharacter.BP_OnRespawnEnd
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void ATimeWatchCharacter::BP_OnRespawnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "BP_OnRespawnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TimeWatchCharacter.BP_SetFiring
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::BP_SetFiring(bool bNewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "BP_SetFiring");

	Params::TimeWatchCharacter_BP_SetFiring Parms{};

	Parms.bNewState = bNewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.CheckADSEvents
// (Final, Native, Public, HasOutParams)
// Parameters:
// const float&                            DeltaTime                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::CheckADSEvents(const float& DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "CheckADSEvents");

	Params::TimeWatchCharacter_CheckADSEvents Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.CheckAndSetWeaponGhostMaterial
// (Final, Native, Public)

void ATimeWatchCharacter::CheckAndSetWeaponGhostMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "CheckAndSetWeaponGhostMaterial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.ClientOnDoubleJump
// (Net, Native, Event, NetMulticast, Protected)

void ATimeWatchCharacter::ClientOnDoubleJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "ClientOnDoubleJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.GetLastDeathTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchCharacter::GetLastDeathTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetLastDeathTime");

	Params::TimeWatchCharacter_GetLastDeathTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetNextClone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* ATimeWatchCharacter::GetNextClone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetNextClone");

	Params::TimeWatchCharacter_GetNextClone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.Multicast_OnTakeDamage
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FNGDDamageEvent&           DamageEvent                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// class ANGDCharacter*                    EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::Multicast_OnTakeDamage(const struct FNGDDamageEvent& DamageEvent, class ANGDCharacter* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "Multicast_OnTakeDamage");

	Params::TimeWatchCharacter_Multicast_OnTakeDamage Parms{};

	Parms.DamageEvent = std::move(DamageEvent);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.Multicast_SetWeaponChangeData
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// const struct FWeaponChangeData&         NewWeaponChangeData                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bForceChangeData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::Multicast_SetWeaponChangeData(const struct FWeaponChangeData& NewWeaponChangeData, bool bForceChangeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "Multicast_SetWeaponChangeData");

	Params::TimeWatchCharacter_Multicast_SetWeaponChangeData Parms{};

	Parms.NewWeaponChangeData = std::move(NewWeaponChangeData);
	Parms.bForceChangeData = bForceChangeData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.Multicast_WeaponChangeForwardEndSnapshot
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// const TArray<uint8>&                    WeaponChangeSnapshot                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::Multicast_WeaponChangeForwardEndSnapshot(const TArray<uint8>& WeaponChangeSnapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "Multicast_WeaponChangeForwardEndSnapshot");

	Params::TimeWatchCharacter_Multicast_WeaponChangeForwardEndSnapshot Parms{};

	Parms.WeaponChangeSnapshot = std::move(WeaponChangeSnapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.OnAnimationBlueprintSet
// (Event, Public, BlueprintEvent)

void ATimeWatchCharacter::OnAnimationBlueprintSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnAnimationBlueprintSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TimeWatchCharacter.OnCharacterGrounded
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   VerticalSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::OnCharacterGrounded(float VerticalSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnCharacterGrounded");

	Params::TimeWatchCharacter_OnCharacterGrounded Parms{};

	Parms.VerticalSpeed = VerticalSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TimeWatchCharacter.OnGameStateChanged
// (Final, Native, Public)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnGameStateChanged");

	Params::TimeWatchCharacter_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.OnRespawn
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void ATimeWatchCharacter::OnRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnRespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TimeWatchCharacter.OnSavedFromPastDead
// (Final, Native, Public)
// Parameters:
// class UTimeWatchEvent*                  Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::OnSavedFromPastDead(class UTimeWatchEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnSavedFromPastDead");

	Params::TimeWatchCharacter_OnSavedFromPastDead Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.OnSprintEnabled
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::OnSprintEnabled(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnSprintEnabled");

	Params::TimeWatchCharacter_OnSprintEnabled Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TimeWatchCharacter.OnTeamAssigned
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::OnTeamAssigned(int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnTeamAssigned");

	Params::TimeWatchCharacter_OnTeamAssigned Parms{};

	Parms.TeamId = TeamId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TimeWatchCharacter.OnWeaponChanged
// (Final, Native, Public)
// Parameters:
// class ATemporalWeapon*                  NewWeapon                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::OnWeaponChanged(class ATemporalWeapon* NewWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnWeaponChanged");

	Params::TimeWatchCharacter_OnWeaponChanged Parms{};

	Parms.NewWeapon = NewWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.OnWeaponChanged_Multicast
// (Event, Protected, BlueprintEvent)

void ATimeWatchCharacter::OnWeaponChanged_Multicast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnWeaponChanged_Multicast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TimeWatchCharacter.OnWeaponDrawedCosmetics
// (Event, Public, BlueprintEvent)
// Parameters:
// class AWeapon*                          WeaponDrawed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::OnWeaponDrawedCosmetics(class AWeapon* WeaponDrawed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnWeaponDrawedCosmetics");

	Params::TimeWatchCharacter_OnWeaponDrawedCosmetics Parms{};

	Parms.WeaponDrawed = WeaponDrawed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TimeWatchCharacter.OnWeaponHolsteredCosmetics
// (Event, Public, BlueprintEvent)
// Parameters:
// class AWeapon*                          WeaponHolstered                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::OnWeaponHolsteredCosmetics(class AWeapon* WeaponHolstered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "OnWeaponHolsteredCosmetics");

	Params::TimeWatchCharacter_OnWeaponHolsteredCosmetics Parms{};

	Parms.WeaponHolstered = WeaponHolstered;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TimeWatchCharacter.RagdollAttachment
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSimulatePhysics                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::RagdollAttachment(bool bNewState, bool bSimulatePhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "RagdollAttachment");

	Params::TimeWatchCharacter_RagdollAttachment Parms{};

	Parms.bNewState = bNewState;
	Parms.bSimulatePhysics = bSimulatePhysics;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.ResetADS
// (Final, Native, Public)
// Parameters:
// bool                                    bResetMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::ResetADS(bool bResetMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "ResetADS");

	Params::TimeWatchCharacter_ResetADS Parms{};

	Parms.bResetMesh = bResetMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.SelectWeaponSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WeaponSlotIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::SelectWeaponSlot(int32 WeaponSlotIndex, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "SelectWeaponSlot");

	Params::TimeWatchCharacter_SelectWeaponSlot Parms{};

	Parms.WeaponSlotIndex = WeaponSlotIndex;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.Server_SetupWeaponChange
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   PreviousWeaponSlotIndex                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::Server_SetupWeaponChange(int32 PreviousWeaponSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "Server_SetupWeaponChange");

	Params::TimeWatchCharacter_Server_SetupWeaponChange Parms{};

	Parms.PreviousWeaponSlotIndex = PreviousWeaponSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.SetCloneName
// (Event, Public, BlueprintEvent)

void ATimeWatchCharacter::SetCloneName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "SetCloneName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TimeWatchCharacter.SetCollisionResponseOnDeath
// (Final, Native, Public)
// Parameters:
// bool                                    IsDead                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::SetCollisionResponseOnDeath(bool IsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "SetCollisionResponseOnDeath");

	Params::TimeWatchCharacter_SetCollisionResponseOnDeath Parms{};

	Parms.IsDead = IsDead;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.SetCrosshairClass
// (Final, Native, Public)
// Parameters:
// TSubclassOf<class UNGDCrosshairWidget>  CrosshairWidgetClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::SetCrosshairClass(TSubclassOf<class UNGDCrosshairWidget> CrosshairWidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "SetCrosshairClass");

	Params::TimeWatchCharacter_SetCrosshairClass Parms{};

	Parms.CrosshairWidgetClass = CrosshairWidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.SetHitDeathData
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Impuse                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::SetHitDeathData(const struct FVector& Impuse, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "SetHitDeathData");

	Params::TimeWatchCharacter_SetHitDeathData Parms{};

	Parms.Impuse = std::move(Impuse);
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.SetIsResyncing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::SetIsResyncing(bool Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "SetIsResyncing");

	Params::TimeWatchCharacter_SetIsResyncing Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.SetOverheadHUDOcclusion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldBeOccluded                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::SetOverheadHUDOcclusion(bool bShouldBeOccluded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "SetOverheadHUDOcclusion");

	Params::TimeWatchCharacter_SetOverheadHUDOcclusion Parms{};

	Parms.bShouldBeOccluded = bShouldBeOccluded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.SetOverheadVisibilityWhileDead
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    shouldBeVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchCharacter::SetOverheadVisibilityWhileDead(bool shouldBeVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "SetOverheadVisibilityWhileDead");

	Params::TimeWatchCharacter_SetOverheadVisibilityWhileDead Parms{};

	Parms.shouldBeVisible = shouldBeVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchCharacter.ShouldShowCloneInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::ShouldShowCloneInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "ShouldShowCloneInfo");

	Params::TimeWatchCharacter_ShouldShowCloneInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.BP_GetHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchCharacter::BP_GetHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "BP_GetHealth");

	Params::TimeWatchCharacter_BP_GetHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetActorPositionAtTime
// (Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   DesiredTimestamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldUseServerSamples                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ATimeWatchCharacter::GetActorPositionAtTime(float DesiredTimestamp, bool bShouldUseServerSamples) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetActorPositionAtTime");

	Params::TimeWatchCharacter_GetActorPositionAtTime Parms{};

	Parms.DesiredTimestamp = DesiredTimestamp;
	Parms.bShouldUseServerSamples = bShouldUseServerSamples;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetAimOffsets
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ATimeWatchCharacter::GetAimOffsets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetAimOffsets");

	Params::TimeWatchCharacter_GetAimOffsets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetAkPlayerMotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UNGDAkComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNGDAkComponent* ATimeWatchCharacter::GetAkPlayerMotion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetAkPlayerMotion");

	Params::TimeWatchCharacter_GetAkPlayerMotion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCameraComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraComponent* ATimeWatchCharacter::GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetCameraComponent");

	Params::TimeWatchCharacter_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetCameraLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ATimeWatchCharacter::GetCameraLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetCameraLocation");

	Params::TimeWatchCharacter_GetCameraLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetCameraOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ATimeWatchCharacter::GetCameraOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetCameraOffset");

	Params::TimeWatchCharacter_GetCameraOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetCharacterSKU
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString ATimeWatchCharacter::GetCharacterSKU() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetCharacterSKU");

	Params::TimeWatchCharacter_GetCharacterSKU Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetCloneIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchCharacter::GetCloneIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetCloneIndex");

	Params::TimeWatchCharacter_GetCloneIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetCosmeticWeaponMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFollowPoseableComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFollowPoseableComponent* ATimeWatchCharacter::GetCosmeticWeaponMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetCosmeticWeaponMesh");

	Params::TimeWatchCharacter_GetCosmeticWeaponMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetCurrentlyVisibleCosmeticWeapon
// (Final, Native, Public, Const)
// Parameters:
// class ATemporalWeapon*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATemporalWeapon* ATimeWatchCharacter::GetCurrentlyVisibleCosmeticWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetCurrentlyVisibleCosmeticWeapon");

	Params::TimeWatchCharacter_GetCurrentlyVisibleCosmeticWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetCurrentWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATemporalWeapon*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATemporalWeapon* ATimeWatchCharacter::GetCurrentWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetCurrentWeapon");

	Params::TimeWatchCharacter_GetCurrentWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetLastActiveWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATemporalWeapon*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATemporalWeapon* ATimeWatchCharacter::GetLastActiveWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetLastActiveWeapon");

	Params::TimeWatchCharacter_GetLastActiveWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetMesh1P
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ATimeWatchCharacter::GetMesh1P() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetMesh1P");

	Params::TimeWatchCharacter_GetMesh1P Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetMeshRagdoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ATimeWatchCharacter::GetMeshRagdoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetMeshRagdoll");

	Params::TimeWatchCharacter_GetMeshRagdoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetSavedVelocity
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ATimeWatchCharacter::GetSavedVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetSavedVelocity");

	Params::TimeWatchCharacter_GetSavedVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATimeWatchCharacter::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetTeamId");

	Params::TimeWatchCharacter_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetTPMeshOccluder
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* ATimeWatchCharacter::GetTPMeshOccluder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetTPMeshOccluder");

	Params::TimeWatchCharacter_GetTPMeshOccluder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.GetWeaponMeshRagdoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ATimeWatchCharacter::GetWeaponMeshRagdoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "GetWeaponMeshRagdoll");

	Params::TimeWatchCharacter_GetWeaponMeshRagdoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.HasSpawnProtection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::HasSpawnProtection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "HasSpawnProtection");

	Params::TimeWatchCharacter_HasSpawnProtection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsAlly
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsAlly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsAlly");

	Params::TimeWatchCharacter_IsAlly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsBlue
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsBlue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsBlue");

	Params::TimeWatchCharacter_IsBlue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsClone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsClone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsClone");

	Params::TimeWatchCharacter_IsClone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsDead
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsDead() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsDead");

	Params::TimeWatchCharacter_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsLocalTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsLocalTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsLocalTeam");

	Params::TimeWatchCharacter_IsLocalTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsPlayer");

	Params::TimeWatchCharacter_IsPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsRespawning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsRespawning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsRespawning");

	Params::TimeWatchCharacter_IsRespawning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsResyncing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsResyncing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsResyncing");

	Params::TimeWatchCharacter_IsResyncing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.IsUnderResetConditions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::IsUnderResetConditions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "IsUnderResetConditions");

	Params::TimeWatchCharacter_IsUnderResetConditions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchCharacter.UsedInLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchCharacter::UsedInLoop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchCharacter", "UsedInLoop");

	Params::TimeWatchCharacter_UsedInLoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWModeSelectionSlot.BP_AdjustItemTileImage
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bIsSmall                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsWeapon                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWModeSelectionSlot::BP_AdjustItemTileImage(const bool bIsSmall, const bool bIsWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWModeSelectionSlot", "BP_AdjustItemTileImage");

	Params::TWModeSelectionSlot_BP_AdjustItemTileImage Parms{};

	Parms.bIsSmall = bIsSmall;
	Parms.bIsWeapon = bIsWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWModeSelectionSlot.GetButtonID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTWModeSelectionSlot::GetButtonID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWModeSelectionSlot", "GetButtonID");

	Params::TWModeSelectionSlot_GetButtonID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWModeSelectionSlot.OnButtonClicked
// (Final, Native, Protected)

void UTWModeSelectionSlot::OnButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWModeSelectionSlot", "OnButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWModeSelectionSlot.OnButtonHovered
// (Final, Native, Protected)

void UTWModeSelectionSlot::OnButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWModeSelectionSlot", "OnButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWModeSelectionSlot.OnButtonRightClicked
// (Final, Native, Protected)

void UTWModeSelectionSlot::OnButtonRightClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWModeSelectionSlot", "OnButtonRightClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWModeSelectionSlot.OnButtonUnhovered
// (Final, Native, Protected)

void UTWModeSelectionSlot::OnButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWModeSelectionSlot", "OnButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWModeSelectionSlot.GetButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UButton*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UButton* UTWModeSelectionSlot::GetButton() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWModeSelectionSlot", "GetButton");

	Params::TWModeSelectionSlot_GetButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWModeSelectionSlot.GetStandardButton
// (Final, Native, Public, Const)
// Parameters:
// class UTWStandardButtonWidget*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWStandardButtonWidget* UTWModeSelectionSlot::GetStandardButton() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWModeSelectionSlot", "GetStandardButton");

	Params::TWModeSelectionSlot_GetStandardButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.BP_RerunConstructionScripts
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchFunctionLibrary::BP_RerunConstructionScripts(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "BP_RerunConstructionScripts");

	Params::TimeWatchFunctionLibrary_BP_RerunConstructionScripts Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchFunctionLibrary.BP_TakeDamage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNGDDamageEvent&           DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchFunctionLibrary::BP_TakeDamage(class AActor* ActorToDamage, float Damage, const struct FNGDDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "BP_TakeDamage");

	Params::TimeWatchFunctionLibrary_BP_TakeDamage Parms{};

	Parms.ActorToDamage = ActorToDamage;
	Parms.Damage = Damage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetActionKeyFriendlyName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MappingGroup                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              KeyGroup                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUsePlayerKeyGroup                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTimeWatchFunctionLibrary::GetActionKeyFriendlyName(class APlayerController* Player, const class FName& ActionName, int32 MappingGroup, const struct FGameplayTag& KeyGroup, bool bUsePlayerKeyGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetActionKeyFriendlyName");

	Params::TimeWatchFunctionLibrary_GetActionKeyFriendlyName Parms{};

	Parms.Player = Player;
	Parms.ActionName = ActionName;
	Parms.MappingGroup = MappingGroup;
	Parms.KeyGroup = std::move(KeyGroup);
	Parms.bUsePlayerKeyGroup = bUsePlayerKeyGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetActorClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AActor> UTimeWatchFunctionLibrary::GetActorClass(class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetActorClass");

	Params::TimeWatchFunctionLibrary_GetActorClass Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetActorTransformFromHitResult
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVector&                   Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaYaw                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UTimeWatchFunctionLibrary::GetActorTransformFromHitResult(const struct FHitResult& HitResult, const struct FVector& Offset, float DeltaYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetActorTransformFromHitResult");

	Params::TimeWatchFunctionLibrary_GetActorTransformFromHitResult Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Offset = std::move(Offset);
	Parms.DeltaYaw = DeltaYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetAnimMontageLength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTimeWatchFunctionLibrary::GetAnimMontageLength(class UAnimMontage* AnimMontage, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetAnimMontageLength");

	Params::TimeWatchFunctionLibrary_GetAnimMontageLength Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetAnimMontagePosition
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTimeWatchFunctionLibrary::GetAnimMontagePosition(class UAnimInstance* AnimInstance, class UAnimMontage* AnimMontage, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetAnimMontagePosition");

	Params::TimeWatchFunctionLibrary_GetAnimMontagePosition Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.AnimMontage = AnimMontage;
	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetAxisKeyFriendlyName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      AxisName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MappingGroup                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              KeyGroup                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUsePlayerKeyGroup                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTimeWatchFunctionLibrary::GetAxisKeyFriendlyName(class APlayerController* Player, const class FName& AxisName, float Scale, int32 MappingGroup, const struct FGameplayTag& KeyGroup, bool bUsePlayerKeyGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetAxisKeyFriendlyName");

	Params::TimeWatchFunctionLibrary_GetAxisKeyFriendlyName Parms{};

	Parms.Player = Player;
	Parms.AxisName = AxisName;
	Parms.Scale = Scale;
	Parms.MappingGroup = MappingGroup;
	Parms.KeyGroup = std::move(KeyGroup);
	Parms.bUsePlayerKeyGroup = bUsePlayerKeyGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetColorForClone
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTeamColorConfig&          TeamColorRef                                           (Parm, NativeAccessSpecifierPublic)
// class ATimeWatchCharacter*              TWCharAsContext                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UTimeWatchFunctionLibrary::GetColorForClone(const struct FTeamColorConfig& TeamColorRef, class ATimeWatchCharacter* TWCharAsContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetColorForClone");

	Params::TimeWatchFunctionLibrary_GetColorForClone Parms{};

	Parms.TeamColorRef = std::move(TeamColorRef);
	Parms.TWCharAsContext = TWCharAsContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetColorForTeam
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTeamColorConfig&          TeamColorRef                                           (Parm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UTimeWatchFunctionLibrary::GetColorForTeam(const struct FTeamColorConfig& TeamColorRef, class UObject* Context, int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetColorForTeam");

	Params::TimeWatchFunctionLibrary_GetColorForTeam Parms{};

	Parms.TeamColorRef = std::move(TeamColorRef);
	Parms.Context = Context;
	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetControllerTypeName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTimeWatchFunctionLibrary::GetControllerTypeName(class ACharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetControllerTypeName");

	Params::TimeWatchFunctionLibrary_GetControllerTypeName Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetCosmeticLoopRemainingTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InContext                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTimeWatchFunctionLibrary::GetCosmeticLoopRemainingTime(class UObject* InContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetCosmeticLoopRemainingTime");

	Params::TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime Parms{};

	Parms.InContext = InContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetCosmeticRemainingRelativeTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InContext                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTimeWatchFunctionLibrary::GetCosmeticRemainingRelativeTime(class UObject* InContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetCosmeticRemainingRelativeTime");

	Params::TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime Parms{};

	Parms.InContext = InContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentColorSchemeFromCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ATimeWatchCharacter*              InCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWidgetColorStructure            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FWidgetColorStructure UTimeWatchFunctionLibrary::GetCurrentColorSchemeFromCharacter(class ATimeWatchCharacter* InCharacter, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetCurrentColorSchemeFromCharacter");

	Params::TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter Parms{};

	Parms.InCharacter = InCharacter;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentColorSchemeFromController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AFluxPlayerController*            InPlayerController                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWidgetColorStructure            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FWidgetColorStructure UTimeWatchFunctionLibrary::GetCurrentColorSchemeFromController(class AFluxPlayerController* InPlayerController, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetCurrentColorSchemeFromController");

	Params::TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController Parms{};

	Parms.InPlayerController = InPlayerController;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentColorSchemeFromID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWidgetColorStructure            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FWidgetColorStructure UTimeWatchFunctionLibrary::GetCurrentColorSchemeFromID(int32 TeamId, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetCurrentColorSchemeFromID");

	Params::TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID Parms{};

	Parms.TeamId = TeamId;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentGameModeData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameModeData                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameModeData UTimeWatchFunctionLibrary::GetCurrentGameModeData(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetCurrentGameModeData");

	Params::TimeWatchFunctionLibrary_GetCurrentGameModeData Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentGameModeType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameModeType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGameModeType UTimeWatchFunctionLibrary::GetCurrentGameModeType(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetCurrentGameModeType");

	Params::TimeWatchFunctionLibrary_GetCurrentGameModeType Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentViewTargetAsCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InContext                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* UTimeWatchFunctionLibrary::GetCurrentViewTargetAsCharacter(class UObject* InContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetCurrentViewTargetAsCharacter");

	Params::TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter Parms{};

	Parms.InContext = InContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetDebugPlayerIntros
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSoftClassPtr<class UClass>>*    Soft_IntroClasses                                      (Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<int32>*                          CharIndexes                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTimeWatchFunctionLibrary::GetDebugPlayerIntros(class UObject* C, TArray<TSoftClassPtr<class UClass>>* Soft_IntroClasses, TArray<int32>* CharIndexes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetDebugPlayerIntros");

	Params::TimeWatchFunctionLibrary_GetDebugPlayerIntros Parms{};

	Parms.C = C;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Soft_IntroClasses != nullptr)
		*Soft_IntroClasses = std::move(Parms.Soft_IntroClasses);

	if (CharIndexes != nullptr)
		*CharIndexes = std::move(Parms.CharIndexes);
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetDesiredColorIndexByIDs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTimeWatchFunctionLibrary::GetDesiredColorIndexByIDs(class UObject* Context, int32 TeamIndex, int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetDesiredColorIndexByIDs");

	Params::TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs Parms{};

	Parms.Context = Context;
	Parms.TeamIndex = TeamIndex;
	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetFloatAsTextWithPrecision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Precision                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeLeadingZero                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTimeWatchFunctionLibrary::GetFloatAsTextWithPrecision(float FloatValue, int32 Precision, bool IncludeLeadingZero)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetFloatAsTextWithPrecision");

	Params::TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision Parms{};

	Parms.FloatValue = FloatValue;
	Parms.Precision = Precision;
	Parms.IncludeLeadingZero = IncludeLeadingZero;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetGameInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InContext                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTimeWatchGameInstance*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTimeWatchGameInstance* UTimeWatchFunctionLibrary::GetGameInstance(class UObject* InContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetGameInstance");

	Params::TimeWatchFunctionLibrary_GetGameInstance Parms{};

	Parms.InContext = InContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetGameMaps
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UTimeWatchFunctionLibrary::GetGameMaps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetGameMaps");

	Params::TimeWatchFunctionLibrary_GetGameMaps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetGameVersionString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTimeWatchFunctionLibrary::GetGameVersionString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetGameVersionString");

	Params::TimeWatchFunctionLibrary_GetGameVersionString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetLocalColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTeamColorConfig&          TeamColorRef                                           (Parm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UTimeWatchFunctionLibrary::GetLocalColor(const struct FTeamColorConfig& TeamColorRef, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetLocalColor");

	Params::TimeWatchFunctionLibrary_GetLocalColor Parms{};

	Parms.TeamColorRef = std::move(TeamColorRef);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetLocalPlayerId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTimeWatchFunctionLibrary::GetLocalPlayerId(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetLocalPlayerId");

	Params::TimeWatchFunctionLibrary_GetLocalPlayerId Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetLocalTeamId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTimeWatchFunctionLibrary::GetLocalTeamId(class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetLocalTeamId");

	Params::TimeWatchFunctionLibrary_GetLocalTeamId Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetMapsFromFolder
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    FolderName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UTimeWatchFunctionLibrary::GetMapsFromFolder(const class FString& FolderName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetMapsFromFolder");

	Params::TimeWatchFunctionLibrary_GetMapsFromFolder Parms{};

	Parms.FolderName = std::move(FolderName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetPlayerIntroBindings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULevelSequencePlayer*             InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TrackSubString                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMovieSceneObjectBindingID>*OutBinding                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTimeWatchFunctionLibrary::GetPlayerIntroBindings(class ULevelSequencePlayer* InPlayer, const class FString& TrackSubString, TArray<struct FMovieSceneObjectBindingID>* OutBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetPlayerIntroBindings");

	Params::TimeWatchFunctionLibrary_GetPlayerIntroBindings Parms{};

	Parms.InPlayer = InPlayer;
	Parms.TrackSubString = std::move(TrackSubString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBinding != nullptr)
		*OutBinding = std::move(Parms.OutBinding);
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetRandomValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Seed                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTimeWatchFunctionLibrary::GetRandomValue(int32 Seed, int32 X, int32 Y, int32 Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetRandomValue");

	Params::TimeWatchFunctionLibrary_GetRandomValue Parms{};

	Parms.Seed = Seed;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetRemoteColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTeamColorConfig&          TeamColorRef                                           (Parm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UTimeWatchFunctionLibrary::GetRemoteColor(const struct FTeamColorConfig& TeamColorRef, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetRemoteColor");

	Params::TimeWatchFunctionLibrary_GetRemoteColor Parms{};

	Parms.TeamColorRef = std::move(TeamColorRef);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetSnapRotationFromNormal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UTimeWatchFunctionLibrary::GetSnapRotationFromNormal(const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetSnapRotationFromNormal");

	Params::TimeWatchFunctionLibrary_GetSnapRotationFromNormal Parms{};

	Parms.Normal = std::move(Normal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.GetTutorialMaps
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UTimeWatchFunctionLibrary::GetTutorialMaps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "GetTutorialMaps");

	Params::TimeWatchFunctionLibrary_GetTutorialMaps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.HasAbility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InContext                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CharacterSKU                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AbilityIdentifier                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchFunctionLibrary::HasAbility(class UObject* InContext, const class FString& CharacterSKU, const class FString& AbilityIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "HasAbility");

	Params::TimeWatchFunctionLibrary_HasAbility Parms{};

	Parms.InContext = InContext;
	Parms.CharacterSKU = std::move(CharacterSKU);
	Parms.AbilityIdentifier = std::move(AbilityIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.HasPassiveAbility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InContext                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CharacterSKU                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AbilityIdentifier                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchFunctionLibrary::HasPassiveAbility(class UObject* InContext, const class FString& CharacterSKU, const class FString& AbilityIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "HasPassiveAbility");

	Params::TimeWatchFunctionLibrary_HasPassiveAbility Parms{};

	Parms.InContext = InContext;
	Parms.CharacterSKU = std::move(CharacterSKU);
	Parms.AbilityIdentifier = std::move(AbilityIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.IsExpoMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InContext                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchFunctionLibrary::IsExpoMode(class UObject* InContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "IsExpoMode");

	Params::TimeWatchFunctionLibrary_IsExpoMode Parms{};

	Parms.InContext = InContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.IsPrimitiveOccluded
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Prim                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchFunctionLibrary::IsPrimitiveOccluded(class UPrimitiveComponent* Prim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "IsPrimitiveOccluded");

	Params::TimeWatchFunctionLibrary_IsPrimitiveOccluded Parms{};

	Parms.Prim = Prim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.IsUsingFixedTeamColors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    InContext                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchFunctionLibrary::IsUsingFixedTeamColors(const class UObject* InContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "IsUsingFixedTeamColors");

	Params::TimeWatchFunctionLibrary_IsUsingFixedTeamColors Parms{};

	Parms.InContext = InContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.MakeFilterHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTWGameplayTargetDataFilter&Filter                                                 (Parm, NativeAccessSpecifierPublic)
// class AActor*                           FilterActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTWGameplayTargetDataFilterHandleReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTWGameplayTargetDataFilterHandle UTimeWatchFunctionLibrary::MakeFilterHandle(const struct FTWGameplayTargetDataFilter& Filter, class AActor* FilterActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "MakeFilterHandle");

	Params::TimeWatchFunctionLibrary_MakeFilterHandle Parms{};

	Parms.Filter = std::move(Filter);
	Parms.FilterActor = FilterActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.SetAnimMontagePosition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            NewPosition                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchFunctionLibrary::SetAnimMontagePosition(class UAnimInstance* AnimInstance, class UAnimMontage* AnimMontage, const float& NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "SetAnimMontagePosition");

	Params::TimeWatchFunctionLibrary_SetAnimMontagePosition Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.AnimMontage = AnimMontage;
	Parms.NewPosition = NewPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchFunctionLibrary.SetLightingChannels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Prim                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLightingChannels&         NewLigthChannels                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UTimeWatchFunctionLibrary::SetLightingChannels(class UPrimitiveComponent* Prim, const struct FLightingChannels& NewLigthChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "SetLightingChannels");

	Params::TimeWatchFunctionLibrary_SetLightingChannels Parms{};

	Parms.Prim = Prim;
	Parms.NewLigthChannels = std::move(NewLigthChannels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchFunctionLibrary.SpawnActor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SpawnLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  SpawnRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UTimeWatchFunctionLibrary::SpawnActor(class AActor* Owner, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, TSubclassOf<class AActor> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "SpawnActor");

	Params::TimeWatchFunctionLibrary_SpawnActor Parms{};

	Parms.Owner = Owner;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.SpawnRotation = std::move(SpawnRotation);
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchFunctionLibrary.TraceToLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchFunctionLibrary::TraceToLog(class UObject* Context, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "TraceToLog");

	Params::TimeWatchFunctionLibrary_TraceToLog Parms{};

	Parms.Context = Context;
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchFunctionLibrary.UpdateUE4GlobalSoundVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchFunctionLibrary::UpdateUE4GlobalSoundVolume(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TimeWatchFunctionLibrary", "UpdateUE4GlobalSoundVolume");

	Params::TimeWatchFunctionLibrary_UpdateUE4GlobalSoundVolume Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.CancelMatchMaking
// (Final, Native, Public)

void UTimeWatchGameInstance::CancelMatchMaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "CancelMatchMaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.ChromaRefreshKeysColors
// (Final, Native, Public, BlueprintCallable)

void UTimeWatchGameInstance::ChromaRefreshKeysColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "ChromaRefreshKeysColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.DiscordStatus_MainMenu
// (Final, Native, Public, BlueprintCallable)

void UTimeWatchGameInstance::DiscordStatus_MainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "DiscordStatus_MainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.DiscordStatus_PlayingGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchGameInstance::DiscordStatus_PlayingGame(const class FString& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "DiscordStatus_PlayingGame");

	Params::TimeWatchGameInstance_DiscordStatus_PlayingGame Parms{};

	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.DumpLevelEntryData
// (Final, Exec, Native, Public)

void UTimeWatchGameInstance::DumpLevelEntryData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "DumpLevelEntryData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.GameSessionPlacementTest
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    PlacementId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchGameInstance::GameSessionPlacementTest(const class FString& PlacementId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GameSessionPlacementTest");

	Params::TimeWatchGameInstance_GameSessionPlacementTest Parms{};

	Parms.PlacementId = std::move(PlacementId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.GetTWBeaconClient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATWOnlineBeaconClient*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATWOnlineBeaconClient* UTimeWatchGameInstance::GetTWBeaconClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GetTWBeaconClient");

	Params::TimeWatchGameInstance_GetTWBeaconClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.OnChallengeCompletedBackendResponse
// (Final, Native, Public, HasOutParams)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Error                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNGDBackendReceivedRewards&RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTimeWatchGameInstance::OnChallengeCompletedBackendResponse(bool bWasSuccessful, const class FString& Error, const struct FNGDBackendReceivedRewards& RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "OnChallengeCompletedBackendResponse");

	Params::TimeWatchGameInstance_OnChallengeCompletedBackendResponse Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.Error = std::move(Error);
	Parms.RewardData = std::move(RewardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.OnReplayStarted
// (Final, Native, Public)
// Parameters:
// class UDemoNetDriver*                   DemoNetDriver                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchGameInstance::OnReplayStarted(class UDemoNetDriver* DemoNetDriver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "OnReplayStarted");

	Params::TimeWatchGameInstance_OnReplayStarted Parms{};

	Parms.DemoNetDriver = DemoNetDriver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.PlayLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UTWLevelEntry>        LevelEntry                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchGameInstance::PlayLevel(TSubclassOf<class UTWLevelEntry> LevelEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "PlayLevel");

	Params::TimeWatchGameInstance_PlayLevel Parms{};

	Parms.LevelEntry = LevelEntry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.PushExpoDoublesCheatKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      KeyPressed                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchGameInstance::PushExpoDoublesCheatKey(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "PushExpoDoublesCheatKey");

	Params::TimeWatchGameInstance_PushExpoDoublesCheatKey Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.RequestGameConfigFromBackend
// (Final, Exec, Native, Public)

void UTimeWatchGameInstance::RequestGameConfigFromBackend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "RequestGameConfigFromBackend");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.ResetInputBindings
// (Final, Native, Public, BlueprintCallable)

void UTimeWatchGameInstance::ResetInputBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "ResetInputBindings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.ShowDoublesPopup
// (Final, Native, Public, BlueprintCallable)

void UTimeWatchGameInstance::ShowDoublesPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "ShowDoublesPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.TestCrashGame
// (Final, Exec, Native, Public)

void UTimeWatchGameInstance::TestCrashGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "TestCrashGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.TestQueues
// (Final, Exec, Native, Public)

void UTimeWatchGameInstance::TestQueues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "TestQueues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.UpdateDiscordStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    State                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    details                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    StartTimer                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeWatchGameInstance::UpdateDiscordStatus(const class FString& State, const class FString& details, bool StartTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "UpdateDiscordStatus");

	Params::TimeWatchGameInstance_UpdateDiscordStatus Parms{};

	Parms.State = std::move(State);
	Parms.details = std::move(details);
	Parms.StartTimer = StartTimer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.WipePlayerPreferences
// (Final, Exec, Native, Public)

void UTimeWatchGameInstance::WipePlayerPreferences()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "WipePlayerPreferences");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TimeWatchGameInstance.ArePlayerTitlesEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchGameInstance::ArePlayerTitlesEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "ArePlayerTitlesEnabled");

	Params::TimeWatchGameInstance_ArePlayerTitlesEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.GetExpoExpectedSpectators
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTimeWatchGameInstance::GetExpoExpectedSpectators() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GetExpoExpectedSpectators");

	Params::TimeWatchGameInstance_GetExpoExpectedSpectators Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.GetExpoGraphicOptionsLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchGameInstance::GetExpoGraphicOptionsLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GetExpoGraphicOptionsLocked");

	Params::TimeWatchGameInstance_GetExpoGraphicOptionsLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.GetExpoTitle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTimeWatchGameInstance::GetExpoTitle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GetExpoTitle");

	Params::TimeWatchGameInstance_GetExpoTitle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.GetExpoVideoVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTimeWatchGameInstance::GetExpoVideoVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GetExpoVideoVolume");

	Params::TimeWatchGameInstance_GetExpoVideoVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.GetGameGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWGameGlobals*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWGameGlobals* UTimeWatchGameInstance::GetGameGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GetGameGlobals");

	Params::TimeWatchGameInstance_GetGameGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.GetGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWGlobals*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWGlobals* UTimeWatchGameInstance::GetGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GetGlobals");

	Params::TimeWatchGameInstance_GetGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.GetStoreGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWStoreGlobals*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWStoreGlobals* UTimeWatchGameInstance::GetStoreGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "GetStoreGlobals");

	Params::TimeWatchGameInstance_GetStoreGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.IsCurrentLevelChallenge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchGameInstance::IsCurrentLevelChallenge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "IsCurrentLevelChallenge");

	Params::TimeWatchGameInstance_IsCurrentLevelChallenge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.IsExpoDoubles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchGameInstance::IsExpoDoubles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "IsExpoDoubles");

	Params::TimeWatchGameInstance_IsExpoDoubles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.IsExpoMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchGameInstance::IsExpoMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "IsExpoMode");

	Params::TimeWatchGameInstance_IsExpoMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.IsExpoSpectator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchGameInstance::IsExpoSpectator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "IsExpoSpectator");

	Params::TimeWatchGameInstance_IsExpoSpectator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchGameInstance.IsGameHUDStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTimeWatchGameInstance::IsGameHUDStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchGameInstance", "IsGameHUDStarted");

	Params::TimeWatchGameInstance_IsGameHUDStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPlayerInfoWidgetComponent.Initialize
// (Final, Native, Protected)

void UTWPlayerInfoWidgetComponent::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerInfoWidgetComponent", "Initialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerInfoWidgetComponent.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWPlayerInfoWidgetComponent::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerInfoWidgetComponent", "OnGameStateChanged");

	Params::TWPlayerInfoWidgetComponent_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerInfoWidgetComponent.UpdateWidgetDeathTimer
// (Final, Native, Protected)

void UTWPlayerInfoWidgetComponent::UpdateWidgetDeathTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerInfoWidgetComponent", "UpdateWidgetDeathTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerInfoWidgetComponent.UpdateWidgetHealthBar
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWPlayerInfoWidgetComponent::UpdateWidgetHealthBar(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerInfoWidgetComponent", "UpdateWidgetHealthBar");

	Params::TWPlayerInfoWidgetComponent_UpdateWidgetHealthBar Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerInfoWidgetComponent.UpdateWidgetScale
// (Final, Native, Protected)

void UTWPlayerInfoWidgetComponent::UpdateWidgetScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerInfoWidgetComponent", "UpdateWidgetScale");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerInfoWidgetComponent.GetCloneOverHeadWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTWCloneOverheadWidget*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWCloneOverheadWidget* UTWPlayerInfoWidgetComponent::GetCloneOverHeadWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerInfoWidgetComponent", "GetCloneOverHeadWidget");

	Params::TWPlayerInfoWidgetComponent_GetCloneOverHeadWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchProjectile.BP_Initialize
// (Event, Public, BlueprintEvent)

void ATimeWatchProjectile::BP_Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchProjectile", "BP_Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TimeWatchProjectile.BP_UpdateCosmetics
// (Event, Public, BlueprintEvent)

void ATimeWatchProjectile::BP_UpdateCosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchProjectile", "BP_UpdateCosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TimeWatchProjectile.BP_IsReadyToBeDestroyed
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATimeWatchProjectile::BP_IsReadyToBeDestroyed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchProjectile", "BP_IsReadyToBeDestroyed");

	Params::TimeWatchProjectile_BP_IsReadyToBeDestroyed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchProjectile.BP_OnSetEnabled
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATimeWatchProjectile::BP_OnSetEnabled(bool NewState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchProjectile", "BP_OnSetEnabled");

	Params::TimeWatchProjectile_BP_OnSetEnabled Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TimeWatchProjectile.GetCosmeticCreationLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ATimeWatchProjectile::GetCosmeticCreationLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchProjectile", "GetCosmeticCreationLocation");

	Params::TimeWatchProjectile_GetCosmeticCreationLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchProjectile.GetCosmeticCreationTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchProjectile::GetCosmeticCreationTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchProjectile", "GetCosmeticCreationTime");

	Params::TimeWatchProjectile_GetCosmeticCreationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchProjectile.GetCosmeticImpactLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ATimeWatchProjectile::GetCosmeticImpactLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchProjectile", "GetCosmeticImpactLocation");

	Params::TimeWatchProjectile_GetCosmeticImpactLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TimeWatchProjectile.GetCosmeticImpactTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATimeWatchProjectile::GetCosmeticImpactTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TimeWatchProjectile", "GetCosmeticImpactTime");

	Params::TimeWatchProjectile_GetCosmeticImpactTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalProjectile.ForceOnProjectileOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATWPhysicalProjectile::ForceOnProjectileOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "ForceOnProjectileOverlap");

	Params::TWPhysicalProjectile_ForceOnProjectileOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPhysicalProjectile.OnCreated
// (Event, Public, BlueprintEvent)

void ATWPhysicalProjectile::OnCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "OnCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWPhysicalProjectile.OnExploded
// (Event, Public, BlueprintEvent)

void ATWPhysicalProjectile::OnExploded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "OnExploded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWPhysicalProjectile.OnProjectileHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATWPhysicalProjectile::OnProjectileHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "OnProjectileHit");

	Params::TWPhysicalProjectile_OnProjectileHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPhysicalProjectile.OnProjectileOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATWPhysicalProjectile::OnProjectileOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "OnProjectileOverlap");

	Params::TWPhysicalProjectile_OnProjectileOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPhysicalProjectile.OnRecycled
// (Event, Public, BlueprintEvent)

void ATWPhysicalProjectile::OnRecycled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "OnRecycled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWPhysicalProjectile.OnRep_ActivationData
// (Final, Native, Protected)

void ATWPhysicalProjectile::OnRep_ActivationData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "OnRep_ActivationData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPhysicalProjectile.OnRep_LastValidState
// (Native, Protected)

void ATWPhysicalProjectile::OnRep_LastValidState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "OnRep_LastValidState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPhysicalProjectile.GetRemainingTravelTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWPhysicalProjectile::GetRemainingTravelTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "GetRemainingTravelTime");

	Params::TWPhysicalProjectile_GetRemainingTravelTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalProjectile.HasHitCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWPhysicalProjectile::HasHitCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "HasHitCharacter");

	Params::TWPhysicalProjectile_HasHitCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalProjectile.ShouldUpdateMovement
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWPhysicalProjectile::ShouldUpdateMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalProjectile", "ShouldUpdateMovement");

	Params::TWPhysicalProjectile_ShouldUpdateMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.DrawDebugExplosion
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// const struct FVector&                   ExplosionLocation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExplosionRadius                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPhysicalExplodingProjectile::DrawDebugExplosion(const struct FVector& ExplosionLocation, float ExplosionRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "DrawDebugExplosion");

	Params::TWPhysicalExplodingProjectile_DrawDebugExplosion Parms{};

	Parms.ExplosionLocation = std::move(ExplosionLocation);
	Parms.ExplosionRadius = ExplosionRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.DrawDebugExplosionHit
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// const struct FVector&                   VictimLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RadiusIntersection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnteringExplosion                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPhysicalExplodingProjectile::DrawDebugExplosionHit(const struct FVector& VictimLocation, float RadiusIntersection, bool bEnteringExplosion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "DrawDebugExplosionHit");

	Params::TWPhysicalExplodingProjectile_DrawDebugExplosionHit Parms{};

	Parms.VictimLocation = std::move(VictimLocation);
	Parms.RadiusIntersection = RadiusIntersection;
	Parms.bEnteringExplosion = bEnteringExplosion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.GetExplosionTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWPhysicalExplodingProjectile::GetExplosionTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "GetExplosionTime");

	Params::TWPhysicalExplodingProjectile_GetExplosionTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.GetCosmeticExplosionRequiredTime
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWPhysicalExplodingProjectile::GetCosmeticExplosionRequiredTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "GetCosmeticExplosionRequiredTime");

	Params::TWPhysicalExplodingProjectile_GetCosmeticExplosionRequiredTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.GetExplosionMaxSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWPhysicalExplodingProjectile::GetExplosionMaxSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "GetExplosionMaxSize");

	Params::TWPhysicalExplodingProjectile_GetExplosionMaxSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.GetExplosionSize
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWPhysicalExplodingProjectile::GetExplosionSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "GetExplosionSize");

	Params::TWPhysicalExplodingProjectile_GetExplosionSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.GetExplosionTimestamp
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWPhysicalExplodingProjectile::GetExplosionTimestamp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "GetExplosionTimestamp");

	Params::TWPhysicalExplodingProjectile_GetExplosionTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.GetRelativeExplosionTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWPhysicalExplodingProjectile::GetRelativeExplosionTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "GetRelativeExplosionTime");

	Params::TWPhysicalExplodingProjectile_GetRelativeExplosionTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPhysicalExplodingProjectile.IsExploding
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWPhysicalExplodingProjectile::IsExploding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPhysicalExplodingProjectile", "IsExploding");

	Params::TWPhysicalExplodingProjectile_IsExploding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbilitiesComponent.GetGameplayTasksComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGameplayTasksComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayTasksComponent* UTWAbilitiesComponent::GetGameplayTasksComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "GetGameplayTasksComponent");

	Params::TWAbilitiesComponent_GetGameplayTasksComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbilitiesComponent.Multicast_ActivateAbility
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// const struct FTWAbilityCustomDataHandle&AbilityDataHandle                                      (Parm, NativeAccessSpecifierPublic)

void UTWAbilitiesComponent::Multicast_ActivateAbility(const struct FTWAbilityCustomDataHandle& AbilityDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "Multicast_ActivateAbility");

	Params::TWAbilitiesComponent_Multicast_ActivateAbility Parms{};

	Parms.AbilityDataHandle = std::move(AbilityDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilitiesComponent.OnRep_Energy
// (Final, Native, Protected)
// Parameters:
// float                                   OldEnergy                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbilitiesComponent::OnRep_Energy(float OldEnergy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "OnRep_Energy");

	Params::TWAbilitiesComponent_OnRep_Energy Parms{};

	Parms.OldEnergy = OldEnergy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilitiesComponent.Server_ActivateAbility
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// const struct FTWAbilityCustomDataHandle&AbilityDataHandle                                      (Parm, NativeAccessSpecifierPublic)

void UTWAbilitiesComponent::Server_ActivateAbility(const struct FTWAbilityCustomDataHandle& AbilityDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "Server_ActivateAbility");

	Params::TWAbilitiesComponent_Server_ActivateAbility Parms{};

	Parms.AbilityDataHandle = std::move(AbilityDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilitiesComponent.TargetCancel
// (Native, Public, BlueprintCallable)

void UTWAbilitiesComponent::TargetCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "TargetCancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilitiesComponent.TargetConfirm
// (Native, Public, BlueprintCallable)

void UTWAbilitiesComponent::TargetConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "TargetConfirm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilitiesComponent.TryActivateAbility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UTWAbility>           Ability                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbilitiesComponent::TryActivateAbility(TSubclassOf<class UTWAbility> Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "TryActivateAbility");

	Params::TWAbilitiesComponent_TryActivateAbility Parms{};

	Parms.Ability = Ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilitiesComponent.GetAbilityCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   AbilityIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTWAbilitiesComponent::GetAbilityCost(int32 AbilityIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "GetAbilityCost");

	Params::TWAbilitiesComponent_GetAbilityCost Parms{};

	Parms.AbilityIndex = AbilityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbilitiesComponent.GetGameState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchGameState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchGameState* UTWAbilitiesComponent::GetGameState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "GetGameState");

	Params::TWAbilitiesComponent_GetGameState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbilitiesComponent.GetOwningCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* UTWAbilitiesComponent::GetOwningCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilitiesComponent", "GetOwningCharacter");

	Params::TWAbilitiesComponent_GetOwningCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWOnlineBeaconClient.Client_CancelMatchmaking
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)

void ATWOnlineBeaconClient::Client_CancelMatchmaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Client_CancelMatchmaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Client_GoCustomMatch
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)

void ATWOnlineBeaconClient::Client_GoCustomMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Client_GoCustomMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Client_ReplicateLobbySetting
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)
// Parameters:
// const ELobbyReplicableField&            Field                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWOnlineBeaconClient::Client_ReplicateLobbySetting(const ELobbyReplicableField& Field, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Client_ReplicateLobbySetting");

	Params::TWOnlineBeaconClient_Client_ReplicateLobbySetting Parms{};

	Parms.Field = Field;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Client_StartMatchmaking
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)
// Parameters:
// ETWMatchQueueType                       MatchQueueType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LobbyID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWOnlineBeaconClient::Client_StartMatchmaking(ETWMatchQueueType MatchQueueType, const class FString& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Client_StartMatchmaking");

	Params::TWOnlineBeaconClient_Client_StartMatchmaking Parms{};

	Parms.MatchQueueType = MatchQueueType;
	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.OnCustomLobbySettingChange
// (Final, Native, Protected)
// Parameters:
// ELobbyReplicableField                   Field                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWOnlineBeaconClient::OnCustomLobbySettingChange(ELobbyReplicableField Field, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "OnCustomLobbySettingChange");

	Params::TWOnlineBeaconClient_OnCustomLobbySettingChange Parms{};

	Parms.Field = Field;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Server_CancelMatchmaking
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ATWOnlineBeaconClient::Server_CancelMatchmaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Server_CancelMatchmaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Server_ChangeLobbyTeam
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ATWOnlineBeaconClient::Server_ChangeLobbyTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Server_ChangeLobbyTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Server_GoAsSpectator
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ATWOnlineBeaconClient::Server_GoAsSpectator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Server_GoAsSpectator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Server_GoCustomMatch
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ATWOnlineBeaconClient::Server_GoCustomMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Server_GoCustomMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Server_SetUserId
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const class FString&                    InUserID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWOnlineBeaconClient::Server_SetUserId(const class FString& InUserID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Server_SetUserId");

	Params::TWOnlineBeaconClient_Server_SetUserId Parms{};

	Parms.InUserID = std::move(InUserID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Server_SetUserUnlockedCasual
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const bool                              bUnlockedCasual                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWOnlineBeaconClient::Server_SetUserUnlockedCasual(const bool bUnlockedCasual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Server_SetUserUnlockedCasual");

	Params::TWOnlineBeaconClient_Server_SetUserUnlockedCasual Parms{};

	Parms.bUnlockedCasual = bUnlockedCasual;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Server_SetUserUnlockedRanked
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const bool                              bUnlockedRanked                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWOnlineBeaconClient::Server_SetUserUnlockedRanked(const bool bUnlockedRanked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Server_SetUserUnlockedRanked");

	Params::TWOnlineBeaconClient_Server_SetUserUnlockedRanked Parms{};

	Parms.bUnlockedRanked = bUnlockedRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOnlineBeaconClient.Server_StartMatchmaking
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// ETWMatchQueueType                       MatchQueueType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWOnlineBeaconClient::Server_StartMatchmaking(ETWMatchQueueType MatchQueueType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOnlineBeaconClient", "Server_StartMatchmaking");

	Params::TWOnlineBeaconClient_Server_StartMatchmaking Parms{};

	Parms.MatchQueueType = MatchQueueType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbility.BP_Cancel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTWGameplayAbilitySystem*         InTWAbilitySystem                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbility::BP_Cancel(class UTWGameplayAbilitySystem* InTWAbilitySystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_Cancel");

	Params::TWAbility_BP_Cancel Parms{};

	Parms.InTWAbilitySystem = InTWAbilitySystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbility.BP_Commit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTWGameplayAbilitySystem*         InTWAbilitySystem                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbility::BP_Commit(class UTWGameplayAbilitySystem* InTWAbilitySystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_Commit");

	Params::TWAbility_BP_Commit Parms{};

	Parms.InTWAbilitySystem = InTWAbilitySystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbility.BP_OnActivated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UTWGameplayAbilitySystem*         InTWAbilitySystem                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTWAbilityCustomDataHandle&AbilityDataHandle                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bShouldTriggerLogic                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbility::BP_OnActivated(class UTWGameplayAbilitySystem* InTWAbilitySystem, const struct FTWAbilityCustomDataHandle& AbilityDataHandle, const bool bShouldTriggerLogic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_OnActivated");

	Params::TWAbility_BP_OnActivated Parms{};

	Parms.InTWAbilitySystem = InTWAbilitySystem;
	Parms.AbilityDataHandle = std::move(AbilityDataHandle);
	Parms.bShouldTriggerLogic = bShouldTriggerLogic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWAbility.BP_OnFinished
// (Event, Public, BlueprintEvent)

void UTWAbility::BP_OnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_OnFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWAbility.BP_OnPause
// (Event, Public, BlueprintEvent)

void UTWAbility::BP_OnPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_OnPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWAbility.BP_OnPreActivated
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTWGameplayAbilitySystem*         InTWAbilitySystem                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTWAbilitiesComponent*            Caster_AbilityComp                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbility::BP_OnPreActivated(class UTWGameplayAbilitySystem* InTWAbilitySystem, class UTWAbilitiesComponent* Caster_AbilityComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_OnPreActivated");

	Params::TWAbility_BP_OnPreActivated Parms{};

	Parms.InTWAbilitySystem = InTWAbilitySystem;
	Parms.Caster_AbilityComp = Caster_AbilityComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWAbility.BP_OnReExecuted
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UTWGameplayAbilitySystem*         InTWAbilitySystem                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTWAbilityCustomDataHandle&AbilityDataHandle                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bShouldTriggerLogic                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbility::BP_OnReExecuted(class UTWGameplayAbilitySystem* InTWAbilitySystem, const struct FTWAbilityCustomDataHandle& AbilityDataHandle, const bool bShouldTriggerLogic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_OnReExecuted");

	Params::TWAbility_BP_OnReExecuted Parms{};

	Parms.InTWAbilitySystem = InTWAbilitySystem;
	Parms.AbilityDataHandle = std::move(AbilityDataHandle);
	Parms.bShouldTriggerLogic = bShouldTriggerLogic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWAbility.BP_OnRestoreAfterNonResetOvertime
// (Event, Public, BlueprintEvent)

void UTWAbility::BP_OnRestoreAfterNonResetOvertime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_OnRestoreAfterNonResetOvertime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWAbility.BP_OnResume
// (Event, Public, BlueprintEvent)

void UTWAbility::BP_OnResume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_OnResume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWAbility.BP_Update
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbility::BP_Update(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "BP_Update");

	Params::TWAbility_BP_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWAbility.EndAbility
// (Final, Native, Public, BlueprintCallable)

void UTWAbility::EndAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "EndAbility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbility.MakeAbilityCustomDataHandle
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UTWAbilitiesComponent*            Caster_AbilityComp                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTWAbilityCustomDataHandle       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTWAbilityCustomDataHandle UTWAbility::MakeAbilityCustomDataHandle(class UTWAbilitiesComponent* Caster_AbilityComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "MakeAbilityCustomDataHandle");

	Params::TWAbility_MakeAbilityCustomDataHandle Parms{};

	Parms.Caster_AbilityComp = Caster_AbilityComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbility.GetAbilityData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTWAbilityData                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FTWAbilityData UTWAbility::GetAbilityData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "GetAbilityData");

	Params::TWAbility_GetAbilityData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbility.GetInstanceData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTWAbilityInstanceData           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTWAbilityInstanceData UTWAbility::GetInstanceData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbility", "GetInstanceData");

	Params::TWAbility_GetInstanceData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbilityMelee.BP_PlayMeleeImpactParticles
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTWAbilityMelee::BP_PlayMeleeImpactParticles(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "BP_PlayMeleeImpactParticles");

	Params::TWAbilityMelee_BP_PlayMeleeImpactParticles Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilityMelee.DoMeleeAttack
// (Final, Native, Protected, BlueprintCallable)

void UTWAbilityMelee::DoMeleeAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "DoMeleeAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilityMelee.InitAbility
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FTWAbilityExecutionData&   inCastData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTWAbilityMelee::InitAbility(const struct FTWAbilityExecutionData& inCastData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "InitAbility");

	Params::TWAbilityMelee_InitAbility Parms{};

	Parms.inCastData = std::move(inCastData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAbilityMelee.PlayBarrelHitFX
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTWAbilityMelee::PlayBarrelHitFX(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "PlayBarrelHitFX");

	Params::TWAbilityMelee_PlayBarrelHitFX Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWAbilityMelee.PlayDamageFX
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTWAbilityMelee::PlayDamageFX(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "PlayDamageFX");

	Params::TWAbilityMelee_PlayDamageFX Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWAbilityMelee.PlayOtherActorHitFX
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTWAbilityMelee::PlayOtherActorHitFX(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "PlayOtherActorHitFX");

	Params::TWAbilityMelee_PlayOtherActorHitFX Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWAbilityMelee.PlayPhysicsHitFX
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTWAbilityMelee::PlayPhysicsHitFX(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "PlayPhysicsHitFX");

	Params::TWAbilityMelee_PlayPhysicsHitFX Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWAbilityMelee.CalcHitSweep
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector*                         outStartPos                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         outEndPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAbilityMelee::CalcHitSweep(struct FVector* outStartPos, struct FVector* outEndPos) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "CalcHitSweep");

	Params::TWAbilityMelee_CalcHitSweep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (outStartPos != nullptr)
		*outStartPos = std::move(Parms.outStartPos);

	if (outEndPos != nullptr)
		*outEndPos = std::move(Parms.outEndPos);
}


// Function TimeWatch.TWAbilityMelee.GetDamageTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTWAbilityMelee::GetDamageTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "GetDamageTime");

	Params::TWAbilityMelee_GetDamageTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbilityMelee.GetDamageTimeOffset
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTWAbilityMelee::GetDamageTimeOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "GetDamageTimeOffset");

	Params::TWAbilityMelee_GetDamageTimeOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAbilityMelee.GetHit
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult*                      outFoundHit                                            (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWAbilityMelee::GetHit(struct FHitResult* outFoundHit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAbilityMelee", "GetHit");

	Params::TWAbilityMelee_GetHit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (outFoundHit != nullptr)
		*outFoundHit = std::move(Parms.outFoundHit);

	return Parms.ReturnValue;
}


// Function TimeWatch.TWActorCompass.OnPreUpdate
// (Native, Event, Protected, BlueprintEvent)

void UTWActorCompass::OnPreUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActorCompass", "OnPreUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWActorCompass.OnReset
// (Event, Public, BlueprintEvent)
// Parameters:
// const class AActor*                     OwnerActor                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWActorCompass::OnReset(const class AActor* OwnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActorCompass", "OnReset");

	Params::TWActorCompass_OnReset Parms{};

	Parms.OwnerActor = OwnerActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWActorCompass.OnUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWActorCompass::OnUpdated(float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActorCompass", "OnUpdated");

	Params::TWActorCompass_OnUpdated Parms{};

	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWActorCompass.IsCompassVisible
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWActorCompass::IsCompassVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWActorCompass", "IsCompassVisible");

	Params::TWActorCompass_IsCompassVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAnnouncer.DispatchCustomEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    EventId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWAnnouncer::DispatchCustomEvent(const class FString& EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAnnouncer", "DispatchCustomEvent");

	Params::TWAnnouncer_DispatchCustomEvent Parms{};

	Parms.EventId = std::move(EventId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAnnouncer.DispatchEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTimeWatchEvent*                  Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWAnnouncer::DispatchEvent(class UTimeWatchEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAnnouncer", "DispatchEvent");

	Params::TWAnnouncer_DispatchEvent Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAnnouncer.IsCurrentEventOfClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UTimeWatchEvent>      EventClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWAnnouncer::IsCurrentEventOfClass(TSubclassOf<class UTimeWatchEvent> EventClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAnnouncer", "IsCurrentEventOfClass");

	Params::TWAnnouncer_IsCurrentEventOfClass Parms{};

	Parms.EventClass = EventClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWAutoSpectateComponent.BeginTransitionToThirdPerson
// (Final, Native, Protected)

void UTWAutoSpectateComponent::BeginTransitionToThirdPerson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAutoSpectateComponent", "BeginTransitionToThirdPerson");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAutoSpectateComponent.OnDeadCamTransitionFinished
// (Final, Native, Protected)

void UTWAutoSpectateComponent::OnDeadCamTransitionFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAutoSpectateComponent", "OnDeadCamTransitionFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAutoSpectateComponent.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAutoSpectateComponent::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAutoSpectateComponent", "OnGameStateChanged");

	Params::TWAutoSpectateComponent_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAutoSpectateComponent.OnInstigatorTransitionFinished
// (Final, Native, Protected)

void UTWAutoSpectateComponent::OnInstigatorTransitionFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAutoSpectateComponent", "OnInstigatorTransitionFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAutoSpectateComponent.OnRagdollCamFinished
// (Final, Native, Protected)

void UTWAutoSpectateComponent::OnRagdollCamFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAutoSpectateComponent", "OnRagdollCamFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAutoSpectateComponent.OnTeamScored
// (Final, Native, Protected)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWAutoSpectateComponent::OnTeamScored(int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAutoSpectateComponent", "OnTeamScored");

	Params::TWAutoSpectateComponent_OnTeamScored Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWAutoSpectateComponent.OnVictoryConditionReached
// (Final, Native, Protected)

void UTWAutoSpectateComponent::OnVictoryConditionReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWAutoSpectateComponent", "OnVictoryConditionReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlaybook.AddPingOnPlaybook
// (Final, Native, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   PingPlaybookPosition                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   PingNormal                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPlaybook::AddPingOnPlaybook(const struct FVector& PingPlaybookPosition, const struct FVector& PingNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlaybook", "AddPingOnPlaybook");

	Params::TWPlaybook_AddPingOnPlaybook Parms{};

	Parms.PingPlaybookPosition = std::move(PingPlaybookPosition);
	Parms.PingNormal = std::move(PingNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlaybook.DrawPlaybook
// (Event, Protected, BlueprintEvent)

void ATWPlaybook::DrawPlaybook()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlaybook", "DrawPlaybook");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWPlaybook.GetKillData
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class ATimeWatchCharacter*              Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FDeathData>*              OutDeathData                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ATWPlaybook::GetKillData(class ATimeWatchCharacter* Character, TArray<struct FDeathData>* OutDeathData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlaybook", "GetKillData");

	Params::TWPlaybook_GetKillData Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDeathData != nullptr)
		*OutDeathData = std::move(Parms.OutDeathData);
}


// Function TimeWatch.TWPlaybook.GetTrailData
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class ATimeWatchCharacter*              Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPointData>*              OutTrailData                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ATWPlaybook::GetTrailData(class ATimeWatchCharacter* Character, TArray<struct FPointData>* OutTrailData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlaybook", "GetTrailData");

	Params::TWPlaybook_GetTrailData Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTrailData != nullptr)
		*OutTrailData = std::move(Parms.OutTrailData);
}


// Function TimeWatch.TWPlaybook.OnPingAdded
// (Final, Native, Protected)
// Parameters:
// const struct FPingMarker&               NewPing                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ATWPlaybook::OnPingAdded(const struct FPingMarker& NewPing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlaybook", "OnPingAdded");

	Params::TWPlaybook_OnPingAdded Parms{};

	Parms.NewPing = std::move(NewPing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlaybook.OnPingRemoved
// (Final, Native, Protected)
// Parameters:
// int32                                   PingID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPlaybook::OnPingRemoved(int32 PingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlaybook", "OnPingRemoved");

	Params::TWPlaybook_OnPingRemoved Parms{};

	Parms.PingID = PingID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlaybook.OnStateChanged
// (Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPlaybook::OnStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlaybook", "OnStateChanged");

	Params::TWPlaybook_OnStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlaybook.ToggleCursorPlaybook
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bToggleValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPlaybook::ToggleCursorPlaybook(bool bToggleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlaybook", "ToggleCursorPlaybook");

	Params::TWPlaybook_ToggleCursorPlaybook Parms{};

	Parms.bToggleValue = bToggleValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWChallengeClock.SetTimer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       TimerDynamicDelegate                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWChallengeClock::SetTimer(TDelegate<void()> TimerDynamicDelegate, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWChallengeClock", "SetTimer");

	Params::TWChallengeClock_SetTimer Parms{};

	Parms.TimerDynamicDelegate = TimerDynamicDelegate;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWChallengeClock.StartChronometer
// (Final, Native, Public, BlueprintCallable)

void UTWChallengeClock::StartChronometer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWChallengeClock", "StartChronometer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWChallengeClock.StopChronometer
// (Final, Native, Public, BlueprintCallable)

void UTWChallengeClock::StopChronometer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWChallengeClock", "StopChronometer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWChallengeClock.StopTimer
// (Final, Native, Public, BlueprintCallable)

void UTWChallengeClock::StopTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWChallengeClock", "StopTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.CheckAndSetWeaponGhostMaterial
// (Final, Native, Public)

void UTWCharacterCustomizationComponent::CheckAndSetWeaponGhostMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "CheckAndSetWeaponGhostMaterial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.OnCustomizationReplicated
// (Final, Native, Protected)

void UTWCharacterCustomizationComponent::OnCustomizationReplicated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "OnCustomizationReplicated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.OnGameStateChanged
// (Final, Native, Public)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCharacterCustomizationComponent::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "OnGameStateChanged");

	Params::TWCharacterCustomizationComponent_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.OnRep_CustomizationPlayerState
// (Final, Native, Protected)

void UTWCharacterCustomizationComponent::OnRep_CustomizationPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "OnRep_CustomizationPlayerState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.SetScalarParameterValueOnMeshFP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InParameterName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCharacterCustomizationComponent::SetScalarParameterValueOnMeshFP(class FName InParameterName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "SetScalarParameterValueOnMeshFP");

	Params::TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP Parms{};

	Parms.InParameterName = InParameterName;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.SetScalarParameterValueOnMeshTP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InParameterName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCharacterCustomizationComponent::SetScalarParameterValueOnMeshTP(class FName InParameterName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "SetScalarParameterValueOnMeshTP");

	Params::TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP Parms{};

	Parms.InParameterName = InParameterName;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.SetVectorParameterValueOnMeshFP
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             InParameterName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCharacterCustomizationComponent::SetVectorParameterValueOnMeshFP(class FName InParameterName, const struct FLinearColor& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "SetVectorParameterValueOnMeshFP");

	Params::TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP Parms{};

	Parms.InParameterName = InParameterName;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.SetVectorParameterValueOnMeshTP
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             InParameterName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCharacterCustomizationComponent::SetVectorParameterValueOnMeshTP(class FName InParameterName, const struct FLinearColor& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "SetVectorParameterValueOnMeshTP");

	Params::TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP Parms{};

	Parms.InParameterName = InParameterName;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.UpdateCharacterMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsTimeGhost                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCharacterCustomizationComponent::UpdateCharacterMaterial(bool bIsTimeGhost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "UpdateCharacterMaterial");

	Params::TWCharacterCustomizationComponent_UpdateCharacterMaterial Parms{};

	Parms.bIsTimeGhost = bIsTimeGhost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.UpdateRagdollMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsTimeGhost                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCharacterCustomizationComponent::UpdateRagdollMaterial(bool bIsTimeGhost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "UpdateRagdollMaterial");

	Params::TWCharacterCustomizationComponent_UpdateRagdollMaterial Parms{};

	Parms.bIsTimeGhost = bIsTimeGhost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterCustomizationComponent.GetGhostMaterial
// (Final, Native, Public, Const)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UTWCharacterCustomizationComponent::GetGhostMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterCustomizationComponent", "GetGhostMaterial");

	Params::TWCharacterCustomizationComponent_GetGhostMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWCharacterGhost.Cosmetic_MimicCharacter
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWCharacterGhost::Cosmetic_MimicCharacter(class ATimeWatchCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterGhost", "Cosmetic_MimicCharacter");

	Params::TWCharacterGhost_Cosmetic_MimicCharacter Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWCharacterGhost.DestroyParadox
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bShouldDoAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWCharacterGhost::DestroyParadox(bool bShouldDoAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterGhost", "DestroyParadox");

	Params::TWCharacterGhost_DestroyParadox Parms{};

	Parms.bShouldDoAnimation = bShouldDoAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWCharacterGhost.MimicCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATimeWatchCharacter*              Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SkipDestruction                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRealTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWCharacterGhost::MimicCharacter(class ATimeWatchCharacter* Character, bool SkipDestruction, bool bRealTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterGhost", "MimicCharacter");

	Params::TWCharacterGhost_MimicCharacter Parms{};

	Parms.Character = Character;
	Parms.SkipDestruction = SkipDestruction;
	Parms.bRealTime = bRealTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterGhost.PerformDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldDoAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWCharacterGhost::PerformDestroy(bool bShouldDoAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterGhost", "PerformDestroy");

	Params::TWCharacterGhost_PerformDestroy Parms{};

	Parms.bShouldDoAnimation = bShouldDoAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterGhost.ResetCreationTime
// (Final, Native, Public, BlueprintCallable)

void ATWCharacterGhost::ResetCreationTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterGhost", "ResetCreationTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCharacterGhost.SetGhostLifespan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DesiredLifespan                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWCharacterGhost::SetGhostLifespan(float DesiredLifespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCharacterGhost", "SetGhostLifespan");

	Params::TWCharacterGhost_SetGhostLifespan Parms{};

	Parms.DesiredLifespan = DesiredLifespan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.InitializeWidget
// (Final, Native, Public)

void UTWCloneOverheadWidget::InitializeWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "InitializeWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.InitPlayerNameText
// (Final, Native, Public)

void UTWCloneOverheadWidget::InitPlayerNameText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "InitPlayerNameText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.SetCloneIconVisibility
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::SetCloneIconVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "SetCloneIconVisibility");

	Params::TWCloneOverheadWidget_SetCloneIconVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.SetCloneInfoScale
// (Final, Native, Public, HasDefaults)
// Parameters:
// const struct FVector2D&                 NewScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::SetCloneInfoScale(const struct FVector2D& NewScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "SetCloneInfoScale");

	Params::TWCloneOverheadWidget_SetCloneInfoScale Parms{};

	Parms.NewScale = std::move(NewScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.SetCloneInfoText
// (Final, Native, Public)
// Parameters:
// int32                                   CloneIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::SetCloneInfoText(int32 CloneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "SetCloneInfoText");

	Params::TWCloneOverheadWidget_SetCloneInfoText Parms{};

	Parms.CloneIndex = CloneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.SetDisruptionVisionIconVisibility
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::SetDisruptionVisionIconVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "SetDisruptionVisionIconVisibility");

	Params::TWCloneOverheadWidget_SetDisruptionVisionIconVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.SetHealthBarProgress
// (Final, Native, Public)
// Parameters:
// float                                   ProgressValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::SetHealthBarProgress(float ProgressValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "SetHealthBarProgress");

	Params::TWCloneOverheadWidget_SetHealthBarProgress Parms{};

	Parms.ProgressValue = ProgressValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.SetHealthBarVisibility
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::SetHealthBarVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "SetHealthBarVisibility");

	Params::TWCloneOverheadWidget_SetHealthBarVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.SetHitFeedbackProgress
// (Final, Native, Public)
// Parameters:
// float                                   ProgressValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::SetHitFeedbackProgress(float ProgressValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "SetHitFeedbackProgress");

	Params::TWCloneOverheadWidget_SetHitFeedbackProgress Parms{};

	Parms.ProgressValue = ProgressValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.SetOwner
// (Final, Native, Public)
// Parameters:
// class ATimeWatchCharacter*              NewOwner                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::SetOwner(class ATimeWatchCharacter* NewOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "SetOwner");

	Params::TWCloneOverheadWidget_SetOwner Parms{};

	Parms.NewOwner = NewOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.TogglePlayerNameVisibility
// (Final, Native, Public)

void UTWCloneOverheadWidget::TogglePlayerNameVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "TogglePlayerNameVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.UpdatePlayerNameVisibilityFromCvar
// (Final, Native, Public, BlueprintCallable)

void UTWCloneOverheadWidget::UpdatePlayerNameVisibilityFromCvar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "UpdatePlayerNameVisibilityFromCvar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWCloneOverheadWidget.UpdateWidgetStyle
// (Final, Native, Public)
// Parameters:
// bool                                    IsPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWCloneOverheadWidget::UpdateWidgetStyle(bool IsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWCloneOverheadWidget", "UpdateWidgetStyle");

	Params::TWCloneOverheadWidget_UpdateWidgetStyle Parms{};

	Parms.IsPlayer = IsPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWDamageableActor.BP_OnDeath
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FNGDDamageEvent&           DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      InstigatorController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWDamageableActor::BP_OnDeath(const struct FNGDDamageEvent& DamageEvent, class AController* InstigatorController, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "BP_OnDeath");

	Params::TWDamageableActor_BP_OnDeath Parms{};

	Parms.DamageEvent = std::move(DamageEvent);
	Parms.InstigatorController = InstigatorController;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWDamageableActor.BP_OnTakeDamage
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNGDDamageEvent&           DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWDamageableActor::BP_OnTakeDamage(float Damage, const struct FNGDDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "BP_OnTakeDamage");

	Params::TWDamageableActor_BP_OnTakeDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDamageableActor.MulticastOnDeath
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// const struct FNGDDamageEvent&           DamageEvent                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// class ANGDCharacter*                    EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWDamageableActor::MulticastOnDeath(const struct FNGDDamageEvent& DamageEvent, class ANGDCharacter* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "MulticastOnDeath");

	Params::TWDamageableActor_MulticastOnDeath Parms{};

	Parms.DamageEvent = std::move(DamageEvent);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWDamageableActor.OnDeath
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FNGDDamageEvent&           DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      InstigatorController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWDamageableActor::OnDeath(const struct FNGDDamageEvent& DamageEvent, class AController* InstigatorController, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "OnDeath");

	Params::TWDamageableActor_OnDeath Parms{};

	Parms.DamageEvent = std::move(DamageEvent);
	Parms.InstigatorController = InstigatorController;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWDamageableActor.OnPostUpdateWorkTick
// (Native, Protected)

void ATWDamageableActor::OnPostUpdateWorkTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "OnPostUpdateWorkTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWDamageableActor.OnTakeDamage
// (Native, Protected, HasOutParams)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNGDDamageEvent&           DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATWDamageableActor::OnTakeDamage(float Damage, const struct FNGDDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "OnTakeDamage");

	Params::TWDamageableActor_OnTakeDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDamageableActor.SetHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewHealth                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWDamageableActor::SetHealth(const float NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "SetHealth");

	Params::TWDamageableActor_SetHealth Parms{};

	Parms.NewHealth = NewHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWDamageableActor.GetHitRegistrationCollider
// (Native, Public, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* ATWDamageableActor::GetHitRegistrationCollider() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "GetHitRegistrationCollider");

	Params::TWDamageableActor_GetHitRegistrationCollider Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDamageableActor.GetMortalityComponent
// (Native, Protected, Const)
// Parameters:
// class UNGDMortalityComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNGDMortalityComponent* ATWDamageableActor::GetMortalityComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "GetMortalityComponent");

	Params::TWDamageableActor_GetMortalityComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDamageableActor.GetRewindableMeshComponent
// (Native, Public, Const)
// Parameters:
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* ATWDamageableActor::GetRewindableMeshComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "GetRewindableMeshComponent");

	Params::TWDamageableActor_GetRewindableMeshComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDamageableActor.GetRewindCollider
// (Native, Public, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* ATWDamageableActor::GetRewindCollider() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "GetRewindCollider");

	Params::TWDamageableActor_GetRewindCollider Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDamageableActor.GetRewindComponent
// (Native, Public, Const)
// Parameters:
// class UNGDRewindComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNGDRewindComponent* ATWDamageableActor::GetRewindComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "GetRewindComponent");

	Params::TWDamageableActor_GetRewindComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDamageableActor.IsRewindRelevant
// (Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWDamageableActor::IsRewindRelevant() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDamageableActor", "IsRewindRelevant");

	Params::TWDamageableActor_IsRewindRelevant Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDeathMatchGameState.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWDeathMatchGameState::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDeathMatchGameState", "OnGameStateChanged");

	Params::TWDeathMatchGameState_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWDeathMatchGameState.OnRep_LeadingTeamID
// (Final, Native, Protected)

void ATWDeathMatchGameState::OnRep_LeadingTeamID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDeathMatchGameState", "OnRep_LeadingTeamID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWDeathMatchGameState.GetDeathClonesCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATWDeathMatchGameState::GetDeathClonesCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDeathMatchGameState", "GetDeathClonesCount");

	Params::TWDeathMatchGameState_GetDeathClonesCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDeathMatchGameState.GetLeadingTeamID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATWDeathMatchGameState::GetLeadingTeamID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDeathMatchGameState", "GetLeadingTeamID");

	Params::TWDeathMatchGameState_GetLeadingTeamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWDeathMatchGameState.GetTeamDeathClonesCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATWDeathMatchGameState::GetTeamDeathClonesCount(int32 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWDeathMatchGameState", "GetTeamDeathClonesCount");

	Params::TWDeathMatchGameState_GetTeamDeathClonesCount Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWFriendRowWidget.OnFriendButtonClicked
// (Final, Native, Protected)

void UTWFriendRowWidget::OnFriendButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWFriendRowWidget", "OnFriendButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWFriendRowWidget.SetFriendData
// (Final, Native, Public)

void UTWFriendRowWidget::SetFriendData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWFriendRowWidget", "SetFriendData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWFriendRowWidget.SetPlayer
// (Final, Native, Public)
// Parameters:
// const class FString&                    InUserID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InUserName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWFriendRowWidget::SetPlayer(const class FString& InUserID, const class FString& InUserName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWFriendRowWidget", "SetPlayer");

	Params::TWFriendRowWidget_SetPlayer Parms{};

	Parms.InUserID = std::move(InUserID);
	Parms.InUserName = std::move(InUserName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWFriendRowWidget.GetUserName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTWFriendRowWidget::GetUserName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWFriendRowWidget", "GetUserName");

	Params::TWFriendRowWidget_GetUserName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameGlobals.GetAllLevelEntries
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UTWLevelEntry*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UTWLevelEntry*> UTWGameGlobals::GetAllLevelEntries() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameGlobals", "GetAllLevelEntries");

	Params::TWGameGlobals_GetAllLevelEntries Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameGlobals.GetAllPlayableChallengeLevels
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    IncludeDevelopment                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UTWLevelEntry*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UTWLevelEntry*> UTWGameGlobals::GetAllPlayableChallengeLevels(bool IncludeDevelopment) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameGlobals", "GetAllPlayableChallengeLevels");

	Params::TWGameGlobals_GetAllPlayableChallengeLevels Parms{};

	Parms.IncludeDevelopment = IncludeDevelopment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameGlobals.GetAllPlayableLevelEntries
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETWMatchType                            MatchType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeDevelopmentLevels                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UTWLevelEntry*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UTWLevelEntry*> UTWGameGlobals::GetAllPlayableLevelEntries(ETWMatchType MatchType, bool IncludeDevelopmentLevels) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameGlobals", "GetAllPlayableLevelEntries");

	Params::TWGameGlobals_GetAllPlayableLevelEntries Parms{};

	Parms.MatchType = MatchType;
	Parms.IncludeDevelopmentLevels = IncludeDevelopmentLevels;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameGlobals.GetTipsList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> UTWGameGlobals::GetTipsList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameGlobals", "GetTipsList");

	Params::TWGameGlobals_GetTipsList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayAbilityTargetActor_Trace.AimWithPlayerController
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult*                      OutHitResult                                           (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnorePitch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWGameplayAbilityTargetActor_Trace::AimWithPlayerController(struct FHitResult* OutHitResult, bool bIgnorePitch, bool bTraceComplex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayAbilityTargetActor_Trace", "AimWithPlayerController");

	Params::TWGameplayAbilityTargetActor_Trace_AimWithPlayerController Parms{};

	Parms.bIgnorePitch = bIgnorePitch;
	Parms.bTraceComplex = bTraceComplex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitResult != nullptr)
		*OutHitResult = std::move(Parms.OutHitResult);
}


// Function TimeWatch.TWGameplayTask_SpawnProjectile.SpawnProjectile
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ATWPhysicalProjectile>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                InSpawnTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   LaunchSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TaskID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTWGameplayTask_SpawnProjectile*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTWGameplayTask_SpawnProjectile* UTWGameplayTask_SpawnProjectile::SpawnProjectile(class UTWAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class ATWPhysicalProjectile> Class_0, const struct FTransform& InSpawnTransform, float LaunchSpeed, int32 TaskID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWGameplayTask_SpawnProjectile", "SpawnProjectile");

	Params::TWGameplayTask_SpawnProjectile_SpawnProjectile Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Class_0 = Class_0;
	Parms.InSpawnTransform = std::move(InSpawnTransform);
	Parms.LaunchSpeed = LaunchSpeed;
	Parms.TaskID = TaskID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayTask_SpawnProjectile.BeginSpawningActor
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ATWPhysicalProjectile>Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATWPhysicalProjectile**           SpawnedActor                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWGameplayTask_SpawnProjectile::BeginSpawningActor(class UTWAbility* OwningAbility, TSubclassOf<class ATWPhysicalProjectile> Class_0, class ATWPhysicalProjectile** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_SpawnProjectile", "BeginSpawningActor");

	Params::TWGameplayTask_SpawnProjectile_BeginSpawningActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWGameplayTask_SpawnProjectile.FinishSpawningActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTWAbility*                       OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATWPhysicalProjectile*            SpawnedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWGameplayTask_SpawnProjectile::FinishSpawningActor(class UTWAbility* OwningAbility, class ATWPhysicalProjectile* SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_SpawnProjectile", "FinishSpawningActor");

	Params::TWGameplayTask_SpawnProjectile_FinishSpawningActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.SpawnedActor = SpawnedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWGameplayTask_SpawnProjectile.OnProjectileHit
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTWGameplayTask_SpawnProjectile::OnProjectileHit(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWGameplayTask_SpawnProjectile", "OnProjectileHit");

	Params::TWGameplayTask_SpawnProjectile_OnProjectileHit Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWHUDFunctionLibrary.ConvertLvlToXP
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTWHUDFunctionLibrary::ConvertLvlToXP(float InLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWHUDFunctionLibrary", "ConvertLvlToXP");

	Params::TWHUDFunctionLibrary_ConvertLvlToXP Parms{};

	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWHUDFunctionLibrary.ConvertXPToLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InXP                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTWHUDFunctionLibrary::ConvertXPToLevel(float InXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWHUDFunctionLibrary", "ConvertXPToLevel");

	Params::TWHUDFunctionLibrary_ConvertXPToLevel Parms{};

	Parms.InXP = InXP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWHUDFunctionLibrary.FindScreenEdgeLocationForWorldLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 Padding                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 WidgetSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  CameraRotator                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutScreenPosition                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutRotationAngleDegrees                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bIsOnScreen                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWHUDFunctionLibrary::FindScreenEdgeLocationForWorldLocation(class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FVector2D& Padding, const struct FVector2D& WidgetSize, const struct FRotator& CameraRotator, struct FVector2D* OutScreenPosition, float* OutRotationAngleDegrees, bool* bIsOnScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TWHUDFunctionLibrary", "FindScreenEdgeLocationForWorldLocation");

	Params::TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Padding = std::move(Padding);
	Parms.WidgetSize = std::move(WidgetSize);
	Parms.CameraRotator = std::move(CameraRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScreenPosition != nullptr)
		*OutScreenPosition = std::move(Parms.OutScreenPosition);

	if (OutRotationAngleDegrees != nullptr)
		*OutRotationAngleDegrees = Parms.OutRotationAngleDegrees;

	if (bIsOnScreen != nullptr)
		*bIsOnScreen = Parms.bIsOnScreen;
}


// Function TimeWatch.TWInteractionComponent.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTWInteractionComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWInteractionComponent", "OnBeginOverlap");

	Params::TWInteractionComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWJumpModifierActor.OnTriggered
// (Event, Public, BlueprintEvent)
// Parameters:
// const class AActor*                     TriggeredBy                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWJumpModifierActor::OnTriggered(const class AActor* TriggeredBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWJumpModifierActor", "OnTriggered");

	Params::TWJumpModifierActor_OnTriggered Parms{};

	Parms.TriggeredBy = TriggeredBy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWJumpModifierActor.GetJumpModifier
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FJumpModifier                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FJumpModifier ATWJumpModifierActor::GetJumpModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWJumpModifierActor", "GetJumpModifier");

	Params::TWJumpModifierActor_GetJumpModifier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLinearCrosshairWidget.IsCrosshairDynamic
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWLinearCrosshairWidget::IsCrosshairDynamic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearCrosshairWidget", "IsCrosshairDynamic");

	Params::TWLinearCrosshairWidget_IsCrosshairDynamic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLinearCrosshairWidget.OnADSComplete
// (Native, Event, Public, BlueprintEvent)

void UTWLinearCrosshairWidget::OnADSComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearCrosshairWidget", "OnADSComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLinearCrosshairWidget.OnADSEnter
// (Native, Event, Public, BlueprintEvent)

void UTWLinearCrosshairWidget::OnADSEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearCrosshairWidget", "OnADSEnter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLinearCrosshairWidget.OnADSExit
// (Native, Event, Public, BlueprintEvent)

void UTWLinearCrosshairWidget::OnADSExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearCrosshairWidget", "OnADSExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLinearCrosshairWidget.OnADSStartExit
// (Native, Event, Public, BlueprintEvent)

void UTWLinearCrosshairWidget::OnADSStartExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearCrosshairWidget", "OnADSStartExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLinearCrosshairWidget.ShowHitFeedback
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              HitColor                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWLinearCrosshairWidget::ShowHitFeedback(const struct FLinearColor& HitColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearCrosshairWidget", "ShowHitFeedback");

	Params::TWLinearCrosshairWidget_ShowHitFeedback Parms{};

	Parms.HitColor = std::move(HitColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWLinearHealthBar.InitializeWidget
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FWidgetColorStructure&     NewHealthBarColors                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UTWLinearHealthBar::InitializeWidget(const struct FWidgetColorStructure& NewHealthBarColors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearHealthBar", "InitializeWidget");

	Params::TWLinearHealthBar_InitializeWidget Parms{};

	Parms.NewHealthBarColors = std::move(NewHealthBarColors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLinearHealthBar.SetActiveHealthBar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWLinearHealthBar::SetActiveHealthBar(bool bIsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearHealthBar", "SetActiveHealthBar");

	Params::TWLinearHealthBar_SetActiveHealthBar Parms{};

	Parms.bIsPlayer = bIsPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLinearHealthBar.SetHealthBarPercentValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWLinearHealthBar::SetHealthBarPercentValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearHealthBar", "SetHealthBarPercentValue");

	Params::TWLinearHealthBar_SetHealthBarPercentValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLinearHealthBar.SetHitFeedbackPercentValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWLinearHealthBar::SetHitFeedbackPercentValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLinearHealthBar", "SetHitFeedbackPercentValue");

	Params::TWLinearHealthBar_SetHitFeedbackPercentValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLobbyGridPanelWidget.GetGridColumnByIndex
// (Final, Native, Public)
// Parameters:
// int32                                   ColumnIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVerticalBox*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVerticalBox* UTWLobbyGridPanelWidget::GetGridColumnByIndex(int32 ColumnIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyGridPanelWidget", "GetGridColumnByIndex");

	Params::TWLobbyGridPanelWidget_GetGridColumnByIndex Parms{};

	Parms.ColumnIndex = ColumnIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWLobbyPlayerRowWidget.SetPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InUserID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InUserName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTWLobbyChallengeWidget*          InOwner                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWLobbyPlayerRowWidget::SetPlayer(const class FString& InUserID, const class FString& InUserName, class UTWLobbyChallengeWidget* InOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyPlayerRowWidget", "SetPlayer");

	Params::TWLobbyPlayerRowWidget_SetPlayer Parms{};

	Parms.InUserID = std::move(InUserID);
	Parms.InUserName = std::move(InUserName);
	Parms.InOwner = InOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWLobbyPlayerRowWidget.GetUserName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UTWLobbyPlayerRowWidget::GetUserName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWLobbyPlayerRowWidget", "GetUserName");

	Params::TWLobbyPlayerRowWidget_GetUserName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWMusicActor.BP_SetMusicLoop
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   LoopIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWMusicActor::BP_SetMusicLoop(int32 LoopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWMusicActor", "BP_SetMusicLoop");

	Params::TWMusicActor_BP_SetMusicLoop Parms{};

	Parms.LoopIndex = LoopIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWMusicActor.SetMusicLoop
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   LoopIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWMusicActor::SetMusicLoop(int32 LoopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWMusicActor", "SetMusicLoop");

	Params::TWMusicActor_SetMusicLoop Parms{};

	Parms.LoopIndex = LoopIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadCloneInfoWidget.InitializeWidget
// (Final, Native, Public)

void UTWOverheadCloneInfoWidget::InitializeWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadCloneInfoWidget", "InitializeWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadCloneInfoWidget.SetCloneColorVisibility
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWOverheadCloneInfoWidget::SetCloneColorVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadCloneInfoWidget", "SetCloneColorVisibility");

	Params::TWOverheadCloneInfoWidget_SetCloneColorVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadCloneInfoWidget.SetCloneIndexText
// (Final, Native, Public)
// Parameters:
// int32                                   CloneIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWOverheadCloneInfoWidget::SetCloneIndexText(int32 CloneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadCloneInfoWidget", "SetCloneIndexText");

	Params::TWOverheadCloneInfoWidget_SetCloneIndexText Parms{};

	Parms.CloneIndex = CloneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadCloneInfoWidget.SetOwner
// (Final, Native, Public)
// Parameters:
// class ATimeWatchCharacter*              NewOwner                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWOverheadCloneInfoWidget::SetOwner(class ATimeWatchCharacter* NewOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadCloneInfoWidget", "SetOwner");

	Params::TWOverheadCloneInfoWidget_SetOwner Parms{};

	Parms.NewOwner = NewOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadCloneInfoWidget.SetPlayerInfoOverlayScale
// (Final, Native, Public, HasDefaults)
// Parameters:
// const struct FVector2D&                 NewScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWOverheadCloneInfoWidget::SetPlayerInfoOverlayScale(const struct FVector2D& NewScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadCloneInfoWidget", "SetPlayerInfoOverlayScale");

	Params::TWOverheadCloneInfoWidget_SetPlayerInfoOverlayScale Parms{};

	Parms.NewScale = std::move(NewScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWOverheadCloneInfoWidget.UpdateWidgetStyle
// (Final, Native, Public)
// Parameters:
// bool                                    IsPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWOverheadCloneInfoWidget::UpdateWidgetStyle(bool IsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWOverheadCloneInfoWidget", "UpdateWidgetStyle");

	Params::TWOverheadCloneInfoWidget_UpdateWidgetStyle Parms{};

	Parms.IsPlayer = IsPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerCameraManager.SetDefaultFOV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewFloat                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPlayerCameraManager::SetDefaultFOV(float NewFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerCameraManager", "SetDefaultFOV");

	Params::TWPlayerCameraManager_SetDefaultFOV Parms{};

	Parms.NewFloat = NewFloat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerIntroActor.BP_StartIntro
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    ActiveMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UMaterialInterface*>&ActiveMaterials                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class ATWMatchIntroActor*               MatchIntro                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPlayerIntroActor::BP_StartIntro(class USkeletalMesh* ActiveMesh, const TArray<class UMaterialInterface*>& ActiveMaterials, class ATWMatchIntroActor* MatchIntro)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerIntroActor", "BP_StartIntro");

	Params::TWPlayerIntroActor_BP_StartIntro Parms{};

	Parms.ActiveMesh = ActiveMesh;
	Parms.ActiveMaterials = std::move(ActiveMaterials);
	Parms.MatchIntro = MatchIntro;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWPlayerIntroActor.Cosmetic_SetVisibility
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPlayerIntroActor::Cosmetic_SetVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerIntroActor", "Cosmetic_SetVisibility");

	Params::TWPlayerIntroActor_Cosmetic_SetVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerIntroActor.EndIntro
// (Final, Native, Public, BlueprintCallable)

void ATWPlayerIntroActor::EndIntro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerIntroActor", "EndIntro");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerIntroActor.OverrideBindings
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ATWPlayerIntroActor::OverrideBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerIntroActor", "OverrideBindings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWPlayerIntroActor.StartIntro
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATWMatchIntroActor*               Owning_MatchIntro                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWPlayerIntroActor::StartIntro(class ATWMatchIntroActor* Owning_MatchIntro)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerIntroActor", "StartIntro");

	Params::TWPlayerIntroActor_StartIntro Parms{};

	Parms.Owning_MatchIntro = Owning_MatchIntro;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWPlayerIntroActor.GetPlayerID
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATWPlayerIntroActor::GetPlayerID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerIntroActor", "GetPlayerID");

	Params::TWPlayerIntroActor_GetPlayerID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPlayerIntroActor.GetTeamId
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATWPlayerIntroActor::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerIntroActor", "GetTeamId");

	Params::TWPlayerIntroActor_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWPlayerSkipConfirmation.GetOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerState* UTWPlayerSkipConfirmation::GetOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWPlayerSkipConfirmation", "GetOwner");

	Params::TWPlayerSkipConfirmation_GetOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWProjectileGhost.Cosmetic_Setup
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              InstigatorCharacter                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWProjectileGhost::Cosmetic_Setup(class ATimeWatchCharacter* InstigatorCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWProjectileGhost", "Cosmetic_Setup");

	Params::TWProjectileGhost_Cosmetic_Setup Parms{};

	Parms.InstigatorCharacter = InstigatorCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWProjectileManager.CreateProjectile
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class ABaseProjectile>      InProjectileClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewOwner                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BulletIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   VolleyIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const float                             CookTime                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MuzzleSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CreationTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATimeWatchProjectile*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchProjectile* ATWProjectileManager::CreateProjectile(TSubclassOf<class ABaseProjectile> InProjectileClass, class AActor* NewOwner, int32 BulletIndex, uint8 VolleyIndex, const struct FTransform& SpawnTransform, const float CookTime, float MuzzleSpeed, float CreationTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWProjectileManager", "CreateProjectile");

	Params::TWProjectileManager_CreateProjectile Parms{};

	Parms.InProjectileClass = InProjectileClass;
	Parms.NewOwner = NewOwner;
	Parms.BulletIndex = BulletIndex;
	Parms.VolleyIndex = VolleyIndex;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CookTime = CookTime;
	Parms.MuzzleSpeed = MuzzleSpeed;
	Parms.CreationTime = CreationTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWProjectileManager.RegisterProjectile
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATWProjectileManager::RegisterProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWProjectileManager", "RegisterProjectile");

	Params::TWProjectileManager_RegisterProjectile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWProjectileMovementComponent.HandleBounceBroadcast
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FHitResult&                ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWProjectileMovementComponent::HandleBounceBroadcast(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWProjectileMovementComponent", "HandleBounceBroadcast");

	Params::TWProjectileMovementComponent_HandleBounceBroadcast Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWProjectilePredictionComponent.DrawTrail
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FProjectilePredictionData& PredictionData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPredictProjectilePathResult*    PredictResult                                          (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DebugType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTWProjectilePredictionComponent::DrawTrail(class UObject* Context, const struct FProjectilePredictionData& PredictionData, struct FPredictProjectilePathResult* PredictResult, EDrawDebugTrace DebugType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWProjectilePredictionComponent", "DrawTrail");

	Params::TWProjectilePredictionComponent_DrawTrail Parms{};

	Parms.Context = Context;
	Parms.PredictionData = std::move(PredictionData);
	Parms.DebugType = DebugType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PredictResult != nullptr)
		*PredictResult = std::move(Parms.PredictResult);

	return Parms.ReturnValue;
}


// Function TimeWatch.TWRadialCloneInfo.InitializeWidget
// (Final, Native, Public)

void UTWRadialCloneInfo::InitializeWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRadialCloneInfo", "InitializeWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRadialCloneInfo.SetAsDeactivated
// (Final, Native, Public)
// Parameters:
// bool                                    bInState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWRadialCloneInfo::SetAsDeactivated(bool bInState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRadialCloneInfo", "SetAsDeactivated");

	Params::TWRadialCloneInfo_SetAsDeactivated Parms{};

	Parms.bInState = bInState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRadialCloneInfo.SetCloneColorVisibility
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWRadialCloneInfo::SetCloneColorVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRadialCloneInfo", "SetCloneColorVisibility");

	Params::TWRadialCloneInfo_SetCloneColorVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRadialCloneInfo.SetCloneIndexText
// (Final, Native, Public)
// Parameters:
// int32                                   CloneIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWRadialCloneInfo::SetCloneIndexText(int32 CloneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRadialCloneInfo", "SetCloneIndexText");

	Params::TWRadialCloneInfo_SetCloneIndexText Parms{};

	Parms.CloneIndex = CloneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRadialCloneInfo.SetDeathVisibility
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWRadialCloneInfo::SetDeathVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRadialCloneInfo", "SetDeathVisibility");

	Params::TWRadialCloneInfo_SetDeathVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRadialCloneInfo.SetOwner
// (Final, Native, Public)
// Parameters:
// class ATimeWatchCharacter*              NewOwner                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWRadialCloneInfo::SetOwner(class ATimeWatchCharacter* NewOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRadialCloneInfo", "SetOwner");

	Params::TWRadialCloneInfo_SetOwner Parms{};

	Parms.NewOwner = NewOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRadialCloneInfo.SetPlayerInfoOverlayScale
// (Final, Native, Public, HasDefaults)
// Parameters:
// const struct FVector2D&                 NewScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWRadialCloneInfo::SetPlayerInfoOverlayScale(const struct FVector2D& NewScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRadialCloneInfo", "SetPlayerInfoOverlayScale");

	Params::TWRadialCloneInfo_SetPlayerInfoOverlayScale Parms{};

	Parms.NewScale = std::move(NewScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRadialCloneInfo.UpdateWidgetStyle
// (Final, Native, Public)
// Parameters:
// bool                                    IsPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWRadialCloneInfo::UpdateWidgetStyle(bool IsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRadialCloneInfo", "UpdateWidgetStyle");

	Params::TWRadialCloneInfo_UpdateWidgetStyle Parms{};

	Parms.IsPlayer = IsPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.BindPlayerInput
// (Final, Native, Public)

void ATWRewardItemPreviewActor::BindPlayerInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "BindPlayerInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.BP_CosmeticStartVanishAnimation
// (Event, Protected, BlueprintEvent)

void ATWRewardItemPreviewActor::BP_CosmeticStartVanishAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "BP_CosmeticStartVanishAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWRewardItemPreviewActor.BP_SetMouseXInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWRewardItemPreviewActor::BP_SetMouseXInput(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "BP_SetMouseXInput");

	Params::TWRewardItemPreviewActor_BP_SetMouseXInput Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.BP_SetupItem
// (Event, Public, BlueprintEvent)
// Parameters:
// const class UTWItemDataAsset*           InItemData                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWRewardItemPreviewActor::BP_SetupItem(const class UTWItemDataAsset* InItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "BP_SetupItem");

	Params::TWRewardItemPreviewActor_BP_SetupItem Parms{};

	Parms.InItemData = InItemData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWRewardItemPreviewActor.LoadItemPreview
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FNGDBackendReward*               InItemToPreview                                        (Parm, OutParm, NativeAccessSpecifierPublic)

void ATWRewardItemPreviewActor::LoadItemPreview(struct FNGDBackendReward* InItemToPreview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "LoadItemPreview");

	Params::TWRewardItemPreviewActor_LoadItemPreview Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InItemToPreview != nullptr)
		*InItemToPreview = std::move(Parms.InItemToPreview);
}


// Function TimeWatch.TWRewardItemPreviewActor.LoadItemPreviewBySKU
// (Final, Native, Public)
// Parameters:
// const class FString&                    InItemToPreview                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWRewardItemPreviewActor::LoadItemPreviewBySKU(const class FString& InItemToPreview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "LoadItemPreviewBySKU");

	Params::TWRewardItemPreviewActor_LoadItemPreviewBySKU Parms{};

	Parms.InItemToPreview = std::move(InItemToPreview);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.OnFireButtonDown
// (Final, Native, Private)

void ATWRewardItemPreviewActor::OnFireButtonDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "OnFireButtonDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.OnFireButtonUp
// (Final, Native, Private)

void ATWRewardItemPreviewActor::OnFireButtonUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "OnFireButtonUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.OnItemPreviewLoadCompleted
// (Final, Native, Protected)

void ATWRewardItemPreviewActor::OnItemPreviewLoadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "OnItemPreviewLoadCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.OnYawInput
// (Final, Native, Public)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWRewardItemPreviewActor::OnYawInput(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "OnYawInput");

	Params::TWRewardItemPreviewActor_OnYawInput Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.SetScalarParameterOnDynamicMaterials
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             InParameterName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWRewardItemPreviewActor::SetScalarParameterOnDynamicMaterials(class FName InParameterName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "SetScalarParameterOnDynamicMaterials");

	Params::TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials Parms{};

	Parms.InParameterName = InParameterName;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.SwapMeshes
// (Final, Native, Protected, BlueprintCallable)

void ATWRewardItemPreviewActor::SwapMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "SwapMeshes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardItemPreviewActor.UnbindPlayerInput
// (Final, Native, Public)

void ATWRewardItemPreviewActor::UnbindPlayerInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardItemPreviewActor", "UnbindPlayerInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardPopup.LoadItems
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<struct FNGDBackendReward>& PendingRewards                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UTWRewardPopup::LoadItems(const TArray<struct FNGDBackendReward>& PendingRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardPopup", "LoadItems");

	Params::TWRewardPopup_LoadItems Parms{};

	Parms.PendingRewards = std::move(PendingRewards);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardPopup.SetDescription
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTWRewardPopup::SetDescription(const class FText& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardPopup", "SetDescription");

	Params::TWRewardPopup_SetDescription Parms{};

	Parms.Description = std::move(Description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardPopup.SetTitle
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTWRewardPopup::SetTitle(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardPopup", "SetTitle");

	Params::TWRewardPopup_SetTitle Parms{};

	Parms.Title = std::move(Title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardWidget.OnRewardWidgetClicked
// (Final, Native, Protected)

void UTWRewardWidget::OnRewardWidgetClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardWidget", "OnRewardWidgetClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardWidget.OnRewardWidgetHovered
// (Final, Native, Protected)

void UTWRewardWidget::OnRewardWidgetHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardWidget", "OnRewardWidgetHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewardWidget.OnRewardWidgetUnhovered
// (Final, Native, Protected)

void UTWRewardWidget::OnRewardWidgetUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewardWidget", "OnRewardWidgetUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWRewindableStaticActor.OnPostUpdateWorkTick
// (Native, Protected)

void ATWRewindableStaticActor::OnPostUpdateWorkTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWRewindableStaticActor", "OnPostUpdateWorkTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWScoreboardWidget.UpdateScore
// (Final, Native, Protected)

void UTWScoreboardWidget::UpdateScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWScoreboardWidget", "UpdateScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSelectedWeaponInfo.BP_OnWeaponReloadEnd
// (Event, Protected, BlueprintEvent)

void UTWSelectedWeaponInfo::BP_OnWeaponReloadEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSelectedWeaponInfo", "BP_OnWeaponReloadEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWSelectedWeaponInfo.BP_OnWeaponReloadStart
// (Event, Protected, BlueprintEvent)

void UTWSelectedWeaponInfo::BP_OnWeaponReloadStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSelectedWeaponInfo", "BP_OnWeaponReloadStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWSelectedWeaponInfo.BP_OnWeaponSet
// (Event, Protected, BlueprintEvent)

void UTWSelectedWeaponInfo::BP_OnWeaponSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSelectedWeaponInfo", "BP_OnWeaponSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWSelectedWeaponInfo.GetWeapon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATemporalWeapon*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATemporalWeapon* UTWSelectedWeaponInfo::GetWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSelectedWeaponInfo", "GetWeapon");

	Params::TWSelectedWeaponInfo_GetWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWSkinPreviewActor.BindPlayerInput
// (Final, Native, Public)

void ATWSkinPreviewActor::BindPlayerInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "BindPlayerInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.BP_CosmeticStartVanishAnimation
// (Event, Protected, BlueprintEvent)

void ATWSkinPreviewActor::BP_CosmeticStartVanishAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "BP_CosmeticStartVanishAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWSkinPreviewActor.BP_SetMouseXInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSkinPreviewActor::BP_SetMouseXInput(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "BP_SetMouseXInput");

	Params::TWSkinPreviewActor_BP_SetMouseXInput Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.BP_SetupCharacterOutfit
// (Event, Public, BlueprintEvent)
// Parameters:
// const class UTWStylesDataAsset*         InStyleDataAsset                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSkinPreviewActor::BP_SetupCharacterOutfit(const class UTWStylesDataAsset* InStyleDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "BP_SetupCharacterOutfit");

	Params::TWSkinPreviewActor_BP_SetupCharacterOutfit Parms{};

	Parms.InStyleDataAsset = InStyleDataAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWSkinPreviewActor.ConfigureExpoRandomCustomization
// (Final, Native, Public)

void ATWSkinPreviewActor::ConfigureExpoRandomCustomization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "ConfigureExpoRandomCustomization");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.ExpoRandomCustomization
// (Final, Native, Public)
// Parameters:
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSkinPreviewActor::ExpoRandomCustomization(int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "ExpoRandomCustomization");

	Params::TWSkinPreviewActor_ExpoRandomCustomization Parms{};

	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.GetPreviewAnimationPlayStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATWSkinPreviewActor::GetPreviewAnimationPlayStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "GetPreviewAnimationPlayStatus");

	Params::TWSkinPreviewActor_GetPreviewAnimationPlayStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWSkinPreviewActor.LoadCharacterCustomization
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FCharacterSelectionEntry&  CharacterSelectionEntry                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ATWSkinPreviewActor::LoadCharacterCustomization(const struct FCharacterSelectionEntry& CharacterSelectionEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "LoadCharacterCustomization");

	Params::TWSkinPreviewActor_LoadCharacterCustomization Parms{};

	Parms.CharacterSelectionEntry = std::move(CharacterSelectionEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.OnCharacterCustomizationLoadCompleted
// (Final, Native, Protected)

void ATWSkinPreviewActor::OnCharacterCustomizationLoadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "OnCharacterCustomizationLoadCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.OnFireButtonDown
// (Final, Native, Private)

void ATWSkinPreviewActor::OnFireButtonDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "OnFireButtonDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.OnFireButtonUp
// (Final, Native, Private)

void ATWSkinPreviewActor::OnFireButtonUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "OnFireButtonUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.OnInventoryUpdateCompleted
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSkinPreviewActor::OnInventoryUpdateCompleted(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "OnInventoryUpdateCompleted");

	Params::TWSkinPreviewActor_OnInventoryUpdateCompleted Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.OnRandomCustomizationComplete
// (Final, Native, Private)

void ATWSkinPreviewActor::OnRandomCustomizationComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "OnRandomCustomizationComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.OnYawInput
// (Final, Native, Public)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSkinPreviewActor::OnYawInput(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "OnYawInput");

	Params::TWSkinPreviewActor_OnYawInput Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.SetScalarParameterOnDynamicMaterials
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             InParameterName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSkinPreviewActor::SetScalarParameterOnDynamicMaterials(class FName InParameterName, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "SetScalarParameterOnDynamicMaterials");

	Params::TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials Parms{};

	Parms.InParameterName = InParameterName;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.SwapMeshes
// (Final, Native, Protected, BlueprintCallable)

void ATWSkinPreviewActor::SwapMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "SwapMeshes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.UnbindPlayerInput
// (Final, Native, Public)

void ATWSkinPreviewActor::UnbindPlayerInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "UnbindPlayerInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSkinPreviewActor.GetCharacterBGImage
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ATWSkinPreviewActor::GetCharacterBGImage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "GetCharacterBGImage");

	Params::TWSkinPreviewActor_GetCharacterBGImage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWSkinPreviewActor.GetCharacterFriendlyName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ATWSkinPreviewActor::GetCharacterFriendlyName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "GetCharacterFriendlyName");

	Params::TWSkinPreviewActor_GetCharacterFriendlyName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWSkinPreviewActor.GetSkinRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ATWSkinPreviewActor::GetSkinRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSkinPreviewActor", "GetSkinRotation");

	Params::TWSkinPreviewActor_GetSkinRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.TWSpectatorPawn.OnGameStateChange
// (Final, Native, Private)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSpectatorPawn::OnGameStateChange(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSpectatorPawn", "OnGameStateChange");

	Params::TWSpectatorPawn_OnGameStateChange Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSpectatorPawn.SpectatorLookSmooth
// (Final, Exec, Native, Public)
// Parameters:
// float                                   NewSmooth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSpectatorPawn::SpectatorLookSmooth(float NewSmooth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSpectatorPawn", "SpectatorLookSmooth");

	Params::TWSpectatorPawn_SpectatorLookSmooth Parms{};

	Parms.NewSmooth = NewSmooth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWSpectatorPawn.SpectatorMoveSmooth
// (Final, Exec, Native, Public)
// Parameters:
// float                                   NewSmooth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWSpectatorPawn::SpectatorMoveSmooth(float NewSmooth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWSpectatorPawn", "SpectatorMoveSmooth");

	Params::TWSpectatorPawn_SpectatorMoveSmooth Parms{};

	Parms.NewSmooth = NewSmooth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWStyleButtonWidget.OnStyleButtonClicked
// (Final, Native, Protected)

void UTWStyleButtonWidget::OnStyleButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStyleButtonWidget", "OnStyleButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWStyleButtonWidget.OnStyleButtonFocusChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsFocused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWStyleButtonWidget::OnStyleButtonFocusChanged(bool IsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStyleButtonWidget", "OnStyleButtonFocusChanged");

	Params::TWStyleButtonWidget_OnStyleButtonFocusChanged Parms{};

	Parms.IsFocused = IsFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWStyleButtonWidget.OnStyleButtonHovered
// (Final, Native, Protected)

void UTWStyleButtonWidget::OnStyleButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStyleButtonWidget", "OnStyleButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWStyleButtonWidget.OnStyleButtonRightClicked
// (Final, Native, Protected)

void UTWStyleButtonWidget::OnStyleButtonRightClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStyleButtonWidget", "OnStyleButtonRightClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWStyleButtonWidget.OnStyleButtonUnhovered
// (Final, Native, Protected)

void UTWStyleButtonWidget::OnStyleButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWStyleButtonWidget", "OnStyleButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWTimelinesWidget.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWTimelinesWidget::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTimelinesWidget", "OnGameStateChanged");

	Params::TWTimelinesWidget_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWTimelinesWidget.OnTeamAdvantageChanged
// (Final, Native, Protected)

void UTWTimelinesWidget::OnTeamAdvantageChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTimelinesWidget", "OnTeamAdvantageChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWTimelinesWidget.RefreshTimelinesColor
// (Final, Native, Protected)

void UTWTimelinesWidget::RefreshTimelinesColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTimelinesWidget", "RefreshTimelinesColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWTooltipListenerComponent.BP_BroadcastListenerRuleComplete
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Description                                            (Parm, NativeAccessSpecifierPublic)
// const class FString&                    NotificationID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NotificationExpirationMax                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UWidgetTipNotification>DefaultWidgetClassOverride                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWTooltipListenerComponent::BP_BroadcastListenerRuleComplete(const class FText& Title, const class FText& Description, const class FString& NotificationID, int32 Priority, float Duration, float NotificationExpirationMax, TSubclassOf<class UWidgetTipNotification> DefaultWidgetClassOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTooltipListenerComponent", "BP_BroadcastListenerRuleComplete");

	Params::TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete Parms{};

	Parms.Title = std::move(Title);
	Parms.Description = std::move(Description);
	Parms.NotificationID = std::move(NotificationID);
	Parms.Priority = Priority;
	Parms.Duration = Duration;
	Parms.NotificationExpirationMax = NotificationExpirationMax;
	Parms.DefaultWidgetClassOverride = DefaultWidgetClassOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWTrailComponent.SetCurrentTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWTrailComponent::SetCurrentTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTrailComponent", "SetCurrentTime");

	Params::TWTrailComponent_SetCurrentTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWTrailComponent.SetTrackedProjectile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              InProjectile                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWTrailComponent::SetTrackedProjectile(class UPrimitiveComponent* InProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTrailComponent", "SetTrackedProjectile");

	Params::TWTrailComponent_SetTrackedProjectile Parms{};

	Parms.InProjectile = InProjectile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWTutorialEntryWidget.BP_OnEntryInitialized
// (Event, Protected, BlueprintEvent)

void UTWTutorialEntryWidget::BP_OnEntryInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTutorialEntryWidget", "BP_OnEntryInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.TWTutorialEntryWidget.OnClicked
// (Final, Native, Protected)

void UTWTutorialEntryWidget::OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTutorialEntryWidget", "OnClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWTutorialTooltipManager.OnListenerRuleComplete
// (Final, Native, Protected)
// Parameters:
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Description                                            (Parm, NativeAccessSpecifierPublic)
// const class FString&                    NotificationID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NotificationExpirationMax                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UWidgetTipNotification>DefaultWidgetClassOverride                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWTutorialTooltipManager::OnListenerRuleComplete(const class FText& Title, const class FText& Description, const class FString& NotificationID, int32 Priority, float Duration, float NotificationExpirationMax, TSubclassOf<class UWidgetTipNotification> DefaultWidgetClassOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWTutorialTooltipManager", "OnListenerRuleComplete");

	Params::TWTutorialTooltipManager_OnListenerRuleComplete Parms{};

	Parms.Title = std::move(Title);
	Parms.Description = std::move(Description);
	Parms.NotificationID = std::move(NotificationID);
	Parms.Priority = Priority;
	Parms.Duration = Duration;
	Parms.NotificationExpirationMax = NotificationExpirationMax;
	Parms.DefaultWidgetClassOverride = DefaultWidgetClassOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWVideoWidget.PlayVideo
// (Final, Native, Protected)

void UTWVideoWidget::PlayVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWVideoWidget", "PlayVideo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSelectionSlot.BP_SetDesiredStatus
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsDesiredWeapon                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWWeaponSelectionSlot::BP_SetDesiredStatus(bool bIsDesiredWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSelectionSlot", "BP_SetDesiredStatus");

	Params::TWWeaponSelectionSlot_BP_SetDesiredStatus Parms{};

	Parms.bIsDesiredWeapon = bIsDesiredWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.TWWeaponSelectionSlot.SetDesiredStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsDesiredWeapon                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWWeaponSelectionSlot::SetDesiredStatus(bool bIsDesiredWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSelectionSlot", "SetDesiredStatus");

	Params::TWWeaponSelectionSlot_SetDesiredStatus Parms{};

	Parms.bIsDesiredWeapon = bIsDesiredWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSelectionSlot.SetWeaponImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       NewWeaponImage                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWWeaponSelectionSlot::SetWeaponImage(class UTexture2D* NewWeaponImage, bool bMatchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSelectionSlot", "SetWeaponImage");

	Params::TWWeaponSelectionSlot_SetWeaponImage Parms{};

	Parms.NewWeaponImage = NewWeaponImage;
	Parms.bMatchSize = bMatchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSelectionSlot.SetWeaponImageVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESlateVisibility                        InVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWWeaponSelectionSlot::SetWeaponImageVisibility(ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSelectionSlot", "SetWeaponImageVisibility");

	Params::TWWeaponSelectionSlot_SetWeaponImageVisibility Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSelectionSlot.SetWeaponName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    WeaponName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWWeaponSelectionSlot::SetWeaponName(const class FString& WeaponName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSelectionSlot", "SetWeaponName");

	Params::TWWeaponSelectionSlot_SetWeaponName Parms{};

	Parms.WeaponName = std::move(WeaponName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSelectionSlot.SetWeaponNumber
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             WeaponNumber                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTWWeaponSelectionSlot::SetWeaponNumber(const int32 WeaponNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSelectionSlot", "SetWeaponNumber");

	Params::TWWeaponSelectionSlot_SetWeaponNumber Parms{};

	Parms.WeaponNumber = WeaponNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSkinPreviewActor.BindPlayerInput
// (Final, Native, Public)

void ATWWeaponSkinPreviewActor::BindPlayerInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSkinPreviewActor", "BindPlayerInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSkinPreviewActor.OnFireButtonDown
// (Final, Native, Private)

void ATWWeaponSkinPreviewActor::OnFireButtonDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSkinPreviewActor", "OnFireButtonDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSkinPreviewActor.OnFireButtonUp
// (Final, Native, Private)

void ATWWeaponSkinPreviewActor::OnFireButtonUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSkinPreviewActor", "OnFireButtonUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSkinPreviewActor.OnYawInput
// (Final, Native, Private)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATWWeaponSkinPreviewActor::OnYawInput(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSkinPreviewActor", "OnYawInput");

	Params::TWWeaponSkinPreviewActor_OnYawInput Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.TWWeaponSkinPreviewActor.UnbindPlayerInput
// (Final, Native, Public)

void ATWWeaponSkinPreviewActor::UnbindPlayerInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TWWeaponSkinPreviewActor", "UnbindPlayerInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WCPlaybookInfoOverlay.InitializeOverlay
// (Final, Native, Public, BlueprintCallable)

void UWCPlaybookInfoOverlay::InitializeOverlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WCPlaybookInfoOverlay", "InitializeOverlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WeaponSelectionComponent.OnGameStateChange
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWeaponSelectionComponent::OnGameStateChange(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponSelectionComponent", "OnGameStateChange");

	Params::WeaponSelectionComponent_OnGameStateChange Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WeaponSelectionComponent.OnHUDReset
// (Final, Native, Public)
// Parameters:
// class UWidgetContainerWeaponStatus*     InWeaponSelectionWidget                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWeaponSelectionComponent::OnHUDReset(class UWidgetContainerWeaponStatus* InWeaponSelectionWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponSelectionComponent", "OnHUDReset");

	Params::WeaponSelectionComponent_OnHUDReset Parms{};

	Parms.InWeaponSelectionWidget = InWeaponSelectionWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WeaponSelectionComponent.GetCurrentWeaponSlotIndex
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWeaponSelectionComponent::GetCurrentWeaponSlotIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponSelectionComponent", "GetCurrentWeaponSlotIndex");

	Params::WeaponSelectionComponent_GetCurrentWeaponSlotIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WeaponSelectionComponent.GetHoldsteredWeaponSlotIndex
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWeaponSelectionComponent::GetHoldsteredWeaponSlotIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponSelectionComponent", "GetHoldsteredWeaponSlotIndex");

	Params::WeaponSelectionComponent_GetHoldsteredWeaponSlotIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WeaponSelectionComponent.HasSelectedWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWeaponSelectionComponent::HasSelectedWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WeaponSelectionComponent", "HasSelectedWeapon");

	Params::WeaponSelectionComponent_HasSelectedWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainer2DCompasses.AddCompassInstance
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UTW2DCompass>         CompassClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTW2DCompass*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTW2DCompass* UWidgetContainer2DCompasses::AddCompassInstance(TSubclassOf<class UTW2DCompass> CompassClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainer2DCompasses", "AddCompassInstance");

	Params::WidgetContainer2DCompasses_AddCompassInstance Parms{};

	Parms.CompassClass = CompassClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainer2DCompasses.GetCompassInstances
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UTW2DCompass>         CompassClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UTW2DCompass*>             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UTW2DCompass*> UWidgetContainer2DCompasses::GetCompassInstances(TSubclassOf<class UTW2DCompass> CompassClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainer2DCompasses", "GetCompassInstances");

	Params::WidgetContainer2DCompasses_GetCompassInstances Parms{};

	Parms.CompassClass = CompassClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainer2DCompasses.OnPingAdded
// (Final, Native, Protected)
// Parameters:
// const struct FPingMarker&               NewPing                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UWidgetContainer2DCompasses::OnPingAdded(const struct FPingMarker& NewPing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainer2DCompasses", "OnPingAdded");

	Params::WidgetContainer2DCompasses_OnPingAdded Parms{};

	Parms.NewPing = std::move(NewPing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainer2DCompasses.OnPingRemoved
// (Final, Native, Protected)
// Parameters:
// int32                                   PingID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainer2DCompasses::OnPingRemoved(int32 PingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainer2DCompasses", "OnPingRemoved");

	Params::WidgetContainer2DCompasses_OnPingRemoved Parms{};

	Parms.PingID = PingID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainer2DCompasses.OnRevivedCloneEventReceived
// (Final, Native, Protected)
// Parameters:
// class UTimeWatchEvent*                  Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainer2DCompasses::OnRevivedCloneEventReceived(class UTimeWatchEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainer2DCompasses", "OnRevivedCloneEventReceived");

	Params::WidgetContainer2DCompasses_OnRevivedCloneEventReceived Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCharSelection.HandleKeySelect
// (Final, Native, Public)

void UWidgetContainerCharSelection::HandleKeySelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCharSelection", "HandleKeySelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCharSelection.HandleNavigation
// (Final, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCharSelection::HandleNavigation(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCharSelection", "HandleNavigation");

	Params::WidgetContainerCharSelection_HandleNavigation Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCharSelection.OnCharacterHovered
// (Final, Native, Protected)
// Parameters:
// const class UTWCharacterDataAsset*      HoveredCharacterData                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCharSelection::OnCharacterHovered(const class UTWCharacterDataAsset* HoveredCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCharSelection", "OnCharacterHovered");

	Params::WidgetContainerCharSelection_OnCharacterHovered Parms{};

	Parms.HoveredCharacterData = HoveredCharacterData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCharSelection.OnCharacterUnhovered
// (Final, Native, Protected)
// Parameters:
// const class UTWCharacterDataAsset*      UnhoveredCharacterData                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCharSelection::OnCharacterUnhovered(const class UTWCharacterDataAsset* UnhoveredCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCharSelection", "OnCharacterUnhovered");

	Params::WidgetContainerCharSelection_OnCharacterUnhovered Parms{};

	Parms.UnhoveredCharacterData = UnhoveredCharacterData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCharSelection.OnRemotePlayerCustomizationChanged
// (Final, Native, Protected)

void UWidgetContainerCharSelection::OnRemotePlayerCustomizationChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCharSelection", "OnRemotePlayerCustomizationChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCharSelection.OnSelectCharacter
// (Final, Native, Protected)
// Parameters:
// const class UTWCharacterDataAsset*      SelectedCharacterData                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCharSelection::OnSelectCharacter(const class UTWCharacterDataAsset* SelectedCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCharSelection", "OnSelectCharacter");

	Params::WidgetContainerCharSelection_OnSelectCharacter Parms{};

	Parms.SelectedCharacterData = SelectedCharacterData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.OnFriendListButtonClicked
// (Final, Native, Protected)

void UWidgetContainerCornerPlayerProfile::OnFriendListButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "OnFriendListButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.OnOptionsClicked
// (Final, Native, Protected)

void UWidgetContainerCornerPlayerProfile::OnOptionsClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "OnOptionsClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.OnPartyStatusUpdate
// (Final, Native, Protected)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCornerPlayerProfile::OnPartyStatusUpdate(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "OnPartyStatusUpdate");

	Params::WidgetContainerCornerPlayerProfile_OnPartyStatusUpdate Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.OnPlayerDataUpdateComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCornerPlayerProfile::OnPlayerDataUpdateComplete(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "OnPlayerDataUpdateComplete");

	Params::WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetButtonsVisibility
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        InVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCornerPlayerProfile::SetButtonsVisibility(ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "SetButtonsVisibility");

	Params::WidgetContainerCornerPlayerProfile_SetButtonsVisibility Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetUserAvatar
// (Final, Native, Protected)

void UWidgetContainerCornerPlayerProfile::SetUserAvatar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "SetUserAvatar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetUserLevel
// (Final, Native, Protected)
// Parameters:
// int32                                   InCurrentXP                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCornerPlayerProfile::SetUserLevel(int32 InCurrentXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "SetUserLevel");

	Params::WidgetContainerCornerPlayerProfile_SetUserLevel Parms{};

	Parms.InCurrentXP = InCurrentXP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetUsername
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCornerPlayerProfile::SetUsername(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "SetUsername");

	Params::WidgetContainerCornerPlayerProfile_SetUsername Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetXPBarProgress
// (Final, Native, Protected)
// Parameters:
// int32                                   InCurrentXP                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCornerPlayerProfile::SetXPBarProgress(int32 InCurrentXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "SetXPBarProgress");

	Params::WidgetContainerCornerPlayerProfile_SetXPBarProgress Parms{};

	Parms.InCurrentXP = InCurrentXP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.UpdatePlayerData
// (Final, Native, Public)
// Parameters:
// const class FString&                    InUserName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InPlayerXP                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCornerPlayerProfile::UpdatePlayerData(const class FString& InUserName, int32 InPlayerXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "UpdatePlayerData");

	Params::WidgetContainerCornerPlayerProfile_UpdatePlayerData Parms{};

	Parms.InUserName = std::move(InUserName);
	Parms.InPlayerXP = InPlayerXP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCornerPlayerProfile.UpdatePlayerTitleText
// (Final, Native, Protected)

void UWidgetContainerCornerPlayerProfile::UpdatePlayerTitleText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCornerPlayerProfile", "UpdatePlayerTitleText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCredits.GoToMainMenu
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerCredits::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCredits", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCredits.OnBackButtonPressed
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UWidgetContainerCredits::OnBackButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCredits", "OnBackButtonPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerCustomization.BP_OnActiveWidgetChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECustomizationFlowState                 State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::BP_OnActiveWidgetChanged(ECustomizationFlowState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "BP_OnActiveWidgetChanged");

	Params::WidgetContainerCustomization_BP_OnActiveWidgetChanged Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerCustomization.BP_OnBuyItemSuccess
// (Event, Protected, BlueprintEvent)

void UWidgetContainerCustomization::BP_OnBuyItemSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "BP_OnBuyItemSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerCustomization.BP_OnSkinsTabButtonClicked
// (Event, Protected, BlueprintEvent)

void UWidgetContainerCustomization::BP_OnSkinsTabButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "BP_OnSkinsTabButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerCustomization.BuyCharacter
// (Final, Native, Protected)

void UWidgetContainerCustomization::BuyCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "BuyCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.BuyStyle
// (Final, Native, Protected)

void UWidgetContainerCustomization::BuyStyle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "BuyStyle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.CustomizeSelection
// (Final, Native, Protected)

void UWidgetContainerCustomization::CustomizeSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "CustomizeSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.DebugShowVersusPreviews
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerCustomization::DebugShowVersusPreviews()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "DebugShowVersusPreviews");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.EquipStyleItem
// (Final, Native, Protected)

void UWidgetContainerCustomization::EquipStyleItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "EquipStyleItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.FirstLoadCompleteChecker
// (Final, Native, Protected)

void UWidgetContainerCustomization::FirstLoadCompleteChecker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "FirstLoadCompleteChecker");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.GoToCharacterSelection
// (Final, Native, Protected)

void UWidgetContainerCustomization::GoToCharacterSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "GoToCharacterSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.GoToMainMenu
// (Final, Native, Protected)

void UWidgetContainerCustomization::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.InitializeCharacterSelectionWidget
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerCustomization::InitializeCharacterSelectionWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "InitializeCharacterSelectionWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.InitializeSkinPreviewActor
// (Final, Native, Protected, BlueprintCallable)

void UWidgetContainerCustomization::InitializeSkinPreviewActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "InitializeSkinPreviewActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerCustomization::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnBackgroundHovered
// (Final, Native, Protected)

void UWidgetContainerCustomization::OnBackgroundHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnBackgroundHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnBackgroundPressed
// (Final, Native, Protected)

void UWidgetContainerCustomization::OnBackgroundPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnBackgroundPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnBuyCharacterClicked
// (Final, Native, Protected)

void UWidgetContainerCustomization::OnBuyCharacterClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnBuyCharacterClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnBuyCharacterComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SKU                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   newCoinsAmmount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::OnBuyCharacterComplete(bool bWasSuccessful, const class FString& ErrorString, const class FString& SKU, int32 newCoinsAmmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnBuyCharacterComplete");

	Params::WidgetContainerCustomization_OnBuyCharacterComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.SKU = std::move(SKU);
	Parms.newCoinsAmmount = newCoinsAmmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnBuyStyleClicked
// (Final, Native, Protected)

void UWidgetContainerCustomization::OnBuyStyleClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnBuyStyleClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnBuyStyleComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SKU                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   newCoinsAmmount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::OnBuyStyleComplete(bool bWasSuccessful, const class FString& ErrorString, const class FString& SKU, int32 newCoinsAmmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnBuyStyleComplete");

	Params::WidgetContainerCustomization_OnBuyStyleComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.SKU = std::move(SKU);
	Parms.newCoinsAmmount = newCoinsAmmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnCharacterClicked
// (Final, Native, Protected)
// Parameters:
// const class UTWCharacterDataAsset*      SelectedCharacterData                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::OnCharacterClicked(const class UTWCharacterDataAsset* SelectedCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnCharacterClicked");

	Params::WidgetContainerCustomization_OnCharacterClicked Parms{};

	Parms.SelectedCharacterData = SelectedCharacterData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnCharacterHovered
// (Final, Native, Protected)
// Parameters:
// const class UTWCharacterDataAsset*      HoveredCharacterData                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::OnCharacterHovered(const class UTWCharacterDataAsset* HoveredCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnCharacterHovered");

	Params::WidgetContainerCustomization_OnCharacterHovered Parms{};

	Parms.HoveredCharacterData = HoveredCharacterData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnCharacterRightClick
// (Final, Native, Protected)
// Parameters:
// const class UTWCharacterDataAsset*      SelectedCharacterData                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::OnCharacterRightClick(const class UTWCharacterDataAsset* SelectedCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnCharacterRightClick");

	Params::WidgetContainerCustomization_OnCharacterRightClick Parms{};

	Parms.SelectedCharacterData = SelectedCharacterData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnFirstLoadComplete
// (Final, Native, Protected)

void UWidgetContainerCustomization::OnFirstLoadComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnFirstLoadComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnSkinsTabButtonClicked
// (Final, Native, Private)

void UWidgetContainerCustomization::OnSkinsTabButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnSkinsTabButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnStyleAsyncLoadComplete
// (Final, Native, Private)

void UWidgetContainerCustomization::OnStyleAsyncLoadComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnStyleAsyncLoadComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnStyleClicked
// (Final, Native, Protected)
// Parameters:
// const class UTWItemDataAsset*           SelectedStyleData                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::OnStyleClicked(const class UTWItemDataAsset* SelectedStyleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnStyleClicked");

	Params::WidgetContainerCustomization_OnStyleClicked Parms{};

	Parms.SelectedStyleData = SelectedStyleData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnStyleHovered
// (Final, Native, Protected)
// Parameters:
// const class UTWItemDataAsset*           SelectedStyleData                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::OnStyleHovered(const class UTWItemDataAsset* SelectedStyleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnStyleHovered");

	Params::WidgetContainerCustomization_OnStyleHovered Parms{};

	Parms.SelectedStyleData = SelectedStyleData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OnUnlockPremiumButtonClicked
// (Final, Native, Protected)

void UWidgetContainerCustomization::OnUnlockPremiumButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OnUnlockPremiumButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.OpenPremiumPopup
// (Final, Native, Protected)

void UWidgetContainerCustomization::OpenPremiumPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "OpenPremiumPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.RefreshAvailableCharacterSelections
// (Final, Native, Protected)

void UWidgetContainerCustomization::RefreshAvailableCharacterSelections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "RefreshAvailableCharacterSelections");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.RefreshAvailableStylesSelection
// (Final, Native, Protected)

void UWidgetContainerCustomization::RefreshAvailableStylesSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "RefreshAvailableStylesSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.SetFlowState
// (Final, Native, Protected)
// Parameters:
// ECustomizationFlowState                 NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::SetFlowState(ECustomizationFlowState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "SetFlowState");

	Params::WidgetContainerCustomization_SetFlowState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.TryEquipCurrentItem
// (Final, Native, Protected)

void UWidgetContainerCustomization::TryEquipCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "TryEquipCurrentItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.TryEquipItem
// (Final, Native, Protected)
// Parameters:
// const class UTWItemDataAsset*           SelectedStyleData                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomization::TryEquipItem(const class UTWItemDataAsset* SelectedStyleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "TryEquipItem");

	Params::WidgetContainerCustomization_TryEquipItem Parms{};

	Parms.SelectedStyleData = SelectedStyleData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.TryUnlockItem
// (Final, Native, Protected)

void UWidgetContainerCustomization::TryUnlockItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "TryUnlockItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomization.GetMainMenuHud
// (Final, Native, Protected, Const)
// Parameters:
// class AMainMenuHUD*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMainMenuHUD* UWidgetContainerCustomization::GetMainMenuHud() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "GetMainMenuHud");

	Params::WidgetContainerCustomization_GetMainMenuHud Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomization.IsApplyStyleButtonEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetContainerCustomization::IsApplyStyleButtonEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "IsApplyStyleButtonEnabled");

	Params::WidgetContainerCustomization_IsApplyStyleButtonEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomization.IsApplyStyleButtonVisible
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetContainerCustomization::IsApplyStyleButtonVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "IsApplyStyleButtonVisible");

	Params::WidgetContainerCustomization_IsApplyStyleButtonVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomization.IsCustomizeCharacterButtonEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetContainerCustomization::IsCustomizeCharacterButtonEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "IsCustomizeCharacterButtonEnabled");

	Params::WidgetContainerCustomization_IsCustomizeCharacterButtonEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomization.IsSetActiveCharacterButtonEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetContainerCustomization::IsSetActiveCharacterButtonEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "IsSetActiveCharacterButtonEnabled");

	Params::WidgetContainerCustomization_IsSetActiveCharacterButtonEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomization.IsSetActiveCharacterButtonVisible
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetContainerCustomization::IsSetActiveCharacterButtonVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "IsSetActiveCharacterButtonVisible");

	Params::WidgetContainerCustomization_IsSetActiveCharacterButtonVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomization.IsStylesTabButtonEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetContainerCustomization::IsStylesTabButtonEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomization", "IsStylesTabButtonEnabled");

	Params::WidgetContainerCustomization_IsStylesTabButtonEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomMatch.AddNewGridPanel
// (Final, Native, Private)

void UWidgetContainerCustomMatch::AddNewGridPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "AddNewGridPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomMatch.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerCustomMatch::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomMatch.OnChallengeClicked
// (Final, Native, Protected)

void UWidgetContainerCustomMatch::OnChallengeClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "OnChallengeClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomMatch.OnFriendSelected
// (Final, Native, Protected)
// Parameters:
// const class FString&                    FriendID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FriendName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomMatch::OnFriendSelected(const class FString& FriendID, const class FString& FriendName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "OnFriendSelected");

	Params::WidgetContainerCustomMatch_OnFriendSelected Parms{};

	Parms.FriendID = std::move(FriendID);
	Parms.FriendName = std::move(FriendName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomMatch.OnLobbyCreated
// (Final, Native, Public)
// Parameters:
// const class FString&                    LobbyID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerCustomMatch::OnLobbyCreated(const class FString& LobbyID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "OnLobbyCreated");

	Params::WidgetContainerCustomMatch_OnLobbyCreated Parms{};

	Parms.LobbyID = std::move(LobbyID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomMatch.OnNextPageButtonClicked
// (Final, Native, Protected)

void UWidgetContainerCustomMatch::OnNextPageButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "OnNextPageButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomMatch.OnPreviousPageButtonClicked
// (Final, Native, Protected)

void UWidgetContainerCustomMatch::OnPreviousPageButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "OnPreviousPageButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerCustomMatch.GetCurrentPageIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWidgetContainerCustomMatch::GetCurrentPageIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "GetCurrentPageIndex");

	Params::WidgetContainerCustomMatch_GetCurrentPageIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomMatch.GetTotalPagesAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWidgetContainerCustomMatch::GetTotalPagesAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatch", "GetTotalPagesAmount");

	Params::WidgetContainerCustomMatch_GetTotalPagesAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerCustomMatchLobby.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerCustomMatchLobby::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerCustomMatchLobby", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerDailyBoost.OnPlayerDataUpdateComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerDailyBoost::OnPlayerDataUpdateComplete(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerDailyBoost", "OnPlayerDataUpdateComplete");

	Params::WidgetContainerDailyBoost_OnPlayerDataUpdateComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerDeathsSummary.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerDeathsSummary::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerDeathsSummary", "OnGameStateChanged");

	Params::WidgetContainerDeathsSummary_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerDeathsSummary.OnGenericEventReceived
// (Final, Native, Protected)
// Parameters:
// class UTimeWatchEvent*                  Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerDeathsSummary::OnGenericEventReceived(class UTimeWatchEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerDeathsSummary", "OnGenericEventReceived");

	Params::WidgetContainerDeathsSummary_OnGenericEventReceived Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerDominationScore.RetrieveDominationPoints
// (Final, Native, Protected)

void UWidgetContainerDominationScore::RetrieveDominationPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerDominationScore", "RetrieveDominationPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerFluxStateIcon.OnStateChanged
// (Final, Native, Public)
// Parameters:
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerFluxStateIcon::OnStateChanged(EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerFluxStateIcon", "OnStateChanged");

	Params::WidgetContainerFluxStateIcon_OnStateChanged Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerFluxStateIcon.PlayCycleNameAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerFluxStateIcon::PlayCycleNameAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerFluxStateIcon", "PlayCycleNameAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerFluxStateIcon.PlayForwardAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerFluxStateIcon::PlayForwardAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerFluxStateIcon", "PlayForwardAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerFluxStateIcon.PlayReverseAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerFluxStateIcon::PlayReverseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerFluxStateIcon", "PlayReverseAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerInGameMenu.OnBackButtonClicked
// (Final, Native, Protected)

void UWidgetContainerInGameMenu::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerInGameMenu", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerInGameMenu.OnContinueInSkipChallengePopup
// (Final, Native, Protected)

void UWidgetContainerInGameMenu::OnContinueInSkipChallengePopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerInGameMenu", "OnContinueInSkipChallengePopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerInGameMenu.OnCreditsClicked
// (Final, Native, Protected)

void UWidgetContainerInGameMenu::OnCreditsClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerInGameMenu", "OnCreditsClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerInGameMenu.OnExitToDesktopClicked
// (Final, Native, Protected)

void UWidgetContainerInGameMenu::OnExitToDesktopClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerInGameMenu", "OnExitToDesktopClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerInGameMenu.OnLeaveGameButtonClicked
// (Final, Native, Protected)

void UWidgetContainerInGameMenu::OnLeaveGameButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerInGameMenu", "OnLeaveGameButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerInGameMenu.OnOptionsButtonClicked
// (Final, Native, Protected)

void UWidgetContainerInGameMenu::OnOptionsButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerInGameMenu", "OnOptionsButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerInGameMenu.OnRedeemCodeClicked
// (Final, Native, Protected)

void UWidgetContainerInGameMenu::OnRedeemCodeClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerInGameMenu", "OnRedeemCodeClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerKillConfirmation.OnEnemyKilled
// (Event, Public, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerKillConfirmation::OnEnemyKilled(class ATimeWatchCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerKillConfirmation", "OnEnemyKilled");

	Params::WidgetContainerKillConfirmation_OnEnemyKilled Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerLeaderboardSlot.SetupLeaderboardSlot
// (Final, Native, Public)
// Parameters:
// int32                                   rank                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Elo                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Dominance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Wins                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Losses                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLeaderboardSlot::SetupLeaderboardSlot(int32 rank, const class FString& Name_0, int32 Elo, float Dominance, int32 Wins, int32 Losses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLeaderboardSlot", "SetupLeaderboardSlot");

	Params::WidgetContainerLeaderboardSlot_SetupLeaderboardSlot Parms{};

	Parms.rank = rank;
	Parms.Name_0 = std::move(Name_0);
	Parms.Elo = Elo;
	Parms.Dominance = Dominance;
	Parms.Wins = Wins;
	Parms.Losses = Losses;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.CloneCountSelectionChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::CloneCountSelectionChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "CloneCountSelectionChanged");

	Params::WidgetContainerLobbyMatchSettings_CloneCountSelectionChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.HealingModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::HealingModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "HealingModeChanged");

	Params::WidgetContainerLobbyMatchSettings_HealingModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.HealthPackModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::HealthPackModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "HealthPackModeChanged");

	Params::WidgetContainerLobbyMatchSettings_HealthPackModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.LoopLengthSliderReleased
// (Final, Native, Protected)

void UWidgetContainerLobbyMatchSettings::LoopLengthSliderReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "LoopLengthSliderReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.MapSelectionChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::MapSelectionChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "MapSelectionChanged");

	Params::WidgetContainerLobbyMatchSettings_MapSelectionChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.MatchScoreSelectionChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::MatchScoreSelectionChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "MatchScoreSelectionChanged");

	Params::WidgetContainerLobbyMatchSettings_MatchScoreSelectionChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerLobbyMatchSettings::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.OnMatchmakingTypeChange
// (Final, Native, Protected)
// Parameters:
// ETWMatchmakingType                      MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::OnMatchmakingTypeChange(ETWMatchmakingType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "OnMatchmakingTypeChange");

	Params::WidgetContainerLobbyMatchSettings_OnMatchmakingTypeChange Parms{};

	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.OnPartyDataUpdated
// (Final, Native, Public)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::OnPartyDataUpdated(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "OnPartyDataUpdated");

	Params::WidgetContainerLobbyMatchSettings_OnPartyDataUpdated Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.OvertimeModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::OvertimeModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "OvertimeModeChanged");

	Params::WidgetContainerLobbyMatchSettings_OvertimeModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.PassiveAbilitiesModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::PassiveAbilitiesModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "PassiveAbilitiesModeChanged");

	Params::WidgetContainerLobbyMatchSettings_PassiveAbilitiesModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.PlayersSetupChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::PlayersSetupChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "PlayersSetupChanged");

	Params::WidgetContainerLobbyMatchSettings_PlayersSetupChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.StartMatchButtonClicked
// (Final, Native, Protected)

void UWidgetContainerLobbyMatchSettings::StartMatchButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "StartMatchButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.SwitchTeam
// (Final, Native, Protected, BlueprintCallable)

void UWidgetContainerLobbyMatchSettings::SwitchTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "SwitchTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.ToggleMatchSettingsSpinnerInteractable
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USpinner*                         Spinner                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInteractable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::ToggleMatchSettingsSpinnerInteractable(class USpinner* Spinner, bool bInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "ToggleMatchSettingsSpinnerInteractable");

	Params::WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable Parms{};

	Parms.Spinner = Spinner;
	Parms.bInteractable = bInteractable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.ToggleSpectate
// (Final, Native, Protected, BlueprintCallable)

void UWidgetContainerLobbyMatchSettings::ToggleSpectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "ToggleSpectate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerLobbyMatchSettings.WeaponModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerLobbyMatchSettings::WeaponModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerLobbyMatchSettings", "WeaponModeChanged");

	Params::WidgetContainerLobbyMatchSettings_WeaponModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.EnableMainMenuButtons
// (Final, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMainMenu::EnableMainMenuButtons(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "EnableMainMenuButtons");

	Params::WidgetContainerMainMenu_EnableMainMenuButtons Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.GoToCustomizeOptions
// (Final, Native, Protected)

void UWidgetContainerMainMenu::GoToCustomizeOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "GoToCustomizeOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.GoToPlayerProfile
// (Final, Native, Protected)

void UWidgetContainerMainMenu::GoToPlayerProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "GoToPlayerProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.GoToRewardTrack
// (Final, Native, Protected)

void UWidgetContainerMainMenu::GoToRewardTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "GoToRewardTrack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.GoToStore
// (Final, Native, Protected)

void UWidgetContainerMainMenu::GoToStore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "GoToStore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.GoToTutorials
// (Final, Native, Protected)

void UWidgetContainerMainMenu::GoToTutorials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "GoToTutorials");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.OnListenServerButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMainMenu::OnListenServerButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "OnListenServerButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.OnLocalServerButtonClicked
// (Final, Native, Public)

void UWidgetContainerMainMenu::OnLocalServerButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "OnLocalServerButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.OnMatchmakingChange
// (Final, Native, Protected)
// Parameters:
// ETWMatchmakingType                      MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMainMenu::OnMatchmakingChange(ETWMatchmakingType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "OnMatchmakingChange");

	Params::WidgetContainerMainMenu_OnMatchmakingChange Parms{};

	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.OnPartyDataUpdated
// (Final, Native, Protected)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMainMenu::OnPartyDataUpdated(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "OnPartyDataUpdated");

	Params::WidgetContainerMainMenu_OnPartyDataUpdated Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.OnUnlockPremiumButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMainMenu::OnUnlockPremiumButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "OnUnlockPremiumButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.OnWeaponCustomizationButtonClicked
// (Final, Native, Public)

void UWidgetContainerMainMenu::OnWeaponCustomizationButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "OnWeaponCustomizationButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.OpenPremiumPopup
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class FText&                      PopupTitle                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetContainerMainMenu::OpenPremiumPopup(const class FText& PopupTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "OpenPremiumPopup");

	Params::WidgetContainerMainMenu_OpenPremiumPopup Parms{};

	Parms.PopupTitle = std::move(PopupTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.QuickCustomize
// (Final, Native, Protected)

void UWidgetContainerMainMenu::QuickCustomize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "QuickCustomize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.QuitGame
// (Final, Native, Protected)

void UWidgetContainerMainMenu::QuitGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "QuitGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.SetNetWorkStatus
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      Version                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetContainerMainMenu::SetNetWorkStatus(const class FText& Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "SetNetWorkStatus");

	Params::WidgetContainerMainMenu_SetNetWorkStatus Parms{};

	Parms.Version = std::move(Version);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMainMenu.SetVersion
// (Final, Native, Public)
// Parameters:
// const class FString&                    Version                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMainMenu::SetVersion(const class FString& Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMainMenu", "SetVersion");

	Params::WidgetContainerMainMenu_SetVersion Parms{};

	Parms.Version = std::move(Version);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchHistorySlot.KeepReplay
// (Final, Native, Public)

void UWidgetContainerMatchHistorySlot::KeepReplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchHistorySlot", "KeepReplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchHistorySlot.PlayReplay
// (Final, Native, Public)

void UWidgetContainerMatchHistorySlot::PlayReplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchHistorySlot", "PlayReplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.DisableWidget
// (Final, Native, Protected)

void UWidgetContainerMatchmaking::DisableWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "DisableWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.EnableWidget
// (Final, Native, Protected)

void UWidgetContainerMatchmaking::EnableWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "EnableWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.OnCancelButtonPressed
// (Final, Native, Protected)

void UWidgetContainerMatchmaking::OnCancelButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "OnCancelButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.OnGameSessionPollComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Status                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerSessionId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    IpAddress                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchmaking::OnGameSessionPollComplete(bool bWasSuccessful, const class FString& Status, const class FString& PlayerSessionId, const class FString& IpAddress, int32 Port, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "OnGameSessionPollComplete");

	Params::WidgetContainerMatchmaking_OnGameSessionPollComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.Status = std::move(Status);
	Parms.PlayerSessionId = std::move(PlayerSessionId);
	Parms.IpAddress = std::move(IpAddress);
	Parms.Port = Port;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingChange
// (Final, Native, Protected)
// Parameters:
// ETWMatchmakingType                      MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchmaking::OnMatchmakingChange(ETWMatchmakingType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "OnMatchmakingChange");

	Params::WidgetContainerMatchmaking_OnMatchmakingChange Parms{};

	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingPollComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Status                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PlayerSessionId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    IpAddress                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchmaking::OnMatchmakingPollComplete(bool bWasSuccessful, const class FString& Status, const class FString& PlayerSessionId, const class FString& IpAddress, int32 Port, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "OnMatchmakingPollComplete");

	Params::WidgetContainerMatchmaking_OnMatchmakingPollComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.Status = std::move(Status);
	Parms.PlayerSessionId = std::move(PlayerSessionId);
	Parms.IpAddress = std::move(IpAddress);
	Parms.Port = Port;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingStarted
// (Final, Native, Protected)
// Parameters:
// ETWMatchmakingType                      MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchmaking::OnMatchmakingStarted(ETWMatchmakingType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "OnMatchmakingStarted");

	Params::WidgetContainerMatchmaking_OnMatchmakingStarted Parms{};

	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingStopComplete
// (Final, Native, Public)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchmaking::OnMatchmakingStopComplete(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "OnMatchmakingStopComplete");

	Params::WidgetContainerMatchmaking_OnMatchmakingStopComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingStopped
// (Final, Native, Protected)
// Parameters:
// ETWMatchmakingType                      MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchmaking::OnMatchmakingStopped(ETWMatchmakingType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "OnMatchmakingStopped");

	Params::WidgetContainerMatchmaking_OnMatchmakingStopped Parms{};

	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchmaking.IsMatchmakingCancelable
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetContainerMatchmaking::IsMatchmakingCancelable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "IsMatchmakingCancelable");

	Params::WidgetContainerMatchmaking_IsMatchmakingCancelable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerMatchmaking.IsMatchmakingStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetContainerMatchmaking::IsMatchmakingStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchmaking", "IsMatchmakingStarted");

	Params::WidgetContainerMatchmaking_IsMatchmakingStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerMatchOptions.BP_StartMatchCancelledAnim
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchOptions::BP_StartMatchCancelledAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchOptions", "BP_StartMatchCancelledAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchOptions.OnPartyDataUpdated
// (Final, Native, Protected)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchOptions::OnPartyDataUpdated(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchOptions", "OnPartyDataUpdated");

	Params::WidgetContainerMatchOptions_OnPartyDataUpdated Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchOptions.OnPlaySelectionButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMatchOptions::OnPlaySelectionButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchOptions", "OnPlaySelectionButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchOptions.OnReadyButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMatchOptions::OnReadyButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchOptions", "OnReadyButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchOptions.UpdateButtonsStates
// (Final, Native, Protected)
// Parameters:
// ETWMatchmakingType                      InMatchmakingType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchOptions::UpdateButtonsStates(ETWMatchmakingType InMatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchOptions", "UpdateButtonsStates");

	Params::WidgetContainerMatchOptions_UpdateButtonsStates Parms{};

	Parms.InMatchmakingType = InMatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchResultFeedback.PlayDefeatAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchResultFeedback::PlayDefeatAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchResultFeedback", "PlayDefeatAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchResultFeedback.PlaySpectatorBlueWinsAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchResultFeedback::PlaySpectatorBlueWinsAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchResultFeedback", "PlaySpectatorBlueWinsAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchResultFeedback.PlaySpectatorRedWinsAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchResultFeedback::PlaySpectatorRedWinsAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchResultFeedback", "PlaySpectatorRedWinsAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchResultFeedback.PlayVictoryAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchResultFeedback::PlayVictoryAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchResultFeedback", "PlayVictoryAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchScore.FillPlayerNames
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Team0                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Team1                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchScore::FillPlayerNames(const class FString& Team0, const class FString& Team1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchScore", "FillPlayerNames");

	Params::WidgetContainerMatchScore_FillPlayerNames Parms{};

	Parms.Team0 = std::move(Team0);
	Parms.Team1 = std::move(Team1);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchScore.FillRoundAndLoopText
// (Final, Native, Protected)
// Parameters:
// int32                                   Round                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchScore::FillRoundAndLoopText(int32 Round, int32 Loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchScore", "FillRoundAndLoopText");

	Params::WidgetContainerMatchScore_FillRoundAndLoopText Parms{};

	Parms.Round = Round;
	Parms.Loop = Loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchScore.SetPoints_BP
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchScore::SetPoints_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchScore", "SetPoints_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchScore.UpdateScore
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerMatchScore::UpdateScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchScore", "UpdateScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchScore.GetTWCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* UWidgetContainerMatchScore::GetTWCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchScore", "GetTWCharacter");

	Params::WidgetContainerMatchScore_GetTWCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerMatchScore.GetTWGameState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchGameState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchGameState* UWidgetContainerMatchScore::GetTWGameState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchScore", "GetTWGameState");

	Params::WidgetContainerMatchScore_GetTWGameState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerMatchSettings.CloneCountSelectionChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchSettings::CloneCountSelectionChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchSettings", "CloneCountSelectionChanged");

	Params::WidgetContainerMatchSettings_CloneCountSelectionChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchSettings.HealingModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchSettings::HealingModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchSettings", "HealingModeChanged");

	Params::WidgetContainerMatchSettings_HealingModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchSettings.HealthPackModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchSettings::HealthPackModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchSettings", "HealthPackModeChanged");

	Params::WidgetContainerMatchSettings_HealthPackModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchSettings.MapSelectionChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchSettings::MapSelectionChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchSettings", "MapSelectionChanged");

	Params::WidgetContainerMatchSettings_MapSelectionChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchSettings.MatchScoreSelectionChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchSettings::MatchScoreSelectionChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchSettings", "MatchScoreSelectionChanged");

	Params::WidgetContainerMatchSettings_MatchScoreSelectionChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchSettings.OvertimeModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchSettings::OvertimeModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchSettings", "OvertimeModeChanged");

	Params::WidgetContainerMatchSettings_OvertimeModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchSettings.StartMatchButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMatchSettings::StartMatchButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchSettings", "StartMatchButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchSettings.WeaponModeChanged
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchSettings::WeaponModeChanged(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchSettings", "WeaponModeChanged");

	Params::WidgetContainerMatchSettings_WeaponModeChanged Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.BP_OnPlayerDemoted
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::BP_OnPlayerDemoted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "BP_OnPlayerDemoted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.BP_OnPlayerPromoted
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::BP_OnPlayerPromoted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "BP_OnPlayerPromoted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.BP_OnPlayerTournamentResultReceived
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::BP_OnPlayerTournamentResultReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "BP_OnPlayerTournamentResultReceived");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.BP_OnStandardMatchResultFinished
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETWMatchType                            FinishedMatchType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchTally::BP_OnStandardMatchResultFinished(ETWMatchType FinishedMatchType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "BP_OnStandardMatchResultFinished");

	Params::WidgetContainerMatchTally_BP_OnStandardMatchResultFinished Parms{};

	Parms.FinishedMatchType = FinishedMatchType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerMatchTally.EnableRematchButton
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsButtonEnabled                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchTally::EnableRematchButton(bool bIsButtonEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "EnableRematchButton");

	Params::WidgetContainerMatchTally_EnableRematchButton Parms{};

	Parms.bIsButtonEnabled = bIsButtonEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnBackToTallyButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMatchTally::OnBackToTallyButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnBackToTallyButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnBattlePointsUpdateEnd
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnBattlePointsUpdateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnBattlePointsUpdateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnBattlePointsUpdateStart
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnBattlePointsUpdateStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnBattlePointsUpdateStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnDemotion
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnDemotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnDemotion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnLeaveTierUpPopup
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnLeaveTierUpPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnLeaveTierUpPopup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnLevelUp
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnLevelUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnLevelUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnMainMenuButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMatchTally::OnMainMenuButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnMainMenuButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnMedalFadeInAnimFinished
// (Final, Native, Protected)

void UWidgetContainerMatchTally::OnMedalFadeInAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnMedalFadeInAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnMedalFadeInAnimStarted
// (Final, Native, Protected)

void UWidgetContainerMatchTally::OnMedalFadeInAnimStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnMedalFadeInAnimStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnMedalFadeOutAnimFinished
// (Final, Native, Protected)

void UWidgetContainerMatchTally::OnMedalFadeOutAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnMedalFadeOutAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnPresentMedalAnimFinished
// (Final, Native, Protected)

void UWidgetContainerMatchTally::OnPresentMedalAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnPresentMedalAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnPromotion
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnPromotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnPromotion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnRematchButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMatchTally::OnRematchButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnRematchButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnReportPlayerButtonClicked
// (Final, Native, Protected)

void UWidgetContainerMatchTally::OnReportPlayerButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnReportPlayerButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.OnShowTierUpPopup
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnShowTierUpPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnShowTierUpPopup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnTournamentPointsUpdateEnd
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnTournamentPointsUpdateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnTournamentPointsUpdateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnTournamentPointsUpdateStart
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnTournamentPointsUpdateStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnTournamentPointsUpdateStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnXPUpdateEnd
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnXPUpdateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnXPUpdateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.OnXPUpdateStart
// (Event, Protected, BlueprintEvent)

void UWidgetContainerMatchTally::OnXPUpdateStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "OnXPUpdateStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerMatchTally.PlayRankResume
// (Final, Native, Protected)

void UWidgetContainerMatchTally::PlayRankResume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "PlayRankResume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.SetAnimateXPBar
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchTally::SetAnimateXPBar(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "SetAnimateXPBar");

	Params::WidgetContainerMatchTally_SetAnimateXPBar Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.SetWantsRematchVisibility
// (Final, Native, Public)
// Parameters:
// bool                                    IsVisible_0                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerMatchTally::SetWantsRematchVisibility(bool IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "SetWantsRematchVisibility");

	Params::WidgetContainerMatchTally_SetWantsRematchVisibility Parms{};

	Parms.IsVisible_0 = IsVisible_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.ShowButtons
// (Final, Native, Protected, BlueprintCallable)

void UWidgetContainerMatchTally::ShowButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "ShowButtons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.ShowMatchResult
// (Final, Native, Public)

void UWidgetContainerMatchTally::ShowMatchResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "ShowMatchResult");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.StartMatchResultChecker
// (Final, Native, Public)

void UWidgetContainerMatchTally::StartMatchResultChecker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "StartMatchResultChecker");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMatchTally.VoidRematchButton
// (Final, Native, Public)

void UWidgetContainerMatchTally::VoidRematchButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMatchTally", "VoidRematchButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMediaPlayer.OnMediaStopped
// (Final, Native, Protected)

void UWidgetContainerMediaPlayer::OnMediaStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMediaPlayer", "OnMediaStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerMediaPlayer.StopMedia
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerMediaPlayer::StopMedia()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerMediaPlayer", "StopMedia");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerNews.OnNewsButtonHovered
// (Final, Native, Protected)

void UWidgetContainerNews::OnNewsButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerNews", "OnNewsButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerNews.OnNewsButtonUnhovered
// (Final, Native, Protected)

void UWidgetContainerNews::OnNewsButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerNews", "OnNewsButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerNews.OnNewsItemHovered
// (Final, Native, Protected)

void UWidgetContainerNews::OnNewsItemHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerNews", "OnNewsItemHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerNews.OnNewsItemSelected
// (Final, Native, Protected)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerNews::OnNewsItemSelected(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerNews", "OnNewsItemSelected");

	Params::WidgetContainerNews_OnNewsItemSelected Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerNews.OpenNewsURL
// (Final, Native, Protected)

void UWidgetContainerNews::OpenNewsURL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerNews", "OpenNewsURL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerNotification.OnChallengeDataLoaded
// (Final, Native, Protected)
// Parameters:
// class UTWChallengeEventData*            ChallengeEventData                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerNotification::OnChallengeDataLoaded(class UTWChallengeEventData* ChallengeEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerNotification", "OnChallengeDataLoaded");

	Params::WidgetContainerNotification_OnChallengeDataLoaded Parms{};

	Parms.ChallengeEventData = ChallengeEventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerNotification.OnChallengeProgress
// (Final, Native, Public)
// Parameters:
// class UTWChallengeEvent*                ChallengeEvent                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTWChallengeRule&          Rule                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerNotification::OnChallengeProgress(class UTWChallengeEvent* ChallengeEvent, const struct FTWChallengeRule& Rule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerNotification", "OnChallengeProgress");

	Params::WidgetContainerNotification_OnChallengeProgress Parms{};

	Parms.ChallengeEvent = ChallengeEvent;
	Parms.Rule = std::move(Rule);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerNotification.OnNotificationFromChallenge
// (Final, Native, Protected)
// Parameters:
// class UTWChallengeEvent*                Challenge                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerNotification::OnNotificationFromChallenge(class UTWChallengeEvent* Challenge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerNotification", "OnNotificationFromChallenge");

	Params::WidgetContainerNotification_OnNotificationFromChallenge Parms{};

	Parms.Challenge = Challenge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerOptionsMenu.Focus_BP
// (Event, Public, BlueprintEvent)

void UWidgetContainerOptionsMenu::Focus_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerOptionsMenu", "Focus_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerOptionsMenu.GoToMainMenu
// (Final, Native, Public)

void UWidgetContainerOptionsMenu::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerOptionsMenu", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerMatchIntro.ShowPlayerCard
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AFluxPlayerState*                 NewPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerMatchIntro::ShowPlayerCard(class AFluxPlayerState* NewPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerMatchIntro", "ShowPlayerCard");

	Params::WidgetContainerPlayerMatchIntro_ShowPlayerCard Parms{};

	Parms.NewPlayerState = NewPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.GoToMainMenu
// (Final, Native, Public)

void UWidgetContainerPlayerProfile::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.InitializeLeagueRankings
// (Final, Native, Public)

void UWidgetContainerPlayerProfile::InitializeLeagueRankings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "InitializeLeagueRankings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.InitializePlayerProfileWidget
// (Final, Native, Public)
// Parameters:
// const class FString&                    InUserName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InPlayerXP                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::InitializePlayerProfileWidget(const class FString& InUserName, int32 InPlayerXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "InitializePlayerProfileWidget");

	Params::WidgetContainerPlayerProfile_InitializePlayerProfileWidget Parms{};

	Parms.InUserName = std::move(InUserName);
	Parms.InPlayerXP = InPlayerXP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.On1V1LeaderboardButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::On1V1LeaderboardButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "On1V1LeaderboardButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.On2V2LeaderboardButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::On2V2LeaderboardButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "On2V2LeaderboardButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerPlayerProfile::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnDominanceTableButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::OnDominanceTableButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnDominanceTableButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnEloTableButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::OnEloTableButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnEloTableButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnLeaderboardPeriodChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const class FString&                    SelectedOption                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::OnLeaderboardPeriodChanged(const class FString& SelectedOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnLeaderboardPeriodChanged");

	Params::WidgetContainerPlayerProfile_OnLeaderboardPeriodChanged Parms{};

	Parms.SelectedOption = std::move(SelectedOption);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnLeaderboardsRequestComplete
// (Final, Native, Protected, HasOutParams)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FNGDBackendGlobalLeaderboardEntry>*LeaderboardEntries                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const struct FNGDBackendGlobalLeaderboardEntry&OwnEntry                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::OnLeaderboardsRequestComplete(bool bWasSuccessful, const class FString& ErrorString, TArray<struct FNGDBackendGlobalLeaderboardEntry>* LeaderboardEntries, const struct FNGDBackendGlobalLeaderboardEntry& OwnEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnLeaderboardsRequestComplete");

	Params::WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.OwnEntry = std::move(OwnEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LeaderboardEntries != nullptr)
		*LeaderboardEntries = std::move(Parms.LeaderboardEntries);
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnLeagueRankingButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::OnLeagueRankingButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnLeagueRankingButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnMatchHistoryButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::OnMatchHistoryButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnMatchHistoryButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnPlayerTitlesButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::OnPlayerTitlesButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnPlayerTitlesButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnProfileOverviewButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::OnProfileOverviewButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnProfileOverviewButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnScrolled
// (Final, Native, Protected)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::OnScrolled(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnScrolled");

	Params::WidgetContainerPlayerProfile_OnScrolled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.OnUnlockPremiumButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::OnUnlockPremiumButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "OnUnlockPremiumButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetGamesWon
// (Final, Native, Protected)
// Parameters:
// int32                                   GamesWonInt                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::SetGamesWon(int32 GamesWonInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetGamesWon");

	Params::WidgetContainerPlayerProfile_SetGamesWon Parms{};

	Parms.GamesWonInt = GamesWonInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetHighestMMR
// (Final, Native, Protected)
// Parameters:
// int32                                   HighestMMRInt                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::SetHighestMMR(int32 HighestMMRInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetHighestMMR");

	Params::WidgetContainerPlayerProfile_SetHighestMMR Parms{};

	Parms.HighestMMRInt = HighestMMRInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetKillRate
// (Final, Native, Protected)
// Parameters:
// int32                                   KillRateInt                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::SetKillRate(int32 KillRateInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetKillRate");

	Params::WidgetContainerPlayerProfile_SetKillRate Parms{};

	Parms.KillRateInt = KillRateInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetPlayerStyle
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::SetPlayerStyle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetPlayerStyle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetPlayerTitleCalloutVisibility
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::SetPlayerTitleCalloutVisibility(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetPlayerTitleCalloutVisibility");

	Params::WidgetContainerPlayerProfile_SetPlayerTitleCalloutVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetTabToMatchHistory
// (Final, Native, Public)

void UWidgetContainerPlayerProfile::SetTabToMatchHistory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetTabToMatchHistory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetTimePlayed
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::SetTimePlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetTimePlayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetupLeaderboardLayout
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::SetupLeaderboardLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetupLeaderboardLayout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetUserAvatar
// (Final, Native, Protected)

void UWidgetContainerPlayerProfile::SetUserAvatar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetUserAvatar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetUserLevel
// (Final, Native, Protected)
// Parameters:
// int32                                   InCurrentXP                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::SetUserLevel(int32 InCurrentXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetUserLevel");

	Params::WidgetContainerPlayerProfile_SetUserLevel Parms{};

	Parms.InCurrentXP = InCurrentXP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetUsername
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::SetUsername(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetUsername");

	Params::WidgetContainerPlayerProfile_SetUsername Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetWinRatio
// (Final, Native, Protected)
// Parameters:
// int32                                   WinRateInt                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::SetWinRatio(int32 WinRateInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetWinRatio");

	Params::WidgetContainerPlayerProfile_SetWinRatio Parms{};

	Parms.WinRateInt = WinRateInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerProfile.SetXPBarProgress
// (Final, Native, Protected)
// Parameters:
// int32                                   InCurrentXP                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerProfile::SetXPBarProgress(int32 InCurrentXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerProfile", "SetXPBarProgress");

	Params::WidgetContainerPlayerProfile_SetXPBarProgress Parms{};

	Parms.InCurrentXP = InCurrentXP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerTitleSelect.OnContextualButtonClicked
// (Final, Native, Protected)

void UWidgetContainerPlayerTitleSelect::OnContextualButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerTitleSelect", "OnContextualButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerTitleSelect.OnStyleClicked
// (Final, Native, Protected)
// Parameters:
// const class UTWItemDataAsset*           SelectedStyleData                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerTitleSelect::OnStyleClicked(const class UTWItemDataAsset* SelectedStyleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerTitleSelect", "OnStyleClicked");

	Params::WidgetContainerPlayerTitleSelect_OnStyleClicked Parms{};

	Parms.SelectedStyleData = SelectedStyleData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerTitleSelect.TryEquipCurrentItem
// (Final, Native, Protected)

void UWidgetContainerPlayerTitleSelect::TryEquipCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerTitleSelect", "TryEquipCurrentItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlayerTitleSelect.TryEquipItem
// (Final, Native, Protected)
// Parameters:
// const class UTWItemDataAsset*           SelectedStyleData                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlayerTitleSelect::TryEquipItem(const class UTWItemDataAsset* SelectedStyleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlayerTitleSelect", "TryEquipItem");

	Params::WidgetContainerPlayerTitleSelect_TryEquipItem Parms{};

	Parms.SelectedStyleData = SelectedStyleData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.GoToMainMenu
// (Final, Native, Public)
// Parameters:
// ETWMatchQueueType                       MatchmakingType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlaySelection::GoToMainMenu(ETWMatchQueueType MatchmakingType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "GoToMainMenu");

	Params::WidgetContainerPlaySelection_GoToMainMenu Parms{};

	Parms.MatchmakingType = MatchmakingType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.HideDetailsPrompt
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::HideDetailsPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "HideDetailsPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.InitializePlaySelectionWidget
// (Final, Native, Public)

void UWidgetContainerPlaySelection::InitializePlaySelectionWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "InitializePlaySelectionWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.On1V1CasualClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::On1V1CasualClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "On1V1CasualClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.On1V1RankedClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::On1V1RankedClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "On1V1RankedClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.On2V2CasualClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::On2V2CasualClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "On2V2CasualClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.On2V2RankedClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::On2V2RankedClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "On2V2RankedClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerPlaySelection::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.OnCasualRightClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::OnCasualRightClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "OnCasualRightClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.OnCustomMatchClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::OnCustomMatchClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "OnCustomMatchClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.OnOneVOneTabClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::OnOneVOneTabClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "OnOneVOneTabClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.OnPartyDataUpdated
// (Final, Native, Protected)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerPlaySelection::OnPartyDataUpdated(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "OnPartyDataUpdated");

	Params::WidgetContainerPlaySelection_OnPartyDataUpdated Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.OnRankedRightClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::OnRankedRightClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "OnRankedRightClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.OnTrainingClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::OnTrainingClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "OnTrainingClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.OnTwoVTwoTabClicked
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::OnTwoVTwoTabClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "OnTwoVTwoTabClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPlaySelection.ShowDetailsPrompt
// (Final, Native, Protected)

void UWidgetContainerPlaySelection::ShowDetailsPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPlaySelection", "ShowDetailsPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerPointReview.OnDisabled
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UWidgetContainerPointReview::OnDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPointReview", "OnDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerPointReview.OnEnabled
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UWidgetContainerPointReview::OnEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerPointReview", "OnEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerQuickChat.GetEntriesCount
// (Final, Native, Public)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWidgetContainerQuickChat::GetEntriesCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerQuickChat", "GetEntriesCount");

	Params::WidgetContainerQuickChat_GetEntriesCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerRadialFeedback.AddRadialFeedback
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const struct FVector&                   HitDirection                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFeedbackType                           FeedbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRadialFeedback::AddRadialFeedback(const struct FVector& HitDirection, EFeedbackType FeedbackType, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRadialFeedback", "AddRadialFeedback");

	Params::WidgetContainerRadialFeedback_AddRadialFeedback Parms{};

	Parms.HitDirection = std::move(HitDirection);
	Parms.FeedbackType = FeedbackType;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRadialFeedback.UpdateFeedback
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWidget*                          HitWidget                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRadialFeedback::UpdateFeedback(class UWidget* HitWidget, float Progress, float Alpha, float Scale, float Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRadialFeedback", "UpdateFeedback");

	Params::WidgetContainerRadialFeedback_UpdateFeedback Parms{};

	Parms.HitWidget = HitWidget;
	Parms.Progress = Progress;
	Parms.Alpha = Alpha;
	Parms.Scale = Scale;
	Parms.Rotation = Rotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerRedeemCode.OnBackButtonClicked
// (Final, Native, Protected)

void UWidgetContainerRedeemCode::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRedeemCode", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRedeemCode.OnPlayerDataUpdate
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRedeemCode::OnPlayerDataUpdate(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRedeemCode", "OnPlayerDataUpdate");

	Params::WidgetContainerRedeemCode_OnPlayerDataUpdate Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRedeemCode.OnRedeemCodeButtonClicked
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerRedeemCode::OnRedeemCodeButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRedeemCode", "OnRedeemCodeButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRedeemCode.OnRedeemCodeResponseReceived
// (Final, Native, Protected, HasOutParams)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RedeemCodeResult                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNGDBackendReceivedRewards&RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetContainerRedeemCode::OnRedeemCodeResponseReceived(bool bWasSuccessful, const class FString& RedeemCodeResult, const struct FNGDBackendReceivedRewards& RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRedeemCode", "OnRedeemCodeResponseReceived");

	Params::WidgetContainerRedeemCode_OnRedeemCodeResponseReceived Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.RedeemCodeResult = std::move(RedeemCodeResult);
	Parms.RewardData = std::move(RewardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerReplayControl.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerReplayControl::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerReplayControl", "OnGameStateChanged");

	Params::WidgetContainerReplayControl_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerReplays.InitializeWidget
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerReplays::InitializeWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerReplays", "InitializeWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerReplayState.PlayMatchEndedAnimation
// (Event, Public, BlueprintEvent)

void UWidgetContainerReplayState::PlayMatchEndedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerReplayState", "PlayMatchEndedAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerReportPlayer.OnCloseButtonClicked
// (Final, Native, Public)

void UWidgetContainerReportPlayer::OnCloseButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerReportPlayer", "OnCloseButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerReportPlayer.OnSubmitButtonClicked
// (Final, Native, Public)

void UWidgetContainerReportPlayer::OnSubmitButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerReportPlayer", "OnSubmitButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerReviveFeedback.OnGenericEventReceived
// (Final, Native, Private)
// Parameters:
// class UTimeWatchEvent*                  Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerReviveFeedback::OnGenericEventReceived(class UTimeWatchEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerReviveFeedback", "OnGenericEventReceived");

	Params::WidgetContainerReviveFeedback_OnGenericEventReceived Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.GoToMainMenu
// (Final, Native, Public)

void UWidgetContainerRewardTrack::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnEquipButtonPressed
// (Final, Native, Protected)

void UWidgetContainerRewardTrack::OnEquipButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnEquipButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnEscapePressed
// (Final, Native, Public)

void UWidgetContainerRewardTrack::OnEscapePressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnEscapePressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnFirstLoadComplete
// (Final, Native, Protected)

void UWidgetContainerRewardTrack::OnFirstLoadComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnFirstLoadComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnRewardItemClicked
// (Final, Native, Protected)
// Parameters:
// class UTWRewardWidget*                  ClickedRewardWidget                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRewardTrack::OnRewardItemClicked(class UTWRewardWidget* ClickedRewardWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnRewardItemClicked");

	Params::WidgetContainerRewardTrack_OnRewardItemClicked Parms{};

	Parms.ClickedRewardWidget = ClickedRewardWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnRewardItemHovered
// (Final, Native, Protected)
// Parameters:
// class UTWRewardWidget*                  ClickedRewardWidget                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRewardTrack::OnRewardItemHovered(class UTWRewardWidget* ClickedRewardWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnRewardItemHovered");

	Params::WidgetContainerRewardTrack_OnRewardItemHovered Parms{};

	Parms.ClickedRewardWidget = ClickedRewardWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnRewardItemUnhovered
// (Final, Native, Protected)
// Parameters:
// class UTWRewardWidget*                  ClickedRewardWidget                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRewardTrack::OnRewardItemUnhovered(class UTWRewardWidget* ClickedRewardWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnRewardItemUnhovered");

	Params::WidgetContainerRewardTrack_OnRewardItemUnhovered Parms{};

	Parms.ClickedRewardWidget = ClickedRewardWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnRewardsScrolled
// (Final, Native, Protected)
// Parameters:
// int32                                   ScrollingDirection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRewardTrack::OnRewardsScrolled(int32 ScrollingDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnRewardsScrolled");

	Params::WidgetContainerRewardTrack_OnRewardsScrolled Parms{};

	Parms.ScrollingDirection = ScrollingDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnScrollLeftButtonPressed
// (Final, Native, Protected)

void UWidgetContainerRewardTrack::OnScrollLeftButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnScrollLeftButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.OnScrollRightButtonPressed
// (Final, Native, Protected)

void UWidgetContainerRewardTrack::OnScrollRightButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "OnScrollRightButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.ScrollItemIntoView
// (Final, Native, Protected)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRewardTrack::ScrollItemIntoView(int32 InIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "ScrollItemIntoView");

	Params::WidgetContainerRewardTrack_ScrollItemIntoView Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerRewardTrack.UpdateRemainingTime
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   RemainingMinutes                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerRewardTrack::UpdateRemainingTime(int32 RemainingMinutes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "UpdateRemainingTime");

	Params::WidgetContainerRewardTrack_UpdateRemainingTime Parms{};

	Parms.RemainingMinutes = RemainingMinutes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerRewardTrack.GetMainMenuHud
// (Final, Native, Protected, Const)
// Parameters:
// class AMainMenuHUD*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMainMenuHUD* UWidgetContainerRewardTrack::GetMainMenuHud() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerRewardTrack", "GetMainMenuHud");

	Params::WidgetContainerRewardTrack_GetMainMenuHud Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerScorePopup.PlayBlueScoredAnimationForSpectator
// (Event, Protected, BlueprintEvent)

void UWidgetContainerScorePopup::PlayBlueScoredAnimationForSpectator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerScorePopup", "PlayBlueScoredAnimationForSpectator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerScorePopup.PlayEnemyScoredAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerScorePopup::PlayEnemyScoredAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerScorePopup", "PlayEnemyScoredAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerScorePopup.PlayRedScoredAnimationForSpectator
// (Event, Protected, BlueprintEvent)

void UWidgetContainerScorePopup::PlayRedScoredAnimationForSpectator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerScorePopup", "PlayRedScoredAnimationForSpectator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerScorePopup.PlayYouScoredAnimation
// (Event, Protected, BlueprintEvent)

void UWidgetContainerScorePopup::PlayYouScoredAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerScorePopup", "PlayYouScoredAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerSpectatorDisplay.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerSpectatorDisplay::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerSpectatorDisplay", "OnGameStateChanged");

	Params::WidgetContainerSpectatorDisplay_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.BP_OnBuyItemSuccess
// (Event, Protected, BlueprintEvent)

void UWidgetContainerStore::BP_OnBuyItemSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "BP_OnBuyItemSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerStore.GoToMainMenu
// (Final, Native, Public)

void UWidgetContainerStore::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.MicroTxnFinished
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSucessful                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerStore::MicroTxnFinished(bool bWasSucessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "MicroTxnFinished");

	Params::WidgetContainerStore_MicroTxnFinished Parms{};

	Parms.bWasSucessful = bWasSucessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnBuyItemClicked
// (Final, Native, Protected)

void UWidgetContainerStore::OnBuyItemClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnBuyItemClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnBuyItemComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SKU                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   newCoinsAmmount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OnBuyItemComplete(bool bWasSuccessful, const class FString& ErrorString, const class FString& SKU, int32 newCoinsAmmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnBuyItemComplete");

	Params::WidgetContainerStore_OnBuyItemComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.SKU = std::move(SKU);
	Parms.newCoinsAmmount = newCoinsAmmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnLoadDailyStoreRequestComplete
// (Final, Native, Protected, HasOutParams)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNGDBackendDailyStoreData& DailyStoreData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OnLoadDailyStoreRequestComplete(bool bWasSuccessful, const class FString& ErrorString, const struct FNGDBackendDailyStoreData& DailyStoreData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnLoadDailyStoreRequestComplete");

	Params::WidgetContainerStore_OnLoadDailyStoreRequestComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.DailyStoreData = std::move(DailyStoreData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnLoadQuarkStoreRequestComplete
// (Final, Native, Protected, HasOutParams)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNGDBackendQuarkStoreData& QuarksStoreData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OnLoadQuarkStoreRequestComplete(bool bWasSuccessful, const class FString& ErrorString, const struct FNGDBackendQuarkStoreData& QuarksStoreData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnLoadQuarkStoreRequestComplete");

	Params::WidgetContainerStore_OnLoadQuarkStoreRequestComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.QuarksStoreData = std::move(QuarksStoreData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnQuarkBundleClicked
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FString*                          SlotID                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OnQuarkBundleClicked(class FString* SlotID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnQuarkBundleClicked");

	Params::WidgetContainerStore_OnQuarkBundleClicked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SlotID != nullptr)
		*SlotID = std::move(Parms.SlotID);
}


// Function TimeWatch.WidgetContainerStore.OnShowQuarksBundles
// (Final, Native, Protected)

void UWidgetContainerStore::OnShowQuarksBundles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnShowQuarksBundles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnSlotClicked
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FString*                          SlotID                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OnSlotClicked(class FString* SlotID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnSlotClicked");

	Params::WidgetContainerStore_OnSlotClicked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SlotID != nullptr)
		*SlotID = std::move(Parms.SlotID);
}


// Function TimeWatch.WidgetContainerStore.OnSlotHovered
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FString*                          SlotID                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OnSlotHovered(class FString* SlotID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnSlotHovered");

	Params::WidgetContainerStore_OnSlotHovered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SlotID != nullptr)
		*SlotID = std::move(Parms.SlotID);
}


// Function TimeWatch.WidgetContainerStore.OnSteamMicroTxnReceived
// (Final, Native, Protected, HasOutParams)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Authorized                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OrderId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TransactionId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNGDBackendReceivedRewards&RewardData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OnSteamMicroTxnReceived(bool bWasSuccessful, const class FString& ErrorString, bool Authorized, int32 OrderId, const class FString& TransactionId, const struct FNGDBackendReceivedRewards& RewardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnSteamMicroTxnReceived");

	Params::WidgetContainerStore_OnSteamMicroTxnReceived Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.Authorized = Authorized;
	Parms.OrderId = OrderId;
	Parms.TransactionId = std::move(TransactionId);
	Parms.RewardData = std::move(RewardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnSteamMicroTxnStart
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OrderId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TransactionId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OnSteamMicroTxnStart(bool bWasSuccessful, const class FString& ErrorString, int32 OrderId, const class FString& TransactionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnSteamMicroTxnStart");

	Params::WidgetContainerStore_OnSteamMicroTxnStart Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.OrderId = OrderId;
	Parms.TransactionId = std::move(TransactionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnUnlock
// (Final, Native, Protected)

void UWidgetContainerStore::OnUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnUnlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OnUnlockPremiumButtonClicked
// (Final, Native, Protected)

void UWidgetContainerStore::OnUnlockPremiumButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OnUnlockPremiumButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.OpenPremiumPopup
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class FText&                      PopupTitle                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetContainerStore::OpenPremiumPopup(const class FText& PopupTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "OpenPremiumPopup");

	Params::WidgetContainerStore_OpenPremiumPopup Parms{};

	Parms.PopupTitle = std::move(PopupTitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerStore.GetMainMenuHud
// (Final, Native, Protected, Const)
// Parameters:
// class AMainMenuHUD*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMainMenuHUD* UWidgetContainerStore::GetMainMenuHud() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerStore", "GetMainMenuHud");

	Params::WidgetContainerStore_GetMainMenuHud Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerTeamsInfo.OnGameStateChanged
// (Final, Native, Protected)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerTeamsInfo::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTeamsInfo", "OnGameStateChanged");

	Params::WidgetContainerTeamsInfo_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerTipNotification.HideCurrentTip
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerTipNotification::HideCurrentTip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTipNotification", "HideCurrentTip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerTipNotification.OnHideEnd
// (Final, Native, Public)
// Parameters:
// class UWidgetTipNotification*           NotificationToRemove                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerTipNotification::OnHideEnd(class UWidgetTipNotification* NotificationToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTipNotification", "OnHideEnd");

	Params::WidgetContainerTipNotification_OnHideEnd Parms{};

	Parms.NotificationToRemove = NotificationToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerTipNotification.ShowNotification
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      Title                                                  (Parm, NativeAccessSpecifierPublic)
// const class FText&                      Description                                            (Parm, NativeAccessSpecifierPublic)
// const class FString&                    NotificationID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ShowPriority                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxExpiration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetTipNotification*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetTipNotification* UWidgetContainerTipNotification::ShowNotification(const class FText& Title, const class FText& Description, const class FString& NotificationID, int32 ShowPriority, float Duration, float MaxExpiration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTipNotification", "ShowNotification");

	Params::WidgetContainerTipNotification_ShowNotification Parms{};

	Parms.Title = std::move(Title);
	Parms.Description = std::move(Description);
	Parms.NotificationID = std::move(NotificationID);
	Parms.ShowPriority = ShowPriority;
	Parms.Duration = Duration;
	Parms.MaxExpiration = MaxExpiration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerTraining.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerTraining::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTraining", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerTraining.OnPartyDataUpdated
// (Final, Native, Public)
// Parameters:
// const bool                              bPartyStructureChanged                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerTraining::OnPartyDataUpdated(const bool bPartyStructureChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTraining", "OnPartyDataUpdated");

	Params::WidgetContainerTraining_OnPartyDataUpdated Parms{};

	Parms.bPartyStructureChanged = bPartyStructureChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerTraining.OnPlayButtonClicked
// (Final, Native, Public)

void UWidgetContainerTraining::OnPlayButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTraining", "OnPlayButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerTraining.OnSetRegistryResponseReceived
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Result                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerTraining::OnSetRegistryResponseReceived(bool bWasSuccessful, const class FString& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTraining", "OnSetRegistryResponseReceived");

	Params::WidgetContainerTraining_OnSetRegistryResponseReceived Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerTraining.OnTutorialEntryClicked
// (Final, Native, Public)
// Parameters:
// class UTWTutorialEntryWidget*           TutorialEntryClicked                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerTraining::OnTutorialEntryClicked(class UTWTutorialEntryWidget* TutorialEntryClicked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTraining", "OnTutorialEntryClicked");

	Params::WidgetContainerTraining_OnTutorialEntryClicked Parms{};

	Parms.TutorialEntryClicked = TutorialEntryClicked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerTraining.SetActiveTutorialsWidget
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerTraining::SetActiveTutorialsWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerTraining", "SetActiveTutorialsWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerVersusScreen.InitializeVersusScreen
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerVersusScreen::InitializeVersusScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerVersusScreen", "InitializeVersusScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerVersusScreen.ShowPlayerCards
// (Final, Native, Protected, BlueprintCallable)

void UWidgetContainerVersusScreen::ShowPlayerCards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerVersusScreen", "ShowPlayerCards");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWatermarkNDA.OnLoginComplete
// (Final, Native, Public)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWatermarkNDA::OnLoginComplete(bool bWasSuccessful, const class FString& ErrorString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWatermarkNDA", "OnLoginComplete");

	Params::WidgetContainerWatermarkNDA_OnLoginComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWatermarkNDA.SetUsername
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWatermarkNDA::SetUsername(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWatermarkNDA", "SetUsername");

	Params::WidgetContainerWatermarkNDA_SetUsername Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.BP_OnBuyItemSuccess
// (Event, Protected, BlueprintEvent)

void UWidgetContainerWeaponCustomization::BP_OnBuyItemSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "BP_OnBuyItemSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponCustomization.BuyWeaponSkin
// (Final, Native, Protected)

void UWidgetContainerWeaponCustomization::BuyWeaponSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "BuyWeaponSkin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.BuyWeaponSkinPopUp
// (Final, Native, Protected)

void UWidgetContainerWeaponCustomization::BuyWeaponSkinPopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "BuyWeaponSkinPopUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerWeaponCustomization::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.OnBackgroundHovered
// (Final, Native, Protected)

void UWidgetContainerWeaponCustomization::OnBackgroundHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "OnBackgroundHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.OnBuyWeaponSkinComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ErrorString                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SKU                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   newCoinsAmmount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponCustomization::OnBuyWeaponSkinComplete(bool bWasSuccessful, const class FString& ErrorString, const class FString& SKU, int32 newCoinsAmmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "OnBuyWeaponSkinComplete");

	Params::WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.ErrorString = std::move(ErrorString);
	Parms.SKU = std::move(SKU);
	Parms.newCoinsAmmount = newCoinsAmmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.OnContextualButtonClicked
// (Final, Native, Protected)

void UWidgetContainerWeaponCustomization::OnContextualButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "OnContextualButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.OnStyleClicked
// (Final, Native, Protected)
// Parameters:
// const class UTWItemDataAsset*           SelectedStyleData                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponCustomization::OnStyleClicked(const class UTWItemDataAsset* SelectedStyleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "OnStyleClicked");

	Params::WidgetContainerWeaponCustomization_OnStyleClicked Parms{};

	Parms.SelectedStyleData = SelectedStyleData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.OnStyleHovered
// (Final, Native, Protected)
// Parameters:
// const class UTWItemDataAsset*           SelectedStyleData                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponCustomization::OnStyleHovered(const class UTWItemDataAsset* SelectedStyleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "OnStyleHovered");

	Params::WidgetContainerWeaponCustomization_OnStyleHovered Parms{};

	Parms.SelectedStyleData = SelectedStyleData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.OnUnlockPremiumButtonClicked
// (Final, Native, Protected)

void UWidgetContainerWeaponCustomization::OnUnlockPremiumButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "OnUnlockPremiumButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.OpenPremiumPopup
// (Final, Native, Protected)

void UWidgetContainerWeaponCustomization::OpenPremiumPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "OpenPremiumPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.SaveWeaponLoadoutEntry
// (Final, Native, Protected)

void UWidgetContainerWeaponCustomization::SaveWeaponLoadoutEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "SaveWeaponLoadoutEntry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.TryEquipCurrentItem
// (Final, Native, Protected)

void UWidgetContainerWeaponCustomization::TryEquipCurrentItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "TryEquipCurrentItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponCustomization.TryEquipItem
// (Final, Native, Protected)
// Parameters:
// const class UTWItemDataAsset*           SelectedStyleData                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponCustomization::TryEquipItem(const class UTWItemDataAsset* SelectedStyleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponCustomization", "TryEquipItem");

	Params::WidgetContainerWeaponCustomization_TryEquipItem Parms{};

	Parms.SelectedStyleData = SelectedStyleData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponSelection.OnBackButtonClicked
// (Final, Native, Public)

void UWidgetContainerWeaponSelection::OnBackButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponSelection", "OnBackButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponSelection.OnSlotSelected
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FString*                          SlotSKU                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponSelection::OnSlotSelected(class FString* SlotSKU)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponSelection", "OnSlotSelected");

	Params::WidgetContainerWeaponSelection_OnSlotSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SlotSKU != nullptr)
		*SlotSKU = std::move(Parms.SlotSKU);
}


// Function TimeWatch.WidgetContainerWeaponSight.BP_PlayHideSightAnim
// (Event, Public, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              TWChar                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFirearm*                         Firearm                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponSight::BP_PlayHideSightAnim(class ATimeWatchCharacter* TWChar, class AFirearm* Firearm, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponSight", "BP_PlayHideSightAnim");

	Params::WidgetContainerWeaponSight_BP_PlayHideSightAnim Parms{};

	Parms.TWChar = TWChar;
	Parms.Firearm = Firearm;
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerWeaponSight.BP_PlaySightAnim
// (Event, Public, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              TWChar                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFirearm*                         Firearm                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponSight::BP_PlaySightAnim(class ATimeWatchCharacter* TWChar, class AFirearm* Firearm, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponSight", "BP_PlaySightAnim");

	Params::WidgetContainerWeaponSight_BP_PlaySightAnim Parms{};

	Parms.TWChar = TWChar;
	Parms.Firearm = Firearm;
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerWeaponSight.BP_ResetWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class ATimeWatchCharacter*              TWChar                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFirearm*                         Firearm                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ResetMesh                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponSight::BP_ResetWidget(class ATimeWatchCharacter* TWChar, class AFirearm* Firearm, bool ResetMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponSight", "BP_ResetWidget");

	Params::WidgetContainerWeaponSight_BP_ResetWidget Parms{};

	Parms.TWChar = TWChar;
	Parms.Firearm = Firearm;
	Parms.ResetMesh = ResetMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerWeaponSight.CleanEventsCharacter
// (Final, Native, Public)

void UWidgetContainerWeaponSight::CleanEventsCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponSight", "CleanEventsCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponSight.RegisterCharacter
// (Final, Native, Public)
// Parameters:
// class ATimeWatchCharacter*              TWChar                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponSight::RegisterCharacter(class ATimeWatchCharacter* TWChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponSight", "RegisterCharacter");

	Params::WidgetContainerWeaponSight_RegisterCharacter Parms{};

	Parms.TWChar = TWChar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_OnCollapseWeaponSelected
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_OnCollapseWeaponSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_OnCollapseWeaponSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_OnPrimaryWeaponSwitchedAbility
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_OnPrimaryWeaponSwitchedAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_OnPrimaryWeaponSwitchedAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_OnRefreshOwnerData
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_OnRefreshOwnerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_OnRefreshOwnerData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_OnReset
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_OnReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_OnReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_OnSecondaryWeaponSettedAbility
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_OnSecondaryWeaponSettedAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_OnSecondaryWeaponSettedAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_OnWeaponDrawed
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_OnWeaponDrawed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_OnWeaponDrawed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_OnWeaponSelected
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   SelectedWeaponIndex                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::BP_OnWeaponSelected(int32 SelectedWeaponIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_OnWeaponSelected");

	Params::WidgetContainerWeaponStatus_BP_OnWeaponSelected Parms{};

	Parms.SelectedWeaponIndex = SelectedWeaponIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_PlayCollapseToBottomAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   FromTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::BP_PlayCollapseToBottomAnimation(float FromTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_PlayCollapseToBottomAnimation");

	Params::WidgetContainerWeaponStatus_BP_PlayCollapseToBottomAnimation Parms{};

	Parms.FromTime = FromTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_RestoreWidgetToCollapsedVersion
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_RestoreWidgetToCollapsedVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_RestoreWidgetToCollapsedVersion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_RestoreWidgetToInit
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_RestoreWidgetToInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_RestoreWidgetToInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.BP_RestoreWidgetToWeaponSelectedVersion
// (Event, Public, BlueprintEvent)

void UWidgetContainerWeaponStatus::BP_RestoreWidgetToWeaponSelectedVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "BP_RestoreWidgetToWeaponSelectedVersion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetContainerWeaponStatus.InitializeWidget
// (Final, Native, Public)

void UWidgetContainerWeaponStatus::InitializeWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "InitializeWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.OnGameStateChanged
// (Final, Native, Public)
// Parameters:
// EFluxCapacitorStates                    OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFluxCapacitorStates                    NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "OnGameStateChanged");

	Params::WidgetContainerWeaponStatus_OnGameStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.OnRefreshOwnerData
// (Final, Native, Public)

void UWidgetContainerWeaponStatus::OnRefreshOwnerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "OnRefreshOwnerData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.OnReset
// (Final, Native, Public)
// Parameters:
// class ATimeWatchCharacter*              OwnerTWCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::OnReset(class ATimeWatchCharacter* OwnerTWCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "OnReset");

	Params::WidgetContainerWeaponStatus_OnReset Parms{};

	Parms.OwnerTWCharacter = OwnerTWCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.OnWeaponDrawed
// (Final, Native, Public)
// Parameters:
// class ATemporalWeapon*                  TWWeapon                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATemporalWeapon*                  HoldTWWeapon                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::OnWeaponDrawed(class ATemporalWeapon* TWWeapon, class ATemporalWeapon* HoldTWWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "OnWeaponDrawed");

	Params::WidgetContainerWeaponStatus_OnWeaponDrawed Parms{};

	Parms.TWWeapon = TWWeapon;
	Parms.HoldTWWeapon = HoldTWWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.OnWeaponSelected
// (Final, Native, Public)
// Parameters:
// int32                                   WeaponIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::OnWeaponSelected(int32 WeaponIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "OnWeaponSelected");

	Params::WidgetContainerWeaponStatus_OnWeaponSelected Parms{};

	Parms.WeaponIndex = WeaponIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.OnWeaponSelectionCollapse
// (Final, Native, Public)

void UWidgetContainerWeaponStatus::OnWeaponSelectionCollapse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "OnWeaponSelectionCollapse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.PlayCollapseToBottomAnimation
// (Final, Native, Public)

void UWidgetContainerWeaponStatus::PlayCollapseToBottomAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "PlayCollapseToBottomAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.RestoreWidgetToCollapsedVersion
// (Final, Native, Public)

void UWidgetContainerWeaponStatus::RestoreWidgetToCollapsedVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "RestoreWidgetToCollapsedVersion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.RestoreWidgetToInit
// (Final, Native, Public)

void UWidgetContainerWeaponStatus::RestoreWidgetToInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "RestoreWidgetToInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.RestoreWidgetToWeaponSelectedVersion
// (Final, Native, Public)

void UWidgetContainerWeaponStatus::RestoreWidgetToWeaponSelectedVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "RestoreWidgetToWeaponSelectedVersion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.SetDesiredWeapon
// (Final, Native, Public)
// Parameters:
// int32                                   DesiredWeaponIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::SetDesiredWeapon(int32 DesiredWeaponIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "SetDesiredWeapon");

	Params::WidgetContainerWeaponStatus_SetDesiredWeapon Parms{};

	Parms.DesiredWeaponIndex = DesiredWeaponIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.SetWeaponImageType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWeaponIconType                         WeaponIconType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ATemporalWeapon*                  TemporalWeapon                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::SetWeaponImageType(EWeaponIconType WeaponIconType, class ATemporalWeapon* TemporalWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "SetWeaponImageType");

	Params::WidgetContainerWeaponStatus_SetWeaponImageType Parms{};

	Parms.WeaponIconType = WeaponIconType;
	Parms.TemporalWeapon = TemporalWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.SetWeaponsImageType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWeaponIconType                         WeaponIconType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetContainerWeaponStatus::SetWeaponsImageType(EWeaponIconType WeaponIconType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "SetWeaponsImageType");

	Params::WidgetContainerWeaponStatus_SetWeaponsImageType Parms{};

	Parms.WeaponIconType = WeaponIconType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.SkipCollapseAnimation
// (Final, Native, Public, BlueprintCallable)

void UWidgetContainerWeaponStatus::SkipCollapseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "SkipCollapseAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetContainerWeaponStatus.GetTimeWatchOwnerCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATimeWatchCharacter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATimeWatchCharacter* UWidgetContainerWeaponStatus::GetTimeWatchOwnerCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWeaponStatus", "GetTimeWatchOwnerCharacter");

	Params::WidgetContainerWeaponStatus_GetTimeWatchOwnerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TimeWatch.WidgetContainerWishlist.GoToMainMenu
// (Final, Native, Public)

void UWidgetContainerWishlist::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetContainerWishlist", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetTipNotification.OnHideEndBroadcast
// (Final, Native, Public, BlueprintCallable)

void UWidgetTipNotification::OnHideEndBroadcast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetTipNotification", "OnHideEndBroadcast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TimeWatch.WidgetTipNotification.PlayHideAnim
// (Event, Public, BlueprintEvent)

void UWidgetTipNotification::PlayHideAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetTipNotification", "PlayHideAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TimeWatch.WidgetTipNotification.PlayShowAnim
// (Event, Public, BlueprintEvent)

void UWidgetTipNotification::PlayShowAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetTipNotification", "PlayShowAnim");

	UObject::ProcessEvent(Func, nullptr);
}

}

