#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SelectedWeaponInfo

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SelectedWeaponInfo.SelectedWeaponInfo_C
// 0x0048 (0x02F0 - 0x02A8)
class USelectedWeaponInfo_C final : public UTWSelectedWeaponInfo
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ReloadBlinkAnimation;                              // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Icon_PrimaryWeaponSwitch_1;                        // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              PrimaryWeaponSwitch_ScaleBox;                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_Blink;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 stroke;                                            // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 VioletPassiveIdentifier;                           // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          CanSetSecondaryWeapon;                             // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_SelectedWeaponInfo(int32 EntryPoint);
	void BP_OnWeaponSet();
	void BP_OnWeaponReloadEnd();
	void BP_OnWeaponReloadStart();
	void ChangeTextSize(class UTextBlock* Text, int32 Size);
	void StopBlinkAnimation();
	void OnRefreshOwnerData(class ATimeWatchCharacter* Owner);
	void OnWeaponSet();
	void SetIconPrimaryWeaponSwitchVisibility(bool Value);
	void OnSelectedSecondaryWeapon();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SelectedWeaponInfo_C">();
	}
	static class USelectedWeaponInfo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectedWeaponInfo_C>();
	}
};
static_assert(alignof(USelectedWeaponInfo_C) == 0x000008, "Wrong alignment on USelectedWeaponInfo_C");
static_assert(sizeof(USelectedWeaponInfo_C) == 0x0002F0, "Wrong size on USelectedWeaponInfo_C");
static_assert(offsetof(USelectedWeaponInfo_C, UberGraphFrame) == 0x0002A8, "Member 'USelectedWeaponInfo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USelectedWeaponInfo_C, ReloadBlinkAnimation) == 0x0002B0, "Member 'USelectedWeaponInfo_C::ReloadBlinkAnimation' has a wrong offset!");
static_assert(offsetof(USelectedWeaponInfo_C, Icon_PrimaryWeaponSwitch_1) == 0x0002B8, "Member 'USelectedWeaponInfo_C::Icon_PrimaryWeaponSwitch_1' has a wrong offset!");
static_assert(offsetof(USelectedWeaponInfo_C, PrimaryWeaponSwitch_ScaleBox) == 0x0002C0, "Member 'USelectedWeaponInfo_C::PrimaryWeaponSwitch_ScaleBox' has a wrong offset!");
static_assert(offsetof(USelectedWeaponInfo_C, ProgressBar_Blink) == 0x0002C8, "Member 'USelectedWeaponInfo_C::ProgressBar_Blink' has a wrong offset!");
static_assert(offsetof(USelectedWeaponInfo_C, stroke) == 0x0002D0, "Member 'USelectedWeaponInfo_C::stroke' has a wrong offset!");
static_assert(offsetof(USelectedWeaponInfo_C, VioletPassiveIdentifier) == 0x0002D8, "Member 'USelectedWeaponInfo_C::VioletPassiveIdentifier' has a wrong offset!");
static_assert(offsetof(USelectedWeaponInfo_C, CanSetSecondaryWeapon) == 0x0002E8, "Member 'USelectedWeaponInfo_C::CanSetSecondaryWeapon' has a wrong offset!");

}

