#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CircularMoveCompType

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CircularMoveCompType.CircularMoveCompType_C.GetRelativePosition
// 0x0074 (0x0074 - 0x0000)
struct CircularMoveCompType_C_GetRelativePosition final
{
public:
	struct FVector                                NewParam;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_1;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue;      // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRelativePosition_NewParam;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CircularMoveCompType_C_GetRelativePosition) == 0x000004, "Wrong alignment on CircularMoveCompType_C_GetRelativePosition");
static_assert(sizeof(CircularMoveCompType_C_GetRelativePosition) == 0x000074, "Wrong size on CircularMoveCompType_C_GetRelativePosition");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, NewParam) == 0x000000, "Member 'CircularMoveCompType_C_GetRelativePosition::NewParam' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000010, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_MakeLiteralFloat_ReturnValue_1) == 0x000014, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_MakeLiteralFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_Normal_ReturnValue) == 0x000018, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_Ease_ReturnValue) == 0x000024, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_MakeRotFromX_ReturnValue) == 0x000028, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_MapRangeClamped_ReturnValue) == 0x000034, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_GetUpVector_ReturnValue) == 0x000038, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_RotatorFromAxisAndAngle_ReturnValue) == 0x000044, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_RotatorFromAxisAndAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000050, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_GetRelativePosition_NewParam) == 0x00005C, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_GetRelativePosition_NewParam' has a wrong offset!");
static_assert(offsetof(CircularMoveCompType_C_GetRelativePosition, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000068, "Member 'CircularMoveCompType_C_GetRelativePosition::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");

}

