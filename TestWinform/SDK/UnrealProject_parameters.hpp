#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnrealProject

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "UnrealProject_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "NGDBackend_structs.hpp"


namespace SDK::Params
{

// Function UnrealProject.BaseActor.GetLocalCharacter
// 0x0008 (0x0008 - 0x0000)
struct BaseActor_GetLocalCharacter final
{
public:
	class ANGDCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseActor_GetLocalCharacter) == 0x000008, "Wrong alignment on BaseActor_GetLocalCharacter");
static_assert(sizeof(BaseActor_GetLocalCharacter) == 0x000008, "Wrong size on BaseActor_GetLocalCharacter");
static_assert(offsetof(BaseActor_GetLocalCharacter, ReturnValue) == 0x000000, "Member 'BaseActor_GetLocalCharacter::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseActor.IsActive
// 0x0001 (0x0001 - 0x0000)
struct BaseActor_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseActor_IsActive) == 0x000001, "Wrong alignment on BaseActor_IsActive");
static_assert(sizeof(BaseActor_IsActive) == 0x000001, "Wrong size on BaseActor_IsActive");
static_assert(offsetof(BaseActor_IsActive, ReturnValue) == 0x000000, "Member 'BaseActor_IsActive::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseActor.IsOwnedByLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct BaseActor_IsOwnedByLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseActor_IsOwnedByLocalPlayer) == 0x000001, "Wrong alignment on BaseActor_IsOwnedByLocalPlayer");
static_assert(sizeof(BaseActor_IsOwnedByLocalPlayer) == 0x000001, "Wrong size on BaseActor_IsOwnedByLocalPlayer");
static_assert(offsetof(BaseActor_IsOwnedByLocalPlayer, ReturnValue) == 0x000000, "Member 'BaseActor_IsOwnedByLocalPlayer::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct Item_SetVisible final
{
public:
	bool                                          bNewVisibilityState;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_SetVisible) == 0x000001, "Wrong alignment on Item_SetVisible");
static_assert(sizeof(Item_SetVisible) == 0x000001, "Wrong size on Item_SetVisible");
static_assert(offsetof(Item_SetVisible, bNewVisibilityState) == 0x000000, "Member 'Item_SetVisible::bNewVisibilityState' has a wrong offset!");

// Function UnrealProject.Item.CanBeUsed
// 0x0001 (0x0001 - 0x0000)
struct Item_CanBeUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_CanBeUsed) == 0x000001, "Wrong alignment on Item_CanBeUsed");
static_assert(sizeof(Item_CanBeUsed) == 0x000001, "Wrong size on Item_CanBeUsed");
static_assert(offsetof(Item_CanBeUsed, ReturnValue) == 0x000000, "Member 'Item_CanBeUsed::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetFlags
// 0x0001 (0x0001 - 0x0000)
struct Item_GetFlags final
{
public:
	EItemFlags                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetFlags) == 0x000001, "Wrong alignment on Item_GetFlags");
static_assert(sizeof(Item_GetFlags) == 0x000001, "Wrong size on Item_GetFlags");
static_assert(offsetof(Item_GetFlags, ReturnValue) == 0x000000, "Member 'Item_GetFlags::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetItemIcon
// 0x0008 (0x0008 - 0x0000)
struct Item_GetItemIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetItemIcon) == 0x000008, "Wrong alignment on Item_GetItemIcon");
static_assert(sizeof(Item_GetItemIcon) == 0x000008, "Wrong size on Item_GetItemIcon");
static_assert(offsetof(Item_GetItemIcon, ReturnValue) == 0x000000, "Member 'Item_GetItemIcon::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetItemIdentifier
// 0x0010 (0x0010 - 0x0000)
struct Item_GetItemIdentifier final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetItemIdentifier) == 0x000008, "Wrong alignment on Item_GetItemIdentifier");
static_assert(sizeof(Item_GetItemIdentifier) == 0x000010, "Wrong size on Item_GetItemIdentifier");
static_assert(offsetof(Item_GetItemIdentifier, ReturnValue) == 0x000000, "Member 'Item_GetItemIdentifier::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetItemName
// 0x0010 (0x0010 - 0x0000)
struct Item_GetItemName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetItemName) == 0x000008, "Wrong alignment on Item_GetItemName");
static_assert(sizeof(Item_GetItemName) == 0x000010, "Wrong size on Item_GetItemName");
static_assert(offsetof(Item_GetItemName, ReturnValue) == 0x000000, "Member 'Item_GetItemName::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetItemPickupClass
// 0x0008 (0x0008 - 0x0000)
struct Item_GetItemPickupClass final
{
public:
	TSubclassOf<class AItemPickup>                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetItemPickupClass) == 0x000008, "Wrong alignment on Item_GetItemPickupClass");
static_assert(sizeof(Item_GetItemPickupClass) == 0x000008, "Wrong size on Item_GetItemPickupClass");
static_assert(offsetof(Item_GetItemPickupClass, ReturnValue) == 0x000000, "Member 'Item_GetItemPickupClass::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct Item_GetOwnerCharacter final
{
public:
	class ANGDCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetOwnerCharacter) == 0x000008, "Wrong alignment on Item_GetOwnerCharacter");
static_assert(sizeof(Item_GetOwnerCharacter) == 0x000008, "Wrong size on Item_GetOwnerCharacter");
static_assert(offsetof(Item_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'Item_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetOwnerInventory
// 0x0008 (0x0008 - 0x0000)
struct Item_GetOwnerInventory final
{
public:
	class UInventoryComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetOwnerInventory) == 0x000008, "Wrong alignment on Item_GetOwnerInventory");
static_assert(sizeof(Item_GetOwnerInventory) == 0x000008, "Wrong size on Item_GetOwnerInventory");
static_assert(offsetof(Item_GetOwnerInventory, ReturnValue) == 0x000000, "Member 'Item_GetOwnerInventory::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetQuantity
// 0x0004 (0x0004 - 0x0000)
struct Item_GetQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetQuantity) == 0x000004, "Wrong alignment on Item_GetQuantity");
static_assert(sizeof(Item_GetQuantity) == 0x000004, "Wrong size on Item_GetQuantity");
static_assert(offsetof(Item_GetQuantity, ReturnValue) == 0x000000, "Member 'Item_GetQuantity::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetRemainingStackQuantity
// 0x0004 (0x0004 - 0x0000)
struct Item_GetRemainingStackQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetRemainingStackQuantity) == 0x000004, "Wrong alignment on Item_GetRemainingStackQuantity");
static_assert(sizeof(Item_GetRemainingStackQuantity) == 0x000004, "Wrong size on Item_GetRemainingStackQuantity");
static_assert(offsetof(Item_GetRemainingStackQuantity, ReturnValue) == 0x000000, "Member 'Item_GetRemainingStackQuantity::ReturnValue' has a wrong offset!");

// Function UnrealProject.Item.GetWeight
// 0x0004 (0x0004 - 0x0000)
struct Item_GetWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetWeight) == 0x000004, "Wrong alignment on Item_GetWeight");
static_assert(sizeof(Item_GetWeight) == 0x000004, "Wrong size on Item_GetWeight");
static_assert(offsetof(Item_GetWeight, ReturnValue) == 0x000000, "Member 'Item_GetWeight::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCameraModifier.ApplyCustomParameterModifier
// 0x0010 (0x0010 - 0x0000)
struct NGDCameraModifier_ApplyCustomParameterModifier final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBaseValue;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBaseValue;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCameraModifier_ApplyCustomParameterModifier) == 0x000004, "Wrong alignment on NGDCameraModifier_ApplyCustomParameterModifier");
static_assert(sizeof(NGDCameraModifier_ApplyCustomParameterModifier) == 0x000010, "Wrong size on NGDCameraModifier_ApplyCustomParameterModifier");
static_assert(offsetof(NGDCameraModifier_ApplyCustomParameterModifier, ParameterName) == 0x000000, "Member 'NGDCameraModifier_ApplyCustomParameterModifier::ParameterName' has a wrong offset!");
static_assert(offsetof(NGDCameraModifier_ApplyCustomParameterModifier, InBaseValue) == 0x000008, "Member 'NGDCameraModifier_ApplyCustomParameterModifier::InBaseValue' has a wrong offset!");
static_assert(offsetof(NGDCameraModifier_ApplyCustomParameterModifier, OutBaseValue) == 0x00000C, "Member 'NGDCameraModifier_ApplyCustomParameterModifier::OutBaseValue' has a wrong offset!");

// Function UnrealProject.NGDCameraModifier.BlueprintIsModifierActive
// 0x0001 (0x0001 - 0x0000)
struct NGDCameraModifier_BlueprintIsModifierActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCameraModifier_BlueprintIsModifierActive) == 0x000001, "Wrong alignment on NGDCameraModifier_BlueprintIsModifierActive");
static_assert(sizeof(NGDCameraModifier_BlueprintIsModifierActive) == 0x000001, "Wrong size on NGDCameraModifier_BlueprintIsModifierActive");
static_assert(offsetof(NGDCameraModifier_BlueprintIsModifierActive, ReturnValue) == 0x000000, "Member 'NGDCameraModifier_BlueprintIsModifierActive::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCameraModifier.BlueprintOverrideAlpha
// 0x0004 (0x0004 - 0x0000)
struct NGDCameraModifier_BlueprintOverrideAlpha final
{
public:
	float                                         OutNewAlpha;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCameraModifier_BlueprintOverrideAlpha) == 0x000004, "Wrong alignment on NGDCameraModifier_BlueprintOverrideAlpha");
static_assert(sizeof(NGDCameraModifier_BlueprintOverrideAlpha) == 0x000004, "Wrong size on NGDCameraModifier_BlueprintOverrideAlpha");
static_assert(offsetof(NGDCameraModifier_BlueprintOverrideAlpha, OutNewAlpha) == 0x000000, "Member 'NGDCameraModifier_BlueprintOverrideAlpha::OutNewAlpha' has a wrong offset!");

// Function UnrealProject.NGDCameraModifier.GetRelativeTime
// 0x0004 (0x0004 - 0x0000)
struct NGDCameraModifier_GetRelativeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCameraModifier_GetRelativeTime) == 0x000004, "Wrong alignment on NGDCameraModifier_GetRelativeTime");
static_assert(sizeof(NGDCameraModifier_GetRelativeTime) == 0x000004, "Wrong size on NGDCameraModifier_GetRelativeTime");
static_assert(offsetof(NGDCameraModifier_GetRelativeTime, ReturnValue) == 0x000000, "Member 'NGDCameraModifier_GetRelativeTime::ReturnValue' has a wrong offset!");

// Function UnrealProject.Equipment.GetAttachmentContainer
// 0x0008 (0x0008 - 0x0000)
struct Equipment_GetAttachmentContainer final
{
public:
	class UNGDAttachmentContainerComponent*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_GetAttachmentContainer) == 0x000008, "Wrong alignment on Equipment_GetAttachmentContainer");
static_assert(sizeof(Equipment_GetAttachmentContainer) == 0x000008, "Wrong size on Equipment_GetAttachmentContainer");
static_assert(offsetof(Equipment_GetAttachmentContainer, ReturnValue) == 0x000000, "Member 'Equipment_GetAttachmentContainer::ReturnValue' has a wrong offset!");

// Function UnrealProject.Equipment.GetBodyAttachSocket
// 0x0008 (0x0008 - 0x0000)
struct Equipment_GetBodyAttachSocket final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_GetBodyAttachSocket) == 0x000004, "Wrong alignment on Equipment_GetBodyAttachSocket");
static_assert(sizeof(Equipment_GetBodyAttachSocket) == 0x000008, "Wrong size on Equipment_GetBodyAttachSocket");
static_assert(offsetof(Equipment_GetBodyAttachSocket, ReturnValue) == 0x000000, "Member 'Equipment_GetBodyAttachSocket::ReturnValue' has a wrong offset!");

// Function UnrealProject.Equipment.GetMeshTP
// 0x0008 (0x0008 - 0x0000)
struct Equipment_GetMeshTP final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_GetMeshTP) == 0x000008, "Wrong alignment on Equipment_GetMeshTP");
static_assert(sizeof(Equipment_GetMeshTP) == 0x000008, "Wrong size on Equipment_GetMeshTP");
static_assert(offsetof(Equipment_GetMeshTP, ReturnValue) == 0x000000, "Member 'Equipment_GetMeshTP::ReturnValue' has a wrong offset!");

// Function UnrealProject.Equipment.GetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct Equipment_GetSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_GetSlotIndex) == 0x000004, "Wrong alignment on Equipment_GetSlotIndex");
static_assert(sizeof(Equipment_GetSlotIndex) == 0x000004, "Wrong size on Equipment_GetSlotIndex");
static_assert(offsetof(Equipment_GetSlotIndex, ReturnValue) == 0x000000, "Member 'Equipment_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function UnrealProject.Equipment.GetSlotType
// 0x0010 (0x0010 - 0x0000)
struct Equipment_GetSlotType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_GetSlotType) == 0x000008, "Wrong alignment on Equipment_GetSlotType");
static_assert(sizeof(Equipment_GetSlotType) == 0x000010, "Wrong size on Equipment_GetSlotType");
static_assert(offsetof(Equipment_GetSlotType, ReturnValue) == 0x000000, "Member 'Equipment_GetSlotType::ReturnValue' has a wrong offset!");

// Function UnrealProject.Equipment.IsConsumable
// 0x0001 (0x0001 - 0x0000)
struct Equipment_IsConsumable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Equipment_IsConsumable) == 0x000001, "Wrong alignment on Equipment_IsConsumable");
static_assert(sizeof(Equipment_IsConsumable) == 0x000001, "Wrong size on Equipment_IsConsumable");
static_assert(offsetof(Equipment_IsConsumable, ReturnValue) == 0x000000, "Member 'Equipment_IsConsumable::ReturnValue' has a wrong offset!");

// Function UnrealProject.Action.CreateActionOfClass
// 0x0040 (0x0040 - 0x0000)
struct Action_CreateActionOfClass final
{
public:
	struct FActionParams                          ActionParams;                                      // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UAction>                    ActionClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAction*                                ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Action_CreateActionOfClass) == 0x000008, "Wrong alignment on Action_CreateActionOfClass");
static_assert(sizeof(Action_CreateActionOfClass) == 0x000040, "Wrong size on Action_CreateActionOfClass");
static_assert(offsetof(Action_CreateActionOfClass, ActionParams) == 0x000000, "Member 'Action_CreateActionOfClass::ActionParams' has a wrong offset!");
static_assert(offsetof(Action_CreateActionOfClass, ActionClass) == 0x000030, "Member 'Action_CreateActionOfClass::ActionClass' has a wrong offset!");
static_assert(offsetof(Action_CreateActionOfClass, ReturnValue) == 0x000038, "Member 'Action_CreateActionOfClass::ReturnValue' has a wrong offset!");

// Function UnrealProject.Action.BroadcastUpdateAction
// 0x0004 (0x0004 - 0x0000)
struct Action_BroadcastUpdateAction final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Action_BroadcastUpdateAction) == 0x000004, "Wrong alignment on Action_BroadcastUpdateAction");
static_assert(sizeof(Action_BroadcastUpdateAction) == 0x000004, "Wrong size on Action_BroadcastUpdateAction");
static_assert(offsetof(Action_BroadcastUpdateAction, Delta) == 0x000000, "Member 'Action_BroadcastUpdateAction::Delta' has a wrong offset!");

// Function UnrealProject.Action.Initialize
// 0x0030 (0x0030 - 0x0000)
struct Action_Initialize final
{
public:
	struct FActionParams                          ActionParams;                                      // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Action_Initialize) == 0x000008, "Wrong alignment on Action_Initialize");
static_assert(sizeof(Action_Initialize) == 0x000030, "Wrong size on Action_Initialize");
static_assert(offsetof(Action_Initialize, ActionParams) == 0x000000, "Member 'Action_Initialize::ActionParams' has a wrong offset!");

// Function UnrealProject.Action.Update
// 0x0004 (0x0004 - 0x0000)
struct Action_Update final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Action_Update) == 0x000004, "Wrong alignment on Action_Update");
static_assert(sizeof(Action_Update) == 0x000004, "Wrong size on Action_Update");
static_assert(offsetof(Action_Update, Delta) == 0x000000, "Member 'Action_Update::Delta' has a wrong offset!");

// Function UnrealProject.StartAimingAction.EventUpdate
// 0x0004 (0x0004 - 0x0000)
struct StartAimingAction_EventUpdate final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartAimingAction_EventUpdate) == 0x000004, "Wrong alignment on StartAimingAction_EventUpdate");
static_assert(sizeof(StartAimingAction_EventUpdate) == 0x000004, "Wrong size on StartAimingAction_EventUpdate");
static_assert(offsetof(StartAimingAction_EventUpdate, Delta) == 0x000000, "Member 'StartAimingAction_EventUpdate::Delta' has a wrong offset!");

// Function UnrealProject.StartAimingAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct StartAimingAction_Initialize_Implementation final
{
public:
	struct FActionParams                          ActionParams;                                      // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartAimingAction_Initialize_Implementation) == 0x000008, "Wrong alignment on StartAimingAction_Initialize_Implementation");
static_assert(sizeof(StartAimingAction_Initialize_Implementation) == 0x000030, "Wrong size on StartAimingAction_Initialize_Implementation");
static_assert(offsetof(StartAimingAction_Initialize_Implementation, ActionParams) == 0x000000, "Member 'StartAimingAction_Initialize_Implementation::ActionParams' has a wrong offset!");

// Function UnrealProject.NGDAkComponent.Play
// 0x0020 (0x0020 - 0x0000)
struct NGDAkComponent_Play final
{
public:
	class AActor*                                 InContextActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Callback;     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDAkComponent_Play) == 0x000008, "Wrong alignment on NGDAkComponent_Play");
static_assert(sizeof(NGDAkComponent_Play) == 0x000020, "Wrong size on NGDAkComponent_Play");
static_assert(offsetof(NGDAkComponent_Play, InContextActor) == 0x000000, "Member 'NGDAkComponent_Play::InContextActor' has a wrong offset!");
static_assert(offsetof(NGDAkComponent_Play, Callback) == 0x000008, "Member 'NGDAkComponent_Play::Callback' has a wrong offset!");
static_assert(offsetof(NGDAkComponent_Play, ReturnValue) == 0x000018, "Member 'NGDAkComponent_Play::ReturnValue' has a wrong offset!");

// Function UnrealProject.Attachment.IsAttached
// 0x0001 (0x0001 - 0x0000)
struct Attachment_IsAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Attachment_IsAttached) == 0x000001, "Wrong alignment on Attachment_IsAttached");
static_assert(sizeof(Attachment_IsAttached) == 0x000001, "Wrong size on Attachment_IsAttached");
static_assert(offsetof(Attachment_IsAttached, ReturnValue) == 0x000000, "Member 'Attachment_IsAttached::ReturnValue' has a wrong offset!");

// Function UnrealProject.PlayTestComponent.Aim
// 0x0010 (0x0010 - 0x0000)
struct PlayTestComponent_Aim final
{
public:
	struct FVector                                AimToLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayTestComponent_Aim) == 0x000004, "Wrong alignment on PlayTestComponent_Aim");
static_assert(sizeof(PlayTestComponent_Aim) == 0x000010, "Wrong size on PlayTestComponent_Aim");
static_assert(offsetof(PlayTestComponent_Aim, AimToLocation) == 0x000000, "Member 'PlayTestComponent_Aim::AimToLocation' has a wrong offset!");
static_assert(offsetof(PlayTestComponent_Aim, DeltaTime) == 0x00000C, "Member 'PlayTestComponent_Aim::DeltaTime' has a wrong offset!");

// Function UnrealProject.PlayTestComponent.CheckLineOfSight
// 0x0010 (0x0010 - 0x0000)
struct PlayTestComponent_CheckLineOfSight final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayTestComponent_CheckLineOfSight) == 0x000008, "Wrong alignment on PlayTestComponent_CheckLineOfSight");
static_assert(sizeof(PlayTestComponent_CheckLineOfSight) == 0x000010, "Wrong size on PlayTestComponent_CheckLineOfSight");
static_assert(offsetof(PlayTestComponent_CheckLineOfSight, OtherActor) == 0x000000, "Member 'PlayTestComponent_CheckLineOfSight::OtherActor' has a wrong offset!");
static_assert(offsetof(PlayTestComponent_CheckLineOfSight, ReturnValue) == 0x000008, "Member 'PlayTestComponent_CheckLineOfSight::ReturnValue' has a wrong offset!");

// Function UnrealProject.PlayTestComponent.CrashTest
// 0x0010 (0x0010 - 0x0000)
struct PlayTestComponent_CrashTest final
{
public:
	class FString                                 CrashMessage;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayTestComponent_CrashTest) == 0x000008, "Wrong alignment on PlayTestComponent_CrashTest");
static_assert(sizeof(PlayTestComponent_CrashTest) == 0x000010, "Wrong size on PlayTestComponent_CrashTest");
static_assert(offsetof(PlayTestComponent_CrashTest, CrashMessage) == 0x000000, "Member 'PlayTestComponent_CrashTest::CrashMessage' has a wrong offset!");

// Function UnrealProject.PlayTestComponent.GetClosestEnemy
// 0x0008 (0x0008 - 0x0000)
struct PlayTestComponent_GetClosestEnemy final
{
public:
	class ANGDCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayTestComponent_GetClosestEnemy) == 0x000008, "Wrong alignment on PlayTestComponent_GetClosestEnemy");
static_assert(sizeof(PlayTestComponent_GetClosestEnemy) == 0x000008, "Wrong size on PlayTestComponent_GetClosestEnemy");
static_assert(offsetof(PlayTestComponent_GetClosestEnemy, ReturnValue) == 0x000000, "Member 'PlayTestComponent_GetClosestEnemy::ReturnValue' has a wrong offset!");

// Function UnrealProject.PlayTestComponent.ProjectPointToRandomReachableNavMesh
// 0x001C (0x001C - 0x0000)
struct PlayTestComponent_ProjectPointToRandomReachableNavMesh final
{
public:
	struct FVector                                PointToProject;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRadius;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayTestComponent_ProjectPointToRandomReachableNavMesh) == 0x000004, "Wrong alignment on PlayTestComponent_ProjectPointToRandomReachableNavMesh");
static_assert(sizeof(PlayTestComponent_ProjectPointToRandomReachableNavMesh) == 0x00001C, "Wrong size on PlayTestComponent_ProjectPointToRandomReachableNavMesh");
static_assert(offsetof(PlayTestComponent_ProjectPointToRandomReachableNavMesh, PointToProject) == 0x000000, "Member 'PlayTestComponent_ProjectPointToRandomReachableNavMesh::PointToProject' has a wrong offset!");
static_assert(offsetof(PlayTestComponent_ProjectPointToRandomReachableNavMesh, RandomRadius) == 0x00000C, "Member 'PlayTestComponent_ProjectPointToRandomReachableNavMesh::RandomRadius' has a wrong offset!");
static_assert(offsetof(PlayTestComponent_ProjectPointToRandomReachableNavMesh, ReturnValue) == 0x000010, "Member 'PlayTestComponent_ProjectPointToRandomReachableNavMesh::ReturnValue' has a wrong offset!");

// Function UnrealProject.PlayTestComponent.ServerTeleportPlayerToNavMeshLocation
// 0x000C (0x000C - 0x0000)
struct PlayTestComponent_ServerTeleportPlayerToNavMeshLocation final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayTestComponent_ServerTeleportPlayerToNavMeshLocation) == 0x000004, "Wrong alignment on PlayTestComponent_ServerTeleportPlayerToNavMeshLocation");
static_assert(sizeof(PlayTestComponent_ServerTeleportPlayerToNavMeshLocation) == 0x00000C, "Wrong size on PlayTestComponent_ServerTeleportPlayerToNavMeshLocation");
static_assert(offsetof(PlayTestComponent_ServerTeleportPlayerToNavMeshLocation, Destination) == 0x000000, "Member 'PlayTestComponent_ServerTeleportPlayerToNavMeshLocation::Destination' has a wrong offset!");

// Function UnrealProject.PlayTestComponent.SetNewMoveDestination
// 0x000C (0x000C - 0x0000)
struct PlayTestComponent_SetNewMoveDestination final
{
public:
	struct FVector                                LocationToGo;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayTestComponent_SetNewMoveDestination) == 0x000004, "Wrong alignment on PlayTestComponent_SetNewMoveDestination");
static_assert(sizeof(PlayTestComponent_SetNewMoveDestination) == 0x00000C, "Wrong size on PlayTestComponent_SetNewMoveDestination");
static_assert(offsetof(PlayTestComponent_SetNewMoveDestination, LocationToGo) == 0x000000, "Member 'PlayTestComponent_SetNewMoveDestination::LocationToGo' has a wrong offset!");

// Function UnrealProject.BarsManager.AddBar
// 0x0028 (0x0028 - 0x0000)
struct BarsManager_AddBar final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFloatValueToShow>              FloatsToShow;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBarObject*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BarsManager_AddBar) == 0x000008, "Wrong alignment on BarsManager_AddBar");
static_assert(sizeof(BarsManager_AddBar) == 0x000028, "Wrong size on BarsManager_AddBar");
static_assert(offsetof(BarsManager_AddBar, InContext) == 0x000000, "Member 'BarsManager_AddBar::InContext' has a wrong offset!");
static_assert(offsetof(BarsManager_AddBar, FloatsToShow) == 0x000008, "Member 'BarsManager_AddBar::FloatsToShow' has a wrong offset!");
static_assert(offsetof(BarsManager_AddBar, Position) == 0x000018, "Member 'BarsManager_AddBar::Position' has a wrong offset!");
static_assert(offsetof(BarsManager_AddBar, ReturnValue) == 0x000020, "Member 'BarsManager_AddBar::ReturnValue' has a wrong offset!");

// Function UnrealProject.ThrowableProjectile.ProjectileOnHit
// 0x00B0 (0x00B0 - 0x0000)
struct ThrowableProjectile_ProjectileOnHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThrowableProjectile_ProjectileOnHit) == 0x000008, "Wrong alignment on ThrowableProjectile_ProjectileOnHit");
static_assert(sizeof(ThrowableProjectile_ProjectileOnHit) == 0x0000B0, "Wrong size on ThrowableProjectile_ProjectileOnHit");
static_assert(offsetof(ThrowableProjectile_ProjectileOnHit, HitComp) == 0x000000, "Member 'ThrowableProjectile_ProjectileOnHit::HitComp' has a wrong offset!");
static_assert(offsetof(ThrowableProjectile_ProjectileOnHit, OtherActor) == 0x000008, "Member 'ThrowableProjectile_ProjectileOnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(ThrowableProjectile_ProjectileOnHit, OtherComp) == 0x000010, "Member 'ThrowableProjectile_ProjectileOnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(ThrowableProjectile_ProjectileOnHit, NormalImpulse) == 0x000018, "Member 'ThrowableProjectile_ProjectileOnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ThrowableProjectile_ProjectileOnHit, Hit) == 0x000024, "Member 'ThrowableProjectile_ProjectileOnHit::Hit' has a wrong offset!");

// Function UnrealProject.ThrowableProjectile.SetInstigator
// 0x0008 (0x0008 - 0x0000)
struct ThrowableProjectile_SetInstigator final
{
public:
	class AController*                            InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowableProjectile_SetInstigator) == 0x000008, "Wrong alignment on ThrowableProjectile_SetInstigator");
static_assert(sizeof(ThrowableProjectile_SetInstigator) == 0x000008, "Wrong size on ThrowableProjectile_SetInstigator");
static_assert(offsetof(ThrowableProjectile_SetInstigator, InInstigator) == 0x000000, "Member 'ThrowableProjectile_SetInstigator::InInstigator' has a wrong offset!");

// Function UnrealProject.ThrowableProjectile.TryGetOwnerWeapon
// 0x0008 (0x0008 - 0x0000)
struct ThrowableProjectile_TryGetOwnerWeapon final
{
public:
	class AWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowableProjectile_TryGetOwnerWeapon) == 0x000008, "Wrong alignment on ThrowableProjectile_TryGetOwnerWeapon");
static_assert(sizeof(ThrowableProjectile_TryGetOwnerWeapon) == 0x000008, "Wrong size on ThrowableProjectile_TryGetOwnerWeapon");
static_assert(offsetof(ThrowableProjectile_TryGetOwnerWeapon, ReturnValue) == 0x000000, "Member 'ThrowableProjectile_TryGetOwnerWeapon::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDAttachmentContainerComponent.ServerAttachToSlot
// 0x0010 (0x0010 - 0x0000)
struct NGDAttachmentContainerComponent_ServerAttachToSlot final
{
public:
	class AAttachment*                            InAttachment;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDAttachmentContainerComponent_ServerAttachToSlot) == 0x000008, "Wrong alignment on NGDAttachmentContainerComponent_ServerAttachToSlot");
static_assert(sizeof(NGDAttachmentContainerComponent_ServerAttachToSlot) == 0x000010, "Wrong size on NGDAttachmentContainerComponent_ServerAttachToSlot");
static_assert(offsetof(NGDAttachmentContainerComponent_ServerAttachToSlot, InAttachment) == 0x000000, "Member 'NGDAttachmentContainerComponent_ServerAttachToSlot::InAttachment' has a wrong offset!");
static_assert(offsetof(NGDAttachmentContainerComponent_ServerAttachToSlot, SlotIndex) == 0x000008, "Member 'NGDAttachmentContainerComponent_ServerAttachToSlot::SlotIndex' has a wrong offset!");

// Function UnrealProject.NGDAttachmentContainerComponent.ServerAutoAttach
// 0x0008 (0x0008 - 0x0000)
struct NGDAttachmentContainerComponent_ServerAutoAttach final
{
public:
	class AAttachment*                            InAttachment;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDAttachmentContainerComponent_ServerAutoAttach) == 0x000008, "Wrong alignment on NGDAttachmentContainerComponent_ServerAutoAttach");
static_assert(sizeof(NGDAttachmentContainerComponent_ServerAutoAttach) == 0x000008, "Wrong size on NGDAttachmentContainerComponent_ServerAutoAttach");
static_assert(offsetof(NGDAttachmentContainerComponent_ServerAutoAttach, InAttachment) == 0x000000, "Member 'NGDAttachmentContainerComponent_ServerAutoAttach::InAttachment' has a wrong offset!");

// Function UnrealProject.NGDAttachmentContainerComponent.ServerDetach
// 0x0008 (0x0008 - 0x0000)
struct NGDAttachmentContainerComponent_ServerDetach final
{
public:
	class AAttachment*                            InAttachment;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDAttachmentContainerComponent_ServerDetach) == 0x000008, "Wrong alignment on NGDAttachmentContainerComponent_ServerDetach");
static_assert(sizeof(NGDAttachmentContainerComponent_ServerDetach) == 0x000008, "Wrong size on NGDAttachmentContainerComponent_ServerDetach");
static_assert(offsetof(NGDAttachmentContainerComponent_ServerDetach, InAttachment) == 0x000000, "Member 'NGDAttachmentContainerComponent_ServerDetach::InAttachment' has a wrong offset!");

// Function UnrealProject.NGDAttachmentContainerComponent.CanBeAttached
// 0x0010 (0x0010 - 0x0000)
struct NGDAttachmentContainerComponent_CanBeAttached final
{
public:
	class AAttachment*                            Attachment;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDAttachmentContainerComponent_CanBeAttached) == 0x000008, "Wrong alignment on NGDAttachmentContainerComponent_CanBeAttached");
static_assert(sizeof(NGDAttachmentContainerComponent_CanBeAttached) == 0x000010, "Wrong size on NGDAttachmentContainerComponent_CanBeAttached");
static_assert(offsetof(NGDAttachmentContainerComponent_CanBeAttached, Attachment) == 0x000000, "Member 'NGDAttachmentContainerComponent_CanBeAttached::Attachment' has a wrong offset!");
static_assert(offsetof(NGDAttachmentContainerComponent_CanBeAttached, ReturnValue) == 0x000008, "Member 'NGDAttachmentContainerComponent_CanBeAttached::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.OnDeath
// 0x0050 (0x0050 - 0x0000)
struct NGDWheeledVehicle_OnDeath final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_OnDeath) == 0x000008, "Wrong alignment on NGDWheeledVehicle_OnDeath");
static_assert(sizeof(NGDWheeledVehicle_OnDeath) == 0x000050, "Wrong size on NGDWheeledVehicle_OnDeath");
static_assert(offsetof(NGDWheeledVehicle_OnDeath, DamageEvent) == 0x000000, "Member 'NGDWheeledVehicle_OnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnDeath, EventInstigator) == 0x000040, "Member 'NGDWheeledVehicle_OnDeath::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnDeath, DamageCauser) == 0x000048, "Member 'NGDWheeledVehicle_OnDeath::DamageCauser' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.OnRunOverBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct NGDWheeledVehicle_OnRunOverBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_OnRunOverBeginOverlap) == 0x000008, "Wrong alignment on NGDWheeledVehicle_OnRunOverBeginOverlap");
static_assert(sizeof(NGDWheeledVehicle_OnRunOverBeginOverlap) == 0x0000A8, "Wrong size on NGDWheeledVehicle_OnRunOverBeginOverlap");
static_assert(offsetof(NGDWheeledVehicle_OnRunOverBeginOverlap, OverlappedComponent) == 0x000000, "Member 'NGDWheeledVehicle_OnRunOverBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnRunOverBeginOverlap, OtherActor) == 0x000008, "Member 'NGDWheeledVehicle_OnRunOverBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnRunOverBeginOverlap, OtherComp) == 0x000010, "Member 'NGDWheeledVehicle_OnRunOverBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnRunOverBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'NGDWheeledVehicle_OnRunOverBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnRunOverBeginOverlap, bFromSweep) == 0x00001C, "Member 'NGDWheeledVehicle_OnRunOverBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnRunOverBeginOverlap, SweepResult) == 0x000020, "Member 'NGDWheeledVehicle_OnRunOverBeginOverlap::SweepResult' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.OnSimpleCollisionHit
// 0x00B0 (0x00B0 - 0x0000)
struct NGDWheeledVehicle_OnSimpleCollisionHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDWheeledVehicle_OnSimpleCollisionHit) == 0x000008, "Wrong alignment on NGDWheeledVehicle_OnSimpleCollisionHit");
static_assert(sizeof(NGDWheeledVehicle_OnSimpleCollisionHit) == 0x0000B0, "Wrong size on NGDWheeledVehicle_OnSimpleCollisionHit");
static_assert(offsetof(NGDWheeledVehicle_OnSimpleCollisionHit, HitComponent) == 0x000000, "Member 'NGDWheeledVehicle_OnSimpleCollisionHit::HitComponent' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnSimpleCollisionHit, OtherActor) == 0x000008, "Member 'NGDWheeledVehicle_OnSimpleCollisionHit::OtherActor' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnSimpleCollisionHit, OtherComp) == 0x000010, "Member 'NGDWheeledVehicle_OnSimpleCollisionHit::OtherComp' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnSimpleCollisionHit, NormalImpulse) == 0x000018, "Member 'NGDWheeledVehicle_OnSimpleCollisionHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnSimpleCollisionHit, Hit) == 0x000024, "Member 'NGDWheeledVehicle_OnSimpleCollisionHit::Hit' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.OnTakeDamage
// 0x0060 (0x0060 - 0x0000)
struct NGDWheeledVehicle_OnTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDWheeledVehicle_OnTakeDamage) == 0x000008, "Wrong alignment on NGDWheeledVehicle_OnTakeDamage");
static_assert(sizeof(NGDWheeledVehicle_OnTakeDamage) == 0x000060, "Wrong size on NGDWheeledVehicle_OnTakeDamage");
static_assert(offsetof(NGDWheeledVehicle_OnTakeDamage, Damage) == 0x000000, "Member 'NGDWheeledVehicle_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnTakeDamage, DamageEvent) == 0x000008, "Member 'NGDWheeledVehicle_OnTakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnTakeDamage, EventInstigator) == 0x000048, "Member 'NGDWheeledVehicle_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnTakeDamage, DamageCauser) == 0x000050, "Member 'NGDWheeledVehicle_OnTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(NGDWheeledVehicle_OnTakeDamage, ReturnValue) == 0x000058, "Member 'NGDWheeledVehicle_OnTakeDamage::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.ServerNotifyLocalRunOverEvent
// 0x0008 (0x0008 - 0x0000)
struct NGDWheeledVehicle_ServerNotifyLocalRunOverEvent final
{
public:
	class ANGDCharacter*                          Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_ServerNotifyLocalRunOverEvent) == 0x000008, "Wrong alignment on NGDWheeledVehicle_ServerNotifyLocalRunOverEvent");
static_assert(sizeof(NGDWheeledVehicle_ServerNotifyLocalRunOverEvent) == 0x000008, "Wrong size on NGDWheeledVehicle_ServerNotifyLocalRunOverEvent");
static_assert(offsetof(NGDWheeledVehicle_ServerNotifyLocalRunOverEvent, Victim) == 0x000000, "Member 'NGDWheeledVehicle_ServerNotifyLocalRunOverEvent::Victim' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.GetHitRegistrationCollider
// 0x0008 (0x0008 - 0x0000)
struct NGDWheeledVehicle_GetHitRegistrationCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_GetHitRegistrationCollider) == 0x000008, "Wrong alignment on NGDWheeledVehicle_GetHitRegistrationCollider");
static_assert(sizeof(NGDWheeledVehicle_GetHitRegistrationCollider) == 0x000008, "Wrong size on NGDWheeledVehicle_GetHitRegistrationCollider");
static_assert(offsetof(NGDWheeledVehicle_GetHitRegistrationCollider, ReturnValue) == 0x000000, "Member 'NGDWheeledVehicle_GetHitRegistrationCollider::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.GetMortalityComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDWheeledVehicle_GetMortalityComponent final
{
public:
	class UNGDMortalityComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_GetMortalityComponent) == 0x000008, "Wrong alignment on NGDWheeledVehicle_GetMortalityComponent");
static_assert(sizeof(NGDWheeledVehicle_GetMortalityComponent) == 0x000008, "Wrong size on NGDWheeledVehicle_GetMortalityComponent");
static_assert(offsetof(NGDWheeledVehicle_GetMortalityComponent, ReturnValue) == 0x000000, "Member 'NGDWheeledVehicle_GetMortalityComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.GetRewindableMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDWheeledVehicle_GetRewindableMeshComponent final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_GetRewindableMeshComponent) == 0x000008, "Wrong alignment on NGDWheeledVehicle_GetRewindableMeshComponent");
static_assert(sizeof(NGDWheeledVehicle_GetRewindableMeshComponent) == 0x000008, "Wrong size on NGDWheeledVehicle_GetRewindableMeshComponent");
static_assert(offsetof(NGDWheeledVehicle_GetRewindableMeshComponent, ReturnValue) == 0x000000, "Member 'NGDWheeledVehicle_GetRewindableMeshComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.GetRewindCollider
// 0x0008 (0x0008 - 0x0000)
struct NGDWheeledVehicle_GetRewindCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_GetRewindCollider) == 0x000008, "Wrong alignment on NGDWheeledVehicle_GetRewindCollider");
static_assert(sizeof(NGDWheeledVehicle_GetRewindCollider) == 0x000008, "Wrong size on NGDWheeledVehicle_GetRewindCollider");
static_assert(offsetof(NGDWheeledVehicle_GetRewindCollider, ReturnValue) == 0x000000, "Member 'NGDWheeledVehicle_GetRewindCollider::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.GetRewindComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDWheeledVehicle_GetRewindComponent final
{
public:
	class UNGDRewindComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_GetRewindComponent) == 0x000008, "Wrong alignment on NGDWheeledVehicle_GetRewindComponent");
static_assert(sizeof(NGDWheeledVehicle_GetRewindComponent) == 0x000008, "Wrong size on NGDWheeledVehicle_GetRewindComponent");
static_assert(offsetof(NGDWheeledVehicle_GetRewindComponent, ReturnValue) == 0x000000, "Member 'NGDWheeledVehicle_GetRewindComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDWheeledVehicle.IsRewindRelevant
// 0x0001 (0x0001 - 0x0000)
struct NGDWheeledVehicle_IsRewindRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledVehicle_IsRewindRelevant) == 0x000001, "Wrong alignment on NGDWheeledVehicle_IsRewindRelevant");
static_assert(sizeof(NGDWheeledVehicle_IsRewindRelevant) == 0x000001, "Wrong size on NGDWheeledVehicle_IsRewindRelevant");
static_assert(offsetof(NGDWheeledVehicle_IsRewindRelevant, ReturnValue) == 0x000000, "Member 'NGDWheeledVehicle_IsRewindRelevant::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDRewindable.GetHitRegistrationCollider
// 0x0008 (0x0008 - 0x0000)
struct NGDRewindable_GetHitRegistrationCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDRewindable_GetHitRegistrationCollider) == 0x000008, "Wrong alignment on NGDRewindable_GetHitRegistrationCollider");
static_assert(sizeof(NGDRewindable_GetHitRegistrationCollider) == 0x000008, "Wrong size on NGDRewindable_GetHitRegistrationCollider");
static_assert(offsetof(NGDRewindable_GetHitRegistrationCollider, ReturnValue) == 0x000000, "Member 'NGDRewindable_GetHitRegistrationCollider::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDRewindable.GetRewindableMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDRewindable_GetRewindableMeshComponent final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDRewindable_GetRewindableMeshComponent) == 0x000008, "Wrong alignment on NGDRewindable_GetRewindableMeshComponent");
static_assert(sizeof(NGDRewindable_GetRewindableMeshComponent) == 0x000008, "Wrong size on NGDRewindable_GetRewindableMeshComponent");
static_assert(offsetof(NGDRewindable_GetRewindableMeshComponent, ReturnValue) == 0x000000, "Member 'NGDRewindable_GetRewindableMeshComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDRewindable.GetRewindCollider
// 0x0008 (0x0008 - 0x0000)
struct NGDRewindable_GetRewindCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDRewindable_GetRewindCollider) == 0x000008, "Wrong alignment on NGDRewindable_GetRewindCollider");
static_assert(sizeof(NGDRewindable_GetRewindCollider) == 0x000008, "Wrong size on NGDRewindable_GetRewindCollider");
static_assert(offsetof(NGDRewindable_GetRewindCollider, ReturnValue) == 0x000000, "Member 'NGDRewindable_GetRewindCollider::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDRewindable.GetRewindComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDRewindable_GetRewindComponent final
{
public:
	class UNGDRewindComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDRewindable_GetRewindComponent) == 0x000008, "Wrong alignment on NGDRewindable_GetRewindComponent");
static_assert(sizeof(NGDRewindable_GetRewindComponent) == 0x000008, "Wrong size on NGDRewindable_GetRewindComponent");
static_assert(offsetof(NGDRewindable_GetRewindComponent, ReturnValue) == 0x000000, "Member 'NGDRewindable_GetRewindComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDRewindable.IsRewindRelevant
// 0x0001 (0x0001 - 0x0000)
struct NGDRewindable_IsRewindRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDRewindable_IsRewindRelevant) == 0x000001, "Wrong alignment on NGDRewindable_IsRewindRelevant");
static_assert(sizeof(NGDRewindable_IsRewindRelevant) == 0x000001, "Wrong size on NGDRewindable_IsRewindRelevant");
static_assert(offsetof(NGDRewindable_IsRewindRelevant, ReturnValue) == 0x000000, "Member 'NGDRewindable_IsRewindRelevant::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseProjectile.Native_CosmeticsOnImpact
// 0x0088 (0x0088 - 0x0000)
struct BaseProjectile_Native_CosmeticsOnImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_Native_CosmeticsOnImpact) == 0x000004, "Wrong alignment on BaseProjectile_Native_CosmeticsOnImpact");
static_assert(sizeof(BaseProjectile_Native_CosmeticsOnImpact) == 0x000088, "Wrong size on BaseProjectile_Native_CosmeticsOnImpact");
static_assert(offsetof(BaseProjectile_Native_CosmeticsOnImpact, HitResult) == 0x000000, "Member 'BaseProjectile_Native_CosmeticsOnImpact::HitResult' has a wrong offset!");

// Function UnrealProject.BaseProjectile.OnImpactEvent
// 0x0088 (0x0088 - 0x0000)
struct BaseProjectile_OnImpactEvent final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_OnImpactEvent) == 0x000004, "Wrong alignment on BaseProjectile_OnImpactEvent");
static_assert(sizeof(BaseProjectile_OnImpactEvent) == 0x000088, "Wrong size on BaseProjectile_OnImpactEvent");
static_assert(offsetof(BaseProjectile_OnImpactEvent, HitResult) == 0x000000, "Member 'BaseProjectile_OnImpactEvent::HitResult' has a wrong offset!");

// Function UnrealProject.BaseProjectile.GetAmmoIndex
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectile_GetAmmoIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetAmmoIndex) == 0x000004, "Wrong alignment on BaseProjectile_GetAmmoIndex");
static_assert(sizeof(BaseProjectile_GetAmmoIndex) == 0x000004, "Wrong size on BaseProjectile_GetAmmoIndex");
static_assert(offsetof(BaseProjectile_GetAmmoIndex, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetAmmoIndex::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseProjectile.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectile_GetOwnerCharacter final
{
public:
	class ANGDCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetOwnerCharacter) == 0x000008, "Wrong alignment on BaseProjectile_GetOwnerCharacter");
static_assert(sizeof(BaseProjectile_GetOwnerCharacter) == 0x000008, "Wrong size on BaseProjectile_GetOwnerCharacter");
static_assert(offsetof(BaseProjectile_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseProjectile.GetOwnerWeapon
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectile_GetOwnerWeapon final
{
public:
	class AWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetOwnerWeapon) == 0x000008, "Wrong alignment on BaseProjectile_GetOwnerWeapon");
static_assert(sizeof(BaseProjectile_GetOwnerWeapon) == 0x000008, "Wrong size on BaseProjectile_GetOwnerWeapon");
static_assert(offsetof(BaseProjectile_GetOwnerWeapon, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetOwnerWeapon::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseProjectile.GetTimeToLive
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectile_GetTimeToLive final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetTimeToLive) == 0x000004, "Wrong alignment on BaseProjectile_GetTimeToLive");
static_assert(sizeof(BaseProjectile_GetTimeToLive) == 0x000004, "Wrong size on BaseProjectile_GetTimeToLive");
static_assert(offsetof(BaseProjectile_GetTimeToLive, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetTimeToLive::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseProjectile.GetTravelDistance
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectile_GetTravelDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetTravelDistance) == 0x000004, "Wrong alignment on BaseProjectile_GetTravelDistance");
static_assert(sizeof(BaseProjectile_GetTravelDistance) == 0x000004, "Wrong size on BaseProjectile_GetTravelDistance");
static_assert(offsetof(BaseProjectile_GetTravelDistance, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetTravelDistance::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseProjectile.IsLocallyPredicted
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectile_IsLocallyPredicted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_IsLocallyPredicted) == 0x000001, "Wrong alignment on BaseProjectile_IsLocallyPredicted");
static_assert(sizeof(BaseProjectile_IsLocallyPredicted) == 0x000001, "Wrong size on BaseProjectile_IsLocallyPredicted");
static_assert(offsetof(BaseProjectile_IsLocallyPredicted, ReturnValue) == 0x000000, "Member 'BaseProjectile_IsLocallyPredicted::ReturnValue' has a wrong offset!");

// Function UnrealProject.BaseProjectile.IsSupersonic
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectile_IsSupersonic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_IsSupersonic) == 0x000001, "Wrong alignment on BaseProjectile_IsSupersonic");
static_assert(sizeof(BaseProjectile_IsSupersonic) == 0x000001, "Wrong size on BaseProjectile_IsSupersonic");
static_assert(offsetof(BaseProjectile_IsSupersonic, ReturnValue) == 0x000000, "Member 'BaseProjectile_IsSupersonic::ReturnValue' has a wrong offset!");

// Function UnrealProject.CompositeAction.AddAction
// 0x0008 (0x0008 - 0x0000)
struct CompositeAction_AddAction final
{
public:
	class UAction*                                Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompositeAction_AddAction) == 0x000008, "Wrong alignment on CompositeAction_AddAction");
static_assert(sizeof(CompositeAction_AddAction) == 0x000008, "Wrong size on CompositeAction_AddAction");
static_assert(offsetof(CompositeAction_AddAction, Action) == 0x000000, "Member 'CompositeAction_AddAction::Action' has a wrong offset!");

// Function UnrealProject.NGDInteractionComponent.GetItemsInRange
// 0x0010 (0x0010 - 0x0000)
struct NGDInteractionComponent_GetItemsInRange final
{
public:
	TArray<class AItem*>                          OutItemList;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractionComponent_GetItemsInRange) == 0x000008, "Wrong alignment on NGDInteractionComponent_GetItemsInRange");
static_assert(sizeof(NGDInteractionComponent_GetItemsInRange) == 0x000010, "Wrong size on NGDInteractionComponent_GetItemsInRange");
static_assert(offsetof(NGDInteractionComponent_GetItemsInRange, OutItemList) == 0x000000, "Member 'NGDInteractionComponent_GetItemsInRange::OutItemList' has a wrong offset!");

// Function UnrealProject.NGDInteractionComponent.OnInteractSphereBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct NGDInteractionComponent_OnInteractSphereBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractionComponent_OnInteractSphereBeginOverlap) == 0x000008, "Wrong alignment on NGDInteractionComponent_OnInteractSphereBeginOverlap");
static_assert(sizeof(NGDInteractionComponent_OnInteractSphereBeginOverlap) == 0x0000A8, "Wrong size on NGDInteractionComponent_OnInteractSphereBeginOverlap");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereBeginOverlap, OverlappedComponent) == 0x000000, "Member 'NGDInteractionComponent_OnInteractSphereBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereBeginOverlap, OtherActor) == 0x000008, "Member 'NGDInteractionComponent_OnInteractSphereBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereBeginOverlap, OtherComp) == 0x000010, "Member 'NGDInteractionComponent_OnInteractSphereBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'NGDInteractionComponent_OnInteractSphereBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereBeginOverlap, bFromSweep) == 0x00001C, "Member 'NGDInteractionComponent_OnInteractSphereBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereBeginOverlap, SweepResult) == 0x000020, "Member 'NGDInteractionComponent_OnInteractSphereBeginOverlap::SweepResult' has a wrong offset!");

// Function UnrealProject.NGDInteractionComponent.OnInteractSphereEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct NGDInteractionComponent_OnInteractSphereEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDInteractionComponent_OnInteractSphereEndOverlap) == 0x000008, "Wrong alignment on NGDInteractionComponent_OnInteractSphereEndOverlap");
static_assert(sizeof(NGDInteractionComponent_OnInteractSphereEndOverlap) == 0x000020, "Wrong size on NGDInteractionComponent_OnInteractSphereEndOverlap");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereEndOverlap, OverlappedComponent) == 0x000000, "Member 'NGDInteractionComponent_OnInteractSphereEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereEndOverlap, OtherActor) == 0x000008, "Member 'NGDInteractionComponent_OnInteractSphereEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereEndOverlap, OtherComp) == 0x000010, "Member 'NGDInteractionComponent_OnInteractSphereEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(NGDInteractionComponent_OnInteractSphereEndOverlap, OtherBodyIndex) == 0x000018, "Member 'NGDInteractionComponent_OnInteractSphereEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function UnrealProject.NGDInteractionComponent.ServerOnInteract
// 0x0008 (0x0008 - 0x0000)
struct NGDInteractionComponent_ServerOnInteract final
{
public:
	class AActor*                                 InInteractable;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractionComponent_ServerOnInteract) == 0x000008, "Wrong alignment on NGDInteractionComponent_ServerOnInteract");
static_assert(sizeof(NGDInteractionComponent_ServerOnInteract) == 0x000008, "Wrong size on NGDInteractionComponent_ServerOnInteract");
static_assert(offsetof(NGDInteractionComponent_ServerOnInteract, InInteractable) == 0x000000, "Member 'NGDInteractionComponent_ServerOnInteract::InInteractable' has a wrong offset!");

// Function UnrealProject.NGDInteractionComponent.SetInteractableActorFocused
// 0x0008 (0x0008 - 0x0000)
struct NGDInteractionComponent_SetInteractableActorFocused final
{
public:
	class AActor*                                 InInteractableActor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractionComponent_SetInteractableActorFocused) == 0x000008, "Wrong alignment on NGDInteractionComponent_SetInteractableActorFocused");
static_assert(sizeof(NGDInteractionComponent_SetInteractableActorFocused) == 0x000008, "Wrong size on NGDInteractionComponent_SetInteractableActorFocused");
static_assert(offsetof(NGDInteractionComponent_SetInteractableActorFocused, InInteractableActor) == 0x000000, "Member 'NGDInteractionComponent_SetInteractableActorFocused::InInteractableActor' has a wrong offset!");

// Function UnrealProject.NGDCar.IsHandbrakeActive
// 0x0001 (0x0001 - 0x0000)
struct NGDCar_IsHandbrakeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCar_IsHandbrakeActive) == 0x000001, "Wrong alignment on NGDCar_IsHandbrakeActive");
static_assert(sizeof(NGDCar_IsHandbrakeActive) == 0x000001, "Wrong size on NGDCar_IsHandbrakeActive");
static_assert(offsetof(NGDCar_IsHandbrakeActive, ReturnValue) == 0x000000, "Member 'NGDCar_IsHandbrakeActive::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.CallOnServer
// 0x0018 (0x0018 - 0x0000)
struct NGDCheatManager_CallOnServer final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDCheatManager_CallOnServer) == 0x000008, "Wrong alignment on NGDCheatManager_CallOnServer");
static_assert(sizeof(NGDCheatManager_CallOnServer) == 0x000018, "Wrong size on NGDCheatManager_CallOnServer");
static_assert(offsetof(NGDCheatManager_CallOnServer, Command) == 0x000000, "Member 'NGDCheatManager_CallOnServer::Command' has a wrong offset!");
static_assert(offsetof(NGDCheatManager_CallOnServer, ReturnValue) == 0x000010, "Member 'NGDCheatManager_CallOnServer::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.ChangeLevel
// 0x0010 (0x0010 - 0x0000)
struct NGDCheatManager_ChangeLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCheatManager_ChangeLevel) == 0x000008, "Wrong alignment on NGDCheatManager_ChangeLevel");
static_assert(sizeof(NGDCheatManager_ChangeLevel) == 0x000010, "Wrong size on NGDCheatManager_ChangeLevel");
static_assert(offsetof(NGDCheatManager_ChangeLevel, LevelName) == 0x000000, "Member 'NGDCheatManager_ChangeLevel::LevelName' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.ChangeLevelSeemless
// 0x0010 (0x0010 - 0x0000)
struct NGDCheatManager_ChangeLevelSeemless final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCheatManager_ChangeLevelSeemless) == 0x000008, "Wrong alignment on NGDCheatManager_ChangeLevelSeemless");
static_assert(sizeof(NGDCheatManager_ChangeLevelSeemless) == 0x000010, "Wrong size on NGDCheatManager_ChangeLevelSeemless");
static_assert(offsetof(NGDCheatManager_ChangeLevelSeemless, LevelName) == 0x000000, "Member 'NGDCheatManager_ChangeLevelSeemless::LevelName' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.Cheat
// 0x0010 (0x0010 - 0x0000)
struct NGDCheatManager_Cheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCheatManager_Cheat) == 0x000008, "Wrong alignment on NGDCheatManager_Cheat");
static_assert(sizeof(NGDCheatManager_Cheat) == 0x000010, "Wrong size on NGDCheatManager_Cheat");
static_assert(offsetof(NGDCheatManager_Cheat, Msg) == 0x000000, "Member 'NGDCheatManager_Cheat::Msg' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.DamagePlayersOnLobby
// 0x0010 (0x0010 - 0x0000)
struct NGDCheatManager_DamagePlayersOnLobby final
{
public:
	class FString                                 Damage;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCheatManager_DamagePlayersOnLobby) == 0x000008, "Wrong alignment on NGDCheatManager_DamagePlayersOnLobby");
static_assert(sizeof(NGDCheatManager_DamagePlayersOnLobby) == 0x000010, "Wrong size on NGDCheatManager_DamagePlayersOnLobby");
static_assert(offsetof(NGDCheatManager_DamagePlayersOnLobby, Damage) == 0x000000, "Member 'NGDCheatManager_DamagePlayersOnLobby::Damage' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.DropCar
// 0x0010 (0x0010 - 0x0000)
struct NGDCheatManager_DropCar final
{
public:
	class FString                                 CarKey;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCheatManager_DropCar) == 0x000008, "Wrong alignment on NGDCheatManager_DropCar");
static_assert(sizeof(NGDCheatManager_DropCar) == 0x000010, "Wrong size on NGDCheatManager_DropCar");
static_assert(offsetof(NGDCheatManager_DropCar, CarKey) == 0x000000, "Member 'NGDCheatManager_DropCar::CarKey' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.GetItem
// 0x0010 (0x0010 - 0x0000)
struct NGDCheatManager_GetItem final
{
public:
	class FString                                 ItemKey;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCheatManager_GetItem) == 0x000008, "Wrong alignment on NGDCheatManager_GetItem");
static_assert(sizeof(NGDCheatManager_GetItem) == 0x000010, "Wrong size on NGDCheatManager_GetItem");
static_assert(offsetof(NGDCheatManager_GetItem, ItemKey) == 0x000000, "Member 'NGDCheatManager_GetItem::ItemKey' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.GetItemQuantity
// 0x0018 (0x0018 - 0x0000)
struct NGDCheatManager_GetItemQuantity final
{
public:
	class FString                                 ItemKey;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDCheatManager_GetItemQuantity) == 0x000008, "Wrong alignment on NGDCheatManager_GetItemQuantity");
static_assert(sizeof(NGDCheatManager_GetItemQuantity) == 0x000018, "Wrong size on NGDCheatManager_GetItemQuantity");
static_assert(offsetof(NGDCheatManager_GetItemQuantity, ItemKey) == 0x000000, "Member 'NGDCheatManager_GetItemQuantity::ItemKey' has a wrong offset!");
static_assert(offsetof(NGDCheatManager_GetItemQuantity, Quantity) == 0x000010, "Member 'NGDCheatManager_GetItemQuantity::Quantity' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.GetWeapon
// 0x0010 (0x0010 - 0x0000)
struct NGDCheatManager_GetWeapon final
{
public:
	class FString                                 WeaponKey;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCheatManager_GetWeapon) == 0x000008, "Wrong alignment on NGDCheatManager_GetWeapon");
static_assert(sizeof(NGDCheatManager_GetWeapon) == 0x000010, "Wrong size on NGDCheatManager_GetWeapon");
static_assert(offsetof(NGDCheatManager_GetWeapon, WeaponKey) == 0x000000, "Member 'NGDCheatManager_GetWeapon::WeaponKey' has a wrong offset!");

// Function UnrealProject.NGDCheatManager.JoinTeam
// 0x0004 (0x0004 - 0x0000)
struct NGDCheatManager_JoinTeam final
{
public:
	int32                                         NewTeam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCheatManager_JoinTeam) == 0x000004, "Wrong alignment on NGDCheatManager_JoinTeam");
static_assert(sizeof(NGDCheatManager_JoinTeam) == 0x000004, "Wrong size on NGDCheatManager_JoinTeam");
static_assert(offsetof(NGDCheatManager_JoinTeam, NewTeam) == 0x000000, "Member 'NGDCheatManager_JoinTeam::NewTeam' has a wrong offset!");

// Function UnrealProject.MoveAction.EventUpdate
// 0x0004 (0x0004 - 0x0000)
struct MoveAction_EventUpdate final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveAction_EventUpdate) == 0x000004, "Wrong alignment on MoveAction_EventUpdate");
static_assert(sizeof(MoveAction_EventUpdate) == 0x000004, "Wrong size on MoveAction_EventUpdate");
static_assert(offsetof(MoveAction_EventUpdate, Delta) == 0x000000, "Member 'MoveAction_EventUpdate::Delta' has a wrong offset!");

// Function UnrealProject.MoveAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct MoveAction_Initialize_Implementation final
{
public:
	struct FActionParams                          ActionParams;                                      // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoveAction_Initialize_Implementation) == 0x000008, "Wrong alignment on MoveAction_Initialize_Implementation");
static_assert(sizeof(MoveAction_Initialize_Implementation) == 0x000030, "Wrong size on MoveAction_Initialize_Implementation");
static_assert(offsetof(MoveAction_Initialize_Implementation, ActionParams) == 0x000000, "Member 'MoveAction_Initialize_Implementation::ActionParams' has a wrong offset!");

// Function UnrealProject.SelectRandomLocationAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct SelectRandomLocationAction_Initialize_Implementation final
{
public:
	struct FActionParams                          ActionParams;                                      // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectRandomLocationAction_Initialize_Implementation) == 0x000008, "Wrong alignment on SelectRandomLocationAction_Initialize_Implementation");
static_assert(sizeof(SelectRandomLocationAction_Initialize_Implementation) == 0x000030, "Wrong size on SelectRandomLocationAction_Initialize_Implementation");
static_assert(offsetof(SelectRandomLocationAction_Initialize_Implementation, ActionParams) == 0x000000, "Member 'SelectRandomLocationAction_Initialize_Implementation::ActionParams' has a wrong offset!");

// Function UnrealProject.FireAction.EventUpdate
// 0x0004 (0x0004 - 0x0000)
struct FireAction_EventUpdate final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireAction_EventUpdate) == 0x000004, "Wrong alignment on FireAction_EventUpdate");
static_assert(sizeof(FireAction_EventUpdate) == 0x000004, "Wrong size on FireAction_EventUpdate");
static_assert(offsetof(FireAction_EventUpdate, Delta) == 0x000000, "Member 'FireAction_EventUpdate::Delta' has a wrong offset!");

// Function UnrealProject.FireAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct FireAction_Initialize_Implementation final
{
public:
	struct FActionParams                          ActionParams;                                      // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireAction_Initialize_Implementation) == 0x000008, "Wrong alignment on FireAction_Initialize_Implementation");
static_assert(sizeof(FireAction_Initialize_Implementation) == 0x000030, "Wrong size on FireAction_Initialize_Implementation");
static_assert(offsetof(FireAction_Initialize_Implementation, ActionParams) == 0x000000, "Member 'FireAction_Initialize_Implementation::ActionParams' has a wrong offset!");

// Function UnrealProject.ChangeSpeedAction.EventUpdate
// 0x0004 (0x0004 - 0x0000)
struct ChangeSpeedAction_EventUpdate final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChangeSpeedAction_EventUpdate) == 0x000004, "Wrong alignment on ChangeSpeedAction_EventUpdate");
static_assert(sizeof(ChangeSpeedAction_EventUpdate) == 0x000004, "Wrong size on ChangeSpeedAction_EventUpdate");
static_assert(offsetof(ChangeSpeedAction_EventUpdate, Delta) == 0x000000, "Member 'ChangeSpeedAction_EventUpdate::Delta' has a wrong offset!");

// Function UnrealProject.ChangeSpeedAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct ChangeSpeedAction_Initialize_Implementation final
{
public:
	struct FActionParams                          ActionParams;                                      // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChangeSpeedAction_Initialize_Implementation) == 0x000008, "Wrong alignment on ChangeSpeedAction_Initialize_Implementation");
static_assert(sizeof(ChangeSpeedAction_Initialize_Implementation) == 0x000030, "Wrong size on ChangeSpeedAction_Initialize_Implementation");
static_assert(offsetof(ChangeSpeedAction_Initialize_Implementation, ActionParams) == 0x000000, "Member 'ChangeSpeedAction_Initialize_Implementation::ActionParams' has a wrong offset!");

// Function UnrealProject.NGDInteractableActor.EnterInteractZone
// 0x0010 (0x0010 - 0x0000)
struct NGDInteractableActor_EnterInteractZone final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDInteractableActor_EnterInteractZone) == 0x000008, "Wrong alignment on NGDInteractableActor_EnterInteractZone");
static_assert(sizeof(NGDInteractableActor_EnterInteractZone) == 0x000010, "Wrong size on NGDInteractableActor_EnterInteractZone");
static_assert(offsetof(NGDInteractableActor_EnterInteractZone, InCharacter) == 0x000000, "Member 'NGDInteractableActor_EnterInteractZone::InCharacter' has a wrong offset!");
static_assert(offsetof(NGDInteractableActor_EnterInteractZone, ReturnValue) == 0x000008, "Member 'NGDInteractableActor_EnterInteractZone::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDInteractableActor.Interact
// 0x0010 (0x0010 - 0x0000)
struct NGDInteractableActor_Interact final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDInteractableActor_Interact) == 0x000008, "Wrong alignment on NGDInteractableActor_Interact");
static_assert(sizeof(NGDInteractableActor_Interact) == 0x000010, "Wrong size on NGDInteractableActor_Interact");
static_assert(offsetof(NGDInteractableActor_Interact, InCharacter) == 0x000000, "Member 'NGDInteractableActor_Interact::InCharacter' has a wrong offset!");
static_assert(offsetof(NGDInteractableActor_Interact, ReturnValue) == 0x000008, "Member 'NGDInteractableActor_Interact::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDInteractableActor.LeaveInteractZone
// 0x0010 (0x0010 - 0x0000)
struct NGDInteractableActor_LeaveInteractZone final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDInteractableActor_LeaveInteractZone) == 0x000008, "Wrong alignment on NGDInteractableActor_LeaveInteractZone");
static_assert(sizeof(NGDInteractableActor_LeaveInteractZone) == 0x000010, "Wrong size on NGDInteractableActor_LeaveInteractZone");
static_assert(offsetof(NGDInteractableActor_LeaveInteractZone, InCharacter) == 0x000000, "Member 'NGDInteractableActor_LeaveInteractZone::InCharacter' has a wrong offset!");
static_assert(offsetof(NGDInteractableActor_LeaveInteractZone, ReturnValue) == 0x000008, "Member 'NGDInteractableActor_LeaveInteractZone::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDInteractableActor.OnEnterInteractZone
// 0x0008 (0x0008 - 0x0000)
struct NGDInteractableActor_OnEnterInteractZone final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractableActor_OnEnterInteractZone) == 0x000008, "Wrong alignment on NGDInteractableActor_OnEnterInteractZone");
static_assert(sizeof(NGDInteractableActor_OnEnterInteractZone) == 0x000008, "Wrong size on NGDInteractableActor_OnEnterInteractZone");
static_assert(offsetof(NGDInteractableActor_OnEnterInteractZone, InCharacter) == 0x000000, "Member 'NGDInteractableActor_OnEnterInteractZone::InCharacter' has a wrong offset!");

// Function UnrealProject.NGDInteractableActor.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct NGDInteractableActor_OnInteract final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractableActor_OnInteract) == 0x000008, "Wrong alignment on NGDInteractableActor_OnInteract");
static_assert(sizeof(NGDInteractableActor_OnInteract) == 0x000008, "Wrong size on NGDInteractableActor_OnInteract");
static_assert(offsetof(NGDInteractableActor_OnInteract, InCharacter) == 0x000000, "Member 'NGDInteractableActor_OnInteract::InCharacter' has a wrong offset!");

// Function UnrealProject.NGDInteractableActor.OnLeaveInteractZone
// 0x0008 (0x0008 - 0x0000)
struct NGDInteractableActor_OnLeaveInteractZone final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractableActor_OnLeaveInteractZone) == 0x000008, "Wrong alignment on NGDInteractableActor_OnLeaveInteractZone");
static_assert(sizeof(NGDInteractableActor_OnLeaveInteractZone) == 0x000008, "Wrong size on NGDInteractableActor_OnLeaveInteractZone");
static_assert(offsetof(NGDInteractableActor_OnLeaveInteractZone, InCharacter) == 0x000000, "Member 'NGDInteractableActor_OnLeaveInteractZone::InCharacter' has a wrong offset!");

// Function UnrealProject.NGDPhysicalMaterial.OnImpact
// 0x0038 (0x0038 - 0x0000)
struct NGDPhysicalMaterial_OnImpact final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDPhysicalMaterial_OnImpact) == 0x000008, "Wrong alignment on NGDPhysicalMaterial_OnImpact");
static_assert(sizeof(NGDPhysicalMaterial_OnImpact) == 0x000038, "Wrong size on NGDPhysicalMaterial_OnImpact");
static_assert(offsetof(NGDPhysicalMaterial_OnImpact, Instigator) == 0x000000, "Member 'NGDPhysicalMaterial_OnImpact::Instigator' has a wrong offset!");
static_assert(offsetof(NGDPhysicalMaterial_OnImpact, Target) == 0x000008, "Member 'NGDPhysicalMaterial_OnImpact::Target' has a wrong offset!");
static_assert(offsetof(NGDPhysicalMaterial_OnImpact, Position) == 0x000010, "Member 'NGDPhysicalMaterial_OnImpact::Position' has a wrong offset!");
static_assert(offsetof(NGDPhysicalMaterial_OnImpact, Normal) == 0x00001C, "Member 'NGDPhysicalMaterial_OnImpact::Normal' has a wrong offset!");
static_assert(offsetof(NGDPhysicalMaterial_OnImpact, Scale) == 0x000028, "Member 'NGDPhysicalMaterial_OnImpact::Scale' has a wrong offset!");
static_assert(offsetof(NGDPhysicalMaterial_OnImpact, SocketName) == 0x00002C, "Member 'NGDPhysicalMaterial_OnImpact::SocketName' has a wrong offset!");

// Function UnrealProject.CameraControllerComponent.CharacterHasExtraFlag
// 0x0002 (0x0002 - 0x0000)
struct CameraControllerComponent_CharacterHasExtraFlag final
{
public:
	ENGDCharacterExtraFlags                       FlagToCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraControllerComponent_CharacterHasExtraFlag) == 0x000001, "Wrong alignment on CameraControllerComponent_CharacterHasExtraFlag");
static_assert(sizeof(CameraControllerComponent_CharacterHasExtraFlag) == 0x000002, "Wrong size on CameraControllerComponent_CharacterHasExtraFlag");
static_assert(offsetof(CameraControllerComponent_CharacterHasExtraFlag, FlagToCheck) == 0x000000, "Member 'CameraControllerComponent_CharacterHasExtraFlag::FlagToCheck' has a wrong offset!");
static_assert(offsetof(CameraControllerComponent_CharacterHasExtraFlag, ReturnValue) == 0x000001, "Member 'CameraControllerComponent_CharacterHasExtraFlag::ReturnValue' has a wrong offset!");

// Function UnrealProject.CameraControllerComponent.CharacterHasLocomotionFlag
// 0x0002 (0x0002 - 0x0000)
struct CameraControllerComponent_CharacterHasLocomotionFlag final
{
public:
	ENGDCharacterLocomotionFlags                  FlagToCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraControllerComponent_CharacterHasLocomotionFlag) == 0x000001, "Wrong alignment on CameraControllerComponent_CharacterHasLocomotionFlag");
static_assert(sizeof(CameraControllerComponent_CharacterHasLocomotionFlag) == 0x000002, "Wrong size on CameraControllerComponent_CharacterHasLocomotionFlag");
static_assert(offsetof(CameraControllerComponent_CharacterHasLocomotionFlag, FlagToCheck) == 0x000000, "Member 'CameraControllerComponent_CharacterHasLocomotionFlag::FlagToCheck' has a wrong offset!");
static_assert(offsetof(CameraControllerComponent_CharacterHasLocomotionFlag, ReturnValue) == 0x000001, "Member 'CameraControllerComponent_CharacterHasLocomotionFlag::ReturnValue' has a wrong offset!");

// Function UnrealProject.CameraControllerComponent.GetShouldUpdateCamera
// 0x0001 (0x0001 - 0x0000)
struct CameraControllerComponent_GetShouldUpdateCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraControllerComponent_GetShouldUpdateCamera) == 0x000001, "Wrong alignment on CameraControllerComponent_GetShouldUpdateCamera");
static_assert(sizeof(CameraControllerComponent_GetShouldUpdateCamera) == 0x000001, "Wrong size on CameraControllerComponent_GetShouldUpdateCamera");
static_assert(offsetof(CameraControllerComponent_GetShouldUpdateCamera, ReturnValue) == 0x000000, "Member 'CameraControllerComponent_GetShouldUpdateCamera::ReturnValue' has a wrong offset!");

// Function UnrealProject.CameraControllerComponent.OnInteriorStatusChange
// 0x0001 (0x0001 - 0x0000)
struct CameraControllerComponent_OnInteriorStatusChange final
{
public:
	bool                                          bEnteredBuilding;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraControllerComponent_OnInteriorStatusChange) == 0x000001, "Wrong alignment on CameraControllerComponent_OnInteriorStatusChange");
static_assert(sizeof(CameraControllerComponent_OnInteriorStatusChange) == 0x000001, "Wrong size on CameraControllerComponent_OnInteriorStatusChange");
static_assert(offsetof(CameraControllerComponent_OnInteriorStatusChange, bEnteredBuilding) == 0x000000, "Member 'CameraControllerComponent_OnInteriorStatusChange::bEnteredBuilding' has a wrong offset!");

// Function UnrealProject.CameraControllerComponent.OnTeleport
// 0x0018 (0x0018 - 0x0000)
struct CameraControllerComponent_OnTeleport final
{
public:
	struct FVector                                TeleportedPosition;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TeleportedRotator;                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraControllerComponent_OnTeleport) == 0x000004, "Wrong alignment on CameraControllerComponent_OnTeleport");
static_assert(sizeof(CameraControllerComponent_OnTeleport) == 0x000018, "Wrong size on CameraControllerComponent_OnTeleport");
static_assert(offsetof(CameraControllerComponent_OnTeleport, TeleportedPosition) == 0x000000, "Member 'CameraControllerComponent_OnTeleport::TeleportedPosition' has a wrong offset!");
static_assert(offsetof(CameraControllerComponent_OnTeleport, TeleportedRotator) == 0x00000C, "Member 'CameraControllerComponent_OnTeleport::TeleportedRotator' has a wrong offset!");

// Function UnrealProject.CameraControllerComponent.SetShouldUpdateCamera
// 0x0001 (0x0001 - 0x0000)
struct CameraControllerComponent_SetShouldUpdateCamera final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraControllerComponent_SetShouldUpdateCamera) == 0x000001, "Wrong alignment on CameraControllerComponent_SetShouldUpdateCamera");
static_assert(sizeof(CameraControllerComponent_SetShouldUpdateCamera) == 0x000001, "Wrong size on CameraControllerComponent_SetShouldUpdateCamera");
static_assert(offsetof(CameraControllerComponent_SetShouldUpdateCamera, Value) == 0x000000, "Member 'CameraControllerComponent_SetShouldUpdateCamera::Value' has a wrong offset!");

// Function UnrealProject.CameraControllerComponent.UpdateCameraConfigTargetArmLength
// 0x0008 (0x0008 - 0x0000)
struct CameraControllerComponent_UpdateCameraConfigTargetArmLength final
{
public:
	ECameraTypes                                  CameraType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewLength;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraControllerComponent_UpdateCameraConfigTargetArmLength) == 0x000004, "Wrong alignment on CameraControllerComponent_UpdateCameraConfigTargetArmLength");
static_assert(sizeof(CameraControllerComponent_UpdateCameraConfigTargetArmLength) == 0x000008, "Wrong size on CameraControllerComponent_UpdateCameraConfigTargetArmLength");
static_assert(offsetof(CameraControllerComponent_UpdateCameraConfigTargetArmLength, CameraType) == 0x000000, "Member 'CameraControllerComponent_UpdateCameraConfigTargetArmLength::CameraType' has a wrong offset!");
static_assert(offsetof(CameraControllerComponent_UpdateCameraConfigTargetArmLength, NewLength) == 0x000004, "Member 'CameraControllerComponent_UpdateCameraConfigTargetArmLength::NewLength' has a wrong offset!");

// Function UnrealProject.CameraControllerComponent.UpdateOwnerDataBP
// 0x0008 (0x0008 - 0x0000)
struct CameraControllerComponent_UpdateOwnerDataBP final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraControllerComponent_UpdateOwnerDataBP) == 0x000008, "Wrong alignment on CameraControllerComponent_UpdateOwnerDataBP");
static_assert(sizeof(CameraControllerComponent_UpdateOwnerDataBP) == 0x000008, "Wrong size on CameraControllerComponent_UpdateOwnerDataBP");
static_assert(offsetof(CameraControllerComponent_UpdateOwnerDataBP, Owner) == 0x000000, "Member 'CameraControllerComponent_UpdateOwnerDataBP::Owner' has a wrong offset!");

// Function UnrealProject.NGDUserWidget.CreateWidgetComponent
// 0x0010 (0x0010 - 0x0000)
struct NGDUserWidget_CreateWidgetComponent final
{
public:
	TSubclassOf<class UWidget>                    WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDUserWidget_CreateWidgetComponent) == 0x000008, "Wrong alignment on NGDUserWidget_CreateWidgetComponent");
static_assert(sizeof(NGDUserWidget_CreateWidgetComponent) == 0x000010, "Wrong size on NGDUserWidget_CreateWidgetComponent");
static_assert(offsetof(NGDUserWidget_CreateWidgetComponent, WidgetClass) == 0x000000, "Member 'NGDUserWidget_CreateWidgetComponent::WidgetClass' has a wrong offset!");
static_assert(offsetof(NGDUserWidget_CreateWidgetComponent, ReturnValue) == 0x000008, "Member 'NGDUserWidget_CreateWidgetComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDUserWidget.GetHUD
// 0x0008 (0x0008 - 0x0000)
struct NGDUserWidget_GetHUD final
{
public:
	class ANGDHUD*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDUserWidget_GetHUD) == 0x000008, "Wrong alignment on NGDUserWidget_GetHUD");
static_assert(sizeof(NGDUserWidget_GetHUD) == 0x000008, "Wrong size on NGDUserWidget_GetHUD");
static_assert(offsetof(NGDUserWidget_GetHUD, ReturnValue) == 0x000000, "Member 'NGDUserWidget_GetHUD::ReturnValue' has a wrong offset!");

// Function UnrealProject.ScopeAttachment.GetAimTransform
// 0x0030 (0x0030 - 0x0000)
struct ScopeAttachment_GetAimTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScopeAttachment_GetAimTransform) == 0x000010, "Wrong alignment on ScopeAttachment_GetAimTransform");
static_assert(sizeof(ScopeAttachment_GetAimTransform) == 0x000030, "Wrong size on ScopeAttachment_GetAimTransform");
static_assert(offsetof(ScopeAttachment_GetAimTransform, ReturnValue) == 0x000000, "Member 'ScopeAttachment_GetAimTransform::ReturnValue' has a wrong offset!");

// Function UnrealProject.ScopeAttachment.OnADSStateChanged
// 0x0001 (0x0001 - 0x0000)
struct ScopeAttachment_OnADSStateChanged final
{
public:
	bool                                          bIsADS;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScopeAttachment_OnADSStateChanged) == 0x000001, "Wrong alignment on ScopeAttachment_OnADSStateChanged");
static_assert(sizeof(ScopeAttachment_OnADSStateChanged) == 0x000001, "Wrong size on ScopeAttachment_OnADSStateChanged");
static_assert(offsetof(ScopeAttachment_OnADSStateChanged, bIsADS) == 0x000000, "Member 'ScopeAttachment_OnADSStateChanged::bIsADS' has a wrong offset!");

// Function UnrealProject.ScopeAttachment.GetScopeConfig
// 0x0030 (0x0030 - 0x0000)
struct ScopeAttachment_GetScopeConfig final
{
public:
	struct FAttachmentScopeConfig                 ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScopeAttachment_GetScopeConfig) == 0x000008, "Wrong alignment on ScopeAttachment_GetScopeConfig");
static_assert(sizeof(ScopeAttachment_GetScopeConfig) == 0x000030, "Wrong size on ScopeAttachment_GetScopeConfig");
static_assert(offsetof(ScopeAttachment_GetScopeConfig, ReturnValue) == 0x000000, "Member 'ScopeAttachment_GetScopeConfig::ReturnValue' has a wrong offset!");

// Function UnrealProject.CheckAmmoAction.EventUpdate
// 0x0004 (0x0004 - 0x0000)
struct CheckAmmoAction_EventUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckAmmoAction_EventUpdate) == 0x000004, "Wrong alignment on CheckAmmoAction_EventUpdate");
static_assert(sizeof(CheckAmmoAction_EventUpdate) == 0x000004, "Wrong size on CheckAmmoAction_EventUpdate");
static_assert(offsetof(CheckAmmoAction_EventUpdate, DeltaTime) == 0x000000, "Member 'CheckAmmoAction_EventUpdate::DeltaTime' has a wrong offset!");

// Function UnrealProject.CheckAmmoAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct CheckAmmoAction_Initialize_Implementation final
{
public:
	struct FActionParams                          ActionParams_0;                                    // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckAmmoAction_Initialize_Implementation) == 0x000008, "Wrong alignment on CheckAmmoAction_Initialize_Implementation");
static_assert(sizeof(CheckAmmoAction_Initialize_Implementation) == 0x000030, "Wrong size on CheckAmmoAction_Initialize_Implementation");
static_assert(offsetof(CheckAmmoAction_Initialize_Implementation, ActionParams_0) == 0x000000, "Member 'CheckAmmoAction_Initialize_Implementation::ActionParams_0' has a wrong offset!");

// Function UnrealProject.CheckEnemyAction.EventUpdate
// 0x0004 (0x0004 - 0x0000)
struct CheckEnemyAction_EventUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckEnemyAction_EventUpdate) == 0x000004, "Wrong alignment on CheckEnemyAction_EventUpdate");
static_assert(sizeof(CheckEnemyAction_EventUpdate) == 0x000004, "Wrong size on CheckEnemyAction_EventUpdate");
static_assert(offsetof(CheckEnemyAction_EventUpdate, DeltaTime) == 0x000000, "Member 'CheckEnemyAction_EventUpdate::DeltaTime' has a wrong offset!");

// Function UnrealProject.CheckEnemyAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct CheckEnemyAction_Initialize_Implementation final
{
public:
	struct FActionParams                          InActionParams;                                    // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckEnemyAction_Initialize_Implementation) == 0x000008, "Wrong alignment on CheckEnemyAction_Initialize_Implementation");
static_assert(sizeof(CheckEnemyAction_Initialize_Implementation) == 0x000030, "Wrong size on CheckEnemyAction_Initialize_Implementation");
static_assert(offsetof(CheckEnemyAction_Initialize_Implementation, InActionParams) == 0x000000, "Member 'CheckEnemyAction_Initialize_Implementation::InActionParams' has a wrong offset!");

// Function UnrealProject.Consumable.Tick
// 0x0004 (0x0004 - 0x0000)
struct Consumable_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Consumable_Tick) == 0x000004, "Wrong alignment on Consumable_Tick");
static_assert(sizeof(Consumable_Tick) == 0x000004, "Wrong size on Consumable_Tick");
static_assert(offsetof(Consumable_Tick, DeltaTime) == 0x000000, "Member 'Consumable_Tick::DeltaTime' has a wrong offset!");

// Function UnrealProject.Consumable.GetRemainingTimeToConsume
// 0x0004 (0x0004 - 0x0000)
struct Consumable_GetRemainingTimeToConsume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Consumable_GetRemainingTimeToConsume) == 0x000004, "Wrong alignment on Consumable_GetRemainingTimeToConsume");
static_assert(sizeof(Consumable_GetRemainingTimeToConsume) == 0x000004, "Wrong size on Consumable_GetRemainingTimeToConsume");
static_assert(offsetof(Consumable_GetRemainingTimeToConsume, ReturnValue) == 0x000000, "Member 'Consumable_GetRemainingTimeToConsume::ReturnValue' has a wrong offset!");

// Function UnrealProject.Consumable.GetTimeToConsume
// 0x0004 (0x0004 - 0x0000)
struct Consumable_GetTimeToConsume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Consumable_GetTimeToConsume) == 0x000004, "Wrong alignment on Consumable_GetTimeToConsume");
static_assert(sizeof(Consumable_GetTimeToConsume) == 0x000004, "Wrong size on Consumable_GetTimeToConsume");
static_assert(offsetof(Consumable_GetTimeToConsume, ReturnValue) == 0x000000, "Member 'Consumable_GetTimeToConsume::ReturnValue' has a wrong offset!");

// Function UnrealProject.DeviationFirearmFeelComponent.GetCurrentDeviationMagnitude
// 0x0004 (0x0004 - 0x0000)
struct DeviationFirearmFeelComponent_GetCurrentDeviationMagnitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeviationFirearmFeelComponent_GetCurrentDeviationMagnitude) == 0x000004, "Wrong alignment on DeviationFirearmFeelComponent_GetCurrentDeviationMagnitude");
static_assert(sizeof(DeviationFirearmFeelComponent_GetCurrentDeviationMagnitude) == 0x000004, "Wrong size on DeviationFirearmFeelComponent_GetCurrentDeviationMagnitude");
static_assert(offsetof(DeviationFirearmFeelComponent_GetCurrentDeviationMagnitude, ReturnValue) == 0x000000, "Member 'DeviationFirearmFeelComponent_GetCurrentDeviationMagnitude::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.Fire
// 0x0028 (0x0028 - 0x0000)
struct Weapon_Fire final
{
public:
	struct FLocalFireEvent                        LocalFireEvent;                                    // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShouldCreateProjectile;                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Weapon_Fire) == 0x000004, "Wrong alignment on Weapon_Fire");
static_assert(sizeof(Weapon_Fire) == 0x000028, "Wrong size on Weapon_Fire");
static_assert(offsetof(Weapon_Fire, LocalFireEvent) == 0x000000, "Member 'Weapon_Fire::LocalFireEvent' has a wrong offset!");
static_assert(offsetof(Weapon_Fire, bShouldCreateProjectile) == 0x000024, "Member 'Weapon_Fire::bShouldCreateProjectile' has a wrong offset!");

// Function UnrealProject.Weapon.GetAimingDestination
// 0x000C (0x000C - 0x0000)
struct Weapon_GetAimingDestination final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetAimingDestination) == 0x000004, "Wrong alignment on Weapon_GetAimingDestination");
static_assert(sizeof(Weapon_GetAimingDestination) == 0x00000C, "Wrong size on Weapon_GetAimingDestination");
static_assert(offsetof(Weapon_GetAimingDestination, ReturnValue) == 0x000000, "Member 'Weapon_GetAimingDestination::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetCrosshairAmplitude
// 0x0004 (0x0004 - 0x0000)
struct Weapon_GetCrosshairAmplitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetCrosshairAmplitude) == 0x000004, "Wrong alignment on Weapon_GetCrosshairAmplitude");
static_assert(sizeof(Weapon_GetCrosshairAmplitude) == 0x000004, "Wrong size on Weapon_GetCrosshairAmplitude");
static_assert(offsetof(Weapon_GetCrosshairAmplitude, ReturnValue) == 0x000000, "Member 'Weapon_GetCrosshairAmplitude::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.Multicast_OnRemoteDesyncFireEvent
// 0x0028 (0x0028 - 0x0000)
struct Weapon_Multicast_OnRemoteDesyncFireEvent final
{
public:
	struct FRemoteDesyncFireEvent                 RemoteDesyncFireEvent;                             // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_Multicast_OnRemoteDesyncFireEvent) == 0x000008, "Wrong alignment on Weapon_Multicast_OnRemoteDesyncFireEvent");
static_assert(sizeof(Weapon_Multicast_OnRemoteDesyncFireEvent) == 0x000028, "Wrong size on Weapon_Multicast_OnRemoteDesyncFireEvent");
static_assert(offsetof(Weapon_Multicast_OnRemoteDesyncFireEvent, RemoteDesyncFireEvent) == 0x000000, "Member 'Weapon_Multicast_OnRemoteDesyncFireEvent::RemoteDesyncFireEvent' has a wrong offset!");

// Function UnrealProject.Weapon.Multicast_OnRemoteFireEvent
// 0x0030 (0x0030 - 0x0000)
struct Weapon_Multicast_OnRemoteFireEvent final
{
public:
	struct FRemoteFireEvent                       RemoteFireEvent;                                   // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_Multicast_OnRemoteFireEvent) == 0x000008, "Wrong alignment on Weapon_Multicast_OnRemoteFireEvent");
static_assert(sizeof(Weapon_Multicast_OnRemoteFireEvent) == 0x000030, "Wrong size on Weapon_Multicast_OnRemoteFireEvent");
static_assert(offsetof(Weapon_Multicast_OnRemoteFireEvent, RemoteFireEvent) == 0x000000, "Member 'Weapon_Multicast_OnRemoteFireEvent::RemoteFireEvent' has a wrong offset!");

// Function UnrealProject.Weapon.Native_CosmeticsOnFired
// 0x0018 (0x0018 - 0x0000)
struct Weapon_Native_CosmeticsOnFired final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Direction;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_Native_CosmeticsOnFired) == 0x000004, "Wrong alignment on Weapon_Native_CosmeticsOnFired");
static_assert(sizeof(Weapon_Native_CosmeticsOnFired) == 0x000018, "Wrong size on Weapon_Native_CosmeticsOnFired");
static_assert(offsetof(Weapon_Native_CosmeticsOnFired, Position) == 0x000000, "Member 'Weapon_Native_CosmeticsOnFired::Position' has a wrong offset!");
static_assert(offsetof(Weapon_Native_CosmeticsOnFired, Direction) == 0x00000C, "Member 'Weapon_Native_CosmeticsOnFired::Direction' has a wrong offset!");

// Function UnrealProject.Weapon.OnFired
// 0x0018 (0x0018 - 0x0000)
struct Weapon_OnFired final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Direction;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_OnFired) == 0x000004, "Wrong alignment on Weapon_OnFired");
static_assert(sizeof(Weapon_OnFired) == 0x000018, "Wrong size on Weapon_OnFired");
static_assert(offsetof(Weapon_OnFired, Position) == 0x000000, "Member 'Weapon_OnFired::Position' has a wrong offset!");
static_assert(offsetof(Weapon_OnFired, Direction) == 0x00000C, "Member 'Weapon_OnFired::Direction' has a wrong offset!");

// Function UnrealProject.Weapon.Server_NotifyLocalFireEvent
// 0x0020 (0x0020 - 0x0000)
struct Weapon_Server_NotifyLocalFireEvent final
{
public:
	float                                         SyncedTimeStamp;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootPos;                                          // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ShootRot;                                          // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint16                                        InBulletIndex;                                     // 0x001C(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Weapon_Server_NotifyLocalFireEvent) == 0x000004, "Wrong alignment on Weapon_Server_NotifyLocalFireEvent");
static_assert(sizeof(Weapon_Server_NotifyLocalFireEvent) == 0x000020, "Wrong size on Weapon_Server_NotifyLocalFireEvent");
static_assert(offsetof(Weapon_Server_NotifyLocalFireEvent, SyncedTimeStamp) == 0x000000, "Member 'Weapon_Server_NotifyLocalFireEvent::SyncedTimeStamp' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalFireEvent, ShootPos) == 0x000004, "Member 'Weapon_Server_NotifyLocalFireEvent::ShootPos' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalFireEvent, ShootRot) == 0x000010, "Member 'Weapon_Server_NotifyLocalFireEvent::ShootRot' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalFireEvent, InBulletIndex) == 0x00001C, "Member 'Weapon_Server_NotifyLocalFireEvent::InBulletIndex' has a wrong offset!");

// Function UnrealProject.Weapon.Server_NotifyLocalHitEvent
// 0x0020 (0x0020 - 0x0000)
struct Weapon_Server_NotifyLocalHitEvent final
{
public:
	float                                         TimeToCheckHit;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientPing;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraveledTime;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        InBulletIndex;                                     // 0x001C(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Weapon_Server_NotifyLocalHitEvent) == 0x000008, "Wrong alignment on Weapon_Server_NotifyLocalHitEvent");
static_assert(sizeof(Weapon_Server_NotifyLocalHitEvent) == 0x000020, "Wrong size on Weapon_Server_NotifyLocalHitEvent");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEvent, TimeToCheckHit) == 0x000000, "Member 'Weapon_Server_NotifyLocalHitEvent::TimeToCheckHit' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEvent, Victim) == 0x000008, "Member 'Weapon_Server_NotifyLocalHitEvent::Victim' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEvent, BoneIndex) == 0x000010, "Member 'Weapon_Server_NotifyLocalHitEvent::BoneIndex' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEvent, ClientPing) == 0x000014, "Member 'Weapon_Server_NotifyLocalHitEvent::ClientPing' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEvent, TraveledTime) == 0x000018, "Member 'Weapon_Server_NotifyLocalHitEvent::TraveledTime' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEvent, InBulletIndex) == 0x00001C, "Member 'Weapon_Server_NotifyLocalHitEvent::InBulletIndex' has a wrong offset!");

// Function UnrealProject.Weapon.Server_NotifyLocalHitEventWithPellet
// 0x0020 (0x0020 - 0x0000)
struct Weapon_Server_NotifyLocalHitEventWithPellet final
{
public:
	float                                         TimeToCheckHit;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientPing;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraveledTime;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        InBulletIndex;                                     // 0x001C(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VolleyIndex;                                       // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Weapon_Server_NotifyLocalHitEventWithPellet) == 0x000008, "Wrong alignment on Weapon_Server_NotifyLocalHitEventWithPellet");
static_assert(sizeof(Weapon_Server_NotifyLocalHitEventWithPellet) == 0x000020, "Wrong size on Weapon_Server_NotifyLocalHitEventWithPellet");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEventWithPellet, TimeToCheckHit) == 0x000000, "Member 'Weapon_Server_NotifyLocalHitEventWithPellet::TimeToCheckHit' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEventWithPellet, Victim) == 0x000008, "Member 'Weapon_Server_NotifyLocalHitEventWithPellet::Victim' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEventWithPellet, BoneIndex) == 0x000010, "Member 'Weapon_Server_NotifyLocalHitEventWithPellet::BoneIndex' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEventWithPellet, ClientPing) == 0x000014, "Member 'Weapon_Server_NotifyLocalHitEventWithPellet::ClientPing' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEventWithPellet, TraveledTime) == 0x000018, "Member 'Weapon_Server_NotifyLocalHitEventWithPellet::TraveledTime' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEventWithPellet, InBulletIndex) == 0x00001C, "Member 'Weapon_Server_NotifyLocalHitEventWithPellet::InBulletIndex' has a wrong offset!");
static_assert(offsetof(Weapon_Server_NotifyLocalHitEventWithPellet, VolleyIndex) == 0x00001E, "Member 'Weapon_Server_NotifyLocalHitEventWithPellet::VolleyIndex' has a wrong offset!");

// Function UnrealProject.Weapon.SetIsDoingMelee
// 0x0001 (0x0001 - 0x0000)
struct Weapon_SetIsDoingMelee final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_SetIsDoingMelee) == 0x000001, "Wrong alignment on Weapon_SetIsDoingMelee");
static_assert(sizeof(Weapon_SetIsDoingMelee) == 0x000001, "Wrong size on Weapon_SetIsDoingMelee");
static_assert(offsetof(Weapon_SetIsDoingMelee, bValue) == 0x000000, "Member 'Weapon_SetIsDoingMelee::bValue' has a wrong offset!");

// Function UnrealProject.Weapon.CanFire
// 0x0001 (0x0001 - 0x0000)
struct Weapon_CanFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_CanFire) == 0x000001, "Wrong alignment on Weapon_CanFire");
static_assert(sizeof(Weapon_CanFire) == 0x000001, "Wrong size on Weapon_CanFire");
static_assert(offsetof(Weapon_CanFire, ReturnValue) == 0x000000, "Member 'Weapon_CanFire::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.CanOwningCharacterFire
// 0x0001 (0x0001 - 0x0000)
struct Weapon_CanOwningCharacterFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_CanOwningCharacterFire) == 0x000001, "Wrong alignment on Weapon_CanOwningCharacterFire");
static_assert(sizeof(Weapon_CanOwningCharacterFire) == 0x000001, "Wrong size on Weapon_CanOwningCharacterFire");
static_assert(offsetof(Weapon_CanOwningCharacterFire, ReturnValue) == 0x000000, "Member 'Weapon_CanOwningCharacterFire::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetAimPointLocalTransform
// 0x0030 (0x0030 - 0x0000)
struct Weapon_GetAimPointLocalTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetAimPointLocalTransform) == 0x000010, "Wrong alignment on Weapon_GetAimPointLocalTransform");
static_assert(sizeof(Weapon_GetAimPointLocalTransform) == 0x000030, "Wrong size on Weapon_GetAimPointLocalTransform");
static_assert(offsetof(Weapon_GetAimPointLocalTransform, ReturnValue) == 0x000000, "Member 'Weapon_GetAimPointLocalTransform::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetBaseDamage
// 0x0004 (0x0004 - 0x0000)
struct Weapon_GetBaseDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetBaseDamage) == 0x000004, "Wrong alignment on Weapon_GetBaseDamage");
static_assert(sizeof(Weapon_GetBaseDamage) == 0x000004, "Wrong size on Weapon_GetBaseDamage");
static_assert(offsetof(Weapon_GetBaseDamage, ReturnValue) == 0x000000, "Member 'Weapon_GetBaseDamage::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetCurrentCameraRotation
// 0x000C (0x000C - 0x0000)
struct Weapon_GetCurrentCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetCurrentCameraRotation) == 0x000004, "Wrong alignment on Weapon_GetCurrentCameraRotation");
static_assert(sizeof(Weapon_GetCurrentCameraRotation) == 0x00000C, "Wrong size on Weapon_GetCurrentCameraRotation");
static_assert(offsetof(Weapon_GetCurrentCameraRotation, ReturnValue) == 0x000000, "Member 'Weapon_GetCurrentCameraRotation::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetCurrentZeroingDistance
// 0x0004 (0x0004 - 0x0000)
struct Weapon_GetCurrentZeroingDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetCurrentZeroingDistance) == 0x000004, "Wrong alignment on Weapon_GetCurrentZeroingDistance");
static_assert(sizeof(Weapon_GetCurrentZeroingDistance) == 0x000004, "Wrong size on Weapon_GetCurrentZeroingDistance");
static_assert(offsetof(Weapon_GetCurrentZeroingDistance, ReturnValue) == 0x000000, "Member 'Weapon_GetCurrentZeroingDistance::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetFireSocketTransform
// 0x0030 (0x0030 - 0x0000)
struct Weapon_GetFireSocketTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetFireSocketTransform) == 0x000010, "Wrong alignment on Weapon_GetFireSocketTransform");
static_assert(sizeof(Weapon_GetFireSocketTransform) == 0x000030, "Wrong size on Weapon_GetFireSocketTransform");
static_assert(offsetof(Weapon_GetFireSocketTransform, ReturnValue) == 0x000000, "Member 'Weapon_GetFireSocketTransform::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetImpactImpulseForce
// 0x0004 (0x0004 - 0x0000)
struct Weapon_GetImpactImpulseForce final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetImpactImpulseForce) == 0x000004, "Wrong alignment on Weapon_GetImpactImpulseForce");
static_assert(sizeof(Weapon_GetImpactImpulseForce) == 0x000004, "Wrong size on Weapon_GetImpactImpulseForce");
static_assert(offsetof(Weapon_GetImpactImpulseForce, ReturnValue) == 0x000000, "Member 'Weapon_GetImpactImpulseForce::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetScopeSocketTransform
// 0x0030 (0x0030 - 0x0000)
struct Weapon_GetScopeSocketTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetScopeSocketTransform) == 0x000010, "Wrong alignment on Weapon_GetScopeSocketTransform");
static_assert(sizeof(Weapon_GetScopeSocketTransform) == 0x000030, "Wrong size on Weapon_GetScopeSocketTransform");
static_assert(offsetof(Weapon_GetScopeSocketTransform, ReturnValue) == 0x000000, "Member 'Weapon_GetScopeSocketTransform::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.GetVolleySize
// 0x0004 (0x0004 - 0x0000)
struct Weapon_GetVolleySize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetVolleySize) == 0x000004, "Wrong alignment on Weapon_GetVolleySize");
static_assert(sizeof(Weapon_GetVolleySize) == 0x000004, "Wrong size on Weapon_GetVolleySize");
static_assert(offsetof(Weapon_GetVolleySize, ReturnValue) == 0x000000, "Member 'Weapon_GetVolleySize::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.HasADSCapability
// 0x0001 (0x0001 - 0x0000)
struct Weapon_HasADSCapability final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_HasADSCapability) == 0x000001, "Wrong alignment on Weapon_HasADSCapability");
static_assert(sizeof(Weapon_HasADSCapability) == 0x000001, "Wrong size on Weapon_HasADSCapability");
static_assert(offsetof(Weapon_HasADSCapability, ReturnValue) == 0x000000, "Member 'Weapon_HasADSCapability::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.IsDoingMelee
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsDoingMelee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsDoingMelee) == 0x000001, "Wrong alignment on Weapon_IsDoingMelee");
static_assert(sizeof(Weapon_IsDoingMelee) == 0x000001, "Wrong size on Weapon_IsDoingMelee");
static_assert(offsetof(Weapon_IsDoingMelee, ReturnValue) == 0x000000, "Member 'Weapon_IsDoingMelee::ReturnValue' has a wrong offset!");

// Function UnrealProject.Weapon.IsTriggering
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsTriggering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsTriggering) == 0x000001, "Wrong alignment on Weapon_IsTriggering");
static_assert(sizeof(Weapon_IsTriggering) == 0x000001, "Wrong size on Weapon_IsTriggering");
static_assert(offsetof(Weapon_IsTriggering, ReturnValue) == 0x000000, "Member 'Weapon_IsTriggering::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.Client_OnReloadSuccess
// 0x0004 (0x0004 - 0x0000)
struct Firearm_Client_OnReloadSuccess final
{
public:
	int32                                         NewAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_Client_OnReloadSuccess) == 0x000004, "Wrong alignment on Firearm_Client_OnReloadSuccess");
static_assert(sizeof(Firearm_Client_OnReloadSuccess) == 0x000004, "Wrong size on Firearm_Client_OnReloadSuccess");
static_assert(offsetof(Firearm_Client_OnReloadSuccess, NewAmmo) == 0x000000, "Member 'Firearm_Client_OnReloadSuccess::NewAmmo' has a wrong offset!");

// Function UnrealProject.Firearm.CreateProjectile
// 0x0048 (0x0048 - 0x0000)
struct Firearm_CreateProjectile final
{
public:
	TSubclassOf<class ABaseProjectile>            InProjectileClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLocalFireEvent                        FireEvent;                                         // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Direction;                                         // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         VolleyIndex;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseProjectile*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_CreateProjectile) == 0x000008, "Wrong alignment on Firearm_CreateProjectile");
static_assert(sizeof(Firearm_CreateProjectile) == 0x000048, "Wrong size on Firearm_CreateProjectile");
static_assert(offsetof(Firearm_CreateProjectile, InProjectileClass) == 0x000000, "Member 'Firearm_CreateProjectile::InProjectileClass' has a wrong offset!");
static_assert(offsetof(Firearm_CreateProjectile, FireEvent) == 0x000008, "Member 'Firearm_CreateProjectile::FireEvent' has a wrong offset!");
static_assert(offsetof(Firearm_CreateProjectile, Direction) == 0x00002C, "Member 'Firearm_CreateProjectile::Direction' has a wrong offset!");
static_assert(offsetof(Firearm_CreateProjectile, VolleyIndex) == 0x000038, "Member 'Firearm_CreateProjectile::VolleyIndex' has a wrong offset!");
static_assert(offsetof(Firearm_CreateProjectile, ReturnValue) == 0x000040, "Member 'Firearm_CreateProjectile::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.FireVolley
// 0x0030 (0x0030 - 0x0000)
struct Firearm_FireVolley final
{
public:
	TSubclassOf<class ABaseProjectile>            InProjectileClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLocalFireEvent                        FireEvent;                                         // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Firearm_FireVolley) == 0x000008, "Wrong alignment on Firearm_FireVolley");
static_assert(sizeof(Firearm_FireVolley) == 0x000030, "Wrong size on Firearm_FireVolley");
static_assert(offsetof(Firearm_FireVolley, InProjectileClass) == 0x000000, "Member 'Firearm_FireVolley::InProjectileClass' has a wrong offset!");
static_assert(offsetof(Firearm_FireVolley, FireEvent) == 0x000008, "Member 'Firearm_FireVolley::FireEvent' has a wrong offset!");

// Function UnrealProject.Firearm.GetAndDestroyAmmoFromInventory
// 0x0008 (0x0008 - 0x0000)
struct Firearm_GetAndDestroyAmmoFromInventory final
{
public:
	int32                                         DesiredAmmoToDestroy;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetAndDestroyAmmoFromInventory) == 0x000004, "Wrong alignment on Firearm_GetAndDestroyAmmoFromInventory");
static_assert(sizeof(Firearm_GetAndDestroyAmmoFromInventory) == 0x000008, "Wrong size on Firearm_GetAndDestroyAmmoFromInventory");
static_assert(offsetof(Firearm_GetAndDestroyAmmoFromInventory, DesiredAmmoToDestroy) == 0x000000, "Member 'Firearm_GetAndDestroyAmmoFromInventory::DesiredAmmoToDestroy' has a wrong offset!");
static_assert(offsetof(Firearm_GetAndDestroyAmmoFromInventory, ReturnValue) == 0x000004, "Member 'Firearm_GetAndDestroyAmmoFromInventory::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetFireDirection
// 0x000C (0x000C - 0x0000)
struct Firearm_GetFireDirection final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetFireDirection) == 0x000004, "Wrong alignment on Firearm_GetFireDirection");
static_assert(sizeof(Firearm_GetFireDirection) == 0x00000C, "Wrong size on Firearm_GetFireDirection");
static_assert(offsetof(Firearm_GetFireDirection, ReturnValue) == 0x000000, "Member 'Firearm_GetFireDirection::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetMuzzleFlashTransform
// 0x0030 (0x0030 - 0x0000)
struct Firearm_GetMuzzleFlashTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetMuzzleFlashTransform) == 0x000010, "Wrong alignment on Firearm_GetMuzzleFlashTransform");
static_assert(sizeof(Firearm_GetMuzzleFlashTransform) == 0x000030, "Wrong size on Firearm_GetMuzzleFlashTransform");
static_assert(offsetof(Firearm_GetMuzzleFlashTransform, ReturnValue) == 0x000000, "Member 'Firearm_GetMuzzleFlashTransform::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.Multicast_ForceCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct Firearm_Multicast_ForceCurrentAmmo final
{
public:
	int32                                         NewAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_Multicast_ForceCurrentAmmo) == 0x000004, "Wrong alignment on Firearm_Multicast_ForceCurrentAmmo");
static_assert(sizeof(Firearm_Multicast_ForceCurrentAmmo) == 0x000004, "Wrong size on Firearm_Multicast_ForceCurrentAmmo");
static_assert(offsetof(Firearm_Multicast_ForceCurrentAmmo, NewAmmo) == 0x000000, "Member 'Firearm_Multicast_ForceCurrentAmmo::NewAmmo' has a wrong offset!");

// Function UnrealProject.Firearm.Multicast_OnReloadSuccess
// 0x0004 (0x0004 - 0x0000)
struct Firearm_Multicast_OnReloadSuccess final
{
public:
	int32                                         NewAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_Multicast_OnReloadSuccess) == 0x000004, "Wrong alignment on Firearm_Multicast_OnReloadSuccess");
static_assert(sizeof(Firearm_Multicast_OnReloadSuccess) == 0x000004, "Wrong size on Firearm_Multicast_OnReloadSuccess");
static_assert(offsetof(Firearm_Multicast_OnReloadSuccess, NewAmmo) == 0x000000, "Member 'Firearm_Multicast_OnReloadSuccess::NewAmmo' has a wrong offset!");

// Function UnrealProject.Firearm.OnAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct Firearm_OnAmmoChanged final
{
public:
	int32                                         NewAmmoCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_OnAmmoChanged) == 0x000004, "Wrong alignment on Firearm_OnAmmoChanged");
static_assert(sizeof(Firearm_OnAmmoChanged) == 0x000004, "Wrong size on Firearm_OnAmmoChanged");
static_assert(offsetof(Firearm_OnAmmoChanged, NewAmmoCount) == 0x000000, "Member 'Firearm_OnAmmoChanged::NewAmmoCount' has a wrong offset!");

// Function UnrealProject.Firearm.OnAmmoChanged_Multicast
// 0x0001 (0x0001 - 0x0000)
struct Firearm_OnAmmoChanged_Multicast final
{
public:
	uint8                                         NewAmmoCount;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_OnAmmoChanged_Multicast) == 0x000001, "Wrong alignment on Firearm_OnAmmoChanged_Multicast");
static_assert(sizeof(Firearm_OnAmmoChanged_Multicast) == 0x000001, "Wrong size on Firearm_OnAmmoChanged_Multicast");
static_assert(offsetof(Firearm_OnAmmoChanged_Multicast, NewAmmoCount) == 0x000000, "Member 'Firearm_OnAmmoChanged_Multicast::NewAmmoCount' has a wrong offset!");

// Function UnrealProject.Firearm.Server_NotifyLocalFireEvent_Cooked
// 0x0024 (0x0024 - 0x0000)
struct Firearm_Server_NotifyLocalFireEvent_Cooked final
{
public:
	float                                         SyncedTimeStamp;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootPos;                                          // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ShootRot;                                          // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint16                                        InBulletIndex;                                     // 0x001C(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CookTime;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_Server_NotifyLocalFireEvent_Cooked) == 0x000004, "Wrong alignment on Firearm_Server_NotifyLocalFireEvent_Cooked");
static_assert(sizeof(Firearm_Server_NotifyLocalFireEvent_Cooked) == 0x000024, "Wrong size on Firearm_Server_NotifyLocalFireEvent_Cooked");
static_assert(offsetof(Firearm_Server_NotifyLocalFireEvent_Cooked, SyncedTimeStamp) == 0x000000, "Member 'Firearm_Server_NotifyLocalFireEvent_Cooked::SyncedTimeStamp' has a wrong offset!");
static_assert(offsetof(Firearm_Server_NotifyLocalFireEvent_Cooked, ShootPos) == 0x000004, "Member 'Firearm_Server_NotifyLocalFireEvent_Cooked::ShootPos' has a wrong offset!");
static_assert(offsetof(Firearm_Server_NotifyLocalFireEvent_Cooked, ShootRot) == 0x000010, "Member 'Firearm_Server_NotifyLocalFireEvent_Cooked::ShootRot' has a wrong offset!");
static_assert(offsetof(Firearm_Server_NotifyLocalFireEvent_Cooked, InBulletIndex) == 0x00001C, "Member 'Firearm_Server_NotifyLocalFireEvent_Cooked::InBulletIndex' has a wrong offset!");
static_assert(offsetof(Firearm_Server_NotifyLocalFireEvent_Cooked, CookTime) == 0x000020, "Member 'Firearm_Server_NotifyLocalFireEvent_Cooked::CookTime' has a wrong offset!");

// Function UnrealProject.Firearm.Server_NotifyLocalReloadEvent
// 0x0004 (0x0004 - 0x0000)
struct Firearm_Server_NotifyLocalReloadEvent final
{
public:
	float                                         SyncedTimeStamp;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_Server_NotifyLocalReloadEvent) == 0x000004, "Wrong alignment on Firearm_Server_NotifyLocalReloadEvent");
static_assert(sizeof(Firearm_Server_NotifyLocalReloadEvent) == 0x000004, "Wrong size on Firearm_Server_NotifyLocalReloadEvent");
static_assert(offsetof(Firearm_Server_NotifyLocalReloadEvent, SyncedTimeStamp) == 0x000000, "Member 'Firearm_Server_NotifyLocalReloadEvent::SyncedTimeStamp' has a wrong offset!");

// Function UnrealProject.Firearm.Server_SetFiringMode
// 0x0004 (0x0004 - 0x0000)
struct Firearm_Server_SetFiringMode final
{
public:
	int32                                         firingModeIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_Server_SetFiringMode) == 0x000004, "Wrong alignment on Firearm_Server_SetFiringMode");
static_assert(sizeof(Firearm_Server_SetFiringMode) == 0x000004, "Wrong size on Firearm_Server_SetFiringMode");
static_assert(offsetof(Firearm_Server_SetFiringMode, firingModeIndex) == 0x000000, "Member 'Firearm_Server_SetFiringMode::firingModeIndex' has a wrong offset!");

// Function UnrealProject.Firearm.GetAvailableAmmo
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetAvailableAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetAvailableAmmo) == 0x000004, "Wrong alignment on Firearm_GetAvailableAmmo");
static_assert(sizeof(Firearm_GetAvailableAmmo) == 0x000004, "Wrong size on Firearm_GetAvailableAmmo");
static_assert(offsetof(Firearm_GetAvailableAmmo, ReturnValue) == 0x000000, "Member 'Firearm_GetAvailableAmmo::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetClipSize
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetClipSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetClipSize) == 0x000004, "Wrong alignment on Firearm_GetClipSize");
static_assert(sizeof(Firearm_GetClipSize) == 0x000004, "Wrong size on Firearm_GetClipSize");
static_assert(offsetof(Firearm_GetClipSize, ReturnValue) == 0x000000, "Member 'Firearm_GetClipSize::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetCookProgress
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetCookProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetCookProgress) == 0x000004, "Wrong alignment on Firearm_GetCookProgress");
static_assert(sizeof(Firearm_GetCookProgress) == 0x000004, "Wrong size on Firearm_GetCookProgress");
static_assert(offsetof(Firearm_GetCookProgress, ReturnValue) == 0x000000, "Member 'Firearm_GetCookProgress::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetCurrentAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetCurrentAmmo) == 0x000004, "Wrong alignment on Firearm_GetCurrentAmmo");
static_assert(sizeof(Firearm_GetCurrentAmmo) == 0x000004, "Wrong size on Firearm_GetCurrentAmmo");
static_assert(offsetof(Firearm_GetCurrentAmmo, ReturnValue) == 0x000000, "Member 'Firearm_GetCurrentAmmo::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetCurrentCookTime
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetCurrentCookTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetCurrentCookTime) == 0x000004, "Wrong alignment on Firearm_GetCurrentCookTime");
static_assert(sizeof(Firearm_GetCurrentCookTime) == 0x000004, "Wrong size on Firearm_GetCurrentCookTime");
static_assert(offsetof(Firearm_GetCurrentCookTime, ReturnValue) == 0x000000, "Member 'Firearm_GetCurrentCookTime::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetCurrentFiringMode
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetCurrentFiringMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetCurrentFiringMode) == 0x000004, "Wrong alignment on Firearm_GetCurrentFiringMode");
static_assert(sizeof(Firearm_GetCurrentFiringMode) == 0x000004, "Wrong size on Firearm_GetCurrentFiringMode");
static_assert(offsetof(Firearm_GetCurrentFiringMode, ReturnValue) == 0x000000, "Member 'Firearm_GetCurrentFiringMode::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetCurrentKickRotation
// 0x000C (0x000C - 0x0000)
struct Firearm_GetCurrentKickRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetCurrentKickRotation) == 0x000004, "Wrong alignment on Firearm_GetCurrentKickRotation");
static_assert(sizeof(Firearm_GetCurrentKickRotation) == 0x00000C, "Wrong size on Firearm_GetCurrentKickRotation");
static_assert(offsetof(Firearm_GetCurrentKickRotation, ReturnValue) == 0x000000, "Member 'Firearm_GetCurrentKickRotation::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetCurrentKickTranslation
// 0x000C (0x000C - 0x0000)
struct Firearm_GetCurrentKickTranslation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetCurrentKickTranslation) == 0x000004, "Wrong alignment on Firearm_GetCurrentKickTranslation");
static_assert(sizeof(Firearm_GetCurrentKickTranslation) == 0x00000C, "Wrong size on Firearm_GetCurrentKickTranslation");
static_assert(offsetof(Firearm_GetCurrentKickTranslation, ReturnValue) == 0x000000, "Member 'Firearm_GetCurrentKickTranslation::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetCurrentWeaponFeel
// 0x0060 (0x0060 - 0x0000)
struct Firearm_GetCurrentWeaponFeel final
{
public:
	struct FFirearmFeelResult                     ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetCurrentWeaponFeel) == 0x000008, "Wrong alignment on Firearm_GetCurrentWeaponFeel");
static_assert(sizeof(Firearm_GetCurrentWeaponFeel) == 0x000060, "Wrong size on Firearm_GetCurrentWeaponFeel");
static_assert(offsetof(Firearm_GetCurrentWeaponFeel, ReturnValue) == 0x000000, "Member 'Firearm_GetCurrentWeaponFeel::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetMagazineAttachment
// 0x0008 (0x0008 - 0x0000)
struct Firearm_GetMagazineAttachment final
{
public:
	class AMagazineAttachment*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetMagazineAttachment) == 0x000008, "Wrong alignment on Firearm_GetMagazineAttachment");
static_assert(sizeof(Firearm_GetMagazineAttachment) == 0x000008, "Wrong size on Firearm_GetMagazineAttachment");
static_assert(offsetof(Firearm_GetMagazineAttachment, ReturnValue) == 0x000000, "Member 'Firearm_GetMagazineAttachment::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetMode
// 0x0028 (0x0028 - 0x0000)
struct Firearm_GetMode final
{
public:
	struct FFirearmMode                           ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetMode) == 0x000008, "Wrong alignment on Firearm_GetMode");
static_assert(sizeof(Firearm_GetMode) == 0x000028, "Wrong size on Firearm_GetMode");
static_assert(offsetof(Firearm_GetMode, ReturnValue) == 0x000000, "Member 'Firearm_GetMode::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.GetReloadTime
// 0x0004 (0x0004 - 0x0000)
struct Firearm_GetReloadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_GetReloadTime) == 0x000004, "Wrong alignment on Firearm_GetReloadTime");
static_assert(sizeof(Firearm_GetReloadTime) == 0x000004, "Wrong size on Firearm_GetReloadTime");
static_assert(offsetof(Firearm_GetReloadTime, ReturnValue) == 0x000000, "Member 'Firearm_GetReloadTime::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.IsChambering
// 0x0001 (0x0001 - 0x0000)
struct Firearm_IsChambering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_IsChambering) == 0x000001, "Wrong alignment on Firearm_IsChambering");
static_assert(sizeof(Firearm_IsChambering) == 0x000001, "Wrong size on Firearm_IsChambering");
static_assert(offsetof(Firearm_IsChambering, ReturnValue) == 0x000000, "Member 'Firearm_IsChambering::ReturnValue' has a wrong offset!");

// Function UnrealProject.Firearm.IsFeederReady
// 0x0001 (0x0001 - 0x0000)
struct Firearm_IsFeederReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firearm_IsFeederReady) == 0x000001, "Wrong alignment on Firearm_IsFeederReady");
static_assert(sizeof(Firearm_IsFeederReady) == 0x000001, "Wrong size on Firearm_IsFeederReady");
static_assert(offsetof(Firearm_IsFeederReady, ReturnValue) == 0x000000, "Member 'Firearm_IsFeederReady::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.DestroyItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_DestroyItem final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_DestroyItem) == 0x000008, "Wrong alignment on InventoryComponent_DestroyItem");
static_assert(sizeof(InventoryComponent_DestroyItem) == 0x000010, "Wrong size on InventoryComponent_DestroyItem");
static_assert(offsetof(InventoryComponent_DestroyItem, Item) == 0x000000, "Member 'InventoryComponent_DestroyItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DestroyItem, Quantity) == 0x000008, "Member 'InventoryComponent_DestroyItem::Quantity' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DestroyItem, ReturnValue) == 0x00000C, "Member 'InventoryComponent_DestroyItem::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.DestroyItemsOfClass
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_DestroyItemsOfClass final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_DestroyItemsOfClass) == 0x000008, "Wrong alignment on InventoryComponent_DestroyItemsOfClass");
static_assert(sizeof(InventoryComponent_DestroyItemsOfClass) == 0x000010, "Wrong size on InventoryComponent_DestroyItemsOfClass");
static_assert(offsetof(InventoryComponent_DestroyItemsOfClass, ItemClass) == 0x000000, "Member 'InventoryComponent_DestroyItemsOfClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DestroyItemsOfClass, Quantity) == 0x000008, "Member 'InventoryComponent_DestroyItemsOfClass::Quantity' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DestroyItemsOfClass, ReturnValue) == 0x00000C, "Member 'InventoryComponent_DestroyItemsOfClass::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetPotencialEquipmentSlotIndex
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_GetPotencialEquipmentSlotIndex final
{
public:
	class AEquipment*                             Equipment;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_GetPotencialEquipmentSlotIndex) == 0x000008, "Wrong alignment on InventoryComponent_GetPotencialEquipmentSlotIndex");
static_assert(sizeof(InventoryComponent_GetPotencialEquipmentSlotIndex) == 0x000010, "Wrong size on InventoryComponent_GetPotencialEquipmentSlotIndex");
static_assert(offsetof(InventoryComponent_GetPotencialEquipmentSlotIndex, Equipment) == 0x000000, "Member 'InventoryComponent_GetPotencialEquipmentSlotIndex::Equipment' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetPotencialEquipmentSlotIndex, ReturnValue) == 0x000008, "Member 'InventoryComponent_GetPotencialEquipmentSlotIndex::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerAcquireEquipment
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ServerAcquireEquipment final
{
public:
	class AEquipment*                             Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ServerAcquireEquipment) == 0x000008, "Wrong alignment on InventoryComponent_ServerAcquireEquipment");
static_assert(sizeof(InventoryComponent_ServerAcquireEquipment) == 0x000010, "Wrong size on InventoryComponent_ServerAcquireEquipment");
static_assert(offsetof(InventoryComponent_ServerAcquireEquipment, Item) == 0x000000, "Member 'InventoryComponent_ServerAcquireEquipment::Item' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerAcquireEquipment, SlotIndex) == 0x000008, "Member 'InventoryComponent_ServerAcquireEquipment::SlotIndex' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerAcquireItem
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_ServerAcquireItem final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ServerAcquireItem) == 0x000008, "Wrong alignment on InventoryComponent_ServerAcquireItem");
static_assert(sizeof(InventoryComponent_ServerAcquireItem) == 0x000008, "Wrong size on InventoryComponent_ServerAcquireItem");
static_assert(offsetof(InventoryComponent_ServerAcquireItem, Item) == 0x000000, "Member 'InventoryComponent_ServerAcquireItem::Item' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerDestroyItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ServerDestroyItem final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ServerDestroyItem) == 0x000008, "Wrong alignment on InventoryComponent_ServerDestroyItem");
static_assert(sizeof(InventoryComponent_ServerDestroyItem) == 0x000010, "Wrong size on InventoryComponent_ServerDestroyItem");
static_assert(offsetof(InventoryComponent_ServerDestroyItem, Item) == 0x000000, "Member 'InventoryComponent_ServerDestroyItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerDestroyItem, Quantity) == 0x000008, "Member 'InventoryComponent_ServerDestroyItem::Quantity' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerDestroyItemsOfClass
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ServerDestroyItemsOfClass final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ServerDestroyItemsOfClass) == 0x000008, "Wrong alignment on InventoryComponent_ServerDestroyItemsOfClass");
static_assert(sizeof(InventoryComponent_ServerDestroyItemsOfClass) == 0x000010, "Wrong size on InventoryComponent_ServerDestroyItemsOfClass");
static_assert(offsetof(InventoryComponent_ServerDestroyItemsOfClass, ItemClass) == 0x000000, "Member 'InventoryComponent_ServerDestroyItemsOfClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerDestroyItemsOfClass, Quantity) == 0x000008, "Member 'InventoryComponent_ServerDestroyItemsOfClass::Quantity' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerDropItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ServerDropItem final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ServerDropItem) == 0x000008, "Wrong alignment on InventoryComponent_ServerDropItem");
static_assert(sizeof(InventoryComponent_ServerDropItem) == 0x000010, "Wrong size on InventoryComponent_ServerDropItem");
static_assert(offsetof(InventoryComponent_ServerDropItem, Item) == 0x000000, "Member 'InventoryComponent_ServerDropItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerDropItem, Quantity) == 0x000008, "Member 'InventoryComponent_ServerDropItem::Quantity' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerEquip
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ServerEquip final
{
public:
	class AEquipment*                             InEquipment;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSlotIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ServerEquip) == 0x000008, "Wrong alignment on InventoryComponent_ServerEquip");
static_assert(sizeof(InventoryComponent_ServerEquip) == 0x000010, "Wrong size on InventoryComponent_ServerEquip");
static_assert(offsetof(InventoryComponent_ServerEquip, InEquipment) == 0x000000, "Member 'InventoryComponent_ServerEquip::InEquipment' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerEquip, InSlotIndex) == 0x000008, "Member 'InventoryComponent_ServerEquip::InSlotIndex' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerPickupItem
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_ServerPickupItem final
{
public:
	class AItemPickup*                            ItemPickup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ServerPickupItem) == 0x000008, "Wrong alignment on InventoryComponent_ServerPickupItem");
static_assert(sizeof(InventoryComponent_ServerPickupItem) == 0x000018, "Wrong size on InventoryComponent_ServerPickupItem");
static_assert(offsetof(InventoryComponent_ServerPickupItem, ItemPickup) == 0x000000, "Member 'InventoryComponent_ServerPickupItem::ItemPickup' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerPickupItem, Item) == 0x000008, "Member 'InventoryComponent_ServerPickupItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerPickupItem, Quantity) == 0x000010, "Member 'InventoryComponent_ServerPickupItem::Quantity' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerPickupItems
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_ServerPickupItems final
{
public:
	class AItemPickup*                            ItemPickup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ServerPickupItems) == 0x000008, "Wrong alignment on InventoryComponent_ServerPickupItems");
static_assert(sizeof(InventoryComponent_ServerPickupItems) == 0x000008, "Wrong size on InventoryComponent_ServerPickupItems");
static_assert(offsetof(InventoryComponent_ServerPickupItems, ItemPickup) == 0x000000, "Member 'InventoryComponent_ServerPickupItems::ItemPickup' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerSetActiveWeapon
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ServerSetActiveWeapon final
{
public:
	class AWeapon*                                InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetLastActiveWeapon;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_ServerSetActiveWeapon) == 0x000008, "Wrong alignment on InventoryComponent_ServerSetActiveWeapon");
static_assert(sizeof(InventoryComponent_ServerSetActiveWeapon) == 0x000010, "Wrong size on InventoryComponent_ServerSetActiveWeapon");
static_assert(offsetof(InventoryComponent_ServerSetActiveWeapon, InWeapon) == 0x000000, "Member 'InventoryComponent_ServerSetActiveWeapon::InWeapon' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerSetActiveWeapon, bSetLastActiveWeapon) == 0x000008, "Member 'InventoryComponent_ServerSetActiveWeapon::bSetLastActiveWeapon' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerSwapItems
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_ServerSwapItems final
{
public:
	int32                                         IndexA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ServerSwapItems) == 0x000004, "Wrong alignment on InventoryComponent_ServerSwapItems");
static_assert(sizeof(InventoryComponent_ServerSwapItems) == 0x000008, "Wrong size on InventoryComponent_ServerSwapItems");
static_assert(offsetof(InventoryComponent_ServerSwapItems, IndexA) == 0x000000, "Member 'InventoryComponent_ServerSwapItems::IndexA' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerSwapItems, IndexB) == 0x000004, "Member 'InventoryComponent_ServerSwapItems::IndexB' has a wrong offset!");

// Function UnrealProject.InventoryComponent.ServerUnequip
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_ServerUnequip final
{
public:
	class AEquipment*                             InEquipment;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ServerUnequip) == 0x000008, "Wrong alignment on InventoryComponent_ServerUnequip");
static_assert(sizeof(InventoryComponent_ServerUnequip) == 0x000008, "Wrong size on InventoryComponent_ServerUnequip");
static_assert(offsetof(InventoryComponent_ServerUnequip, InEquipment) == 0x000000, "Member 'InventoryComponent_ServerUnequip::InEquipment' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetActiveWeapon
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetActiveWeapon final
{
public:
	class AWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetActiveWeapon) == 0x000008, "Wrong alignment on InventoryComponent_GetActiveWeapon");
static_assert(sizeof(InventoryComponent_GetActiveWeapon) == 0x000008, "Wrong size on InventoryComponent_GetActiveWeapon");
static_assert(offsetof(InventoryComponent_GetActiveWeapon, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetActiveWeapon::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetConsumingItem
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetConsumingItem final
{
public:
	class AConsumable*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetConsumingItem) == 0x000008, "Wrong alignment on InventoryComponent_GetConsumingItem");
static_assert(sizeof(InventoryComponent_GetConsumingItem) == 0x000008, "Wrong size on InventoryComponent_GetConsumingItem");
static_assert(offsetof(InventoryComponent_GetConsumingItem, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetConsumingItem::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetEquipmentBySlotType
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_GetEquipmentBySlotType final
{
public:
	class FString                                 SlotType;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEquipment*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetEquipmentBySlotType) == 0x000008, "Wrong alignment on InventoryComponent_GetEquipmentBySlotType");
static_assert(sizeof(InventoryComponent_GetEquipmentBySlotType) == 0x000018, "Wrong size on InventoryComponent_GetEquipmentBySlotType");
static_assert(offsetof(InventoryComponent_GetEquipmentBySlotType, SlotType) == 0x000000, "Member 'InventoryComponent_GetEquipmentBySlotType::SlotType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetEquipmentBySlotType, ReturnValue) == 0x000010, "Member 'InventoryComponent_GetEquipmentBySlotType::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetEquipmentSlots
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_GetEquipmentSlots final
{
public:
	TArray<struct FEquipmentSlot>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetEquipmentSlots) == 0x000008, "Wrong alignment on InventoryComponent_GetEquipmentSlots");
static_assert(sizeof(InventoryComponent_GetEquipmentSlots) == 0x000010, "Wrong size on InventoryComponent_GetEquipmentSlots");
static_assert(offsetof(InventoryComponent_GetEquipmentSlots, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetEquipmentSlots::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetFreeCapacity
// 0x0004 (0x0004 - 0x0000)
struct InventoryComponent_GetFreeCapacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetFreeCapacity) == 0x000004, "Wrong alignment on InventoryComponent_GetFreeCapacity");
static_assert(sizeof(InventoryComponent_GetFreeCapacity) == 0x000004, "Wrong size on InventoryComponent_GetFreeCapacity");
static_assert(offsetof(InventoryComponent_GetFreeCapacity, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetFreeCapacity::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetItemOfClass
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_GetItemOfClass final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetItemOfClass) == 0x000008, "Wrong alignment on InventoryComponent_GetItemOfClass");
static_assert(sizeof(InventoryComponent_GetItemOfClass) == 0x000010, "Wrong size on InventoryComponent_GetItemOfClass");
static_assert(offsetof(InventoryComponent_GetItemOfClass, ItemClass) == 0x000000, "Member 'InventoryComponent_GetItemOfClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetItemOfClass, ReturnValue) == 0x000008, "Member 'InventoryComponent_GetItemOfClass::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetItemQuantityByClass
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_GetItemQuantityByClass final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_GetItemQuantityByClass) == 0x000008, "Wrong alignment on InventoryComponent_GetItemQuantityByClass");
static_assert(sizeof(InventoryComponent_GetItemQuantityByClass) == 0x000010, "Wrong size on InventoryComponent_GetItemQuantityByClass");
static_assert(offsetof(InventoryComponent_GetItemQuantityByClass, ItemClass) == 0x000000, "Member 'InventoryComponent_GetItemQuantityByClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetItemQuantityByClass, ReturnValue) == 0x000008, "Member 'InventoryComponent_GetItemQuantityByClass::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetItemsOfClass
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_GetItemsOfClass final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AItem*>                          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetItemsOfClass) == 0x000008, "Wrong alignment on InventoryComponent_GetItemsOfClass");
static_assert(sizeof(InventoryComponent_GetItemsOfClass) == 0x000018, "Wrong size on InventoryComponent_GetItemsOfClass");
static_assert(offsetof(InventoryComponent_GetItemsOfClass, ItemClass) == 0x000000, "Member 'InventoryComponent_GetItemsOfClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetItemsOfClass, ReturnValue) == 0x000008, "Member 'InventoryComponent_GetItemsOfClass::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetLastActiveWeapon
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetLastActiveWeapon final
{
public:
	class AWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetLastActiveWeapon) == 0x000008, "Wrong alignment on InventoryComponent_GetLastActiveWeapon");
static_assert(sizeof(InventoryComponent_GetLastActiveWeapon) == 0x000008, "Wrong size on InventoryComponent_GetLastActiveWeapon");
static_assert(offsetof(InventoryComponent_GetLastActiveWeapon, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetLastActiveWeapon::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetOwnerCharacter final
{
public:
	class ANGDCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetOwnerCharacter) == 0x000008, "Wrong alignment on InventoryComponent_GetOwnerCharacter");
static_assert(sizeof(InventoryComponent_GetOwnerCharacter) == 0x000008, "Wrong size on InventoryComponent_GetOwnerCharacter");
static_assert(offsetof(InventoryComponent_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetSlotIndexOfEquipmentSlot
// 0x0028 (0x0028 - 0x0000)
struct InventoryComponent_GetSlotIndexOfEquipmentSlot final
{
public:
	struct FEquipmentSlot                         InEquipmentSlot;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_GetSlotIndexOfEquipmentSlot) == 0x000008, "Wrong alignment on InventoryComponent_GetSlotIndexOfEquipmentSlot");
static_assert(sizeof(InventoryComponent_GetSlotIndexOfEquipmentSlot) == 0x000028, "Wrong size on InventoryComponent_GetSlotIndexOfEquipmentSlot");
static_assert(offsetof(InventoryComponent_GetSlotIndexOfEquipmentSlot, InEquipmentSlot) == 0x000000, "Member 'InventoryComponent_GetSlotIndexOfEquipmentSlot::InEquipmentSlot' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetSlotIndexOfEquipmentSlot, ReturnValue) == 0x000020, "Member 'InventoryComponent_GetSlotIndexOfEquipmentSlot::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetTakenCapacity
// 0x0004 (0x0004 - 0x0000)
struct InventoryComponent_GetTakenCapacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetTakenCapacity) == 0x000004, "Wrong alignment on InventoryComponent_GetTakenCapacity");
static_assert(sizeof(InventoryComponent_GetTakenCapacity) == 0x000004, "Wrong size on InventoryComponent_GetTakenCapacity");
static_assert(offsetof(InventoryComponent_GetTakenCapacity, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetTakenCapacity::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.GetTotalCapacity
// 0x0004 (0x0004 - 0x0000)
struct InventoryComponent_GetTotalCapacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetTotalCapacity) == 0x000004, "Wrong alignment on InventoryComponent_GetTotalCapacity");
static_assert(sizeof(InventoryComponent_GetTotalCapacity) == 0x000004, "Wrong size on InventoryComponent_GetTotalCapacity");
static_assert(offsetof(InventoryComponent_GetTotalCapacity, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetTotalCapacity::ReturnValue' has a wrong offset!");

// Function UnrealProject.InventoryComponent.IsConsumingItem
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_IsConsumingItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_IsConsumingItem) == 0x000001, "Wrong alignment on InventoryComponent_IsConsumingItem");
static_assert(sizeof(InventoryComponent_IsConsumingItem) == 0x000001, "Wrong size on InventoryComponent_IsConsumingItem");
static_assert(offsetof(InventoryComponent_IsConsumingItem, ReturnValue) == 0x000000, "Member 'InventoryComponent_IsConsumingItem::ReturnValue' has a wrong offset!");

// Function UnrealProject.MagazineAttachment.OnReloadStep
// 0x0002 (0x0002 - 0x0000)
struct MagazineAttachment_OnReloadStep final
{
public:
	EMagazineReloadStep                           ReloadStep;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToWeapon;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineAttachment_OnReloadStep) == 0x000001, "Wrong alignment on MagazineAttachment_OnReloadStep");
static_assert(sizeof(MagazineAttachment_OnReloadStep) == 0x000002, "Wrong size on MagazineAttachment_OnReloadStep");
static_assert(offsetof(MagazineAttachment_OnReloadStep, ReloadStep) == 0x000000, "Member 'MagazineAttachment_OnReloadStep::ReloadStep' has a wrong offset!");
static_assert(offsetof(MagazineAttachment_OnReloadStep, bAttachToWeapon) == 0x000001, "Member 'MagazineAttachment_OnReloadStep::bAttachToWeapon' has a wrong offset!");

// Function UnrealProject.MeleeWeapon.CanHitTargets
// 0x0001 (0x0001 - 0x0000)
struct MeleeWeapon_CanHitTargets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeWeapon_CanHitTargets) == 0x000001, "Wrong alignment on MeleeWeapon_CanHitTargets");
static_assert(sizeof(MeleeWeapon_CanHitTargets) == 0x000001, "Wrong size on MeleeWeapon_CanHitTargets");
static_assert(offsetof(MeleeWeapon_CanHitTargets, ReturnValue) == 0x000000, "Member 'MeleeWeapon_CanHitTargets::ReturnValue' has a wrong offset!");

// Function UnrealProject.MeleeWeapon.IsSwinging
// 0x0001 (0x0001 - 0x0000)
struct MeleeWeapon_IsSwinging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeWeapon_IsSwinging) == 0x000001, "Wrong alignment on MeleeWeapon_IsSwinging");
static_assert(sizeof(MeleeWeapon_IsSwinging) == 0x000001, "Wrong size on MeleeWeapon_IsSwinging");
static_assert(offsetof(MeleeWeapon_IsSwinging, ReturnValue) == 0x000000, "Member 'MeleeWeapon_IsSwinging::ReturnValue' has a wrong offset!");

// Function UnrealProject.MeleeWeapon.OnHit
// 0x0088 (0x0088 - 0x0000)
struct MeleeWeapon_OnHit final
{
public:
	struct FHitResult                             InHit;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeWeapon_OnHit) == 0x000004, "Wrong alignment on MeleeWeapon_OnHit");
static_assert(sizeof(MeleeWeapon_OnHit) == 0x000088, "Wrong size on MeleeWeapon_OnHit");
static_assert(offsetof(MeleeWeapon_OnHit, InHit) == 0x000000, "Member 'MeleeWeapon_OnHit::InHit' has a wrong offset!");

// Function UnrealProject.NGDAudio.PostCallbackableAssociatedEvent
// 0x00A8 (0x00A8 - 0x0000)
struct NGDAudio_PostCallbackableAssociatedEvent final
{
public:
	class UNGDAkComponent*                        InAkComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPostSoundParams                       Params_0;                                          // 0x0008(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00A0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDAudio_PostCallbackableAssociatedEvent) == 0x000008, "Wrong alignment on NGDAudio_PostCallbackableAssociatedEvent");
static_assert(sizeof(NGDAudio_PostCallbackableAssociatedEvent) == 0x0000A8, "Wrong size on NGDAudio_PostCallbackableAssociatedEvent");
static_assert(offsetof(NGDAudio_PostCallbackableAssociatedEvent, InAkComponent) == 0x000000, "Member 'NGDAudio_PostCallbackableAssociatedEvent::InAkComponent' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostCallbackableAssociatedEvent, Params_0) == 0x000008, "Member 'NGDAudio_PostCallbackableAssociatedEvent::Params_0' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostCallbackableAssociatedEvent, ReturnValue) == 0x0000A0, "Member 'NGDAudio_PostCallbackableAssociatedEvent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDAudio.PostSound
// 0x0098 (0x0098 - 0x0000)
struct NGDAudio_PostSound final
{
public:
	struct FNGDSoundConfig                        InAudioConfig;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0058(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InContext;                                         // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAutoPost;                                        // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAutoDestroy;                                     // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDAkComponent*                        AkComponentToPostFrom;                             // 0x0078(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0080(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDAkComponent*                        ReturnValue;                                       // 0x0090(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDAudio_PostSound) == 0x000008, "Wrong alignment on NGDAudio_PostSound");
static_assert(sizeof(NGDAudio_PostSound) == 0x000098, "Wrong size on NGDAudio_PostSound");
static_assert(offsetof(NGDAudio_PostSound, InAudioConfig) == 0x000000, "Member 'NGDAudio_PostSound::InAudioConfig' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSound, InPosition) == 0x000058, "Member 'NGDAudio_PostSound::InPosition' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSound, InContext) == 0x000068, "Member 'NGDAudio_PostSound::InContext' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSound, InAutoPost) == 0x000070, "Member 'NGDAudio_PostSound::InAutoPost' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSound, InAutoDestroy) == 0x000071, "Member 'NGDAudio_PostSound::InAutoDestroy' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSound, AkComponentToPostFrom) == 0x000078, "Member 'NGDAudio_PostSound::AkComponentToPostFrom' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSound, InRotation) == 0x000080, "Member 'NGDAudio_PostSound::InRotation' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSound, ReturnValue) == 0x000090, "Member 'NGDAudio_PostSound::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDAudio.PostSoundWithParams
// 0x00A0 (0x00A0 - 0x0000)
struct NGDAudio_PostSoundWithParams final
{
public:
	struct FPostSoundParams                       Params_0;                                          // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UNGDAkComponent*                        ReturnValue;                                       // 0x0098(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDAudio_PostSoundWithParams) == 0x000008, "Wrong alignment on NGDAudio_PostSoundWithParams");
static_assert(sizeof(NGDAudio_PostSoundWithParams) == 0x0000A0, "Wrong size on NGDAudio_PostSoundWithParams");
static_assert(offsetof(NGDAudio_PostSoundWithParams, Params_0) == 0x000000, "Member 'NGDAudio_PostSoundWithParams::Params_0' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithParams, ReturnValue) == 0x000098, "Member 'NGDAudio_PostSoundWithParams::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDAudio.PostSoundWithSwitch
// 0x00B8 (0x00B8 - 0x0000)
struct NGDAudio_PostSoundWithSwitch final
{
public:
	struct FNGDSoundConfig                        InAudioConfig;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0058(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InContext;                                         // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDSoundSwitch                        AdditionalSwitches;                                // 0x0070(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InAutoPost;                                        // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAutoDestroy;                                     // 0x0091(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDAkComponent*                        AkComponentToPostFrom;                             // 0x0098(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x00A0(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDAkComponent*                        ReturnValue;                                       // 0x00B0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDAudio_PostSoundWithSwitch) == 0x000008, "Wrong alignment on NGDAudio_PostSoundWithSwitch");
static_assert(sizeof(NGDAudio_PostSoundWithSwitch) == 0x0000B8, "Wrong size on NGDAudio_PostSoundWithSwitch");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, InAudioConfig) == 0x000000, "Member 'NGDAudio_PostSoundWithSwitch::InAudioConfig' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, InPosition) == 0x000058, "Member 'NGDAudio_PostSoundWithSwitch::InPosition' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, InContext) == 0x000068, "Member 'NGDAudio_PostSoundWithSwitch::InContext' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, AdditionalSwitches) == 0x000070, "Member 'NGDAudio_PostSoundWithSwitch::AdditionalSwitches' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, InAutoPost) == 0x000090, "Member 'NGDAudio_PostSoundWithSwitch::InAutoPost' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, InAutoDestroy) == 0x000091, "Member 'NGDAudio_PostSoundWithSwitch::InAutoDestroy' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, AkComponentToPostFrom) == 0x000098, "Member 'NGDAudio_PostSoundWithSwitch::AkComponentToPostFrom' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, InRotation) == 0x0000A0, "Member 'NGDAudio_PostSoundWithSwitch::InRotation' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitch, ReturnValue) == 0x0000B0, "Member 'NGDAudio_PostSoundWithSwitch::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDAudio.PostSoundWithSwitches
// 0x00A8 (0x00A8 - 0x0000)
struct NGDAudio_PostSoundWithSwitches final
{
public:
	struct FNGDSoundConfig                        InAudioConfig;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0058(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InContext;                                         // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNGDSoundSwitch>                AdditionalSwitches;                                // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InAutoPost;                                        // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAutoDestroy;                                     // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDAkComponent*                        AkComponentToPostFrom;                             // 0x0088(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0090(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDAkComponent*                        ReturnValue;                                       // 0x00A0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDAudio_PostSoundWithSwitches) == 0x000008, "Wrong alignment on NGDAudio_PostSoundWithSwitches");
static_assert(sizeof(NGDAudio_PostSoundWithSwitches) == 0x0000A8, "Wrong size on NGDAudio_PostSoundWithSwitches");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, InAudioConfig) == 0x000000, "Member 'NGDAudio_PostSoundWithSwitches::InAudioConfig' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, InPosition) == 0x000058, "Member 'NGDAudio_PostSoundWithSwitches::InPosition' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, InContext) == 0x000068, "Member 'NGDAudio_PostSoundWithSwitches::InContext' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, AdditionalSwitches) == 0x000070, "Member 'NGDAudio_PostSoundWithSwitches::AdditionalSwitches' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, InAutoPost) == 0x000080, "Member 'NGDAudio_PostSoundWithSwitches::InAutoPost' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, InAutoDestroy) == 0x000081, "Member 'NGDAudio_PostSoundWithSwitches::InAutoDestroy' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, AkComponentToPostFrom) == 0x000088, "Member 'NGDAudio_PostSoundWithSwitches::AkComponentToPostFrom' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, InRotation) == 0x000090, "Member 'NGDAudio_PostSoundWithSwitches::InRotation' has a wrong offset!");
static_assert(offsetof(NGDAudio_PostSoundWithSwitches, ReturnValue) == 0x0000A0, "Member 'NGDAudio_PostSoundWithSwitches::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.ClientOnAcceptBoardContract
// 0x0010 (0x0010 - 0x0000)
struct NGDCharacter_ClientOnAcceptBoardContract final
{
public:
	struct FBoardContract                         InBoardContract;                                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_ClientOnAcceptBoardContract) == 0x000008, "Wrong alignment on NGDCharacter_ClientOnAcceptBoardContract");
static_assert(sizeof(NGDCharacter_ClientOnAcceptBoardContract) == 0x000010, "Wrong size on NGDCharacter_ClientOnAcceptBoardContract");
static_assert(offsetof(NGDCharacter_ClientOnAcceptBoardContract, InBoardContract) == 0x000000, "Member 'NGDCharacter_ClientOnAcceptBoardContract::InBoardContract' has a wrong offset!");

// Function UnrealProject.NGDCharacter.ClientOnAcceptUnBoardContract
// 0x0018 (0x0018 - 0x0000)
struct NGDCharacter_ClientOnAcceptUnBoardContract final
{
public:
	struct FUnBoardContract                       InUnBoardContract;                                 // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_ClientOnAcceptUnBoardContract) == 0x000008, "Wrong alignment on NGDCharacter_ClientOnAcceptUnBoardContract");
static_assert(sizeof(NGDCharacter_ClientOnAcceptUnBoardContract) == 0x000018, "Wrong size on NGDCharacter_ClientOnAcceptUnBoardContract");
static_assert(offsetof(NGDCharacter_ClientOnAcceptUnBoardContract, InUnBoardContract) == 0x000000, "Member 'NGDCharacter_ClientOnAcceptUnBoardContract::InUnBoardContract' has a wrong offset!");

// Function UnrealProject.NGDCharacter.ClientOnFailBoardContract
// 0x0010 (0x0010 - 0x0000)
struct NGDCharacter_ClientOnFailBoardContract final
{
public:
	class FString                                 ErrorStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_ClientOnFailBoardContract) == 0x000008, "Wrong alignment on NGDCharacter_ClientOnFailBoardContract");
static_assert(sizeof(NGDCharacter_ClientOnFailBoardContract) == 0x000010, "Wrong size on NGDCharacter_ClientOnFailBoardContract");
static_assert(offsetof(NGDCharacter_ClientOnFailBoardContract, ErrorStr) == 0x000000, "Member 'NGDCharacter_ClientOnFailBoardContract::ErrorStr' has a wrong offset!");

// Function UnrealProject.NGDCharacter.ClientOnFailUnBoardContract
// 0x0010 (0x0010 - 0x0000)
struct NGDCharacter_ClientOnFailUnBoardContract final
{
public:
	class FString                                 ErrorStr;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_ClientOnFailUnBoardContract) == 0x000008, "Wrong alignment on NGDCharacter_ClientOnFailUnBoardContract");
static_assert(sizeof(NGDCharacter_ClientOnFailUnBoardContract) == 0x000010, "Wrong size on NGDCharacter_ClientOnFailUnBoardContract");
static_assert(offsetof(NGDCharacter_ClientOnFailUnBoardContract, ErrorStr) == 0x000000, "Member 'NGDCharacter_ClientOnFailUnBoardContract::ErrorStr' has a wrong offset!");

// Function UnrealProject.NGDCharacter.Kill
// 0x0058 (0x0058 - 0x0000)
struct NGDCharacter_Kill final
{
public:
	class ANGDCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_Kill) == 0x000008, "Wrong alignment on NGDCharacter_Kill");
static_assert(sizeof(NGDCharacter_Kill) == 0x000058, "Wrong size on NGDCharacter_Kill");
static_assert(offsetof(NGDCharacter_Kill, Character) == 0x000000, "Member 'NGDCharacter_Kill::Character' has a wrong offset!");
static_assert(offsetof(NGDCharacter_Kill, DamageEvent) == 0x000008, "Member 'NGDCharacter_Kill::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDCharacter_Kill, EventInstigator) == 0x000048, "Member 'NGDCharacter_Kill::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDCharacter_Kill, DamageCauser) == 0x000050, "Member 'NGDCharacter_Kill::DamageCauser' has a wrong offset!");

// Function UnrealProject.NGDCharacter.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct NGDCharacter_MoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_MoveForward) == 0x000004, "Wrong alignment on NGDCharacter_MoveForward");
static_assert(sizeof(NGDCharacter_MoveForward) == 0x000004, "Wrong size on NGDCharacter_MoveForward");
static_assert(offsetof(NGDCharacter_MoveForward, Value) == 0x000000, "Member 'NGDCharacter_MoveForward::Value' has a wrong offset!");

// Function UnrealProject.NGDCharacter.MoveRight
// 0x0004 (0x0004 - 0x0000)
struct NGDCharacter_MoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_MoveRight) == 0x000004, "Wrong alignment on NGDCharacter_MoveRight");
static_assert(sizeof(NGDCharacter_MoveRight) == 0x000004, "Wrong size on NGDCharacter_MoveRight");
static_assert(offsetof(NGDCharacter_MoveRight, Value) == 0x000000, "Member 'NGDCharacter_MoveRight::Value' has a wrong offset!");

// Function UnrealProject.NGDCharacter.MulticastOnDeath
// 0x0050 (0x0050 - 0x0000)
struct NGDCharacter_MulticastOnDeath final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class ANGDCharacter*                          EventInstigator;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_MulticastOnDeath) == 0x000008, "Wrong alignment on NGDCharacter_MulticastOnDeath");
static_assert(sizeof(NGDCharacter_MulticastOnDeath) == 0x000050, "Wrong size on NGDCharacter_MulticastOnDeath");
static_assert(offsetof(NGDCharacter_MulticastOnDeath, DamageEvent) == 0x000000, "Member 'NGDCharacter_MulticastOnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDCharacter_MulticastOnDeath, EventInstigator) == 0x000040, "Member 'NGDCharacter_MulticastOnDeath::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDCharacter_MulticastOnDeath, DamageCauser) == 0x000048, "Member 'NGDCharacter_MulticastOnDeath::DamageCauser' has a wrong offset!");

// Function UnrealProject.NGDCharacter.OnDeath
// 0x0050 (0x0050 - 0x0000)
struct NGDCharacter_OnDeath final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_OnDeath) == 0x000008, "Wrong alignment on NGDCharacter_OnDeath");
static_assert(sizeof(NGDCharacter_OnDeath) == 0x000050, "Wrong size on NGDCharacter_OnDeath");
static_assert(offsetof(NGDCharacter_OnDeath, DamageEvent) == 0x000000, "Member 'NGDCharacter_OnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDCharacter_OnDeath, InstigatorController) == 0x000040, "Member 'NGDCharacter_OnDeath::InstigatorController' has a wrong offset!");
static_assert(offsetof(NGDCharacter_OnDeath, DamageCauser) == 0x000048, "Member 'NGDCharacter_OnDeath::DamageCauser' has a wrong offset!");

// Function UnrealProject.NGDCharacter.OnDeathCosmetics
// 0x0050 (0x0050 - 0x0000)
struct NGDCharacter_OnDeathCosmetics final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ANGDCharacter*                          EventInstigator;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_OnDeathCosmetics) == 0x000008, "Wrong alignment on NGDCharacter_OnDeathCosmetics");
static_assert(sizeof(NGDCharacter_OnDeathCosmetics) == 0x000050, "Wrong size on NGDCharacter_OnDeathCosmetics");
static_assert(offsetof(NGDCharacter_OnDeathCosmetics, DamageEvent) == 0x000000, "Member 'NGDCharacter_OnDeathCosmetics::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDCharacter_OnDeathCosmetics, EventInstigator) == 0x000040, "Member 'NGDCharacter_OnDeathCosmetics::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDCharacter_OnDeathCosmetics, DamageCauser) == 0x000048, "Member 'NGDCharacter_OnDeathCosmetics::DamageCauser' has a wrong offset!");

// Function UnrealProject.NGDCharacter.OnRep_BoardContract
// 0x0010 (0x0010 - 0x0000)
struct NGDCharacter_OnRep_BoardContract final
{
public:
	struct FBoardContract                         LastBoardContract;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_OnRep_BoardContract) == 0x000008, "Wrong alignment on NGDCharacter_OnRep_BoardContract");
static_assert(sizeof(NGDCharacter_OnRep_BoardContract) == 0x000010, "Wrong size on NGDCharacter_OnRep_BoardContract");
static_assert(offsetof(NGDCharacter_OnRep_BoardContract, LastBoardContract) == 0x000000, "Member 'NGDCharacter_OnRep_BoardContract::LastBoardContract' has a wrong offset!");

// Function UnrealProject.NGDCharacter.OnRep_ControllerRotation
// 0x000C (0x000C - 0x0000)
struct NGDCharacter_OnRep_ControllerRotation final
{
public:
	struct FRotator                               OldRotator;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_OnRep_ControllerRotation) == 0x000004, "Wrong alignment on NGDCharacter_OnRep_ControllerRotation");
static_assert(sizeof(NGDCharacter_OnRep_ControllerRotation) == 0x00000C, "Wrong size on NGDCharacter_OnRep_ControllerRotation");
static_assert(offsetof(NGDCharacter_OnRep_ControllerRotation, OldRotator) == 0x000000, "Member 'NGDCharacter_OnRep_ControllerRotation::OldRotator' has a wrong offset!");

// Function UnrealProject.NGDCharacter.OnRep_ExtraFlags
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_OnRep_ExtraFlags final
{
public:
	ENGDCharacterExtraFlags                       OldExtraFlag;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_OnRep_ExtraFlags) == 0x000001, "Wrong alignment on NGDCharacter_OnRep_ExtraFlags");
static_assert(sizeof(NGDCharacter_OnRep_ExtraFlags) == 0x000001, "Wrong size on NGDCharacter_OnRep_ExtraFlags");
static_assert(offsetof(NGDCharacter_OnRep_ExtraFlags, OldExtraFlag) == 0x000000, "Member 'NGDCharacter_OnRep_ExtraFlags::OldExtraFlag' has a wrong offset!");

// Function UnrealProject.NGDCharacter.OnRep_LocomotionFlags
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_OnRep_LocomotionFlags final
{
public:
	ENGDCharacterLocomotionFlags                  OldLocomotionFlag;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_OnRep_LocomotionFlags) == 0x000001, "Wrong alignment on NGDCharacter_OnRep_LocomotionFlags");
static_assert(sizeof(NGDCharacter_OnRep_LocomotionFlags) == 0x000001, "Wrong size on NGDCharacter_OnRep_LocomotionFlags");
static_assert(offsetof(NGDCharacter_OnRep_LocomotionFlags, OldLocomotionFlag) == 0x000000, "Member 'NGDCharacter_OnRep_LocomotionFlags::OldLocomotionFlag' has a wrong offset!");

// Function UnrealProject.NGDCharacter.OnRep_UnBoardContract
// 0x0018 (0x0018 - 0x0000)
struct NGDCharacter_OnRep_UnBoardContract final
{
public:
	struct FUnBoardContract                       LastUnBoardContract;                               // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_OnRep_UnBoardContract) == 0x000008, "Wrong alignment on NGDCharacter_OnRep_UnBoardContract");
static_assert(sizeof(NGDCharacter_OnRep_UnBoardContract) == 0x000018, "Wrong size on NGDCharacter_OnRep_UnBoardContract");
static_assert(offsetof(NGDCharacter_OnRep_UnBoardContract, LastUnBoardContract) == 0x000000, "Member 'NGDCharacter_OnRep_UnBoardContract::LastUnBoardContract' has a wrong offset!");

// Function UnrealProject.NGDCharacter.OnTakeDamage
// 0x0060 (0x0060 - 0x0000)
struct NGDCharacter_OnTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDCharacter_OnTakeDamage) == 0x000008, "Wrong alignment on NGDCharacter_OnTakeDamage");
static_assert(sizeof(NGDCharacter_OnTakeDamage) == 0x000060, "Wrong size on NGDCharacter_OnTakeDamage");
static_assert(offsetof(NGDCharacter_OnTakeDamage, Damage) == 0x000000, "Member 'NGDCharacter_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(NGDCharacter_OnTakeDamage, DamageEvent) == 0x000008, "Member 'NGDCharacter_OnTakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDCharacter_OnTakeDamage, EventInstigator) == 0x000048, "Member 'NGDCharacter_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDCharacter_OnTakeDamage, DamageCauser) == 0x000050, "Member 'NGDCharacter_OnTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(NGDCharacter_OnTakeDamage, ReturnValue) == 0x000058, "Member 'NGDCharacter_OnTakeDamage::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.RefreshCharacterRotation
// 0x000C (0x000C - 0x0000)
struct NGDCharacter_RefreshCharacterRotation final
{
public:
	struct FRotator                               InRotationToSet;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_RefreshCharacterRotation) == 0x000004, "Wrong alignment on NGDCharacter_RefreshCharacterRotation");
static_assert(sizeof(NGDCharacter_RefreshCharacterRotation) == 0x00000C, "Wrong size on NGDCharacter_RefreshCharacterRotation");
static_assert(offsetof(NGDCharacter_RefreshCharacterRotation, InRotationToSet) == 0x000000, "Member 'NGDCharacter_RefreshCharacterRotation::InRotationToSet' has a wrong offset!");

// Function UnrealProject.NGDCharacter.ServerRequestBoardContract
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacter_ServerRequestBoardContract final
{
public:
	class APawn*                                  Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_ServerRequestBoardContract) == 0x000008, "Wrong alignment on NGDCharacter_ServerRequestBoardContract");
static_assert(sizeof(NGDCharacter_ServerRequestBoardContract) == 0x000008, "Wrong size on NGDCharacter_ServerRequestBoardContract");
static_assert(offsetof(NGDCharacter_ServerRequestBoardContract, Vehicle) == 0x000000, "Member 'NGDCharacter_ServerRequestBoardContract::Vehicle' has a wrong offset!");

// Function UnrealProject.NGDCharacter.ServerRequestUnBoardContract
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacter_ServerRequestUnBoardContract final
{
public:
	class APawn*                                  Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_ServerRequestUnBoardContract) == 0x000008, "Wrong alignment on NGDCharacter_ServerRequestUnBoardContract");
static_assert(sizeof(NGDCharacter_ServerRequestUnBoardContract) == 0x000008, "Wrong size on NGDCharacter_ServerRequestUnBoardContract");
static_assert(offsetof(NGDCharacter_ServerRequestUnBoardContract, Vehicle) == 0x000000, "Member 'NGDCharacter_ServerRequestUnBoardContract::Vehicle' has a wrong offset!");

// Function UnrealProject.NGDCharacter.SetMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct NGDCharacter_SetMouseSensitivity final
{
public:
	float                                         InMouseSensitivity;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_SetMouseSensitivity) == 0x000004, "Wrong alignment on NGDCharacter_SetMouseSensitivity");
static_assert(sizeof(NGDCharacter_SetMouseSensitivity) == 0x000004, "Wrong size on NGDCharacter_SetMouseSensitivity");
static_assert(offsetof(NGDCharacter_SetMouseSensitivity, InMouseSensitivity) == 0x000000, "Member 'NGDCharacter_SetMouseSensitivity::InMouseSensitivity' has a wrong offset!");

// Function UnrealProject.NGDCharacter.SetScopeSensitivity
// 0x0004 (0x0004 - 0x0000)
struct NGDCharacter_SetScopeSensitivity final
{
public:
	float                                         InScopeSensitivity;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_SetScopeSensitivity) == 0x000004, "Wrong alignment on NGDCharacter_SetScopeSensitivity");
static_assert(sizeof(NGDCharacter_SetScopeSensitivity) == 0x000004, "Wrong size on NGDCharacter_SetScopeSensitivity");
static_assert(offsetof(NGDCharacter_SetScopeSensitivity, InScopeSensitivity) == 0x000000, "Member 'NGDCharacter_SetScopeSensitivity::InScopeSensitivity' has a wrong offset!");

// Function UnrealProject.NGDCharacter.UpdateAnimData
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacter_UpdateAnimData final
{
public:
	class UNGDCharacterAnimInstance*              Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_UpdateAnimData) == 0x000008, "Wrong alignment on NGDCharacter_UpdateAnimData");
static_assert(sizeof(NGDCharacter_UpdateAnimData) == 0x000008, "Wrong size on NGDCharacter_UpdateAnimData");
static_assert(offsetof(NGDCharacter_UpdateAnimData, Instance) == 0x000000, "Member 'NGDCharacter_UpdateAnimData::Instance' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetExtraFlags
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_GetExtraFlags final
{
public:
	ENGDCharacterExtraFlags                       ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetExtraFlags) == 0x000001, "Wrong alignment on NGDCharacter_GetExtraFlags");
static_assert(sizeof(NGDCharacter_GetExtraFlags) == 0x000001, "Wrong size on NGDCharacter_GetExtraFlags");
static_assert(offsetof(NGDCharacter_GetExtraFlags, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetExtraFlags::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetHitRegistrationCollider
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacter_GetHitRegistrationCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetHitRegistrationCollider) == 0x000008, "Wrong alignment on NGDCharacter_GetHitRegistrationCollider");
static_assert(sizeof(NGDCharacter_GetHitRegistrationCollider) == 0x000008, "Wrong size on NGDCharacter_GetHitRegistrationCollider");
static_assert(offsetof(NGDCharacter_GetHitRegistrationCollider, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetHitRegistrationCollider::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetLocomotionFlags
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_GetLocomotionFlags final
{
public:
	ENGDCharacterLocomotionFlags                  ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetLocomotionFlags) == 0x000001, "Wrong alignment on NGDCharacter_GetLocomotionFlags");
static_assert(sizeof(NGDCharacter_GetLocomotionFlags) == 0x000001, "Wrong size on NGDCharacter_GetLocomotionFlags");
static_assert(offsetof(NGDCharacter_GetLocomotionFlags, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetLocomotionFlags::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetMortalityComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacter_GetMortalityComponent final
{
public:
	class UNGDMortalityComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetMortalityComponent) == 0x000008, "Wrong alignment on NGDCharacter_GetMortalityComponent");
static_assert(sizeof(NGDCharacter_GetMortalityComponent) == 0x000008, "Wrong size on NGDCharacter_GetMortalityComponent");
static_assert(offsetof(NGDCharacter_GetMortalityComponent, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetMortalityComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetMovementInputVector
// 0x000C (0x000C - 0x0000)
struct NGDCharacter_GetMovementInputVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetMovementInputVector) == 0x000004, "Wrong alignment on NGDCharacter_GetMovementInputVector");
static_assert(sizeof(NGDCharacter_GetMovementInputVector) == 0x00000C, "Wrong size on NGDCharacter_GetMovementInputVector");
static_assert(offsetof(NGDCharacter_GetMovementInputVector, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetMovementInputVector::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetRewindableMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacter_GetRewindableMeshComponent final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetRewindableMeshComponent) == 0x000008, "Wrong alignment on NGDCharacter_GetRewindableMeshComponent");
static_assert(sizeof(NGDCharacter_GetRewindableMeshComponent) == 0x000008, "Wrong size on NGDCharacter_GetRewindableMeshComponent");
static_assert(offsetof(NGDCharacter_GetRewindableMeshComponent, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetRewindableMeshComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetRewindCollider
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacter_GetRewindCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetRewindCollider) == 0x000008, "Wrong alignment on NGDCharacter_GetRewindCollider");
static_assert(sizeof(NGDCharacter_GetRewindCollider) == 0x000008, "Wrong size on NGDCharacter_GetRewindCollider");
static_assert(offsetof(NGDCharacter_GetRewindCollider, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetRewindCollider::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetRewindComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacter_GetRewindComponent final
{
public:
	class UNGDRewindComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetRewindComponent) == 0x000008, "Wrong alignment on NGDCharacter_GetRewindComponent");
static_assert(sizeof(NGDCharacter_GetRewindComponent) == 0x000008, "Wrong size on NGDCharacter_GetRewindComponent");
static_assert(offsetof(NGDCharacter_GetRewindComponent, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetRewindComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.GetWWiseActorGroupSwitchValue
// 0x0010 (0x0010 - 0x0000)
struct NGDCharacter_GetWWiseActorGroupSwitchValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_GetWWiseActorGroupSwitchValue) == 0x000008, "Wrong alignment on NGDCharacter_GetWWiseActorGroupSwitchValue");
static_assert(sizeof(NGDCharacter_GetWWiseActorGroupSwitchValue) == 0x000010, "Wrong size on NGDCharacter_GetWWiseActorGroupSwitchValue");
static_assert(offsetof(NGDCharacter_GetWWiseActorGroupSwitchValue, ReturnValue) == 0x000000, "Member 'NGDCharacter_GetWWiseActorGroupSwitchValue::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsADS
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsADS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsADS) == 0x000001, "Wrong alignment on NGDCharacter_IsADS");
static_assert(sizeof(NGDCharacter_IsADS) == 0x000001, "Wrong size on NGDCharacter_IsADS");
static_assert(offsetof(NGDCharacter_IsADS, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsADS::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsBoarded
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsBoarded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsBoarded) == 0x000001, "Wrong alignment on NGDCharacter_IsBoarded");
static_assert(sizeof(NGDCharacter_IsBoarded) == 0x000001, "Wrong size on NGDCharacter_IsBoarded");
static_assert(offsetof(NGDCharacter_IsBoarded, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsBoarded::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsConsuming
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsConsuming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsConsuming) == 0x000001, "Wrong alignment on NGDCharacter_IsConsuming");
static_assert(sizeof(NGDCharacter_IsConsuming) == 0x000001, "Wrong size on NGDCharacter_IsConsuming");
static_assert(offsetof(NGDCharacter_IsConsuming, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsConsuming::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsCrouched
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsCrouched final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsCrouched) == 0x000001, "Wrong alignment on NGDCharacter_IsCrouched");
static_assert(sizeof(NGDCharacter_IsCrouched) == 0x000001, "Wrong size on NGDCharacter_IsCrouched");
static_assert(offsetof(NGDCharacter_IsCrouched, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsCrouched::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFalling
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFalling) == 0x000001, "Wrong alignment on NGDCharacter_IsFalling");
static_assert(sizeof(NGDCharacter_IsFalling) == 0x000001, "Wrong size on NGDCharacter_IsFalling");
static_assert(offsetof(NGDCharacter_IsFalling, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFalling::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFiring) == 0x000001, "Wrong alignment on NGDCharacter_IsFiring");
static_assert(sizeof(NGDCharacter_IsFiring) == 0x000001, "Wrong size on NGDCharacter_IsFiring");
static_assert(offsetof(NGDCharacter_IsFiring, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFiring::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFirstPerson) == 0x000001, "Wrong alignment on NGDCharacter_IsFirstPerson");
static_assert(sizeof(NGDCharacter_IsFirstPerson) == 0x000001, "Wrong size on NGDCharacter_IsFirstPerson");
static_assert(offsetof(NGDCharacter_IsFirstPerson, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFlagCrouching
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFlagCrouching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFlagCrouching) == 0x000001, "Wrong alignment on NGDCharacter_IsFlagCrouching");
static_assert(sizeof(NGDCharacter_IsFlagCrouching) == 0x000001, "Wrong size on NGDCharacter_IsFlagCrouching");
static_assert(offsetof(NGDCharacter_IsFlagCrouching, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFlagCrouching::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFlagJumping
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFlagJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFlagJumping) == 0x000001, "Wrong alignment on NGDCharacter_IsFlagJumping");
static_assert(sizeof(NGDCharacter_IsFlagJumping) == 0x000001, "Wrong size on NGDCharacter_IsFlagJumping");
static_assert(offsetof(NGDCharacter_IsFlagJumping, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFlagJumping::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFlagReloading
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFlagReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFlagReloading) == 0x000001, "Wrong alignment on NGDCharacter_IsFlagReloading");
static_assert(sizeof(NGDCharacter_IsFlagReloading) == 0x000001, "Wrong size on NGDCharacter_IsFlagReloading");
static_assert(offsetof(NGDCharacter_IsFlagReloading, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFlagReloading::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFlagWeaponDrawed
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFlagWeaponDrawed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFlagWeaponDrawed) == 0x000001, "Wrong alignment on NGDCharacter_IsFlagWeaponDrawed");
static_assert(sizeof(NGDCharacter_IsFlagWeaponDrawed) == 0x000001, "Wrong size on NGDCharacter_IsFlagWeaponDrawed");
static_assert(offsetof(NGDCharacter_IsFlagWeaponDrawed, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFlagWeaponDrawed::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFlying
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFlying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFlying) == 0x000001, "Wrong alignment on NGDCharacter_IsFlying");
static_assert(sizeof(NGDCharacter_IsFlying) == 0x000001, "Wrong size on NGDCharacter_IsFlying");
static_assert(offsetof(NGDCharacter_IsFlying, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFlying::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFocusing
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFocusing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFocusing) == 0x000001, "Wrong alignment on NGDCharacter_IsFocusing");
static_assert(sizeof(NGDCharacter_IsFocusing) == 0x000001, "Wrong size on NGDCharacter_IsFocusing");
static_assert(offsetof(NGDCharacter_IsFocusing, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFocusing::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsFreeLooking
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsFreeLooking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsFreeLooking) == 0x000001, "Wrong alignment on NGDCharacter_IsFreeLooking");
static_assert(sizeof(NGDCharacter_IsFreeLooking) == 0x000001, "Wrong size on NGDCharacter_IsFreeLooking");
static_assert(offsetof(NGDCharacter_IsFreeLooking, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsFreeLooking::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsInsideBuilding
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsInsideBuilding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsInsideBuilding) == 0x000001, "Wrong alignment on NGDCharacter_IsInsideBuilding");
static_assert(sizeof(NGDCharacter_IsInsideBuilding) == 0x000001, "Wrong size on NGDCharacter_IsInsideBuilding");
static_assert(offsetof(NGDCharacter_IsInsideBuilding, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsInsideBuilding::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsInventoryOpen
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsInventoryOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsInventoryOpen) == 0x000001, "Wrong alignment on NGDCharacter_IsInventoryOpen");
static_assert(sizeof(NGDCharacter_IsInventoryOpen) == 0x000001, "Wrong size on NGDCharacter_IsInventoryOpen");
static_assert(offsetof(NGDCharacter_IsInventoryOpen, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsInventoryOpen::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsLeaningLeft
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsLeaningLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsLeaningLeft) == 0x000001, "Wrong alignment on NGDCharacter_IsLeaningLeft");
static_assert(sizeof(NGDCharacter_IsLeaningLeft) == 0x000001, "Wrong size on NGDCharacter_IsLeaningLeft");
static_assert(offsetof(NGDCharacter_IsLeaningLeft, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsLeaningLeft::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsLeaningRight
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsLeaningRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsLeaningRight) == 0x000001, "Wrong alignment on NGDCharacter_IsLeaningRight");
static_assert(sizeof(NGDCharacter_IsLeaningRight) == 0x000001, "Wrong size on NGDCharacter_IsLeaningRight");
static_assert(offsetof(NGDCharacter_IsLeaningRight, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsLeaningRight::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsLocalPlayer) == 0x000001, "Wrong alignment on NGDCharacter_IsLocalPlayer");
static_assert(sizeof(NGDCharacter_IsLocalPlayer) == 0x000001, "Wrong size on NGDCharacter_IsLocalPlayer");
static_assert(offsetof(NGDCharacter_IsLocalPlayer, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsProning
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsProning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsProning) == 0x000001, "Wrong alignment on NGDCharacter_IsProning");
static_assert(sizeof(NGDCharacter_IsProning) == 0x000001, "Wrong size on NGDCharacter_IsProning");
static_assert(offsetof(NGDCharacter_IsProning, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsProning::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsReloading) == 0x000001, "Wrong alignment on NGDCharacter_IsReloading");
static_assert(sizeof(NGDCharacter_IsReloading) == 0x000001, "Wrong size on NGDCharacter_IsReloading");
static_assert(offsetof(NGDCharacter_IsReloading, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsReloading::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsRewindRelevant
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsRewindRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsRewindRelevant) == 0x000001, "Wrong alignment on NGDCharacter_IsRewindRelevant");
static_assert(sizeof(NGDCharacter_IsRewindRelevant) == 0x000001, "Wrong size on NGDCharacter_IsRewindRelevant");
static_assert(offsetof(NGDCharacter_IsRewindRelevant, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsRewindRelevant::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsSliding
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsSliding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsSliding) == 0x000001, "Wrong alignment on NGDCharacter_IsSliding");
static_assert(sizeof(NGDCharacter_IsSliding) == 0x000001, "Wrong size on NGDCharacter_IsSliding");
static_assert(offsetof(NGDCharacter_IsSliding, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsSliding::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsSlowDown
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsSlowDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsSlowDown) == 0x000001, "Wrong alignment on NGDCharacter_IsSlowDown");
static_assert(sizeof(NGDCharacter_IsSlowDown) == 0x000001, "Wrong size on NGDCharacter_IsSlowDown");
static_assert(offsetof(NGDCharacter_IsSlowDown, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsSlowDown::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacter.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct NGDCharacter_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacter_IsSprinting) == 0x000001, "Wrong alignment on NGDCharacter_IsSprinting");
static_assert(sizeof(NGDCharacter_IsSprinting) == 0x000001, "Wrong size on NGDCharacter_IsSprinting");
static_assert(offsetof(NGDCharacter_IsSprinting, ReturnValue) == 0x000000, "Member 'NGDCharacter_IsSprinting::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacterAnimInstance.CharacterHasExtraFlag
// 0x0002 (0x0002 - 0x0000)
struct NGDCharacterAnimInstance_CharacterHasExtraFlag final
{
public:
	ENGDCharacterExtraFlags                       FlagToCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacterAnimInstance_CharacterHasExtraFlag) == 0x000001, "Wrong alignment on NGDCharacterAnimInstance_CharacterHasExtraFlag");
static_assert(sizeof(NGDCharacterAnimInstance_CharacterHasExtraFlag) == 0x000002, "Wrong size on NGDCharacterAnimInstance_CharacterHasExtraFlag");
static_assert(offsetof(NGDCharacterAnimInstance_CharacterHasExtraFlag, FlagToCheck) == 0x000000, "Member 'NGDCharacterAnimInstance_CharacterHasExtraFlag::FlagToCheck' has a wrong offset!");
static_assert(offsetof(NGDCharacterAnimInstance_CharacterHasExtraFlag, ReturnValue) == 0x000001, "Member 'NGDCharacterAnimInstance_CharacterHasExtraFlag::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacterAnimInstance.CharacterHasLocomotionFlag
// 0x0002 (0x0002 - 0x0000)
struct NGDCharacterAnimInstance_CharacterHasLocomotionFlag final
{
public:
	ENGDCharacterLocomotionFlags                  FlagToCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacterAnimInstance_CharacterHasLocomotionFlag) == 0x000001, "Wrong alignment on NGDCharacterAnimInstance_CharacterHasLocomotionFlag");
static_assert(sizeof(NGDCharacterAnimInstance_CharacterHasLocomotionFlag) == 0x000002, "Wrong size on NGDCharacterAnimInstance_CharacterHasLocomotionFlag");
static_assert(offsetof(NGDCharacterAnimInstance_CharacterHasLocomotionFlag, FlagToCheck) == 0x000000, "Member 'NGDCharacterAnimInstance_CharacterHasLocomotionFlag::FlagToCheck' has a wrong offset!");
static_assert(offsetof(NGDCharacterAnimInstance_CharacterHasLocomotionFlag, ReturnValue) == 0x000001, "Member 'NGDCharacterAnimInstance_CharacterHasLocomotionFlag::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacterAnimInstance.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacterAnimInstance_GetOwnerCharacter final
{
public:
	class ANGDCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacterAnimInstance_GetOwnerCharacter) == 0x000008, "Wrong alignment on NGDCharacterAnimInstance_GetOwnerCharacter");
static_assert(sizeof(NGDCharacterAnimInstance_GetOwnerCharacter) == 0x000008, "Wrong size on NGDCharacterAnimInstance_GetOwnerCharacter");
static_assert(offsetof(NGDCharacterAnimInstance_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'NGDCharacterAnimInstance_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacterAnimInstance.OnFootstepEvent
// 0x0002 (0x0002 - 0x0000)
struct NGDCharacterAnimInstance_OnFootstepEvent final
{
public:
	bool                                          isLeftFoot;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLanding;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacterAnimInstance_OnFootstepEvent) == 0x000001, "Wrong alignment on NGDCharacterAnimInstance_OnFootstepEvent");
static_assert(sizeof(NGDCharacterAnimInstance_OnFootstepEvent) == 0x000002, "Wrong size on NGDCharacterAnimInstance_OnFootstepEvent");
static_assert(offsetof(NGDCharacterAnimInstance_OnFootstepEvent, isLeftFoot) == 0x000000, "Member 'NGDCharacterAnimInstance_OnFootstepEvent::isLeftFoot' has a wrong offset!");
static_assert(offsetof(NGDCharacterAnimInstance_OnFootstepEvent, isLanding) == 0x000001, "Member 'NGDCharacterAnimInstance_OnFootstepEvent::isLanding' has a wrong offset!");

// Function UnrealProject.NGDCharacterAnimInstance.OnWeaponDraw
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacterAnimInstance_OnWeaponDraw final
{
public:
	class AWeapon*                                WeaponDrawed;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacterAnimInstance_OnWeaponDraw) == 0x000008, "Wrong alignment on NGDCharacterAnimInstance_OnWeaponDraw");
static_assert(sizeof(NGDCharacterAnimInstance_OnWeaponDraw) == 0x000008, "Wrong size on NGDCharacterAnimInstance_OnWeaponDraw");
static_assert(offsetof(NGDCharacterAnimInstance_OnWeaponDraw, WeaponDrawed) == 0x000000, "Member 'NGDCharacterAnimInstance_OnWeaponDraw::WeaponDrawed' has a wrong offset!");

// Function UnrealProject.NGDCharacterAnimInstance.OnWeaponHolster
// 0x0008 (0x0008 - 0x0000)
struct NGDCharacterAnimInstance_OnWeaponHolster final
{
public:
	class AWeapon*                                WeaponHolsted;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacterAnimInstance_OnWeaponHolster) == 0x000008, "Wrong alignment on NGDCharacterAnimInstance_OnWeaponHolster");
static_assert(sizeof(NGDCharacterAnimInstance_OnWeaponHolster) == 0x000008, "Wrong size on NGDCharacterAnimInstance_OnWeaponHolster");
static_assert(offsetof(NGDCharacterAnimInstance_OnWeaponHolster, WeaponHolsted) == 0x000000, "Member 'NGDCharacterAnimInstance_OnWeaponHolster::WeaponHolsted' has a wrong offset!");

// Function UnrealProject.NGDCharacterAnimInstance.WeaponHasFlag
// 0x0002 (0x0002 - 0x0000)
struct NGDCharacterAnimInstance_WeaponHasFlag final
{
public:
	EItemFlags                                    FlagToCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCharacterAnimInstance_WeaponHasFlag) == 0x000001, "Wrong alignment on NGDCharacterAnimInstance_WeaponHasFlag");
static_assert(sizeof(NGDCharacterAnimInstance_WeaponHasFlag) == 0x000002, "Wrong size on NGDCharacterAnimInstance_WeaponHasFlag");
static_assert(offsetof(NGDCharacterAnimInstance_WeaponHasFlag, FlagToCheck) == 0x000000, "Member 'NGDCharacterAnimInstance_WeaponHasFlag::FlagToCheck' has a wrong offset!");
static_assert(offsetof(NGDCharacterAnimInstance_WeaponHasFlag, ReturnValue) == 0x000001, "Member 'NGDCharacterAnimInstance_WeaponHasFlag::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCharacterMovementComponent.ServerCustomMoveDual
// 0x0058 (0x0058 - 0x0000)
struct NGDCharacterMovementComponent_ServerCustomMoveDual final
{
public:
	float                                         TimeStamp0;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  InAccel0;                                          // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PendingFlags;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PendingExtraFlags;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        View0;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  InAccel;                                           // 0x001C(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLoc;                                         // 0x0028(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewFlags;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewExtraFlags;                                     // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        View;                                              // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    ClientMovementBase;                                // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClientBaseBoneName;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ClientMovementMode;                                // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDCharacterMovementComponent_ServerCustomMoveDual) == 0x000008, "Wrong alignment on NGDCharacterMovementComponent_ServerCustomMoveDual");
static_assert(sizeof(NGDCharacterMovementComponent_ServerCustomMoveDual) == 0x000058, "Wrong size on NGDCharacterMovementComponent_ServerCustomMoveDual");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, TimeStamp0) == 0x000000, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::TimeStamp0' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, InAccel0) == 0x000004, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::InAccel0' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, PendingFlags) == 0x000010, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::PendingFlags' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, PendingExtraFlags) == 0x000011, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::PendingExtraFlags' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, View0) == 0x000014, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::View0' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, Timestamp) == 0x000018, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::Timestamp' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, InAccel) == 0x00001C, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::InAccel' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, ClientLoc) == 0x000028, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::ClientLoc' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, NewFlags) == 0x000034, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::NewFlags' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, NewExtraFlags) == 0x000035, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::NewExtraFlags' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, View) == 0x000038, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::View' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, ClientMovementBase) == 0x000040, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::ClientMovementBase' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, ClientBaseBoneName) == 0x000048, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::ClientBaseBoneName' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveDual, ClientMovementMode) == 0x000050, "Member 'NGDCharacterMovementComponent_ServerCustomMoveDual::ClientMovementMode' has a wrong offset!");

// Function UnrealProject.NGDCharacterMovementComponent.ServerCustomMoveOld
// 0x0014 (0x0014 - 0x0000)
struct NGDCharacterMovementComponent_ServerCustomMoveOld final
{
public:
	float                                         OldTimeStamp;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  OldAccel;                                          // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OldMoveFlags;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OldExtraFlags;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDCharacterMovementComponent_ServerCustomMoveOld) == 0x000004, "Wrong alignment on NGDCharacterMovementComponent_ServerCustomMoveOld");
static_assert(sizeof(NGDCharacterMovementComponent_ServerCustomMoveOld) == 0x000014, "Wrong size on NGDCharacterMovementComponent_ServerCustomMoveOld");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveOld, OldTimeStamp) == 0x000000, "Member 'NGDCharacterMovementComponent_ServerCustomMoveOld::OldTimeStamp' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveOld, OldAccel) == 0x000004, "Member 'NGDCharacterMovementComponent_ServerCustomMoveOld::OldAccel' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveOld, OldMoveFlags) == 0x000010, "Member 'NGDCharacterMovementComponent_ServerCustomMoveOld::OldMoveFlags' has a wrong offset!");
static_assert(offsetof(NGDCharacterMovementComponent_ServerCustomMoveOld, OldExtraFlags) == 0x000011, "Member 'NGDCharacterMovementComponent_ServerCustomMoveOld::OldExtraFlags' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.ClientForceSpectatorLocationAndRotation
// 0x0018 (0x0018 - 0x0000)
struct NGDPlayerController_ClientForceSpectatorLocationAndRotation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_ClientForceSpectatorLocationAndRotation) == 0x000004, "Wrong alignment on NGDPlayerController_ClientForceSpectatorLocationAndRotation");
static_assert(sizeof(NGDPlayerController_ClientForceSpectatorLocationAndRotation) == 0x000018, "Wrong size on NGDPlayerController_ClientForceSpectatorLocationAndRotation");
static_assert(offsetof(NGDPlayerController_ClientForceSpectatorLocationAndRotation, InLocation) == 0x000000, "Member 'NGDPlayerController_ClientForceSpectatorLocationAndRotation::InLocation' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientForceSpectatorLocationAndRotation, InRotation) == 0x00000C, "Member 'NGDPlayerController_ClientForceSpectatorLocationAndRotation::InRotation' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.ClientSetTargetToSpectate
// 0x0008 (0x0008 - 0x0000)
struct NGDPlayerController_ClientSetTargetToSpectate final
{
public:
	class ANGDCharacter*                          InTargetToSpectate;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_ClientSetTargetToSpectate) == 0x000008, "Wrong alignment on NGDPlayerController_ClientSetTargetToSpectate");
static_assert(sizeof(NGDPlayerController_ClientSetTargetToSpectate) == 0x000008, "Wrong size on NGDPlayerController_ClientSetTargetToSpectate");
static_assert(offsetof(NGDPlayerController_ClientSetTargetToSpectate, InTargetToSpectate) == 0x000000, "Member 'NGDPlayerController_ClientSetTargetToSpectate::InTargetToSpectate' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.ClientStorePoseOnHit
// 0x0040 (0x0040 - 0x0000)
struct NGDPlayerController_ClientStorePoseOnHit final
{
public:
	TArray<struct FActorSample>                   ActorsSamples;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         AmmoIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootPos;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootDir;                                          // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitPos;                                            // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Acknowledged;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDPlayerController_ClientStorePoseOnHit) == 0x000008, "Wrong alignment on NGDPlayerController_ClientStorePoseOnHit");
static_assert(sizeof(NGDPlayerController_ClientStorePoseOnHit) == 0x000040, "Wrong size on NGDPlayerController_ClientStorePoseOnHit");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHit, ActorsSamples) == 0x000000, "Member 'NGDPlayerController_ClientStorePoseOnHit::ActorsSamples' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHit, AmmoIndex) == 0x000010, "Member 'NGDPlayerController_ClientStorePoseOnHit::AmmoIndex' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHit, ShootPos) == 0x000014, "Member 'NGDPlayerController_ClientStorePoseOnHit::ShootPos' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHit, ShootDir) == 0x000020, "Member 'NGDPlayerController_ClientStorePoseOnHit::ShootDir' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHit, HitPos) == 0x00002C, "Member 'NGDPlayerController_ClientStorePoseOnHit::HitPos' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHit, Acknowledged) == 0x000038, "Member 'NGDPlayerController_ClientStorePoseOnHit::Acknowledged' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.ClientStorePoseOnHitByBot
// 0x0040 (0x0040 - 0x0000)
struct NGDPlayerController_ClientStorePoseOnHitByBot final
{
public:
	TArray<struct FActorSample>                   ActorsSamples;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         AmmoIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootPos;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootDir;                                          // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitPos;                                            // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Acknowledged;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDPlayerController_ClientStorePoseOnHitByBot) == 0x000008, "Wrong alignment on NGDPlayerController_ClientStorePoseOnHitByBot");
static_assert(sizeof(NGDPlayerController_ClientStorePoseOnHitByBot) == 0x000040, "Wrong size on NGDPlayerController_ClientStorePoseOnHitByBot");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHitByBot, ActorsSamples) == 0x000000, "Member 'NGDPlayerController_ClientStorePoseOnHitByBot::ActorsSamples' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHitByBot, AmmoIndex) == 0x000010, "Member 'NGDPlayerController_ClientStorePoseOnHitByBot::AmmoIndex' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHitByBot, ShootPos) == 0x000014, "Member 'NGDPlayerController_ClientStorePoseOnHitByBot::ShootPos' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHitByBot, ShootDir) == 0x000020, "Member 'NGDPlayerController_ClientStorePoseOnHitByBot::ShootDir' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHitByBot, HitPos) == 0x00002C, "Member 'NGDPlayerController_ClientStorePoseOnHitByBot::HitPos' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ClientStorePoseOnHitByBot, Acknowledged) == 0x000038, "Member 'NGDPlayerController_ClientStorePoseOnHitByBot::Acknowledged' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.ClientStoreValidationResult
// 0x0001 (0x0001 - 0x0000)
struct NGDPlayerController_ClientStoreValidationResult final
{
public:
	uint8                                         ValidationResult;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_ClientStoreValidationResult) == 0x000001, "Wrong alignment on NGDPlayerController_ClientStoreValidationResult");
static_assert(sizeof(NGDPlayerController_ClientStoreValidationResult) == 0x000001, "Wrong size on NGDPlayerController_ClientStoreValidationResult");
static_assert(offsetof(NGDPlayerController_ClientStoreValidationResult, ValidationResult) == 0x000000, "Member 'NGDPlayerController_ClientStoreValidationResult::ValidationResult' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.DrawShoot
// 0x0004 (0x0004 - 0x0000)
struct NGDPlayerController_DrawShoot final
{
public:
	int32                                         AmmoIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_DrawShoot) == 0x000004, "Wrong alignment on NGDPlayerController_DrawShoot");
static_assert(sizeof(NGDPlayerController_DrawShoot) == 0x000004, "Wrong size on NGDPlayerController_DrawShoot");
static_assert(offsetof(NGDPlayerController_DrawShoot, AmmoIndex) == 0x000000, "Member 'NGDPlayerController_DrawShoot::AmmoIndex' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.LocalStorePoseOnHit
// 0x0038 (0x0038 - 0x0000)
struct NGDPlayerController_LocalStorePoseOnHit final
{
public:
	TArray<struct FActorSample>                   ActorsSamples;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         AmmoIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootPos;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootDir;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitPos;                                            // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_LocalStorePoseOnHit) == 0x000008, "Wrong alignment on NGDPlayerController_LocalStorePoseOnHit");
static_assert(sizeof(NGDPlayerController_LocalStorePoseOnHit) == 0x000038, "Wrong size on NGDPlayerController_LocalStorePoseOnHit");
static_assert(offsetof(NGDPlayerController_LocalStorePoseOnHit, ActorsSamples) == 0x000000, "Member 'NGDPlayerController_LocalStorePoseOnHit::ActorsSamples' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_LocalStorePoseOnHit, AmmoIndex) == 0x000010, "Member 'NGDPlayerController_LocalStorePoseOnHit::AmmoIndex' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_LocalStorePoseOnHit, ShootPos) == 0x000014, "Member 'NGDPlayerController_LocalStorePoseOnHit::ShootPos' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_LocalStorePoseOnHit, ShootDir) == 0x000020, "Member 'NGDPlayerController_LocalStorePoseOnHit::ShootDir' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_LocalStorePoseOnHit, HitPos) == 0x00002C, "Member 'NGDPlayerController_LocalStorePoseOnHit::HitPos' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.ServerCheat
// 0x0010 (0x0010 - 0x0000)
struct NGDPlayerController_ServerCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_ServerCheat) == 0x000008, "Wrong alignment on NGDPlayerController_ServerCheat");
static_assert(sizeof(NGDPlayerController_ServerCheat) == 0x000010, "Wrong size on NGDPlayerController_ServerCheat");
static_assert(offsetof(NGDPlayerController_ServerCheat, Msg) == 0x000000, "Member 'NGDPlayerController_ServerCheat::Msg' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.ServerReportPlayer
// 0x0040 (0x0040 - 0x0000)
struct NGDPlayerController_ServerReportPlayer final
{
public:
	struct FUniqueNetIdRepl                       ReportedUniqueNetId;                               // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerReportType                             ReportType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReportDescription;                                 // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_ServerReportPlayer) == 0x000008, "Wrong alignment on NGDPlayerController_ServerReportPlayer");
static_assert(sizeof(NGDPlayerController_ServerReportPlayer) == 0x000040, "Wrong size on NGDPlayerController_ServerReportPlayer");
static_assert(offsetof(NGDPlayerController_ServerReportPlayer, ReportedUniqueNetId) == 0x000000, "Member 'NGDPlayerController_ServerReportPlayer::ReportedUniqueNetId' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ServerReportPlayer, ReportType) == 0x000028, "Member 'NGDPlayerController_ServerReportPlayer::ReportType' has a wrong offset!");
static_assert(offsetof(NGDPlayerController_ServerReportPlayer, ReportDescription) == 0x000030, "Member 'NGDPlayerController_ServerReportPlayer::ReportDescription' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.ServerRequestTargetToSpectate
// 0x0001 (0x0001 - 0x0000)
struct NGDPlayerController_ServerRequestTargetToSpectate final
{
public:
	int8                                          InRequestedIndex;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_ServerRequestTargetToSpectate) == 0x000001, "Wrong alignment on NGDPlayerController_ServerRequestTargetToSpectate");
static_assert(sizeof(NGDPlayerController_ServerRequestTargetToSpectate) == 0x000001, "Wrong size on NGDPlayerController_ServerRequestTargetToSpectate");
static_assert(offsetof(NGDPlayerController_ServerRequestTargetToSpectate, InRequestedIndex) == 0x000000, "Member 'NGDPlayerController_ServerRequestTargetToSpectate::InRequestedIndex' has a wrong offset!");

// Function UnrealProject.NGDPlayerController.TryGetCharacter
// 0x0008 (0x0008 - 0x0000)
struct NGDPlayerController_TryGetCharacter final
{
public:
	class ANGDCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerController_TryGetCharacter) == 0x000008, "Wrong alignment on NGDPlayerController_TryGetCharacter");
static_assert(sizeof(NGDPlayerController_TryGetCharacter) == 0x000008, "Wrong size on NGDPlayerController_TryGetCharacter");
static_assert(offsetof(NGDPlayerController_TryGetCharacter, ReturnValue) == 0x000000, "Member 'NGDPlayerController_TryGetCharacter::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDCrosshairWidget.OnChangedADS
// 0x0001 (0x0001 - 0x0000)
struct NGDCrosshairWidget_OnChangedADS final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCrosshairWidget_OnChangedADS) == 0x000001, "Wrong alignment on NGDCrosshairWidget_OnChangedADS");
static_assert(sizeof(NGDCrosshairWidget_OnChangedADS) == 0x000001, "Wrong size on NGDCrosshairWidget_OnChangedADS");
static_assert(offsetof(NGDCrosshairWidget_OnChangedADS, bNewValue) == 0x000000, "Member 'NGDCrosshairWidget_OnChangedADS::bNewValue' has a wrong offset!");

// Function UnrealProject.NGDCrosshairWidget.OnSpreadChanged
// 0x0004 (0x0004 - 0x0000)
struct NGDCrosshairWidget_OnSpreadChanged final
{
public:
	float                                         Spread;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCrosshairWidget_OnSpreadChanged) == 0x000004, "Wrong alignment on NGDCrosshairWidget_OnSpreadChanged");
static_assert(sizeof(NGDCrosshairWidget_OnSpreadChanged) == 0x000004, "Wrong size on NGDCrosshairWidget_OnSpreadChanged");
static_assert(offsetof(NGDCrosshairWidget_OnSpreadChanged, Spread) == 0x000000, "Member 'NGDCrosshairWidget_OnSpreadChanged::Spread' has a wrong offset!");

// Function UnrealProject.NGDCrosshairWidget.SetWeapon
// 0x0008 (0x0008 - 0x0000)
struct NGDCrosshairWidget_SetWeapon final
{
public:
	class AWeapon*                                InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCrosshairWidget_SetWeapon) == 0x000008, "Wrong alignment on NGDCrosshairWidget_SetWeapon");
static_assert(sizeof(NGDCrosshairWidget_SetWeapon) == 0x000008, "Wrong size on NGDCrosshairWidget_SetWeapon");
static_assert(offsetof(NGDCrosshairWidget_SetWeapon, InWeapon) == 0x000000, "Member 'NGDCrosshairWidget_SetWeapon::InWeapon' has a wrong offset!");

// Function UnrealProject.NGDCrosshairWidget.UpdateCrosshairColor
// 0x0004 (0x0004 - 0x0000)
struct NGDCrosshairWidget_UpdateCrosshairColor final
{
public:
	int32                                         ColorIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDCrosshairWidget_UpdateCrosshairColor) == 0x000004, "Wrong alignment on NGDCrosshairWidget_UpdateCrosshairColor");
static_assert(sizeof(NGDCrosshairWidget_UpdateCrosshairColor) == 0x000004, "Wrong size on NGDCrosshairWidget_UpdateCrosshairColor");
static_assert(offsetof(NGDCrosshairWidget_UpdateCrosshairColor, ColorIndex) == 0x000000, "Member 'NGDCrosshairWidget_UpdateCrosshairColor::ColorIndex' has a wrong offset!");

// Function UnrealProject.NGDDamageable.Kill
// 0x0058 (0x0058 - 0x0000)
struct NGDDamageable_Kill final
{
public:
	class ANGDCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_Kill) == 0x000008, "Wrong alignment on NGDDamageable_Kill");
static_assert(sizeof(NGDDamageable_Kill) == 0x000058, "Wrong size on NGDDamageable_Kill");
static_assert(offsetof(NGDDamageable_Kill, Character) == 0x000000, "Member 'NGDDamageable_Kill::Character' has a wrong offset!");
static_assert(offsetof(NGDDamageable_Kill, DamageEvent) == 0x000008, "Member 'NGDDamageable_Kill::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDDamageable_Kill, EventInstigator) == 0x000048, "Member 'NGDDamageable_Kill::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDDamageable_Kill, DamageCauser) == 0x000050, "Member 'NGDDamageable_Kill::DamageCauser' has a wrong offset!");

// Function UnrealProject.NGDDamageable.NGDDamageable_SetCanBeDamaged
// 0x0001 (0x0001 - 0x0000)
struct NGDDamageable_NGDDamageable_SetCanBeDamaged final
{
public:
	bool                                          CanBeDamaged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_NGDDamageable_SetCanBeDamaged) == 0x000001, "Wrong alignment on NGDDamageable_NGDDamageable_SetCanBeDamaged");
static_assert(sizeof(NGDDamageable_NGDDamageable_SetCanBeDamaged) == 0x000001, "Wrong size on NGDDamageable_NGDDamageable_SetCanBeDamaged");
static_assert(offsetof(NGDDamageable_NGDDamageable_SetCanBeDamaged, CanBeDamaged) == 0x000000, "Member 'NGDDamageable_NGDDamageable_SetCanBeDamaged::CanBeDamaged' has a wrong offset!");

// Function UnrealProject.NGDDamageable.OnDeath
// 0x0050 (0x0050 - 0x0000)
struct NGDDamageable_OnDeath final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_OnDeath) == 0x000008, "Wrong alignment on NGDDamageable_OnDeath");
static_assert(sizeof(NGDDamageable_OnDeath) == 0x000050, "Wrong size on NGDDamageable_OnDeath");
static_assert(offsetof(NGDDamageable_OnDeath, DamageEvent) == 0x000000, "Member 'NGDDamageable_OnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDDamageable_OnDeath, EventInstigator) == 0x000040, "Member 'NGDDamageable_OnDeath::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDDamageable_OnDeath, DamageCauser) == 0x000048, "Member 'NGDDamageable_OnDeath::DamageCauser' has a wrong offset!");

// Function UnrealProject.NGDDamageable.OnTakeDamage
// 0x0060 (0x0060 - 0x0000)
struct NGDDamageable_OnTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDDamageable_OnTakeDamage) == 0x000008, "Wrong alignment on NGDDamageable_OnTakeDamage");
static_assert(sizeof(NGDDamageable_OnTakeDamage) == 0x000060, "Wrong size on NGDDamageable_OnTakeDamage");
static_assert(offsetof(NGDDamageable_OnTakeDamage, Damage) == 0x000000, "Member 'NGDDamageable_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(NGDDamageable_OnTakeDamage, DamageEvent) == 0x000008, "Member 'NGDDamageable_OnTakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDDamageable_OnTakeDamage, EventInstigator) == 0x000048, "Member 'NGDDamageable_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDDamageable_OnTakeDamage, DamageCauser) == 0x000050, "Member 'NGDDamageable_OnTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(NGDDamageable_OnTakeDamage, ReturnValue) == 0x000058, "Member 'NGDDamageable_OnTakeDamage::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDDamageable.TakeDamage
// 0x0058 (0x0058 - 0x0000)
struct NGDDamageable_TakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_TakeDamage) == 0x000008, "Wrong alignment on NGDDamageable_TakeDamage");
static_assert(sizeof(NGDDamageable_TakeDamage) == 0x000058, "Wrong size on NGDDamageable_TakeDamage");
static_assert(offsetof(NGDDamageable_TakeDamage, Damage) == 0x000000, "Member 'NGDDamageable_TakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(NGDDamageable_TakeDamage, DamageEvent) == 0x000008, "Member 'NGDDamageable_TakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(NGDDamageable_TakeDamage, EventInstigator) == 0x000048, "Member 'NGDDamageable_TakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(NGDDamageable_TakeDamage, DamageCauser) == 0x000050, "Member 'NGDDamageable_TakeDamage::DamageCauser' has a wrong offset!");

// Function UnrealProject.NGDDamageable.GetCanBeDamaged
// 0x0001 (0x0001 - 0x0000)
struct NGDDamageable_GetCanBeDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_GetCanBeDamaged) == 0x000001, "Wrong alignment on NGDDamageable_GetCanBeDamaged");
static_assert(sizeof(NGDDamageable_GetCanBeDamaged) == 0x000001, "Wrong size on NGDDamageable_GetCanBeDamaged");
static_assert(offsetof(NGDDamageable_GetCanBeDamaged, ReturnValue) == 0x000000, "Member 'NGDDamageable_GetCanBeDamaged::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDDamageable.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct NGDDamageable_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_GetHealth) == 0x000004, "Wrong alignment on NGDDamageable_GetHealth");
static_assert(sizeof(NGDDamageable_GetHealth) == 0x000004, "Wrong size on NGDDamageable_GetHealth");
static_assert(offsetof(NGDDamageable_GetHealth, ReturnValue) == 0x000000, "Member 'NGDDamageable_GetHealth::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDDamageable.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct NGDDamageable_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_GetMaxHealth) == 0x000004, "Wrong alignment on NGDDamageable_GetMaxHealth");
static_assert(sizeof(NGDDamageable_GetMaxHealth) == 0x000004, "Wrong size on NGDDamageable_GetMaxHealth");
static_assert(offsetof(NGDDamageable_GetMaxHealth, ReturnValue) == 0x000000, "Member 'NGDDamageable_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDDamageable.GetMortalityComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDDamageable_GetMortalityComponent final
{
public:
	class UNGDMortalityComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_GetMortalityComponent) == 0x000008, "Wrong alignment on NGDDamageable_GetMortalityComponent");
static_assert(sizeof(NGDDamageable_GetMortalityComponent) == 0x000008, "Wrong size on NGDDamageable_GetMortalityComponent");
static_assert(offsetof(NGDDamageable_GetMortalityComponent, ReturnValue) == 0x000000, "Member 'NGDDamageable_GetMortalityComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDDamageable.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct NGDDamageable_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDamageable_IsAlive) == 0x000001, "Wrong alignment on NGDDamageable_IsAlive");
static_assert(sizeof(NGDDamageable_IsAlive) == 0x000001, "Wrong size on NGDDamageable_IsAlive");
static_assert(offsetof(NGDDamageable_IsAlive, ReturnValue) == 0x000000, "Member 'NGDDamageable_IsAlive::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDDoor.OnRep_State
// 0x0002 (0x0002 - 0x0000)
struct NGDDoor_OnRep_State final
{
public:
	struct FDoorRepState                          LastRepState;                                      // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDDoor_OnRep_State) == 0x000001, "Wrong alignment on NGDDoor_OnRep_State");
static_assert(sizeof(NGDDoor_OnRep_State) == 0x000002, "Wrong size on NGDDoor_OnRep_State");
static_assert(offsetof(NGDDoor_OnRep_State, LastRepState) == 0x000000, "Member 'NGDDoor_OnRep_State::LastRepState' has a wrong offset!");

// Function UnrealProject.NGDFlyPropellerMovementComponent.ClientAckGoodMove
// 0x0004 (0x0004 - 0x0000)
struct NGDFlyPropellerMovementComponent_ClientAckGoodMove final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFlyPropellerMovementComponent_ClientAckGoodMove) == 0x000004, "Wrong alignment on NGDFlyPropellerMovementComponent_ClientAckGoodMove");
static_assert(sizeof(NGDFlyPropellerMovementComponent_ClientAckGoodMove) == 0x000004, "Wrong size on NGDFlyPropellerMovementComponent_ClientAckGoodMove");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ClientAckGoodMove, Timestamp) == 0x000000, "Member 'NGDFlyPropellerMovementComponent_ClientAckGoodMove::Timestamp' has a wrong offset!");

// Function UnrealProject.NGDFlyPropellerMovementComponent.ClientAdjustMovement
// 0x001C (0x001C - 0x0000)
struct NGDFlyPropellerMovementComponent_ClientAdjustMovement final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CorrectLocation;                                   // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CorrectVelocity;                                   // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFlyPropellerMovementComponent_ClientAdjustMovement) == 0x000004, "Wrong alignment on NGDFlyPropellerMovementComponent_ClientAdjustMovement");
static_assert(sizeof(NGDFlyPropellerMovementComponent_ClientAdjustMovement) == 0x00001C, "Wrong size on NGDFlyPropellerMovementComponent_ClientAdjustMovement");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ClientAdjustMovement, Timestamp) == 0x000000, "Member 'NGDFlyPropellerMovementComponent_ClientAdjustMovement::Timestamp' has a wrong offset!");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ClientAdjustMovement, CorrectLocation) == 0x000004, "Member 'NGDFlyPropellerMovementComponent_ClientAdjustMovement::CorrectLocation' has a wrong offset!");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ClientAdjustMovement, CorrectVelocity) == 0x000010, "Member 'NGDFlyPropellerMovementComponent_ClientAdjustMovement::CorrectVelocity' has a wrong offset!");

// Function UnrealProject.NGDFlyPropellerMovementComponent.ServerMove
// 0x001C (0x001C - 0x0000)
struct NGDFlyPropellerMovementComponent_ServerMove final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  AccelerationDir;                                   // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ClientLocation;                                    // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFlyPropellerMovementComponent_ServerMove) == 0x000004, "Wrong alignment on NGDFlyPropellerMovementComponent_ServerMove");
static_assert(sizeof(NGDFlyPropellerMovementComponent_ServerMove) == 0x00001C, "Wrong size on NGDFlyPropellerMovementComponent_ServerMove");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ServerMove, Timestamp) == 0x000000, "Member 'NGDFlyPropellerMovementComponent_ServerMove::Timestamp' has a wrong offset!");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ServerMove, AccelerationDir) == 0x000004, "Member 'NGDFlyPropellerMovementComponent_ServerMove::AccelerationDir' has a wrong offset!");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ServerMove, ClientLocation) == 0x000010, "Member 'NGDFlyPropellerMovementComponent_ServerMove::ClientLocation' has a wrong offset!");

// Function UnrealProject.NGDFlyPropellerMovementComponent.ServerMoveOld
// 0x0010 (0x0010 - 0x0000)
struct NGDFlyPropellerMovementComponent_ServerMoveOld final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  AccelerationDir;                                   // 0x0004(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFlyPropellerMovementComponent_ServerMoveOld) == 0x000004, "Wrong alignment on NGDFlyPropellerMovementComponent_ServerMoveOld");
static_assert(sizeof(NGDFlyPropellerMovementComponent_ServerMoveOld) == 0x000010, "Wrong size on NGDFlyPropellerMovementComponent_ServerMoveOld");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ServerMoveOld, Timestamp) == 0x000000, "Member 'NGDFlyPropellerMovementComponent_ServerMoveOld::Timestamp' has a wrong offset!");
static_assert(offsetof(NGDFlyPropellerMovementComponent_ServerMoveOld, AccelerationDir) == 0x000004, "Member 'NGDFlyPropellerMovementComponent_ServerMoveOld::AccelerationDir' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.ApplyRadialDamage
// 0x0048 (0x0048 - 0x0000)
struct NGDFunctionLibrary_ApplyRadialDamage final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulseForce;                                      // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_ApplyRadialDamage) == 0x000008, "Wrong alignment on NGDFunctionLibrary_ApplyRadialDamage");
static_assert(sizeof(NGDFunctionLibrary_ApplyRadialDamage) == 0x000048, "Wrong size on NGDFunctionLibrary_ApplyRadialDamage");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, Origin) == 0x000000, "Member 'NGDFunctionLibrary_ApplyRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, BaseDamage) == 0x00000C, "Member 'NGDFunctionLibrary_ApplyRadialDamage::BaseDamage' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, Radius) == 0x000010, "Member 'NGDFunctionLibrary_ApplyRadialDamage::Radius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, DamageCauser) == 0x000018, "Member 'NGDFunctionLibrary_ApplyRadialDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, IgnoreActors) == 0x000020, "Member 'NGDFunctionLibrary_ApplyRadialDamage::IgnoreActors' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, InstigatedByController) == 0x000030, "Member 'NGDFunctionLibrary_ApplyRadialDamage::InstigatedByController' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, DamagePreventionChannel) == 0x000038, "Member 'NGDFunctionLibrary_ApplyRadialDamage::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, ImpulseForce) == 0x00003C, "Member 'NGDFunctionLibrary_ApplyRadialDamage::ImpulseForce' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamage, ReturnValue) == 0x000040, "Member 'NGDFunctionLibrary_ApplyRadialDamage::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.ApplyRadialDamageWithFalloff
// 0x0068 (0x0068 - 0x0000)
struct NGDFunctionLibrary_ApplyRadialDamageWithFalloff final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDRadialDamageConfig                 RadialConfig;                                      // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InWantFalloffDamage;                               // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff) == 0x000008, "Wrong alignment on NGDFunctionLibrary_ApplyRadialDamageWithFalloff");
static_assert(sizeof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff) == 0x000068, "Wrong size on NGDFunctionLibrary_ApplyRadialDamageWithFalloff");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff, Origin) == 0x000000, "Member 'NGDFunctionLibrary_ApplyRadialDamageWithFalloff::Origin' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff, RadialConfig) == 0x000010, "Member 'NGDFunctionLibrary_ApplyRadialDamageWithFalloff::RadialConfig' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff, DamageCauser) == 0x000040, "Member 'NGDFunctionLibrary_ApplyRadialDamageWithFalloff::DamageCauser' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff, IgnoreActors) == 0x000048, "Member 'NGDFunctionLibrary_ApplyRadialDamageWithFalloff::IgnoreActors' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff, InstigatedByController) == 0x000058, "Member 'NGDFunctionLibrary_ApplyRadialDamageWithFalloff::InstigatedByController' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff, InWantFalloffDamage) == 0x000060, "Member 'NGDFunctionLibrary_ApplyRadialDamageWithFalloff::InWantFalloffDamage' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_ApplyRadialDamageWithFalloff, ReturnValue) == 0x000061, "Member 'NGDFunctionLibrary_ApplyRadialDamageWithFalloff::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.BP_DrawDebugLine
// 0x0038 (0x0038 - 0x0000)
struct NGDFunctionLibrary_BP_DrawDebugLine final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineStart;                                         // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_BP_DrawDebugLine) == 0x000008, "Wrong alignment on NGDFunctionLibrary_BP_DrawDebugLine");
static_assert(sizeof(NGDFunctionLibrary_BP_DrawDebugLine) == 0x000038, "Wrong size on NGDFunctionLibrary_BP_DrawDebugLine");
static_assert(offsetof(NGDFunctionLibrary_BP_DrawDebugLine, WorldContextObject) == 0x000000, "Member 'NGDFunctionLibrary_BP_DrawDebugLine::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_BP_DrawDebugLine, LineStart) == 0x000008, "Member 'NGDFunctionLibrary_BP_DrawDebugLine::LineStart' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_BP_DrawDebugLine, LineEnd) == 0x000014, "Member 'NGDFunctionLibrary_BP_DrawDebugLine::LineEnd' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_BP_DrawDebugLine, Color) == 0x000020, "Member 'NGDFunctionLibrary_BP_DrawDebugLine::Color' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_BP_DrawDebugLine, LifeTime) == 0x000030, "Member 'NGDFunctionLibrary_BP_DrawDebugLine::LifeTime' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_BP_DrawDebugLine, Thickness) == 0x000034, "Member 'NGDFunctionLibrary_BP_DrawDebugLine::Thickness' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.CheckSphereAgainstBox
// 0x0070 (0x0070 - 0x0000)
struct NGDFunctionLibrary_CheckSphereAgainstBox final
{
public:
	struct FVector                                BoxCenter;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  BoxQuat;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                sphereStartPos;                                    // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereEndPos;                                      // 0x003C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResult                       ReturnValue;                                       // 0x004C(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_CheckSphereAgainstBox) == 0x000010, "Wrong alignment on NGDFunctionLibrary_CheckSphereAgainstBox");
static_assert(sizeof(NGDFunctionLibrary_CheckSphereAgainstBox) == 0x000070, "Wrong size on NGDFunctionLibrary_CheckSphereAgainstBox");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBox, BoxCenter) == 0x000000, "Member 'NGDFunctionLibrary_CheckSphereAgainstBox::BoxCenter' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBox, BoxExtent) == 0x00000C, "Member 'NGDFunctionLibrary_CheckSphereAgainstBox::BoxExtent' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBox, BoxQuat) == 0x000020, "Member 'NGDFunctionLibrary_CheckSphereAgainstBox::BoxQuat' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBox, sphereStartPos) == 0x000030, "Member 'NGDFunctionLibrary_CheckSphereAgainstBox::sphereStartPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBox, sphereEndPos) == 0x00003C, "Member 'NGDFunctionLibrary_CheckSphereAgainstBox::sphereEndPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBox, SphereRadius) == 0x000048, "Member 'NGDFunctionLibrary_CheckSphereAgainstBox::SphereRadius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBox, ReturnValue) == 0x00004C, "Member 'NGDFunctionLibrary_CheckSphereAgainstBox::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.CheckSphereAgainstBoxComponent
// 0x0048 (0x0048 - 0x0000)
struct NGDFunctionLibrary_CheckSphereAgainstBoxComponent final
{
public:
	class UBoxComponent*                          BoxComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereStartPos;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereEndPos;                                      // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResult                       ReturnValue;                                       // 0x0024(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_CheckSphereAgainstBoxComponent) == 0x000008, "Wrong alignment on NGDFunctionLibrary_CheckSphereAgainstBoxComponent");
static_assert(sizeof(NGDFunctionLibrary_CheckSphereAgainstBoxComponent) == 0x000048, "Wrong size on NGDFunctionLibrary_CheckSphereAgainstBoxComponent");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBoxComponent, BoxComponent) == 0x000000, "Member 'NGDFunctionLibrary_CheckSphereAgainstBoxComponent::BoxComponent' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBoxComponent, sphereStartPos) == 0x000008, "Member 'NGDFunctionLibrary_CheckSphereAgainstBoxComponent::sphereStartPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBoxComponent, sphereEndPos) == 0x000014, "Member 'NGDFunctionLibrary_CheckSphereAgainstBoxComponent::sphereEndPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBoxComponent, SphereRadius) == 0x000020, "Member 'NGDFunctionLibrary_CheckSphereAgainstBoxComponent::SphereRadius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstBoxComponent, ReturnValue) == 0x000024, "Member 'NGDFunctionLibrary_CheckSphereAgainstBoxComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.CheckSphereAgainstCapsule
// 0x0068 (0x0068 - 0x0000)
struct NGDFunctionLibrary_CheckSphereAgainstCapsule final
{
public:
	class UObject*                                C;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CapsuleLocation;                                   // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               capsuleRotation;                                   // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         capsuleRadius;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereStartPos;                                    // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereEndPos;                                      // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResult                       ReturnValue;                                       // 0x0044(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_CheckSphereAgainstCapsule) == 0x000008, "Wrong alignment on NGDFunctionLibrary_CheckSphereAgainstCapsule");
static_assert(sizeof(NGDFunctionLibrary_CheckSphereAgainstCapsule) == 0x000068, "Wrong size on NGDFunctionLibrary_CheckSphereAgainstCapsule");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, C) == 0x000000, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::C' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, CapsuleLocation) == 0x000008, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::CapsuleLocation' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, capsuleRotation) == 0x000014, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::capsuleRotation' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, capsuleRadius) == 0x000020, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::capsuleRadius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, CapsuleHalfHeight) == 0x000024, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, sphereStartPos) == 0x000028, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::sphereStartPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, sphereEndPos) == 0x000034, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::sphereEndPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, SphereRadius) == 0x000040, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::SphereRadius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsule, ReturnValue) == 0x000044, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsule::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.CheckSphereAgainstCapsuleComponent
// 0x0050 (0x0050 - 0x0000)
struct NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent final
{
public:
	class UObject*                                C;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      capsule;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereStartPos;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereEndPos;                                      // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResult                       ReturnValue;                                       // 0x002C(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent) == 0x000008, "Wrong alignment on NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent");
static_assert(sizeof(NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent) == 0x000050, "Wrong size on NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent, C) == 0x000000, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent::C' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent, capsule) == 0x000008, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent::capsule' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent, sphereStartPos) == 0x000010, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent::sphereStartPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent, sphereEndPos) == 0x00001C, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent::sphereEndPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent, SphereRadius) == 0x000028, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent::SphereRadius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent, ReturnValue) == 0x00002C, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.CheckSphereAgainstCapsuleRaw
// 0x0060 (0x0060 - 0x0000)
struct NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw final
{
public:
	class UObject*                                C;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                capsulePointA;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                capsulePointB;                                     // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         capsuleRadius;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereStartPos;                                    // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                sphereEndPos;                                      // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResult                       ReturnValue;                                       // 0x0040(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw) == 0x000008, "Wrong alignment on NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw");
static_assert(sizeof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw) == 0x000060, "Wrong size on NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw, C) == 0x000000, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw::C' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw, capsulePointA) == 0x000008, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw::capsulePointA' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw, capsulePointB) == 0x000014, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw::capsulePointB' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw, capsuleRadius) == 0x000020, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw::capsuleRadius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw, sphereStartPos) == 0x000024, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw::sphereStartPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw, sphereEndPos) == 0x000030, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw::sphereEndPos' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw, SphereRadius) == 0x00003C, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw::SphereRadius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw, ReturnValue) == 0x000040, "Member 'NGDFunctionLibrary_CheckSphereAgainstCapsuleRaw::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.DegreesBetweenVectors
// 0x001C (0x001C - 0x0000)
struct NGDFunctionLibrary_DegreesBetweenVectors final
{
public:
	struct FVector                                Vector1;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector2;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_DegreesBetweenVectors) == 0x000004, "Wrong alignment on NGDFunctionLibrary_DegreesBetweenVectors");
static_assert(sizeof(NGDFunctionLibrary_DegreesBetweenVectors) == 0x00001C, "Wrong size on NGDFunctionLibrary_DegreesBetweenVectors");
static_assert(offsetof(NGDFunctionLibrary_DegreesBetweenVectors, Vector1) == 0x000000, "Member 'NGDFunctionLibrary_DegreesBetweenVectors::Vector1' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DegreesBetweenVectors, Vector2) == 0x00000C, "Member 'NGDFunctionLibrary_DegreesBetweenVectors::Vector2' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DegreesBetweenVectors, ReturnValue) == 0x000018, "Member 'NGDFunctionLibrary_DegreesBetweenVectors::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.DrawDebug2DGraph
// 0x0030 (0x0030 - 0x0000)
struct NGDFunctionLibrary_DrawDebug2DGraph final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CenterOffset;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Extents;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DataExtent;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Header;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_DrawDebug2DGraph) == 0x000008, "Wrong alignment on NGDFunctionLibrary_DrawDebug2DGraph");
static_assert(sizeof(NGDFunctionLibrary_DrawDebug2DGraph) == 0x000030, "Wrong size on NGDFunctionLibrary_DrawDebug2DGraph");
static_assert(offsetof(NGDFunctionLibrary_DrawDebug2DGraph, Canvas) == 0x000000, "Member 'NGDFunctionLibrary_DrawDebug2DGraph::Canvas' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebug2DGraph, CenterOffset) == 0x000008, "Member 'NGDFunctionLibrary_DrawDebug2DGraph::CenterOffset' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebug2DGraph, Extents) == 0x000010, "Member 'NGDFunctionLibrary_DrawDebug2DGraph::Extents' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebug2DGraph, DataExtent) == 0x000018, "Member 'NGDFunctionLibrary_DrawDebug2DGraph::DataExtent' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebug2DGraph, Header) == 0x000020, "Member 'NGDFunctionLibrary_DrawDebug2DGraph::Header' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.DrawDebugCapsule
// 0x0040 (0x0040 - 0x0000)
struct NGDFunctionLibrary_DrawDebugCapsule final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_DrawDebugCapsule) == 0x000008, "Wrong alignment on NGDFunctionLibrary_DrawDebugCapsule");
static_assert(sizeof(NGDFunctionLibrary_DrawDebugCapsule) == 0x000040, "Wrong size on NGDFunctionLibrary_DrawDebugCapsule");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugCapsule, WorldContextObject) == 0x000000, "Member 'NGDFunctionLibrary_DrawDebugCapsule::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugCapsule, Center) == 0x000008, "Member 'NGDFunctionLibrary_DrawDebugCapsule::Center' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugCapsule, HalfHeight) == 0x000014, "Member 'NGDFunctionLibrary_DrawDebugCapsule::HalfHeight' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugCapsule, Radius) == 0x000018, "Member 'NGDFunctionLibrary_DrawDebugCapsule::Radius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugCapsule, Rotation) == 0x00001C, "Member 'NGDFunctionLibrary_DrawDebugCapsule::Rotation' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugCapsule, LineColor) == 0x000028, "Member 'NGDFunctionLibrary_DrawDebugCapsule::LineColor' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugCapsule, Duration) == 0x000038, "Member 'NGDFunctionLibrary_DrawDebugCapsule::Duration' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugCapsule, Thickness) == 0x00003C, "Member 'NGDFunctionLibrary_DrawDebugCapsule::Thickness' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.DrawDebugSphere
// 0x0038 (0x0038 - 0x0000)
struct NGDFunctionLibrary_DrawDebugSphere final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Segments;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_DrawDebugSphere) == 0x000008, "Wrong alignment on NGDFunctionLibrary_DrawDebugSphere");
static_assert(sizeof(NGDFunctionLibrary_DrawDebugSphere) == 0x000038, "Wrong size on NGDFunctionLibrary_DrawDebugSphere");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugSphere, WorldContextObject) == 0x000000, "Member 'NGDFunctionLibrary_DrawDebugSphere::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugSphere, Center) == 0x000008, "Member 'NGDFunctionLibrary_DrawDebugSphere::Center' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugSphere, Radius) == 0x000014, "Member 'NGDFunctionLibrary_DrawDebugSphere::Radius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugSphere, Segments) == 0x000018, "Member 'NGDFunctionLibrary_DrawDebugSphere::Segments' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugSphere, LineColor) == 0x00001C, "Member 'NGDFunctionLibrary_DrawDebugSphere::LineColor' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugSphere, Duration) == 0x00002C, "Member 'NGDFunctionLibrary_DrawDebugSphere::Duration' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugSphere, Thickness) == 0x000030, "Member 'NGDFunctionLibrary_DrawDebugSphere::Thickness' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.DrawDebugString
// 0x0048 (0x0048 - 0x0000)
struct NGDFunctionLibrary_DrawDebugString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TextLocation;                                      // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TestBaseActor;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_DrawDebugString) == 0x000008, "Wrong alignment on NGDFunctionLibrary_DrawDebugString");
static_assert(sizeof(NGDFunctionLibrary_DrawDebugString) == 0x000048, "Wrong size on NGDFunctionLibrary_DrawDebugString");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugString, WorldContextObject) == 0x000000, "Member 'NGDFunctionLibrary_DrawDebugString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugString, TextLocation) == 0x000008, "Member 'NGDFunctionLibrary_DrawDebugString::TextLocation' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugString, Text) == 0x000018, "Member 'NGDFunctionLibrary_DrawDebugString::Text' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugString, TestBaseActor) == 0x000028, "Member 'NGDFunctionLibrary_DrawDebugString::TestBaseActor' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugString, TextColor) == 0x000030, "Member 'NGDFunctionLibrary_DrawDebugString::TextColor' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugString, Duration) == 0x000040, "Member 'NGDFunctionLibrary_DrawDebugString::Duration' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.DrawDebugVector2DGraph
// 0x0038 (0x0038 - 0x0000)
struct NGDFunctionLibrary_DrawDebugVector2DGraph final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CenterOffset;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Extents;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Data;                                              // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DataExtent;                                        // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Header;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_DrawDebugVector2DGraph) == 0x000008, "Wrong alignment on NGDFunctionLibrary_DrawDebugVector2DGraph");
static_assert(sizeof(NGDFunctionLibrary_DrawDebugVector2DGraph) == 0x000038, "Wrong size on NGDFunctionLibrary_DrawDebugVector2DGraph");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugVector2DGraph, Canvas) == 0x000000, "Member 'NGDFunctionLibrary_DrawDebugVector2DGraph::Canvas' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugVector2DGraph, CenterOffset) == 0x000008, "Member 'NGDFunctionLibrary_DrawDebugVector2DGraph::CenterOffset' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugVector2DGraph, Extents) == 0x000010, "Member 'NGDFunctionLibrary_DrawDebugVector2DGraph::Extents' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugVector2DGraph, Data) == 0x000018, "Member 'NGDFunctionLibrary_DrawDebugVector2DGraph::Data' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugVector2DGraph, DataExtent) == 0x000020, "Member 'NGDFunctionLibrary_DrawDebugVector2DGraph::DataExtent' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_DrawDebugVector2DGraph, Header) == 0x000028, "Member 'NGDFunctionLibrary_DrawDebugVector2DGraph::Header' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetClosestBodyInstanceToBone
// 0x0018 (0x0018 - 0x0000)
struct NGDFunctionLibrary_GetClosestBodyInstanceToBone final
{
public:
	class USkeletalMeshComponent*                 MeshTP;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetClosestBodyInstanceToBone) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetClosestBodyInstanceToBone");
static_assert(sizeof(NGDFunctionLibrary_GetClosestBodyInstanceToBone) == 0x000018, "Wrong size on NGDFunctionLibrary_GetClosestBodyInstanceToBone");
static_assert(offsetof(NGDFunctionLibrary_GetClosestBodyInstanceToBone, MeshTP) == 0x000000, "Member 'NGDFunctionLibrary_GetClosestBodyInstanceToBone::MeshTP' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetClosestBodyInstanceToBone, BoneName) == 0x000008, "Member 'NGDFunctionLibrary_GetClosestBodyInstanceToBone::BoneName' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetClosestBodyInstanceToBone, ReturnValue) == 0x000010, "Member 'NGDFunctionLibrary_GetClosestBodyInstanceToBone::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetDistanceToLocalViewer
// 0x0018 (0x0018 - 0x0000)
struct NGDFunctionLibrary_GetDistanceToLocalViewer final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetDistanceToLocalViewer) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetDistanceToLocalViewer");
static_assert(sizeof(NGDFunctionLibrary_GetDistanceToLocalViewer) == 0x000018, "Wrong size on NGDFunctionLibrary_GetDistanceToLocalViewer");
static_assert(offsetof(NGDFunctionLibrary_GetDistanceToLocalViewer, InContext) == 0x000000, "Member 'NGDFunctionLibrary_GetDistanceToLocalViewer::InContext' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetDistanceToLocalViewer, InLocation) == 0x000008, "Member 'NGDFunctionLibrary_GetDistanceToLocalViewer::InLocation' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetDistanceToLocalViewer, ReturnValue) == 0x000014, "Member 'NGDFunctionLibrary_GetDistanceToLocalViewer::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetGameInstance
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_GetGameInstance final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDGameInstance*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetGameInstance) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetGameInstance");
static_assert(sizeof(NGDFunctionLibrary_GetGameInstance) == 0x000010, "Wrong size on NGDFunctionLibrary_GetGameInstance");
static_assert(offsetof(NGDFunctionLibrary_GetGameInstance, Context) == 0x000000, "Member 'NGDFunctionLibrary_GetGameInstance::Context' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetGameInstance, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_GetGameInstance::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetGameVersionString
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_GetGameVersionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetGameVersionString) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetGameVersionString");
static_assert(sizeof(NGDFunctionLibrary_GetGameVersionString) == 0x000010, "Wrong size on NGDFunctionLibrary_GetGameVersionString");
static_assert(offsetof(NGDFunctionLibrary_GetGameVersionString, ReturnValue) == 0x000000, "Member 'NGDFunctionLibrary_GetGameVersionString::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetHUD
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_GetHUD final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANGDHUD*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetHUD) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetHUD");
static_assert(sizeof(NGDFunctionLibrary_GetHUD) == 0x000010, "Wrong size on NGDFunctionLibrary_GetHUD");
static_assert(offsetof(NGDFunctionLibrary_GetHUD, WorldContextObject) == 0x000000, "Member 'NGDFunctionLibrary_GetHUD::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetHUD, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_GetHUD::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetLocalCharacter
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_GetLocalCharacter final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANGDCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetLocalCharacter) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetLocalCharacter");
static_assert(sizeof(NGDFunctionLibrary_GetLocalCharacter) == 0x000010, "Wrong size on NGDFunctionLibrary_GetLocalCharacter");
static_assert(offsetof(NGDFunctionLibrary_GetLocalCharacter, Context) == 0x000000, "Member 'NGDFunctionLibrary_GetLocalCharacter::Context' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetLocalCharacter, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_GetLocalCharacter::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetLocalCharacterOrSpectating
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_GetLocalCharacterOrSpectating final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANGDCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetLocalCharacterOrSpectating) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetLocalCharacterOrSpectating");
static_assert(sizeof(NGDFunctionLibrary_GetLocalCharacterOrSpectating) == 0x000010, "Wrong size on NGDFunctionLibrary_GetLocalCharacterOrSpectating");
static_assert(offsetof(NGDFunctionLibrary_GetLocalCharacterOrSpectating, Context) == 0x000000, "Member 'NGDFunctionLibrary_GetLocalCharacterOrSpectating::Context' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetLocalCharacterOrSpectating, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_GetLocalCharacterOrSpectating::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetLocalController
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_GetLocalController final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANGDPlayerController*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetLocalController) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetLocalController");
static_assert(sizeof(NGDFunctionLibrary_GetLocalController) == 0x000010, "Wrong size on NGDFunctionLibrary_GetLocalController");
static_assert(offsetof(NGDFunctionLibrary_GetLocalController, Context) == 0x000000, "Member 'NGDFunctionLibrary_GetLocalController::Context' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetLocalController, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_GetLocalController::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetLocalViewerPosition
// 0x0018 (0x0018 - 0x0000)
struct NGDFunctionLibrary_GetLocalViewerPosition final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_GetLocalViewerPosition) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetLocalViewerPosition");
static_assert(sizeof(NGDFunctionLibrary_GetLocalViewerPosition) == 0x000018, "Wrong size on NGDFunctionLibrary_GetLocalViewerPosition");
static_assert(offsetof(NGDFunctionLibrary_GetLocalViewerPosition, InContext) == 0x000000, "Member 'NGDFunctionLibrary_GetLocalViewerPosition::InContext' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetLocalViewerPosition, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_GetLocalViewerPosition::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetPlayerUniqueNetId
// 0x0018 (0x0018 - 0x0000)
struct NGDFunctionLibrary_GetPlayerUniqueNetId final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetPlayerUniqueNetId) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetPlayerUniqueNetId");
static_assert(sizeof(NGDFunctionLibrary_GetPlayerUniqueNetId) == 0x000018, "Wrong size on NGDFunctionLibrary_GetPlayerUniqueNetId");
static_assert(offsetof(NGDFunctionLibrary_GetPlayerUniqueNetId, PlayerState) == 0x000000, "Member 'NGDFunctionLibrary_GetPlayerUniqueNetId::PlayerState' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetPlayerUniqueNetId, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_GetPlayerUniqueNetId::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.GetSpectatingCharacter
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_GetSpectatingCharacter final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANGDCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_GetSpectatingCharacter) == 0x000008, "Wrong alignment on NGDFunctionLibrary_GetSpectatingCharacter");
static_assert(sizeof(NGDFunctionLibrary_GetSpectatingCharacter) == 0x000010, "Wrong size on NGDFunctionLibrary_GetSpectatingCharacter");
static_assert(offsetof(NGDFunctionLibrary_GetSpectatingCharacter, Context) == 0x000000, "Member 'NGDFunctionLibrary_GetSpectatingCharacter::Context' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_GetSpectatingCharacter, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_GetSpectatingCharacter::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.HasAllThisFlags
// 0x0003 (0x0003 - 0x0000)
struct NGDFunctionLibrary_HasAllThisFlags final
{
public:
	uint8                                         CurrentFlags;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagsToCheck;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_HasAllThisFlags) == 0x000001, "Wrong alignment on NGDFunctionLibrary_HasAllThisFlags");
static_assert(sizeof(NGDFunctionLibrary_HasAllThisFlags) == 0x000003, "Wrong size on NGDFunctionLibrary_HasAllThisFlags");
static_assert(offsetof(NGDFunctionLibrary_HasAllThisFlags, CurrentFlags) == 0x000000, "Member 'NGDFunctionLibrary_HasAllThisFlags::CurrentFlags' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_HasAllThisFlags, FlagsToCheck) == 0x000001, "Member 'NGDFunctionLibrary_HasAllThisFlags::FlagsToCheck' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_HasAllThisFlags, ReturnValue) == 0x000002, "Member 'NGDFunctionLibrary_HasAllThisFlags::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.HasAnyFlag
// 0x0002 (0x0002 - 0x0000)
struct NGDFunctionLibrary_HasAnyFlag final
{
public:
	uint8                                         CurrentFlags;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_HasAnyFlag) == 0x000001, "Wrong alignment on NGDFunctionLibrary_HasAnyFlag");
static_assert(sizeof(NGDFunctionLibrary_HasAnyFlag) == 0x000002, "Wrong size on NGDFunctionLibrary_HasAnyFlag");
static_assert(offsetof(NGDFunctionLibrary_HasAnyFlag, CurrentFlags) == 0x000000, "Member 'NGDFunctionLibrary_HasAnyFlag::CurrentFlags' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_HasAnyFlag, ReturnValue) == 0x000001, "Member 'NGDFunctionLibrary_HasAnyFlag::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.HasAnyThisFlags
// 0x0003 (0x0003 - 0x0000)
struct NGDFunctionLibrary_HasAnyThisFlags final
{
public:
	uint8                                         CurrentFlags;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagsToCheck;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_HasAnyThisFlags) == 0x000001, "Wrong alignment on NGDFunctionLibrary_HasAnyThisFlags");
static_assert(sizeof(NGDFunctionLibrary_HasAnyThisFlags) == 0x000003, "Wrong size on NGDFunctionLibrary_HasAnyThisFlags");
static_assert(offsetof(NGDFunctionLibrary_HasAnyThisFlags, CurrentFlags) == 0x000000, "Member 'NGDFunctionLibrary_HasAnyThisFlags::CurrentFlags' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_HasAnyThisFlags, FlagsToCheck) == 0x000001, "Member 'NGDFunctionLibrary_HasAnyThisFlags::FlagsToCheck' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_HasAnyThisFlags, ReturnValue) == 0x000002, "Member 'NGDFunctionLibrary_HasAnyThisFlags::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.HasOnlyThisFlags
// 0x0003 (0x0003 - 0x0000)
struct NGDFunctionLibrary_HasOnlyThisFlags final
{
public:
	uint8                                         CurrentFlags;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagsToCheck;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_HasOnlyThisFlags) == 0x000001, "Wrong alignment on NGDFunctionLibrary_HasOnlyThisFlags");
static_assert(sizeof(NGDFunctionLibrary_HasOnlyThisFlags) == 0x000003, "Wrong size on NGDFunctionLibrary_HasOnlyThisFlags");
static_assert(offsetof(NGDFunctionLibrary_HasOnlyThisFlags, CurrentFlags) == 0x000000, "Member 'NGDFunctionLibrary_HasOnlyThisFlags::CurrentFlags' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_HasOnlyThisFlags, FlagsToCheck) == 0x000001, "Member 'NGDFunctionLibrary_HasOnlyThisFlags::FlagsToCheck' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_HasOnlyThisFlags, ReturnValue) == 0x000002, "Member 'NGDFunctionLibrary_HasOnlyThisFlags::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.IsActorInShootingAngle
// 0x0018 (0x0018 - 0x0000)
struct NGDFunctionLibrary_IsActorInShootingAngle final
{
public:
	const class AActor*                           Shooter;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorToCheck;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_IsActorInShootingAngle) == 0x000008, "Wrong alignment on NGDFunctionLibrary_IsActorInShootingAngle");
static_assert(sizeof(NGDFunctionLibrary_IsActorInShootingAngle) == 0x000018, "Wrong size on NGDFunctionLibrary_IsActorInShootingAngle");
static_assert(offsetof(NGDFunctionLibrary_IsActorInShootingAngle, Shooter) == 0x000000, "Member 'NGDFunctionLibrary_IsActorInShootingAngle::Shooter' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_IsActorInShootingAngle, ActorToCheck) == 0x000008, "Member 'NGDFunctionLibrary_IsActorInShootingAngle::ActorToCheck' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_IsActorInShootingAngle, ReturnValue) == 0x000010, "Member 'NGDFunctionLibrary_IsActorInShootingAngle::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.IsDedicatedServer
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_IsDedicatedServer final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_IsDedicatedServer) == 0x000008, "Wrong alignment on NGDFunctionLibrary_IsDedicatedServer");
static_assert(sizeof(NGDFunctionLibrary_IsDedicatedServer) == 0x000010, "Wrong size on NGDFunctionLibrary_IsDedicatedServer");
static_assert(offsetof(NGDFunctionLibrary_IsDedicatedServer, Context) == 0x000000, "Member 'NGDFunctionLibrary_IsDedicatedServer::Context' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_IsDedicatedServer, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_IsDedicatedServer::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.IsListenServer
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_IsListenServer final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_IsListenServer) == 0x000008, "Wrong alignment on NGDFunctionLibrary_IsListenServer");
static_assert(sizeof(NGDFunctionLibrary_IsListenServer) == 0x000010, "Wrong size on NGDFunctionLibrary_IsListenServer");
static_assert(offsetof(NGDFunctionLibrary_IsListenServer, Context) == 0x000000, "Member 'NGDFunctionLibrary_IsListenServer::Context' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_IsListenServer, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_IsListenServer::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.IsStandalone
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_IsStandalone final
{
public:
	const class UObject*                          Context;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_IsStandalone) == 0x000008, "Wrong alignment on NGDFunctionLibrary_IsStandalone");
static_assert(sizeof(NGDFunctionLibrary_IsStandalone) == 0x000010, "Wrong size on NGDFunctionLibrary_IsStandalone");
static_assert(offsetof(NGDFunctionLibrary_IsStandalone, Context) == 0x000000, "Member 'NGDFunctionLibrary_IsStandalone::Context' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_IsStandalone, ReturnValue) == 0x000008, "Member 'NGDFunctionLibrary_IsStandalone::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.LimitVectorRange
// 0x0028 (0x0028 - 0x0000)
struct NGDFunctionLibrary_LimitVectorRange final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Desired;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Limit;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_LimitVectorRange) == 0x000004, "Wrong alignment on NGDFunctionLibrary_LimitVectorRange");
static_assert(sizeof(NGDFunctionLibrary_LimitVectorRange) == 0x000028, "Wrong size on NGDFunctionLibrary_LimitVectorRange");
static_assert(offsetof(NGDFunctionLibrary_LimitVectorRange, Origin) == 0x000000, "Member 'NGDFunctionLibrary_LimitVectorRange::Origin' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LimitVectorRange, Desired) == 0x00000C, "Member 'NGDFunctionLibrary_LimitVectorRange::Desired' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LimitVectorRange, Limit) == 0x000018, "Member 'NGDFunctionLibrary_LimitVectorRange::Limit' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LimitVectorRange, ReturnValue) == 0x00001C, "Member 'NGDFunctionLibrary_LimitVectorRange::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.LineTraceAgainstAABB
// 0x0060 (0x0060 - 0x0000)
struct NGDFunctionLibrary_LineTraceAgainstAABB final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutExitHitPoint;                                   // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResult                       ReturnValue;                                       // 0x0040(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_LineTraceAgainstAABB) == 0x000004, "Wrong alignment on NGDFunctionLibrary_LineTraceAgainstAABB");
static_assert(sizeof(NGDFunctionLibrary_LineTraceAgainstAABB) == 0x000060, "Wrong size on NGDFunctionLibrary_LineTraceAgainstAABB");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstAABB, Box) == 0x000000, "Member 'NGDFunctionLibrary_LineTraceAgainstAABB::Box' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstAABB, Start) == 0x00001C, "Member 'NGDFunctionLibrary_LineTraceAgainstAABB::Start' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstAABB, End) == 0x000028, "Member 'NGDFunctionLibrary_LineTraceAgainstAABB::End' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstAABB, OutExitHitPoint) == 0x000034, "Member 'NGDFunctionLibrary_LineTraceAgainstAABB::OutExitHitPoint' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstAABB, ReturnValue) == 0x000040, "Member 'NGDFunctionLibrary_LineTraceAgainstAABB::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.LineTraceAgainstCube
// 0x0070 (0x0070 - 0x0000)
struct NGDFunctionLibrary_LineTraceAgainstCube final
{
public:
	struct FQuat                                  BoxRotation;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0010(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0038(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                DebugObject;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResult                       ReturnValue;                                       // 0x0050(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_LineTraceAgainstCube) == 0x000010, "Wrong alignment on NGDFunctionLibrary_LineTraceAgainstCube");
static_assert(sizeof(NGDFunctionLibrary_LineTraceAgainstCube) == 0x000070, "Wrong size on NGDFunctionLibrary_LineTraceAgainstCube");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstCube, BoxRotation) == 0x000000, "Member 'NGDFunctionLibrary_LineTraceAgainstCube::BoxRotation' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstCube, Box) == 0x000010, "Member 'NGDFunctionLibrary_LineTraceAgainstCube::Box' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstCube, Start) == 0x00002C, "Member 'NGDFunctionLibrary_LineTraceAgainstCube::Start' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstCube, End) == 0x000038, "Member 'NGDFunctionLibrary_LineTraceAgainstCube::End' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstCube, Tolerance) == 0x000044, "Member 'NGDFunctionLibrary_LineTraceAgainstCube::Tolerance' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstCube, DebugObject) == 0x000048, "Member 'NGDFunctionLibrary_LineTraceAgainstCube::DebugObject' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_LineTraceAgainstCube, ReturnValue) == 0x000050, "Member 'NGDFunctionLibrary_LineTraceAgainstCube::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.PerlinNoise1D
// 0x0008 (0x0008 - 0x0000)
struct NGDFunctionLibrary_PerlinNoise1D final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_PerlinNoise1D) == 0x000004, "Wrong alignment on NGDFunctionLibrary_PerlinNoise1D");
static_assert(sizeof(NGDFunctionLibrary_PerlinNoise1D) == 0x000008, "Wrong size on NGDFunctionLibrary_PerlinNoise1D");
static_assert(offsetof(NGDFunctionLibrary_PerlinNoise1D, X) == 0x000000, "Member 'NGDFunctionLibrary_PerlinNoise1D::X' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_PerlinNoise1D, ReturnValue) == 0x000004, "Member 'NGDFunctionLibrary_PerlinNoise1D::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.RadiansBetweenVectors
// 0x001C (0x001C - 0x0000)
struct NGDFunctionLibrary_RadiansBetweenVectors final
{
public:
	struct FVector                                Vector1;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector2;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_RadiansBetweenVectors) == 0x000004, "Wrong alignment on NGDFunctionLibrary_RadiansBetweenVectors");
static_assert(sizeof(NGDFunctionLibrary_RadiansBetweenVectors) == 0x00001C, "Wrong size on NGDFunctionLibrary_RadiansBetweenVectors");
static_assert(offsetof(NGDFunctionLibrary_RadiansBetweenVectors, Vector1) == 0x000000, "Member 'NGDFunctionLibrary_RadiansBetweenVectors::Vector1' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_RadiansBetweenVectors, Vector2) == 0x00000C, "Member 'NGDFunctionLibrary_RadiansBetweenVectors::Vector2' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_RadiansBetweenVectors, ReturnValue) == 0x000018, "Member 'NGDFunctionLibrary_RadiansBetweenVectors::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.RandomPointInCircle
// 0x0010 (0x0010 - 0x0000)
struct NGDFunctionLibrary_RandomPointInCircle final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_RandomPointInCircle) == 0x000004, "Wrong alignment on NGDFunctionLibrary_RandomPointInCircle");
static_assert(sizeof(NGDFunctionLibrary_RandomPointInCircle) == 0x000010, "Wrong size on NGDFunctionLibrary_RandomPointInCircle");
static_assert(offsetof(NGDFunctionLibrary_RandomPointInCircle, Radius) == 0x000000, "Member 'NGDFunctionLibrary_RandomPointInCircle::Radius' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_RandomPointInCircle, ReturnValue) == 0x000004, "Member 'NGDFunctionLibrary_RandomPointInCircle::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.SaveStringTextToFile
// 0x0038 (0x0038 - 0x0000)
struct NGDFunctionLibrary_SaveStringTextToFile final
{
public:
	class FString                                 SaveDirectory;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveText;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowOverWriting;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDFunctionLibrary_SaveStringTextToFile) == 0x000008, "Wrong alignment on NGDFunctionLibrary_SaveStringTextToFile");
static_assert(sizeof(NGDFunctionLibrary_SaveStringTextToFile) == 0x000038, "Wrong size on NGDFunctionLibrary_SaveStringTextToFile");
static_assert(offsetof(NGDFunctionLibrary_SaveStringTextToFile, SaveDirectory) == 0x000000, "Member 'NGDFunctionLibrary_SaveStringTextToFile::SaveDirectory' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_SaveStringTextToFile, Filename) == 0x000010, "Member 'NGDFunctionLibrary_SaveStringTextToFile::Filename' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_SaveStringTextToFile, SaveText) == 0x000020, "Member 'NGDFunctionLibrary_SaveStringTextToFile::SaveText' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_SaveStringTextToFile, AllowOverWriting) == 0x000030, "Member 'NGDFunctionLibrary_SaveStringTextToFile::AllowOverWriting' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_SaveStringTextToFile, ReturnValue) == 0x000031, "Member 'NGDFunctionLibrary_SaveStringTextToFile::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.Slerp
// 0x0028 (0x0028 - 0x0000)
struct NGDFunctionLibrary_Slerp final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_Slerp) == 0x000004, "Wrong alignment on NGDFunctionLibrary_Slerp");
static_assert(sizeof(NGDFunctionLibrary_Slerp) == 0x000028, "Wrong size on NGDFunctionLibrary_Slerp");
static_assert(offsetof(NGDFunctionLibrary_Slerp, A) == 0x000000, "Member 'NGDFunctionLibrary_Slerp::A' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_Slerp, B) == 0x00000C, "Member 'NGDFunctionLibrary_Slerp::B' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_Slerp, Alpha) == 0x000018, "Member 'NGDFunctionLibrary_Slerp::Alpha' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_Slerp, ReturnValue) == 0x00001C, "Member 'NGDFunctionLibrary_Slerp::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDFunctionLibrary.TracePointAgainstCube
// 0x0070 (0x0070 - 0x0000)
struct NGDFunctionLibrary_TracePointAgainstCube final
{
public:
	struct FQuat                                  BoxRotation;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0010(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Tolerance;                                         // 0x0038(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DebugObject;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResult                       ReturnValue;                                       // 0x0050(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDFunctionLibrary_TracePointAgainstCube) == 0x000010, "Wrong alignment on NGDFunctionLibrary_TracePointAgainstCube");
static_assert(sizeof(NGDFunctionLibrary_TracePointAgainstCube) == 0x000070, "Wrong size on NGDFunctionLibrary_TracePointAgainstCube");
static_assert(offsetof(NGDFunctionLibrary_TracePointAgainstCube, BoxRotation) == 0x000000, "Member 'NGDFunctionLibrary_TracePointAgainstCube::BoxRotation' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_TracePointAgainstCube, Box) == 0x000010, "Member 'NGDFunctionLibrary_TracePointAgainstCube::Box' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_TracePointAgainstCube, Point) == 0x00002C, "Member 'NGDFunctionLibrary_TracePointAgainstCube::Point' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_TracePointAgainstCube, Tolerance) == 0x000038, "Member 'NGDFunctionLibrary_TracePointAgainstCube::Tolerance' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_TracePointAgainstCube, DebugObject) == 0x000048, "Member 'NGDFunctionLibrary_TracePointAgainstCube::DebugObject' has a wrong offset!");
static_assert(offsetof(NGDFunctionLibrary_TracePointAgainstCube, ReturnValue) == 0x000050, "Member 'NGDFunctionLibrary_TracePointAgainstCube::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.CheckForInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct NGDGameInstance_CheckForInventoryItem final
{
public:
	class FString                                 SKU;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_CheckForInventoryItem) == 0x000008, "Wrong alignment on NGDGameInstance_CheckForInventoryItem");
static_assert(sizeof(NGDGameInstance_CheckForInventoryItem) == 0x000010, "Wrong size on NGDGameInstance_CheckForInventoryItem");
static_assert(offsetof(NGDGameInstance_CheckForInventoryItem, SKU) == 0x000000, "Member 'NGDGameInstance_CheckForInventoryItem::SKU' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.DominanceBoard
// 0x0038 (0x0038 - 0x0000)
struct NGDGameInstance_DominanceBoard final
{
public:
	int32                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stop;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchType;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Period;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_DominanceBoard) == 0x000008, "Wrong alignment on NGDGameInstance_DominanceBoard");
static_assert(sizeof(NGDGameInstance_DominanceBoard) == 0x000038, "Wrong size on NGDGameInstance_DominanceBoard");
static_assert(offsetof(NGDGameInstance_DominanceBoard, Start) == 0x000000, "Member 'NGDGameInstance_DominanceBoard::Start' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_DominanceBoard, Stop) == 0x000004, "Member 'NGDGameInstance_DominanceBoard::Stop' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_DominanceBoard, MatchType) == 0x000008, "Member 'NGDGameInstance_DominanceBoard::MatchType' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_DominanceBoard, TeamType) == 0x000018, "Member 'NGDGameInstance_DominanceBoard::TeamType' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_DominanceBoard, Period) == 0x000028, "Member 'NGDGameInstance_DominanceBoard::Period' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.FlushMemoryUssage
// 0x0001 (0x0001 - 0x0000)
struct NGDGameInstance_FlushMemoryUssage final
{
public:
	bool                                          FullReport;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_FlushMemoryUssage) == 0x000001, "Wrong alignment on NGDGameInstance_FlushMemoryUssage");
static_assert(sizeof(NGDGameInstance_FlushMemoryUssage) == 0x000001, "Wrong size on NGDGameInstance_FlushMemoryUssage");
static_assert(offsetof(NGDGameInstance_FlushMemoryUssage, FullReport) == 0x000000, "Member 'NGDGameInstance_FlushMemoryUssage::FullReport' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.ForceLogin
// 0x0020 (0x0020 - 0x0000)
struct NGDGameInstance_ForceLogin final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_ForceLogin) == 0x000008, "Wrong alignment on NGDGameInstance_ForceLogin");
static_assert(sizeof(NGDGameInstance_ForceLogin) == 0x000020, "Wrong size on NGDGameInstance_ForceLogin");
static_assert(offsetof(NGDGameInstance_ForceLogin, UserName) == 0x000000, "Member 'NGDGameInstance_ForceLogin::UserName' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_ForceLogin, Password) == 0x000010, "Member 'NGDGameInstance_ForceLogin::Password' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.GetBackendServer
// 0x0008 (0x0008 - 0x0000)
struct NGDGameInstance_GetBackendServer final
{
public:
	class UNGDBackendServer*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_GetBackendServer) == 0x000008, "Wrong alignment on NGDGameInstance_GetBackendServer");
static_assert(sizeof(NGDGameInstance_GetBackendServer) == 0x000008, "Wrong size on NGDGameInstance_GetBackendServer");
static_assert(offsetof(NGDGameInstance_GetBackendServer, ReturnValue) == 0x000000, "Member 'NGDGameInstance_GetBackendServer::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.GetOnlineService
// 0x0008 (0x0008 - 0x0000)
struct NGDGameInstance_GetOnlineService final
{
public:
	class UNGDOnlineServiceBase*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_GetOnlineService) == 0x000008, "Wrong alignment on NGDGameInstance_GetOnlineService");
static_assert(sizeof(NGDGameInstance_GetOnlineService) == 0x000008, "Wrong size on NGDGameInstance_GetOnlineService");
static_assert(offsetof(NGDGameInstance_GetOnlineService, ReturnValue) == 0x000000, "Member 'NGDGameInstance_GetOnlineService::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.JoinOnlineServer
// 0x0010 (0x0010 - 0x0000)
struct NGDGameInstance_JoinOnlineServer final
{
public:
	class FString                                 ServerAddress;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_JoinOnlineServer) == 0x000008, "Wrong alignment on NGDGameInstance_JoinOnlineServer");
static_assert(sizeof(NGDGameInstance_JoinOnlineServer) == 0x000010, "Wrong size on NGDGameInstance_JoinOnlineServer");
static_assert(offsetof(NGDGameInstance_JoinOnlineServer, ServerAddress) == 0x000000, "Member 'NGDGameInstance_JoinOnlineServer::ServerAddress' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.Matchmaking
// 0x0030 (0x0030 - 0x0000)
struct NGDGameInstance_Matchmaking final
{
public:
	class FString                                 RuleName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastPlayedMap;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_Matchmaking) == 0x000008, "Wrong alignment on NGDGameInstance_Matchmaking");
static_assert(sizeof(NGDGameInstance_Matchmaking) == 0x000030, "Wrong size on NGDGameInstance_Matchmaking");
static_assert(offsetof(NGDGameInstance_Matchmaking, RuleName) == 0x000000, "Member 'NGDGameInstance_Matchmaking::RuleName' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_Matchmaking, ClientVersion) == 0x000010, "Member 'NGDGameInstance_Matchmaking::ClientVersion' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_Matchmaking, LastPlayedMap) == 0x000020, "Member 'NGDGameInstance_Matchmaking::LastPlayedMap' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.MatchmakingWithTicket
// 0x0010 (0x0010 - 0x0000)
struct NGDGameInstance_MatchmakingWithTicket final
{
public:
	class FString                                 MatchmakingTicketId;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_MatchmakingWithTicket) == 0x000008, "Wrong alignment on NGDGameInstance_MatchmakingWithTicket");
static_assert(sizeof(NGDGameInstance_MatchmakingWithTicket) == 0x000010, "Wrong size on NGDGameInstance_MatchmakingWithTicket");
static_assert(offsetof(NGDGameInstance_MatchmakingWithTicket, MatchmakingTicketId) == 0x000000, "Member 'NGDGameInstance_MatchmakingWithTicket::MatchmakingTicketId' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.NGDLogin
// 0x0020 (0x0020 - 0x0000)
struct NGDGameInstance_NGDLogin final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_NGDLogin) == 0x000008, "Wrong alignment on NGDGameInstance_NGDLogin");
static_assert(sizeof(NGDGameInstance_NGDLogin) == 0x000020, "Wrong size on NGDGameInstance_NGDLogin");
static_assert(offsetof(NGDGameInstance_NGDLogin, UserName) == 0x000000, "Member 'NGDGameInstance_NGDLogin::UserName' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_NGDLogin, Password) == 0x000010, "Member 'NGDGameInstance_NGDLogin::Password' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.OnLeaderboardsRequestComplete
// 0x0050 (0x0050 - 0x0000)
struct NGDGameInstance_OnLeaderboardsRequestComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNGDBackendGlobalLeaderboardEntry> LeaderboardEntries;                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FNGDBackendGlobalLeaderboardEntry      OwnEntry;                                          // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_OnLeaderboardsRequestComplete) == 0x000008, "Wrong alignment on NGDGameInstance_OnLeaderboardsRequestComplete");
static_assert(sizeof(NGDGameInstance_OnLeaderboardsRequestComplete) == 0x000050, "Wrong size on NGDGameInstance_OnLeaderboardsRequestComplete");
static_assert(offsetof(NGDGameInstance_OnLeaderboardsRequestComplete, bWasSuccessful) == 0x000000, "Member 'NGDGameInstance_OnLeaderboardsRequestComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_OnLeaderboardsRequestComplete, ErrorString) == 0x000008, "Member 'NGDGameInstance_OnLeaderboardsRequestComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_OnLeaderboardsRequestComplete, LeaderboardEntries) == 0x000018, "Member 'NGDGameInstance_OnLeaderboardsRequestComplete::LeaderboardEntries' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_OnLeaderboardsRequestComplete, OwnEntry) == 0x000028, "Member 'NGDGameInstance_OnLeaderboardsRequestComplete::OwnEntry' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.RunConsoleCommand
// 0x0018 (0x0018 - 0x0000)
struct NGDGameInstance_RunConsoleCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDGameInstance_RunConsoleCommand) == 0x000008, "Wrong alignment on NGDGameInstance_RunConsoleCommand");
static_assert(sizeof(NGDGameInstance_RunConsoleCommand) == 0x000018, "Wrong size on NGDGameInstance_RunConsoleCommand");
static_assert(offsetof(NGDGameInstance_RunConsoleCommand, Command) == 0x000000, "Member 'NGDGameInstance_RunConsoleCommand::Command' has a wrong offset!");
static_assert(offsetof(NGDGameInstance_RunConsoleCommand, ReturnValue) == 0x000010, "Member 'NGDGameInstance_RunConsoleCommand::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.SetSelectedPawnClass
// 0x0008 (0x0008 - 0x0000)
struct NGDGameInstance_SetSelectedPawnClass final
{
public:
	TSubclassOf<class ANGDCharacter>              PawnClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_SetSelectedPawnClass) == 0x000008, "Wrong alignment on NGDGameInstance_SetSelectedPawnClass");
static_assert(sizeof(NGDGameInstance_SetSelectedPawnClass) == 0x000008, "Wrong size on NGDGameInstance_SetSelectedPawnClass");
static_assert(offsetof(NGDGameInstance_SetSelectedPawnClass, PawnClass) == 0x000000, "Member 'NGDGameInstance_SetSelectedPawnClass::PawnClass' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.ShouldStartRecordingReplay
// 0x0001 (0x0001 - 0x0000)
struct NGDGameInstance_ShouldStartRecordingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_ShouldStartRecordingReplay) == 0x000001, "Wrong alignment on NGDGameInstance_ShouldStartRecordingReplay");
static_assert(sizeof(NGDGameInstance_ShouldStartRecordingReplay) == 0x000001, "Wrong size on NGDGameInstance_ShouldStartRecordingReplay");
static_assert(offsetof(NGDGameInstance_ShouldStartRecordingReplay, ReturnValue) == 0x000000, "Member 'NGDGameInstance_ShouldStartRecordingReplay::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.ShowLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct NGDGameInstance_ShowLoadingScreen final
{
public:
	bool                                          bAutoHide;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_ShowLoadingScreen) == 0x000001, "Wrong alignment on NGDGameInstance_ShowLoadingScreen");
static_assert(sizeof(NGDGameInstance_ShowLoadingScreen) == 0x000001, "Wrong size on NGDGameInstance_ShowLoadingScreen");
static_assert(offsetof(NGDGameInstance_ShowLoadingScreen, bAutoHide) == 0x000000, "Member 'NGDGameInstance_ShowLoadingScreen::bAutoHide' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.SteamBuyItem
// 0x0010 (0x0010 - 0x0000)
struct NGDGameInstance_SteamBuyItem final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_SteamBuyItem) == 0x000008, "Wrong alignment on NGDGameInstance_SteamBuyItem");
static_assert(sizeof(NGDGameInstance_SteamBuyItem) == 0x000010, "Wrong size on NGDGameInstance_SteamBuyItem");
static_assert(offsetof(NGDGameInstance_SteamBuyItem, ItemName) == 0x000000, "Member 'NGDGameInstance_SteamBuyItem::ItemName' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.TestBuyInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct NGDGameInstance_TestBuyInventoryItem final
{
public:
	class FString                                 SKU;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_TestBuyInventoryItem) == 0x000008, "Wrong alignment on NGDGameInstance_TestBuyInventoryItem");
static_assert(sizeof(NGDGameInstance_TestBuyInventoryItem) == 0x000010, "Wrong size on NGDGameInstance_TestBuyInventoryItem");
static_assert(offsetof(NGDGameInstance_TestBuyInventoryItem, SKU) == 0x000000, "Member 'NGDGameInstance_TestBuyInventoryItem::SKU' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.IsPlayingReplay
// 0x0001 (0x0001 - 0x0000)
struct NGDGameInstance_IsPlayingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_IsPlayingReplay) == 0x000001, "Wrong alignment on NGDGameInstance_IsPlayingReplay");
static_assert(sizeof(NGDGameInstance_IsPlayingReplay) == 0x000001, "Wrong size on NGDGameInstance_IsPlayingReplay");
static_assert(offsetof(NGDGameInstance_IsPlayingReplay, ReturnValue) == 0x000000, "Member 'NGDGameInstance_IsPlayingReplay::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.IsRecordingReplay
// 0x0001 (0x0001 - 0x0000)
struct NGDGameInstance_IsRecordingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_IsRecordingReplay) == 0x000001, "Wrong alignment on NGDGameInstance_IsRecordingReplay");
static_assert(sizeof(NGDGameInstance_IsRecordingReplay) == 0x000001, "Wrong size on NGDGameInstance_IsRecordingReplay");
static_assert(offsetof(NGDGameInstance_IsRecordingReplay, ReturnValue) == 0x000000, "Member 'NGDGameInstance_IsRecordingReplay::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameInstance.IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct NGDGameInstance_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameInstance_IsUsingGamepad) == 0x000001, "Wrong alignment on NGDGameInstance_IsUsingGamepad");
static_assert(sizeof(NGDGameInstance_IsUsingGamepad) == 0x000001, "Wrong size on NGDGameInstance_IsUsingGamepad");
static_assert(offsetof(NGDGameInstance_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'NGDGameInstance_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameMode.OnAccountValidated
// 0x0058 (0x0058 - 0x0000)
struct NGDGameMode_OnAccountValidated final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       PlayerStateUniqueId;                               // 0x0008(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinBalance;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserName;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameMode_OnAccountValidated) == 0x000008, "Wrong alignment on NGDGameMode_OnAccountValidated");
static_assert(sizeof(NGDGameMode_OnAccountValidated) == 0x000058, "Wrong size on NGDGameMode_OnAccountValidated");
static_assert(offsetof(NGDGameMode_OnAccountValidated, bWasSuccessful) == 0x000000, "Member 'NGDGameMode_OnAccountValidated::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnAccountValidated, PlayerStateUniqueId) == 0x000008, "Member 'NGDGameMode_OnAccountValidated::PlayerStateUniqueId' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnAccountValidated, UserId) == 0x000030, "Member 'NGDGameMode_OnAccountValidated::UserId' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnAccountValidated, CoinBalance) == 0x000040, "Member 'NGDGameMode_OnAccountValidated::CoinBalance' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnAccountValidated, UserName) == 0x000048, "Member 'NGDGameMode_OnAccountValidated::UserName' has a wrong offset!");

// Function UnrealProject.NGDGameMode.OnValidateAccountResponse
// 0x0080 (0x0080 - 0x0000)
struct NGDGameMode_OnValidateAccountResponse final
{
public:
	struct FUniqueNetIdRepl                       PlayerStateUniqueId;                               // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountTicket;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinBalance;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserName;                                          // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttemptIndex;                                      // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDGameMode_OnValidateAccountResponse) == 0x000008, "Wrong alignment on NGDGameMode_OnValidateAccountResponse");
static_assert(sizeof(NGDGameMode_OnValidateAccountResponse) == 0x000080, "Wrong size on NGDGameMode_OnValidateAccountResponse");
static_assert(offsetof(NGDGameMode_OnValidateAccountResponse, PlayerStateUniqueId) == 0x000000, "Member 'NGDGameMode_OnValidateAccountResponse::PlayerStateUniqueId' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnValidateAccountResponse, AccountTicket) == 0x000028, "Member 'NGDGameMode_OnValidateAccountResponse::AccountTicket' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnValidateAccountResponse, UserId) == 0x000038, "Member 'NGDGameMode_OnValidateAccountResponse::UserId' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnValidateAccountResponse, CoinBalance) == 0x000048, "Member 'NGDGameMode_OnValidateAccountResponse::CoinBalance' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnValidateAccountResponse, UserName) == 0x000050, "Member 'NGDGameMode_OnValidateAccountResponse::UserName' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnValidateAccountResponse, bWasSuccessful) == 0x000060, "Member 'NGDGameMode_OnValidateAccountResponse::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnValidateAccountResponse, ErrorString) == 0x000068, "Member 'NGDGameMode_OnValidateAccountResponse::ErrorString' has a wrong offset!");
static_assert(offsetof(NGDGameMode_OnValidateAccountResponse, AttemptIndex) == 0x000078, "Member 'NGDGameMode_OnValidateAccountResponse::AttemptIndex' has a wrong offset!");

// Function UnrealProject.NGDGameMode.GetTeamComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDGameMode_GetTeamComponent final
{
public:
	class UNGDTeamComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameMode_GetTeamComponent) == 0x000008, "Wrong alignment on NGDGameMode_GetTeamComponent");
static_assert(sizeof(NGDGameMode_GetTeamComponent) == 0x000008, "Wrong size on NGDGameMode_GetTeamComponent");
static_assert(offsetof(NGDGameMode_GetTeamComponent, ReturnValue) == 0x000000, "Member 'NGDGameMode_GetTeamComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameState.GetSynchronizedTime
// 0x0004 (0x0004 - 0x0000)
struct NGDGameState_GetSynchronizedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameState_GetSynchronizedTime) == 0x000004, "Wrong alignment on NGDGameState_GetSynchronizedTime");
static_assert(sizeof(NGDGameState_GetSynchronizedTime) == 0x000004, "Wrong size on NGDGameState_GetSynchronizedTime");
static_assert(offsetof(NGDGameState_GetSynchronizedTime, ReturnValue) == 0x000000, "Member 'NGDGameState_GetSynchronizedTime::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDGameState.MulticastShowScreenDebugMessage
// 0x0020 (0x0020 - 0x0000)
struct NGDGameState_MulticastShowScreenDebugMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToDisplay;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EScreenMessageKey                             Key;                                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameState_MulticastShowScreenDebugMessage) == 0x000008, "Wrong alignment on NGDGameState_MulticastShowScreenDebugMessage");
static_assert(sizeof(NGDGameState_MulticastShowScreenDebugMessage) == 0x000020, "Wrong size on NGDGameState_MulticastShowScreenDebugMessage");
static_assert(offsetof(NGDGameState_MulticastShowScreenDebugMessage, Message) == 0x000000, "Member 'NGDGameState_MulticastShowScreenDebugMessage::Message' has a wrong offset!");
static_assert(offsetof(NGDGameState_MulticastShowScreenDebugMessage, TimeToDisplay) == 0x000010, "Member 'NGDGameState_MulticastShowScreenDebugMessage::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(NGDGameState_MulticastShowScreenDebugMessage, Key) == 0x000018, "Member 'NGDGameState_MulticastShowScreenDebugMessage::Key' has a wrong offset!");

// Function UnrealProject.NGDGameState.RegisterTeamState
// 0x0008 (0x0008 - 0x0000)
struct NGDGameState_RegisterTeamState final
{
public:
	class ANGDTeamState*                          State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameState_RegisterTeamState) == 0x000008, "Wrong alignment on NGDGameState_RegisterTeamState");
static_assert(sizeof(NGDGameState_RegisterTeamState) == 0x000008, "Wrong size on NGDGameState_RegisterTeamState");
static_assert(offsetof(NGDGameState_RegisterTeamState, State) == 0x000000, "Member 'NGDGameState_RegisterTeamState::State' has a wrong offset!");

// Function UnrealProject.NGDGameState.SetServerTime
// 0x0004 (0x0004 - 0x0000)
struct NGDGameState_SetServerTime final
{
public:
	int32                                         InTimeMs;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameState_SetServerTime) == 0x000004, "Wrong alignment on NGDGameState_SetServerTime");
static_assert(sizeof(NGDGameState_SetServerTime) == 0x000004, "Wrong size on NGDGameState_SetServerTime");
static_assert(offsetof(NGDGameState_SetServerTime, InTimeMs) == 0x000000, "Member 'NGDGameState_SetServerTime::InTimeMs' has a wrong offset!");

// Function UnrealProject.NGDGameState.UnRegisterTeamState
// 0x0008 (0x0008 - 0x0000)
struct NGDGameState_UnRegisterTeamState final
{
public:
	class ANGDTeamState*                          State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameState_UnRegisterTeamState) == 0x000008, "Wrong alignment on NGDGameState_UnRegisterTeamState");
static_assert(sizeof(NGDGameState_UnRegisterTeamState) == 0x000008, "Wrong size on NGDGameState_UnRegisterTeamState");
static_assert(offsetof(NGDGameState_UnRegisterTeamState, State) == 0x000000, "Member 'NGDGameState_UnRegisterTeamState::State' has a wrong offset!");

// Function UnrealProject.NGDGameState.IsGameplayActive
// 0x0001 (0x0001 - 0x0000)
struct NGDGameState_IsGameplayActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDGameState_IsGameplayActive) == 0x000001, "Wrong alignment on NGDGameState_IsGameplayActive");
static_assert(sizeof(NGDGameState_IsGameplayActive) == 0x000001, "Wrong size on NGDGameState_IsGameplayActive");
static_assert(offsetof(NGDGameState_IsGameplayActive, ReturnValue) == 0x000000, "Member 'NGDGameState_IsGameplayActive::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDHitRegistrationLibrary.CheckForHitAtTime
// 0x0100 (0x0100 - 0x0000)
struct NGDHitRegistrationLibrary_CheckForHitAtTime final
{
public:
	class UObject*                                WeaponAsContext;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InRewindableActors;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                from;                                              // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                to;                                                // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToCheckHit;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FValidationPriorityHit                 ValidationPriority;                                // 0x0038(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ValidationThreshold;                               // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitRegistrationBullet                 HitRegistrationBullet;                             // 0x004C(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FixedDeltaTime;                                    // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ReturnValue;                                       // 0x0074(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDHitRegistrationLibrary_CheckForHitAtTime) == 0x000008, "Wrong alignment on NGDHitRegistrationLibrary_CheckForHitAtTime");
static_assert(sizeof(NGDHitRegistrationLibrary_CheckForHitAtTime) == 0x000100, "Wrong size on NGDHitRegistrationLibrary_CheckForHitAtTime");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, WeaponAsContext) == 0x000000, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::WeaponAsContext' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, InRewindableActors) == 0x000008, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::InRewindableActors' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, from) == 0x000018, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::from' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, to) == 0x000024, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::to' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, TimeToCheckHit) == 0x000030, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::TimeToCheckHit' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, ValidationPriority) == 0x000038, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::ValidationPriority' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, ValidationThreshold) == 0x000048, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::ValidationThreshold' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, HitRegistrationBullet) == 0x00004C, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::HitRegistrationBullet' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, FixedDeltaTime) == 0x000070, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::FixedDeltaTime' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForHitAtTime, ReturnValue) == 0x000074, "Member 'NGDHitRegistrationLibrary_CheckForHitAtTime::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDHitRegistrationLibrary.CheckForMultiHitAtTime
// 0x0050 (0x0050 - 0x0000)
struct NGDHitRegistrationLibrary_CheckForMultiHitAtTime final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InRewindableActors;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                from;                                              // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                to;                                                // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOffsetToCheckHit;                              // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValidationThreshold;                               // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime) == 0x000008, "Wrong alignment on NGDHitRegistrationLibrary_CheckForMultiHitAtTime");
static_assert(sizeof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime) == 0x000050, "Wrong size on NGDHitRegistrationLibrary_CheckForMultiHitAtTime");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime, Context) == 0x000000, "Member 'NGDHitRegistrationLibrary_CheckForMultiHitAtTime::Context' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime, InRewindableActors) == 0x000008, "Member 'NGDHitRegistrationLibrary_CheckForMultiHitAtTime::InRewindableActors' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime, from) == 0x000018, "Member 'NGDHitRegistrationLibrary_CheckForMultiHitAtTime::from' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime, to) == 0x000024, "Member 'NGDHitRegistrationLibrary_CheckForMultiHitAtTime::to' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime, Radius) == 0x000030, "Member 'NGDHitRegistrationLibrary_CheckForMultiHitAtTime::Radius' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime, TimeOffsetToCheckHit) == 0x000034, "Member 'NGDHitRegistrationLibrary_CheckForMultiHitAtTime::TimeOffsetToCheckHit' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime, ValidationThreshold) == 0x000038, "Member 'NGDHitRegistrationLibrary_CheckForMultiHitAtTime::ValidationThreshold' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_CheckForMultiHitAtTime, ReturnValue) == 0x000040, "Member 'NGDHitRegistrationLibrary_CheckForMultiHitAtTime::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDHitRegistrationLibrary.GetRewindableActorsOfInterest
// 0x0030 (0x0030 - 0x0000)
struct NGDHitRegistrationLibrary_GetRewindableActorsOfInterest final
{
public:
	class UObject*                                WeaponAsContext;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                from;                                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalizedDirection;                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHitRegistrationLibrary_GetRewindableActorsOfInterest) == 0x000008, "Wrong alignment on NGDHitRegistrationLibrary_GetRewindableActorsOfInterest");
static_assert(sizeof(NGDHitRegistrationLibrary_GetRewindableActorsOfInterest) == 0x000030, "Wrong size on NGDHitRegistrationLibrary_GetRewindableActorsOfInterest");
static_assert(offsetof(NGDHitRegistrationLibrary_GetRewindableActorsOfInterest, WeaponAsContext) == 0x000000, "Member 'NGDHitRegistrationLibrary_GetRewindableActorsOfInterest::WeaponAsContext' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_GetRewindableActorsOfInterest, from) == 0x000008, "Member 'NGDHitRegistrationLibrary_GetRewindableActorsOfInterest::from' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_GetRewindableActorsOfInterest, NormalizedDirection) == 0x000014, "Member 'NGDHitRegistrationLibrary_GetRewindableActorsOfInterest::NormalizedDirection' has a wrong offset!");
static_assert(offsetof(NGDHitRegistrationLibrary_GetRewindableActorsOfInterest, ReturnValue) == 0x000020, "Member 'NGDHitRegistrationLibrary_GetRewindableActorsOfInterest::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDHUD.IsInventoryOpen
// 0x0001 (0x0001 - 0x0000)
struct NGDHUD_IsInventoryOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_IsInventoryOpen) == 0x000001, "Wrong alignment on NGDHUD_IsInventoryOpen");
static_assert(sizeof(NGDHUD_IsInventoryOpen) == 0x000001, "Wrong size on NGDHUD_IsInventoryOpen");
static_assert(offsetof(NGDHUD_IsInventoryOpen, ReturnValue) == 0x000000, "Member 'NGDHUD_IsInventoryOpen::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnAmmountOfCarriedConsumablesChange
// 0x0004 (0x0004 - 0x0000)
struct NGDHUD_OnAmmountOfCarriedConsumablesChange final
{
public:
	int32                                         AmmountOfConsumables;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnAmmountOfCarriedConsumablesChange) == 0x000004, "Wrong alignment on NGDHUD_OnAmmountOfCarriedConsumablesChange");
static_assert(sizeof(NGDHUD_OnAmmountOfCarriedConsumablesChange) == 0x000004, "Wrong size on NGDHUD_OnAmmountOfCarriedConsumablesChange");
static_assert(offsetof(NGDHUD_OnAmmountOfCarriedConsumablesChange, AmmountOfConsumables) == 0x000000, "Member 'NGDHUD_OnAmmountOfCarriedConsumablesChange::AmmountOfConsumables' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnChangedADS
// 0x0001 (0x0001 - 0x0000)
struct NGDHUD_OnChangedADS final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnChangedADS) == 0x000001, "Wrong alignment on NGDHUD_OnChangedADS");
static_assert(sizeof(NGDHUD_OnChangedADS) == 0x000001, "Wrong size on NGDHUD_OnChangedADS");
static_assert(offsetof(NGDHUD_OnChangedADS, bNewValue) == 0x000000, "Member 'NGDHUD_OnChangedADS::bNewValue' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnChangeIsConsuming
// 0x0001 (0x0001 - 0x0000)
struct NGDHUD_OnChangeIsConsuming final
{
public:
	bool                                          bIsConsuming;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnChangeIsConsuming) == 0x000001, "Wrong alignment on NGDHUD_OnChangeIsConsuming");
static_assert(sizeof(NGDHUD_OnChangeIsConsuming) == 0x000001, "Wrong size on NGDHUD_OnChangeIsConsuming");
static_assert(offsetof(NGDHUD_OnChangeIsConsuming, bIsConsuming) == 0x000000, "Member 'NGDHUD_OnChangeIsConsuming::bIsConsuming' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnChangeShowCrosshair
// 0x0001 (0x0001 - 0x0000)
struct NGDHUD_OnChangeShowCrosshair final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnChangeShowCrosshair) == 0x000001, "Wrong alignment on NGDHUD_OnChangeShowCrosshair");
static_assert(sizeof(NGDHUD_OnChangeShowCrosshair) == 0x000001, "Wrong size on NGDHUD_OnChangeShowCrosshair");
static_assert(offsetof(NGDHUD_OnChangeShowCrosshair, bNewValue) == 0x000000, "Member 'NGDHUD_OnChangeShowCrosshair::bNewValue' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnFocusInteractableActor
// 0x0010 (0x0010 - 0x0000)
struct NGDHUD_OnFocusInteractableActor final
{
public:
	TScriptInterface<class INGDInteractableInterface> InInteractableActorFocused;                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnFocusInteractableActor) == 0x000008, "Wrong alignment on NGDHUD_OnFocusInteractableActor");
static_assert(sizeof(NGDHUD_OnFocusInteractableActor) == 0x000010, "Wrong size on NGDHUD_OnFocusInteractableActor");
static_assert(offsetof(NGDHUD_OnFocusInteractableActor, InInteractableActorFocused) == 0x000000, "Member 'NGDHUD_OnFocusInteractableActor::InInteractableActorFocused' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnFocusVehicle
// 0x0018 (0x0018 - 0x0000)
struct NGDHUD_OnFocusVehicle final
{
public:
	TScriptInterface<class INGDInteractableInterface> InInteractableActorFocused;                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          IsBoarded;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDHUD_OnFocusVehicle) == 0x000008, "Wrong alignment on NGDHUD_OnFocusVehicle");
static_assert(sizeof(NGDHUD_OnFocusVehicle) == 0x000018, "Wrong size on NGDHUD_OnFocusVehicle");
static_assert(offsetof(NGDHUD_OnFocusVehicle, InInteractableActorFocused) == 0x000000, "Member 'NGDHUD_OnFocusVehicle::InInteractableActorFocused' has a wrong offset!");
static_assert(offsetof(NGDHUD_OnFocusVehicle, IsBoarded) == 0x000010, "Member 'NGDHUD_OnFocusVehicle::IsBoarded' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnSpectatorStateChanged
// 0x0008 (0x0008 - 0x0000)
struct NGDHUD_OnSpectatorStateChanged final
{
public:
	class FName                                   CurrentSpectatorState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnSpectatorStateChanged) == 0x000004, "Wrong alignment on NGDHUD_OnSpectatorStateChanged");
static_assert(sizeof(NGDHUD_OnSpectatorStateChanged) == 0x000008, "Wrong size on NGDHUD_OnSpectatorStateChanged");
static_assert(offsetof(NGDHUD_OnSpectatorStateChanged, CurrentSpectatorState) == 0x000000, "Member 'NGDHUD_OnSpectatorStateChanged::CurrentSpectatorState' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnSpectatorTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct NGDHUD_OnSpectatorTargetChanged final
{
public:
	class FName                                   CurrentTargetName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnSpectatorTargetChanged) == 0x000004, "Wrong alignment on NGDHUD_OnSpectatorTargetChanged");
static_assert(sizeof(NGDHUD_OnSpectatorTargetChanged) == 0x000008, "Wrong size on NGDHUD_OnSpectatorTargetChanged");
static_assert(offsetof(NGDHUD_OnSpectatorTargetChanged, CurrentTargetName) == 0x000000, "Member 'NGDHUD_OnSpectatorTargetChanged::CurrentTargetName' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnVehicleBoardedChange
// 0x0008 (0x0008 - 0x0000)
struct NGDHUD_OnVehicleBoardedChange final
{
public:
	class AActor*                                 VehicleImplementingActor;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnVehicleBoardedChange) == 0x000008, "Wrong alignment on NGDHUD_OnVehicleBoardedChange");
static_assert(sizeof(NGDHUD_OnVehicleBoardedChange) == 0x000008, "Wrong size on NGDHUD_OnVehicleBoardedChange");
static_assert(offsetof(NGDHUD_OnVehicleBoardedChange, VehicleImplementingActor) == 0x000000, "Member 'NGDHUD_OnVehicleBoardedChange::VehicleImplementingActor' has a wrong offset!");

// Function UnrealProject.NGDHUD.OnWeaponChanged
// 0x0008 (0x0008 - 0x0000)
struct NGDHUD_OnWeaponChanged final
{
public:
	class AWeapon*                                InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUD_OnWeaponChanged) == 0x000008, "Wrong alignment on NGDHUD_OnWeaponChanged");
static_assert(sizeof(NGDHUD_OnWeaponChanged) == 0x000008, "Wrong size on NGDHUD_OnWeaponChanged");
static_assert(offsetof(NGDHUD_OnWeaponChanged, InWeapon) == 0x000000, "Member 'NGDHUD_OnWeaponChanged::InWeapon' has a wrong offset!");

// Function UnrealProject.NGDInteractableInterface.EnterInteractZone
// 0x0010 (0x0010 - 0x0000)
struct NGDInteractableInterface_EnterInteractZone final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDInteractableInterface_EnterInteractZone) == 0x000008, "Wrong alignment on NGDInteractableInterface_EnterInteractZone");
static_assert(sizeof(NGDInteractableInterface_EnterInteractZone) == 0x000010, "Wrong size on NGDInteractableInterface_EnterInteractZone");
static_assert(offsetof(NGDInteractableInterface_EnterInteractZone, InCharacter) == 0x000000, "Member 'NGDInteractableInterface_EnterInteractZone::InCharacter' has a wrong offset!");
static_assert(offsetof(NGDInteractableInterface_EnterInteractZone, ReturnValue) == 0x000008, "Member 'NGDInteractableInterface_EnterInteractZone::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDInteractableInterface.Interact
// 0x0010 (0x0010 - 0x0000)
struct NGDInteractableInterface_Interact final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDInteractableInterface_Interact) == 0x000008, "Wrong alignment on NGDInteractableInterface_Interact");
static_assert(sizeof(NGDInteractableInterface_Interact) == 0x000010, "Wrong size on NGDInteractableInterface_Interact");
static_assert(offsetof(NGDInteractableInterface_Interact, InCharacter) == 0x000000, "Member 'NGDInteractableInterface_Interact::InCharacter' has a wrong offset!");
static_assert(offsetof(NGDInteractableInterface_Interact, ReturnValue) == 0x000008, "Member 'NGDInteractableInterface_Interact::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDInteractableInterface.LeaveInteractZone
// 0x0010 (0x0010 - 0x0000)
struct NGDInteractableInterface_LeaveInteractZone final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDInteractableInterface_LeaveInteractZone) == 0x000008, "Wrong alignment on NGDInteractableInterface_LeaveInteractZone");
static_assert(sizeof(NGDInteractableInterface_LeaveInteractZone) == 0x000010, "Wrong size on NGDInteractableInterface_LeaveInteractZone");
static_assert(offsetof(NGDInteractableInterface_LeaveInteractZone, InCharacter) == 0x000000, "Member 'NGDInteractableInterface_LeaveInteractZone::InCharacter' has a wrong offset!");
static_assert(offsetof(NGDInteractableInterface_LeaveInteractZone, ReturnValue) == 0x000008, "Member 'NGDInteractableInterface_LeaveInteractZone::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDInteractableInterface.OnEnterInteractZone
// 0x0008 (0x0008 - 0x0000)
struct NGDInteractableInterface_OnEnterInteractZone final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractableInterface_OnEnterInteractZone) == 0x000008, "Wrong alignment on NGDInteractableInterface_OnEnterInteractZone");
static_assert(sizeof(NGDInteractableInterface_OnEnterInteractZone) == 0x000008, "Wrong size on NGDInteractableInterface_OnEnterInteractZone");
static_assert(offsetof(NGDInteractableInterface_OnEnterInteractZone, InCharacter) == 0x000000, "Member 'NGDInteractableInterface_OnEnterInteractZone::InCharacter' has a wrong offset!");

// Function UnrealProject.NGDInteractableInterface.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct NGDInteractableInterface_OnInteract final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractableInterface_OnInteract) == 0x000008, "Wrong alignment on NGDInteractableInterface_OnInteract");
static_assert(sizeof(NGDInteractableInterface_OnInteract) == 0x000008, "Wrong size on NGDInteractableInterface_OnInteract");
static_assert(offsetof(NGDInteractableInterface_OnInteract, InCharacter) == 0x000000, "Member 'NGDInteractableInterface_OnInteract::InCharacter' has a wrong offset!");

// Function UnrealProject.NGDInteractableInterface.OnLeaveInteractZone
// 0x0008 (0x0008 - 0x0000)
struct NGDInteractableInterface_OnLeaveInteractZone final
{
public:
	class ANGDCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractableInterface_OnLeaveInteractZone) == 0x000008, "Wrong alignment on NGDInteractableInterface_OnLeaveInteractZone");
static_assert(sizeof(NGDInteractableInterface_OnLeaveInteractZone) == 0x000008, "Wrong size on NGDInteractableInterface_OnLeaveInteractZone");
static_assert(offsetof(NGDInteractableInterface_OnLeaveInteractZone, InCharacter) == 0x000000, "Member 'NGDInteractableInterface_OnLeaveInteractZone::InCharacter' has a wrong offset!");

// Function UnrealProject.NGDInteractAction.EventUpdate
// 0x0004 (0x0004 - 0x0000)
struct NGDInteractAction_EventUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractAction_EventUpdate) == 0x000004, "Wrong alignment on NGDInteractAction_EventUpdate");
static_assert(sizeof(NGDInteractAction_EventUpdate) == 0x000004, "Wrong size on NGDInteractAction_EventUpdate");
static_assert(offsetof(NGDInteractAction_EventUpdate, DeltaTime) == 0x000000, "Member 'NGDInteractAction_EventUpdate::DeltaTime' has a wrong offset!");

// Function UnrealProject.NGDInteractAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct NGDInteractAction_Initialize_Implementation final
{
public:
	struct FActionParams                          InActionParams;                                    // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDInteractAction_Initialize_Implementation) == 0x000008, "Wrong alignment on NGDInteractAction_Initialize_Implementation");
static_assert(sizeof(NGDInteractAction_Initialize_Implementation) == 0x000030, "Wrong size on NGDInteractAction_Initialize_Implementation");
static_assert(offsetof(NGDInteractAction_Initialize_Implementation, InActionParams) == 0x000000, "Member 'NGDInteractAction_Initialize_Implementation::InActionParams' has a wrong offset!");

// Function UnrealProject.NGDLineRendererComponent.DrawBeams
// 0x0010 (0x0010 - 0x0000)
struct NGDLineRendererComponent_DrawBeams final
{
public:
	TArray<struct FVector>                        PointsPositions;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLineRendererComponent_DrawBeams) == 0x000008, "Wrong alignment on NGDLineRendererComponent_DrawBeams");
static_assert(sizeof(NGDLineRendererComponent_DrawBeams) == 0x000010, "Wrong size on NGDLineRendererComponent_DrawBeams");
static_assert(offsetof(NGDLineRendererComponent_DrawBeams, PointsPositions) == 0x000000, "Member 'NGDLineRendererComponent_DrawBeams::PointsPositions' has a wrong offset!");

// Function UnrealProject.NGDLineRendererComponent.SetBeam
// 0x0020 (0x0020 - 0x0000)
struct NGDLineRendererComponent_SetBeam final
{
public:
	class UParticleSystemComponent*               BeamParticle;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourcePoint;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPoint;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLineRendererComponent_SetBeam) == 0x000008, "Wrong alignment on NGDLineRendererComponent_SetBeam");
static_assert(sizeof(NGDLineRendererComponent_SetBeam) == 0x000020, "Wrong size on NGDLineRendererComponent_SetBeam");
static_assert(offsetof(NGDLineRendererComponent_SetBeam, BeamParticle) == 0x000000, "Member 'NGDLineRendererComponent_SetBeam::BeamParticle' has a wrong offset!");
static_assert(offsetof(NGDLineRendererComponent_SetBeam, SourcePoint) == 0x000008, "Member 'NGDLineRendererComponent_SetBeam::SourcePoint' has a wrong offset!");
static_assert(offsetof(NGDLineRendererComponent_SetBeam, TargetPoint) == 0x000014, "Member 'NGDLineRendererComponent_SetBeam::TargetPoint' has a wrong offset!");

// Function UnrealProject.NGDPlayerCameraManager.IsShakeAnimActive
// 0x0010 (0x0010 - 0x0000)
struct NGDPlayerCameraManager_IsShakeAnimActive final
{
public:
	TSubclassOf<class UCameraShake>               ShakeClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDPlayerCameraManager_IsShakeAnimActive) == 0x000008, "Wrong alignment on NGDPlayerCameraManager_IsShakeAnimActive");
static_assert(sizeof(NGDPlayerCameraManager_IsShakeAnimActive) == 0x000010, "Wrong size on NGDPlayerCameraManager_IsShakeAnimActive");
static_assert(offsetof(NGDPlayerCameraManager_IsShakeAnimActive, ShakeClass) == 0x000000, "Member 'NGDPlayerCameraManager_IsShakeAnimActive::ShakeClass' has a wrong offset!");
static_assert(offsetof(NGDPlayerCameraManager_IsShakeAnimActive, ReturnValue) == 0x000008, "Member 'NGDPlayerCameraManager_IsShakeAnimActive::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDPlayerCameraManager.PlayShakeAnim
// 0x0010 (0x0010 - 0x0000)
struct NGDPlayerCameraManager_PlayShakeAnim final
{
public:
	TSubclassOf<class UCameraShake>               ShakeClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDPlayerCameraManager_PlayShakeAnim) == 0x000008, "Wrong alignment on NGDPlayerCameraManager_PlayShakeAnim");
static_assert(sizeof(NGDPlayerCameraManager_PlayShakeAnim) == 0x000010, "Wrong size on NGDPlayerCameraManager_PlayShakeAnim");
static_assert(offsetof(NGDPlayerCameraManager_PlayShakeAnim, ShakeClass) == 0x000000, "Member 'NGDPlayerCameraManager_PlayShakeAnim::ShakeClass' has a wrong offset!");
static_assert(offsetof(NGDPlayerCameraManager_PlayShakeAnim, Scale) == 0x000008, "Member 'NGDPlayerCameraManager_PlayShakeAnim::Scale' has a wrong offset!");

// Function UnrealProject.NGDPlayerCameraManager.StopShakeAnim
// 0x0008 (0x0008 - 0x0000)
struct NGDPlayerCameraManager_StopShakeAnim final
{
public:
	TSubclassOf<class UCameraShake>               ShakeClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerCameraManager_StopShakeAnim) == 0x000008, "Wrong alignment on NGDPlayerCameraManager_StopShakeAnim");
static_assert(sizeof(NGDPlayerCameraManager_StopShakeAnim) == 0x000008, "Wrong size on NGDPlayerCameraManager_StopShakeAnim");
static_assert(offsetof(NGDPlayerCameraManager_StopShakeAnim, ShakeClass) == 0x000000, "Member 'NGDPlayerCameraManager_StopShakeAnim::ShakeClass' has a wrong offset!");

// Function UnrealProject.NGDPlayerState.ServerValidateAccount
// 0x0010 (0x0010 - 0x0000)
struct NGDPlayerState_ServerValidateAccount final
{
public:
	class FString                                 AccountTicket;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDPlayerState_ServerValidateAccount) == 0x000008, "Wrong alignment on NGDPlayerState_ServerValidateAccount");
static_assert(sizeof(NGDPlayerState_ServerValidateAccount) == 0x000010, "Wrong size on NGDPlayerState_ServerValidateAccount");
static_assert(offsetof(NGDPlayerState_ServerValidateAccount, AccountTicket) == 0x000000, "Member 'NGDPlayerState_ServerValidateAccount::AccountTicket' has a wrong offset!");

// Function UnrealProject.NGDTeamComponent.GetFriendlyFireFactor
// 0x0018 (0x0018 - 0x0000)
struct NGDTeamComponent_GetFriendlyFireFactor final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDTeamComponent_GetFriendlyFireFactor) == 0x000008, "Wrong alignment on NGDTeamComponent_GetFriendlyFireFactor");
static_assert(sizeof(NGDTeamComponent_GetFriendlyFireFactor) == 0x000018, "Wrong size on NGDTeamComponent_GetFriendlyFireFactor");
static_assert(offsetof(NGDTeamComponent_GetFriendlyFireFactor, Controller) == 0x000000, "Member 'NGDTeamComponent_GetFriendlyFireFactor::Controller' has a wrong offset!");
static_assert(offsetof(NGDTeamComponent_GetFriendlyFireFactor, Instigator) == 0x000008, "Member 'NGDTeamComponent_GetFriendlyFireFactor::Instigator' has a wrong offset!");
static_assert(offsetof(NGDTeamComponent_GetFriendlyFireFactor, ReturnValue) == 0x000010, "Member 'NGDTeamComponent_GetFriendlyFireFactor::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDTeamComponent.GetTeamNumber
// 0x0010 (0x0010 - 0x0000)
struct NGDTeamComponent_GetTeamNumber final
{
public:
	const class AController*                      Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDTeamComponent_GetTeamNumber) == 0x000008, "Wrong alignment on NGDTeamComponent_GetTeamNumber");
static_assert(sizeof(NGDTeamComponent_GetTeamNumber) == 0x000010, "Wrong size on NGDTeamComponent_GetTeamNumber");
static_assert(offsetof(NGDTeamComponent_GetTeamNumber, Player) == 0x000000, "Member 'NGDTeamComponent_GetTeamNumber::Player' has a wrong offset!");
static_assert(offsetof(NGDTeamComponent_GetTeamNumber, ReturnValue) == 0x000008, "Member 'NGDTeamComponent_GetTeamNumber::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDTeamComponent.HasFriendlyFire
// 0x0001 (0x0001 - 0x0000)
struct NGDTeamComponent_HasFriendlyFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDTeamComponent_HasFriendlyFire) == 0x000001, "Wrong alignment on NGDTeamComponent_HasFriendlyFire");
static_assert(sizeof(NGDTeamComponent_HasFriendlyFire) == 0x000001, "Wrong size on NGDTeamComponent_HasFriendlyFire");
static_assert(offsetof(NGDTeamComponent_HasFriendlyFire, ReturnValue) == 0x000000, "Member 'NGDTeamComponent_HasFriendlyFire::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDTeamState.GetSize
// 0x0004 (0x0004 - 0x0000)
struct NGDTeamState_GetSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDTeamState_GetSize) == 0x000004, "Wrong alignment on NGDTeamState_GetSize");
static_assert(sizeof(NGDTeamState_GetSize) == 0x000004, "Wrong size on NGDTeamState_GetSize");
static_assert(offsetof(NGDTeamState_GetSize, ReturnValue) == 0x000000, "Member 'NGDTeamState_GetSize::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDTeamState.GetTeamNumber
// 0x0004 (0x0004 - 0x0000)
struct NGDTeamState_GetTeamNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDTeamState_GetTeamNumber) == 0x000004, "Wrong alignment on NGDTeamState_GetTeamNumber");
static_assert(sizeof(NGDTeamState_GetTeamNumber) == 0x000004, "Wrong size on NGDTeamState_GetTeamNumber");
static_assert(offsetof(NGDTeamState_GetTeamNumber, ReturnValue) == 0x000000, "Member 'NGDTeamState_GetTeamNumber::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDTeamState.HasMember
// 0x0010 (0x0010 - 0x0000)
struct NGDTeamState_HasMember final
{
public:
	const class AController*                      Member;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDTeamState_HasMember) == 0x000008, "Wrong alignment on NGDTeamState_HasMember");
static_assert(sizeof(NGDTeamState_HasMember) == 0x000010, "Wrong size on NGDTeamState_HasMember");
static_assert(offsetof(NGDTeamState_HasMember, Member) == 0x000000, "Member 'NGDTeamState_HasMember::Member' has a wrong offset!");
static_assert(offsetof(NGDTeamState_HasMember, ReturnValue) == 0x000008, "Member 'NGDTeamState_HasMember::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDVehicleInterface.GetDriver
// 0x0008 (0x0008 - 0x0000)
struct NGDVehicleInterface_GetDriver final
{
public:
	class ANGDCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDVehicleInterface_GetDriver) == 0x000008, "Wrong alignment on NGDVehicleInterface_GetDriver");
static_assert(sizeof(NGDVehicleInterface_GetDriver) == 0x000008, "Wrong size on NGDVehicleInterface_GetDriver");
static_assert(offsetof(NGDVehicleInterface_GetDriver, ReturnValue) == 0x000000, "Member 'NGDVehicleInterface_GetDriver::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDVehicleInterface.GetVehicleComponent
// 0x0008 (0x0008 - 0x0000)
struct NGDVehicleInterface_GetVehicleComponent final
{
public:
	class UNGDVehicleComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDVehicleInterface_GetVehicleComponent) == 0x000008, "Wrong alignment on NGDVehicleInterface_GetVehicleComponent");
static_assert(sizeof(NGDVehicleInterface_GetVehicleComponent) == 0x000008, "Wrong size on NGDVehicleInterface_GetVehicleComponent");
static_assert(offsetof(NGDVehicleInterface_GetVehicleComponent, ReturnValue) == 0x000000, "Member 'NGDVehicleInterface_GetVehicleComponent::ReturnValue' has a wrong offset!");

// Function UnrealProject.NGDWeaponEventManagerComponent.ClientPushDesyncFireEvent
// 0x0028 (0x0028 - 0x0000)
struct NGDWeaponEventManagerComponent_ClientPushDesyncFireEvent final
{
public:
	struct FRemoteDesyncFireEvent                 InDesyncFireEvent;                                 // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWeaponEventManagerComponent_ClientPushDesyncFireEvent) == 0x000008, "Wrong alignment on NGDWeaponEventManagerComponent_ClientPushDesyncFireEvent");
static_assert(sizeof(NGDWeaponEventManagerComponent_ClientPushDesyncFireEvent) == 0x000028, "Wrong size on NGDWeaponEventManagerComponent_ClientPushDesyncFireEvent");
static_assert(offsetof(NGDWeaponEventManagerComponent_ClientPushDesyncFireEvent, InDesyncFireEvent) == 0x000000, "Member 'NGDWeaponEventManagerComponent_ClientPushDesyncFireEvent::InDesyncFireEvent' has a wrong offset!");

// Function UnrealProject.NGDWeaponEventManagerComponent.ClientPushFireEvent
// 0x0030 (0x0030 - 0x0000)
struct NGDWeaponEventManagerComponent_ClientPushFireEvent final
{
public:
	struct FRemoteFireEvent                       InFireEvent;                                       // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWeaponEventManagerComponent_ClientPushFireEvent) == 0x000008, "Wrong alignment on NGDWeaponEventManagerComponent_ClientPushFireEvent");
static_assert(sizeof(NGDWeaponEventManagerComponent_ClientPushFireEvent) == 0x000030, "Wrong size on NGDWeaponEventManagerComponent_ClientPushFireEvent");
static_assert(offsetof(NGDWeaponEventManagerComponent_ClientPushFireEvent, InFireEvent) == 0x000000, "Member 'NGDWeaponEventManagerComponent_ClientPushFireEvent::InFireEvent' has a wrong offset!");

// Function UnrealProject.NGDWeaponEventManagerComponent.ClientPushHitEvent
// 0x0030 (0x0030 - 0x0000)
struct NGDWeaponEventManagerComponent_ClientPushHitEvent final
{
public:
	struct FRemoteHitEvent                        InHitEvent;                                        // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWeaponEventManagerComponent_ClientPushHitEvent) == 0x000008, "Wrong alignment on NGDWeaponEventManagerComponent_ClientPushHitEvent");
static_assert(sizeof(NGDWeaponEventManagerComponent_ClientPushHitEvent) == 0x000030, "Wrong size on NGDWeaponEventManagerComponent_ClientPushHitEvent");
static_assert(offsetof(NGDWeaponEventManagerComponent_ClientPushHitEvent, InHitEvent) == 0x000000, "Member 'NGDWeaponEventManagerComponent_ClientPushHitEvent::InHitEvent' has a wrong offset!");

// Function UnrealProject.NGDWeaponEventManagerComponent.ClientPushReloadEvent
// 0x0010 (0x0010 - 0x0000)
struct NGDWeaponEventManagerComponent_ClientPushReloadEvent final
{
public:
	struct FRemoteReloadEvent                     InReloadEvent;                                     // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWeaponEventManagerComponent_ClientPushReloadEvent) == 0x000008, "Wrong alignment on NGDWeaponEventManagerComponent_ClientPushReloadEvent");
static_assert(sizeof(NGDWeaponEventManagerComponent_ClientPushReloadEvent) == 0x000010, "Wrong size on NGDWeaponEventManagerComponent_ClientPushReloadEvent");
static_assert(offsetof(NGDWeaponEventManagerComponent_ClientPushReloadEvent, InReloadEvent) == 0x000000, "Member 'NGDWeaponEventManagerComponent_ClientPushReloadEvent::InReloadEvent' has a wrong offset!");

// Function UnrealProject.NGDWheeledMovementComponent.ServerForceClientCorrection
// 0x0050 (0x0050 - 0x0000)
struct NGDWheeledMovementComponent_ServerForceClientCorrection final
{
public:
	struct FVehicleSample                         InClientCorrection;                                // 0x0000(0x0050)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWheeledMovementComponent_ServerForceClientCorrection) == 0x000010, "Wrong alignment on NGDWheeledMovementComponent_ServerForceClientCorrection");
static_assert(sizeof(NGDWheeledMovementComponent_ServerForceClientCorrection) == 0x000050, "Wrong size on NGDWheeledMovementComponent_ServerForceClientCorrection");
static_assert(offsetof(NGDWheeledMovementComponent_ServerForceClientCorrection, InClientCorrection) == 0x000000, "Member 'NGDWheeledMovementComponent_ServerForceClientCorrection::InClientCorrection' has a wrong offset!");

// Function UnrealProject.SpreadFirearmFeelComponent.GetCurrentSpreadMagnitude
// 0x0004 (0x0004 - 0x0000)
struct SpreadFirearmFeelComponent_GetCurrentSpreadMagnitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpreadFirearmFeelComponent_GetCurrentSpreadMagnitude) == 0x000004, "Wrong alignment on SpreadFirearmFeelComponent_GetCurrentSpreadMagnitude");
static_assert(sizeof(SpreadFirearmFeelComponent_GetCurrentSpreadMagnitude) == 0x000004, "Wrong size on SpreadFirearmFeelComponent_GetCurrentSpreadMagnitude");
static_assert(offsetof(SpreadFirearmFeelComponent_GetCurrentSpreadMagnitude, ReturnValue) == 0x000000, "Member 'SpreadFirearmFeelComponent_GetCurrentSpreadMagnitude::ReturnValue' has a wrong offset!");

// Function UnrealProject.StopAimingAction.EventUpdate
// 0x0004 (0x0004 - 0x0000)
struct StopAimingAction_EventUpdate final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StopAimingAction_EventUpdate) == 0x000004, "Wrong alignment on StopAimingAction_EventUpdate");
static_assert(sizeof(StopAimingAction_EventUpdate) == 0x000004, "Wrong size on StopAimingAction_EventUpdate");
static_assert(offsetof(StopAimingAction_EventUpdate, Delta) == 0x000000, "Member 'StopAimingAction_EventUpdate::Delta' has a wrong offset!");

// Function UnrealProject.StopAimingAction.Initialize_Implementation
// 0x0030 (0x0030 - 0x0000)
struct StopAimingAction_Initialize_Implementation final
{
public:
	struct FActionParams                          ActionParams;                                      // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(StopAimingAction_Initialize_Implementation) == 0x000008, "Wrong alignment on StopAimingAction_Initialize_Implementation");
static_assert(sizeof(StopAimingAction_Initialize_Implementation) == 0x000030, "Wrong size on StopAimingAction_Initialize_Implementation");
static_assert(offsetof(StopAimingAction_Initialize_Implementation, ActionParams) == 0x000000, "Member 'StopAimingAction_Initialize_Implementation::ActionParams' has a wrong offset!");

// Function UnrealProject.Throwable.SetAnimState
// 0x0001 (0x0001 - 0x0000)
struct Throwable_SetAnimState final
{
public:
	bool                                          bNewAnimState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_SetAnimState) == 0x000001, "Wrong alignment on Throwable_SetAnimState");
static_assert(sizeof(Throwable_SetAnimState) == 0x000001, "Wrong size on Throwable_SetAnimState");
static_assert(offsetof(Throwable_SetAnimState, bNewAnimState) == 0x000000, "Member 'Throwable_SetAnimState::bNewAnimState' has a wrong offset!");

// Function UnrealProject.Throwable.SetIsAiming
// 0x0001 (0x0001 - 0x0000)
struct Throwable_SetIsAiming final
{
public:
	bool                                          bAiming;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_SetIsAiming) == 0x000001, "Wrong alignment on Throwable_SetIsAiming");
static_assert(sizeof(Throwable_SetIsAiming) == 0x000001, "Wrong size on Throwable_SetIsAiming");
static_assert(offsetof(Throwable_SetIsAiming, bAiming) == 0x000000, "Member 'Throwable_SetIsAiming::bAiming' has a wrong offset!");

// Function UnrealProject.Throwable.SetLaunchState
// 0x0001 (0x0001 - 0x0000)
struct Throwable_SetLaunchState final
{
public:
	bool                                          bNewLaunchState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_SetLaunchState) == 0x000001, "Wrong alignment on Throwable_SetLaunchState");
static_assert(sizeof(Throwable_SetLaunchState) == 0x000001, "Wrong size on Throwable_SetLaunchState");
static_assert(offsetof(Throwable_SetLaunchState, bNewLaunchState) == 0x000000, "Member 'Throwable_SetLaunchState::bNewLaunchState' has a wrong offset!");

// Function UnrealProject.Throwable.SetLeverState
// 0x0001 (0x0001 - 0x0000)
struct Throwable_SetLeverState final
{
public:
	bool                                          bNewLeverState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_SetLeverState) == 0x000001, "Wrong alignment on Throwable_SetLeverState");
static_assert(sizeof(Throwable_SetLeverState) == 0x000001, "Wrong size on Throwable_SetLeverState");
static_assert(offsetof(Throwable_SetLeverState, bNewLeverState) == 0x000000, "Member 'Throwable_SetLeverState::bNewLeverState' has a wrong offset!");

// Function UnrealProject.Throwable.CanFireNextGrenade
// 0x0001 (0x0001 - 0x0000)
struct Throwable_CanFireNextGrenade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_CanFireNextGrenade) == 0x000001, "Wrong alignment on Throwable_CanFireNextGrenade");
static_assert(sizeof(Throwable_CanFireNextGrenade) == 0x000001, "Wrong size on Throwable_CanFireNextGrenade");
static_assert(offsetof(Throwable_CanFireNextGrenade, ReturnValue) == 0x000000, "Member 'Throwable_CanFireNextGrenade::ReturnValue' has a wrong offset!");

// Function UnrealProject.Throwable.GetFireDirection
// 0x000C (0x000C - 0x0000)
struct Throwable_GetFireDirection final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_GetFireDirection) == 0x000004, "Wrong alignment on Throwable_GetFireDirection");
static_assert(sizeof(Throwable_GetFireDirection) == 0x00000C, "Wrong size on Throwable_GetFireDirection");
static_assert(offsetof(Throwable_GetFireDirection, ReturnValue) == 0x000000, "Member 'Throwable_GetFireDirection::ReturnValue' has a wrong offset!");

// Function UnrealProject.Throwable.GetFirePosition
// 0x000C (0x000C - 0x0000)
struct Throwable_GetFirePosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_GetFirePosition) == 0x000004, "Wrong alignment on Throwable_GetFirePosition");
static_assert(sizeof(Throwable_GetFirePosition) == 0x00000C, "Wrong size on Throwable_GetFirePosition");
static_assert(offsetof(Throwable_GetFirePosition, ReturnValue) == 0x000000, "Member 'Throwable_GetFirePosition::ReturnValue' has a wrong offset!");

// Function UnrealProject.Throwable.GetLaunchVelocity
// 0x000C (0x000C - 0x0000)
struct Throwable_GetLaunchVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_GetLaunchVelocity) == 0x000004, "Wrong alignment on Throwable_GetLaunchVelocity");
static_assert(sizeof(Throwable_GetLaunchVelocity) == 0x00000C, "Wrong size on Throwable_GetLaunchVelocity");
static_assert(offsetof(Throwable_GetLaunchVelocity, ReturnValue) == 0x000000, "Member 'Throwable_GetLaunchVelocity::ReturnValue' has a wrong offset!");

// Function UnrealProject.Throwable.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct Throwable_IsAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_IsAiming) == 0x000001, "Wrong alignment on Throwable_IsAiming");
static_assert(sizeof(Throwable_IsAiming) == 0x000001, "Wrong size on Throwable_IsAiming");
static_assert(offsetof(Throwable_IsAiming, ReturnValue) == 0x000000, "Member 'Throwable_IsAiming::ReturnValue' has a wrong offset!");

// Function UnrealProject.Throwable.IsLaunched
// 0x0001 (0x0001 - 0x0000)
struct Throwable_IsLaunched final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_IsLaunched) == 0x000001, "Wrong alignment on Throwable_IsLaunched");
static_assert(sizeof(Throwable_IsLaunched) == 0x000001, "Wrong size on Throwable_IsLaunched");
static_assert(offsetof(Throwable_IsLaunched, ReturnValue) == 0x000000, "Member 'Throwable_IsLaunched::ReturnValue' has a wrong offset!");

// Function UnrealProject.Throwable.IsLeverReleased
// 0x0001 (0x0001 - 0x0000)
struct Throwable_IsLeverReleased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_IsLeverReleased) == 0x000001, "Wrong alignment on Throwable_IsLeverReleased");
static_assert(sizeof(Throwable_IsLeverReleased) == 0x000001, "Wrong size on Throwable_IsLeverReleased");
static_assert(offsetof(Throwable_IsLeverReleased, ReturnValue) == 0x000000, "Member 'Throwable_IsLeverReleased::ReturnValue' has a wrong offset!");

}

