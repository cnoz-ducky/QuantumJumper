#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NGDOnlineService

#include "Basic.hpp"

#include "OnlineSubsystemUtils_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "NGDOnlineService_structs.hpp"


namespace SDK
{

// Class NGDOnlineService.NGDOnlineServiceBase
// 0x01A8 (0x01D0 - 0x0028)
class UNGDOnlineServiceBase : public UObject
{
public:
	uint8                                         Pad_28[0xA8];                                      // 0x0028(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	class ANGDOnlineBeaconListener*               PartyBeaconListener;                               // 0x00D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANGDOnlineBeaconClient*                 PartyBeaconClient;                                 // 0x00D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ANGDOnlineBeaconHostRouter*             PartyBeaconHostRouter;                             // 0x00E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPartyMemberRepl>               PartyMembers;                                      // 0x00E8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0xD8];                                      // 0x00F8(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RestoreBeaconConnection();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDOnlineServiceBase">();
	}
	static class UNGDOnlineServiceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDOnlineServiceBase>();
	}
};
static_assert(alignof(UNGDOnlineServiceBase) == 0x000008, "Wrong alignment on UNGDOnlineServiceBase");
static_assert(sizeof(UNGDOnlineServiceBase) == 0x0001D0, "Wrong size on UNGDOnlineServiceBase");
static_assert(offsetof(UNGDOnlineServiceBase, PartyBeaconListener) == 0x0000D0, "Member 'UNGDOnlineServiceBase::PartyBeaconListener' has a wrong offset!");
static_assert(offsetof(UNGDOnlineServiceBase, PartyBeaconClient) == 0x0000D8, "Member 'UNGDOnlineServiceBase::PartyBeaconClient' has a wrong offset!");
static_assert(offsetof(UNGDOnlineServiceBase, PartyBeaconHostRouter) == 0x0000E0, "Member 'UNGDOnlineServiceBase::PartyBeaconHostRouter' has a wrong offset!");
static_assert(offsetof(UNGDOnlineServiceBase, PartyMembers) == 0x0000E8, "Member 'UNGDOnlineServiceBase::PartyMembers' has a wrong offset!");

// Class NGDOnlineService.NGDOnlineServiceDefault
// 0x0000 (0x01D0 - 0x01D0)
class UNGDOnlineServiceDefault final : public UNGDOnlineServiceBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDOnlineServiceDefault">();
	}
	static class UNGDOnlineServiceDefault* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDOnlineServiceDefault>();
	}
};
static_assert(alignof(UNGDOnlineServiceDefault) == 0x000008, "Wrong alignment on UNGDOnlineServiceDefault");
static_assert(sizeof(UNGDOnlineServiceDefault) == 0x0001D0, "Wrong size on UNGDOnlineServiceDefault");

// Class NGDOnlineService.NGDOnlineBeaconClient
// 0x0028 (0x02D0 - 0x02A8)
class ANGDOnlineBeaconClient : public AOnlineBeaconClient
{
public:
	uint8                                         Pad_2A8[0x18];                                     // 0x02A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPartyMemberRepl>               ReplicatedPartyMembers;                            // 0x02C0(0x0010)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)

public:
	void Client_HeartBeat();
	void OnRep_PartyMembers();
	void Server_Announce(const class FString& InSessionId, const class FString& InHexNetId, const class FString& InPersonaName);
	void Server_HeartBeat();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDOnlineBeaconClient">();
	}
	static class ANGDOnlineBeaconClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANGDOnlineBeaconClient>();
	}
};
static_assert(alignof(ANGDOnlineBeaconClient) == 0x000008, "Wrong alignment on ANGDOnlineBeaconClient");
static_assert(sizeof(ANGDOnlineBeaconClient) == 0x0002D0, "Wrong size on ANGDOnlineBeaconClient");
static_assert(offsetof(ANGDOnlineBeaconClient, ReplicatedPartyMembers) == 0x0002C0, "Member 'ANGDOnlineBeaconClient::ReplicatedPartyMembers' has a wrong offset!");

// Class NGDOnlineService.NGDOnlineBeaconHostRouter
// 0x0010 (0x0250 - 0x0240)
class ANGDOnlineBeaconHostRouter : public AOnlineBeaconHostObject
{
public:
	class ANGDOnlineBeaconClient*                 HostClient;                                        // 0x0240(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDOnlineBeaconHostRouter">();
	}
	static class ANGDOnlineBeaconHostRouter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANGDOnlineBeaconHostRouter>();
	}
};
static_assert(alignof(ANGDOnlineBeaconHostRouter) == 0x000008, "Wrong alignment on ANGDOnlineBeaconHostRouter");
static_assert(sizeof(ANGDOnlineBeaconHostRouter) == 0x000250, "Wrong size on ANGDOnlineBeaconHostRouter");
static_assert(offsetof(ANGDOnlineBeaconHostRouter, HostClient) == 0x000240, "Member 'ANGDOnlineBeaconHostRouter::HostClient' has a wrong offset!");

// Class NGDOnlineService.NGDOnlineBeaconListener
// 0x0000 (0x0300 - 0x0300)
class ANGDOnlineBeaconListener final : public AOnlineBeaconHost
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDOnlineBeaconListener">();
	}
	static class ANGDOnlineBeaconListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANGDOnlineBeaconListener>();
	}
};
static_assert(alignof(ANGDOnlineBeaconListener) == 0x000008, "Wrong alignment on ANGDOnlineBeaconListener");
static_assert(sizeof(ANGDOnlineBeaconListener) == 0x000300, "Wrong size on ANGDOnlineBeaconListener");

// Class NGDOnlineService.NGDBasicSerializer
// 0x0000 (0x0028 - 0x0028)
class UNGDBasicSerializer : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDBasicSerializer">();
	}
	static class UNGDBasicSerializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDBasicSerializer>();
	}
};
static_assert(alignof(UNGDBasicSerializer) == 0x000008, "Wrong alignment on UNGDBasicSerializer");
static_assert(sizeof(UNGDBasicSerializer) == 0x000028, "Wrong size on UNGDBasicSerializer");

// Class NGDOnlineService.NGDPartyMember
// 0x0028 (0x0050 - 0x0028)
class UNGDPartyMember : public UNGDBasicSerializer
{
public:
	class FString                                 HexNetId;                                          // 0x0028(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PersonaName;                                       // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPartyHost;                                      // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NGDPartyMember">();
	}
	static class UNGDPartyMember* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGDPartyMember>();
	}
};
static_assert(alignof(UNGDPartyMember) == 0x000008, "Wrong alignment on UNGDPartyMember");
static_assert(sizeof(UNGDPartyMember) == 0x000050, "Wrong size on UNGDPartyMember");
static_assert(offsetof(UNGDPartyMember, HexNetId) == 0x000028, "Member 'UNGDPartyMember::HexNetId' has a wrong offset!");
static_assert(offsetof(UNGDPartyMember, PersonaName) == 0x000038, "Member 'UNGDPartyMember::PersonaName' has a wrong offset!");
static_assert(offsetof(UNGDPartyMember, bIsPartyHost) == 0x000048, "Member 'UNGDPartyMember::bIsPartyHost' has a wrong offset!");

}

