#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameAnalytics

#include "Basic.hpp"

#include "GameAnalytics_structs.hpp"


namespace SDK::Params
{

// Function GameAnalytics.GameAnalytics.AddAdEvent
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddAdEvent final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     adType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 adSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 adPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEvent");
static_assert(sizeof(GameAnalytics_AddAdEvent) == 0x000028, "Wrong size on GameAnalytics_AddAdEvent");
static_assert(offsetof(GameAnalytics_AddAdEvent, Action) == 0x000000, "Member 'GameAnalytics_AddAdEvent::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEvent, adType) == 0x000001, "Member 'GameAnalytics_AddAdEvent::adType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEvent, adSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEvent::adSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEvent, adPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEvent::adPlacement' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithDuration
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_AddAdEventWithDuration final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     adType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 adSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 adPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Duration;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddAdEventWithDuration) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithDuration");
static_assert(sizeof(GameAnalytics_AddAdEventWithDuration) == 0x000030, "Wrong size on GameAnalytics_AddAdEventWithDuration");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithDuration::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, adType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithDuration::adType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, adSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithDuration::adSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, adPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithDuration::adPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithDuration, Duration) == 0x000028, "Member 'GameAnalytics_AddAdEventWithDuration::Duration' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddAdEventWithNoAdReason
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_AddAdEventWithNoAdReason final
{
public:
	EGAAdAction                                   Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdType                                     adType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 adSdkName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 adPlacement;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGAAdError                                    noAdReason;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddAdEventWithNoAdReason) == 0x000008, "Wrong alignment on GameAnalytics_AddAdEventWithNoAdReason");
static_assert(sizeof(GameAnalytics_AddAdEventWithNoAdReason) == 0x000030, "Wrong size on GameAnalytics_AddAdEventWithNoAdReason");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, Action) == 0x000000, "Member 'GameAnalytics_AddAdEventWithNoAdReason::Action' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, adType) == 0x000001, "Member 'GameAnalytics_AddAdEventWithNoAdReason::adType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, adSdkName) == 0x000008, "Member 'GameAnalytics_AddAdEventWithNoAdReason::adSdkName' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, adPlacement) == 0x000018, "Member 'GameAnalytics_AddAdEventWithNoAdReason::adPlacement' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddAdEventWithNoAdReason, noAdReason) == 0x000028, "Member 'GameAnalytics_AddAdEventWithNoAdReason::noAdReason' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEvent
// 0x0048 (0x0048 - 0x0000)
struct GameAnalytics_AddBusinessEvent final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEvent");
static_assert(sizeof(GameAnalytics_AddBusinessEvent) == 0x000048, "Wrong size on GameAnalytics_AddBusinessEvent");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEvent::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEvent::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEvent::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEvent::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEvent, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEvent::CartType' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventAndAutoFetchReceipt
// 0x0048 (0x0048 - 0x0000)
struct GameAnalytics_AddBusinessEventAndAutoFetchReceipt final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventAndAutoFetchReceipt");
static_assert(sizeof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt) == 0x000048, "Wrong size on GameAnalytics_AddBusinessEventAndAutoFetchReceipt");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndAutoFetchReceipt, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventAndAutoFetchReceipt::CartType' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventAndroid
// 0x0068 (0x0068 - 0x0000)
struct GameAnalytics_AddBusinessEventAndroid final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventAndroid) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventAndroid");
static_assert(sizeof(GameAnalytics_AddBusinessEventAndroid) == 0x000068, "Wrong size on GameAnalytics_AddBusinessEventAndroid");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventAndroid::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventAndroid::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventAndroid::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventAndroid::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventAndroid::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, Receipt) == 0x000048, "Member 'GameAnalytics_AddBusinessEventAndroid::Receipt' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventAndroid, Signature) == 0x000058, "Member 'GameAnalytics_AddBusinessEventAndroid::Signature' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddBusinessEventIOS
// 0x0058 (0x0058 - 0x0000)
struct GameAnalytics_AddBusinessEventIOS final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CartType;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddBusinessEventIOS) == 0x000008, "Wrong alignment on GameAnalytics_AddBusinessEventIOS");
static_assert(sizeof(GameAnalytics_AddBusinessEventIOS) == 0x000058, "Wrong size on GameAnalytics_AddBusinessEventIOS");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, Currency) == 0x000000, "Member 'GameAnalytics_AddBusinessEventIOS::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, Amount) == 0x000010, "Member 'GameAnalytics_AddBusinessEventIOS::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, ItemType) == 0x000018, "Member 'GameAnalytics_AddBusinessEventIOS::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, ItemId) == 0x000028, "Member 'GameAnalytics_AddBusinessEventIOS::ItemId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, CartType) == 0x000038, "Member 'GameAnalytics_AddBusinessEventIOS::CartType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddBusinessEventIOS, Receipt) == 0x000048, "Member 'GameAnalytics_AddBusinessEventIOS::Receipt' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddDesignEvent
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_AddDesignEvent final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddDesignEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddDesignEvent");
static_assert(sizeof(GameAnalytics_AddDesignEvent) == 0x000010, "Wrong size on GameAnalytics_AddDesignEvent");
static_assert(offsetof(GameAnalytics_AddDesignEvent, EventId) == 0x000000, "Member 'GameAnalytics_AddDesignEvent::EventId' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddDesignEventWithValue
// 0x0018 (0x0018 - 0x0000)
struct GameAnalytics_AddDesignEventWithValue final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddDesignEventWithValue) == 0x000008, "Wrong alignment on GameAnalytics_AddDesignEventWithValue");
static_assert(sizeof(GameAnalytics_AddDesignEventWithValue) == 0x000018, "Wrong size on GameAnalytics_AddDesignEventWithValue");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValue, EventId) == 0x000000, "Member 'GameAnalytics_AddDesignEventWithValue::EventId' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddDesignEventWithValue, Value) == 0x000010, "Member 'GameAnalytics_AddDesignEventWithValue::Value' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddErrorEvent
// 0x0018 (0x0018 - 0x0000)
struct GameAnalytics_AddErrorEvent final
{
public:
	EGAErrorSeverity                              Severity;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddErrorEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddErrorEvent");
static_assert(sizeof(GameAnalytics_AddErrorEvent) == 0x000018, "Wrong size on GameAnalytics_AddErrorEvent");
static_assert(offsetof(GameAnalytics_AddErrorEvent, Severity) == 0x000000, "Member 'GameAnalytics_AddErrorEvent::Severity' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddErrorEvent, Message) == 0x000008, "Member 'GameAnalytics_AddErrorEvent::Message' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOne
// 0x0018 (0x0018 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOne final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOne) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOne");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOne) == 0x000018, "Wrong size on GameAnalytics_AddProgressionEventWithOne");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOne, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOne::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOne, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOne::Progression01' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneAndScore
// 0x0020 (0x0020 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneAndScore final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneAndScore) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneAndScore");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneAndScore) == 0x000020, "Wrong size on GameAnalytics_AddProgressionEventWithOneAndScore");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndScore, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneAndScore::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndScore, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneAndScore::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndScore, Score) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneAndScore::Score' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneAndTwo
// 0x0028 (0x0028 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneAndTwo final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneAndTwo) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneAndTwo");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneAndTwo) == 0x000028, "Wrong size on GameAnalytics_AddProgressionEventWithOneAndTwo");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndTwo, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneAndTwo::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndTwo, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneAndTwo::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneAndTwo, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneAndTwo::Progression02' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoAndScore
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoAndScore final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoAndScore) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoAndScore");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoAndScore) == 0x000030, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoAndScore");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndScore, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndScore::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndScore, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndScore::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndScore, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndScore::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndScore, Score) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndScore::Score' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoAndThree
// 0x0038 (0x0038 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoAndThree final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression03;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoAndThree) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoAndThree");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoAndThree) == 0x000038, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoAndThree");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndThree, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndThree::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndThree, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndThree::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndThree, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndThree::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoAndThree, Progression03) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoAndThree::Progression03' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddProgressionEventWithOneTwoThreeAndScore
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore final
{
public:
	EGAProgressionStatus                          ProgressionStatus;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Progression01;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression02;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Progression03;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore) == 0x000008, "Wrong alignment on GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore");
static_assert(sizeof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore) == 0x000040, "Wrong size on GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, ProgressionStatus) == 0x000000, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::ProgressionStatus' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, Progression01) == 0x000008, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::Progression01' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, Progression02) == 0x000018, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::Progression02' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, Progression03) == 0x000028, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::Progression03' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore, Score) == 0x000038, "Member 'GameAnalytics_AddProgressionEventWithOneTwoThreeAndScore::Score' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.AddResourceEvent
// 0x0040 (0x0040 - 0x0000)
struct GameAnalytics_AddResourceEvent final
{
public:
	EGAResourceFlowType                           FlowType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_AddResourceEvent) == 0x000008, "Wrong alignment on GameAnalytics_AddResourceEvent");
static_assert(sizeof(GameAnalytics_AddResourceEvent) == 0x000040, "Wrong size on GameAnalytics_AddResourceEvent");
static_assert(offsetof(GameAnalytics_AddResourceEvent, FlowType) == 0x000000, "Member 'GameAnalytics_AddResourceEvent::FlowType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEvent, Currency) == 0x000008, "Member 'GameAnalytics_AddResourceEvent::Currency' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEvent, Amount) == 0x000018, "Member 'GameAnalytics_AddResourceEvent::Amount' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEvent, ItemType) == 0x000020, "Member 'GameAnalytics_AddResourceEvent::ItemType' has a wrong offset!");
static_assert(offsetof(GameAnalytics_AddResourceEvent, ItemId) == 0x000030, "Member 'GameAnalytics_AddResourceEvent::ItemId' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetABTestingId
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_GetABTestingId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetABTestingId) == 0x000008, "Wrong alignment on GameAnalytics_GetABTestingId");
static_assert(sizeof(GameAnalytics_GetABTestingId) == 0x000010, "Wrong size on GameAnalytics_GetABTestingId");
static_assert(offsetof(GameAnalytics_GetABTestingId, ReturnValue) == 0x000000, "Member 'GameAnalytics_GetABTestingId::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetABTestingVariantId
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_GetABTestingVariantId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetABTestingVariantId) == 0x000008, "Wrong alignment on GameAnalytics_GetABTestingVariantId");
static_assert(sizeof(GameAnalytics_GetABTestingVariantId) == 0x000010, "Wrong size on GameAnalytics_GetABTestingVariantId");
static_assert(offsetof(GameAnalytics_GetABTestingVariantId, ReturnValue) == 0x000000, "Member 'GameAnalytics_GetABTestingVariantId::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetRemoteConfigsContentAsString
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_GetRemoteConfigsContentAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetRemoteConfigsContentAsString) == 0x000008, "Wrong alignment on GameAnalytics_GetRemoteConfigsContentAsString");
static_assert(sizeof(GameAnalytics_GetRemoteConfigsContentAsString) == 0x000010, "Wrong size on GameAnalytics_GetRemoteConfigsContentAsString");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsContentAsString, ReturnValue) == 0x000000, "Member 'GameAnalytics_GetRemoteConfigsContentAsString::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetRemoteConfigsValueAsString
// 0x0020 (0x0020 - 0x0000)
struct GameAnalytics_GetRemoteConfigsValueAsString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetRemoteConfigsValueAsString) == 0x000008, "Wrong alignment on GameAnalytics_GetRemoteConfigsValueAsString");
static_assert(sizeof(GameAnalytics_GetRemoteConfigsValueAsString) == 0x000020, "Wrong size on GameAnalytics_GetRemoteConfigsValueAsString");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsString, Key) == 0x000000, "Member 'GameAnalytics_GetRemoteConfigsValueAsString::Key' has a wrong offset!");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsString, ReturnValue) == 0x000010, "Member 'GameAnalytics_GetRemoteConfigsValueAsString::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.GetRemoteConfigsValueAsStringWithDefaultValue
// 0x0030 (0x0030 - 0x0000)
struct GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue) == 0x000008, "Wrong alignment on GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue");
static_assert(sizeof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue) == 0x000030, "Wrong size on GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue, Key) == 0x000000, "Member 'GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue::Key' has a wrong offset!");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue, DefaultValue) == 0x000010, "Member 'GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue::DefaultValue' has a wrong offset!");
static_assert(offsetof(GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue, ReturnValue) == 0x000020, "Member 'GameAnalytics_GetRemoteConfigsValueAsStringWithDefaultValue::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.IsRemoteConfigsReady
// 0x0001 (0x0001 - 0x0000)
struct GameAnalytics_IsRemoteConfigsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_IsRemoteConfigsReady) == 0x000001, "Wrong alignment on GameAnalytics_IsRemoteConfigsReady");
static_assert(sizeof(GameAnalytics_IsRemoteConfigsReady) == 0x000001, "Wrong size on GameAnalytics_IsRemoteConfigsReady");
static_assert(offsetof(GameAnalytics_IsRemoteConfigsReady, ReturnValue) == 0x000000, "Member 'GameAnalytics_IsRemoteConfigsReady::ReturnValue' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.SetCustomDimension01
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_SetCustomDimension01 final
{
public:
	class FString                                 CustomDimension;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_SetCustomDimension01) == 0x000008, "Wrong alignment on GameAnalytics_SetCustomDimension01");
static_assert(sizeof(GameAnalytics_SetCustomDimension01) == 0x000010, "Wrong size on GameAnalytics_SetCustomDimension01");
static_assert(offsetof(GameAnalytics_SetCustomDimension01, CustomDimension) == 0x000000, "Member 'GameAnalytics_SetCustomDimension01::CustomDimension' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.SetCustomDimension02
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_SetCustomDimension02 final
{
public:
	class FString                                 CustomDimension;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_SetCustomDimension02) == 0x000008, "Wrong alignment on GameAnalytics_SetCustomDimension02");
static_assert(sizeof(GameAnalytics_SetCustomDimension02) == 0x000010, "Wrong size on GameAnalytics_SetCustomDimension02");
static_assert(offsetof(GameAnalytics_SetCustomDimension02, CustomDimension) == 0x000000, "Member 'GameAnalytics_SetCustomDimension02::CustomDimension' has a wrong offset!");

// Function GameAnalytics.GameAnalytics.SetCustomDimension03
// 0x0010 (0x0010 - 0x0000)
struct GameAnalytics_SetCustomDimension03 final
{
public:
	class FString                                 CustomDimension;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAnalytics_SetCustomDimension03) == 0x000008, "Wrong alignment on GameAnalytics_SetCustomDimension03");
static_assert(sizeof(GameAnalytics_SetCustomDimension03) == 0x000010, "Wrong size on GameAnalytics_SetCustomDimension03");
static_assert(offsetof(GameAnalytics_SetCustomDimension03, CustomDimension) == 0x000000, "Member 'GameAnalytics_SetCustomDimension03::CustomDimension' has a wrong offset!");

}

