#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnrealProject

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum UnrealProject.ECameraTypes
// NumValues: 0x0015
enum class ECameraTypes : uint8
{
	FP                                       = 0,
	TP                                       = 1,
	Crouch                                   = 2,
	Prone                                    = 3,
	Sprint                                   = 4,
	ADS                                      = 5,
	LeanLeft                                 = 6,
	LeanRight                                = 7,
	CrouchLeanLeft                           = 8,
	CrouchLeanRight                          = 9,
	TPFocus                                  = 10,
	FPFocus                                  = 11,
	CrouchFocus                              = 12,
	ProneFocus                               = 13,
	LeanLeftFocus                            = 14,
	LeanRightFocus                           = 15,
	CrouchLeanLeftFocus                      = 16,
	CrouchLeanRightFocus                     = 17,
	FreeFall                                 = 18,
	Vehicle                                  = 19,
	ECameraTypes_MAX                         = 20,
};

// Enum UnrealProject.ESpectatorState
// NumValues: 0x0005
enum class ESpectatorState : uint8
{
	LOCKED                                   = 0,
	FREE                                     = 1,
	TARGETING                                = 2,
	COUNT                                    = 3,
	ESpectatorState_MAX                      = 4,
};

// Enum UnrealProject.EItemFlags
// NumValues: 0x0003
enum class EItemFlags : uint8
{
	None                                     = 0,
	Default                                  = 1,
	EItemFlags_MAX                           = 2,
};

// Enum UnrealProject.EMagazineReloadStep
// NumValues: 0x0005
enum class EMagazineReloadStep : uint8
{
	AttachUsed                               = 0,
	Drop                                     = 1,
	SetNewVisibleAndAttach                   = 2,
	AttachNewToWeapon                        = 3,
	EMagazineReloadStep_MAX                  = 4,
};

// Enum UnrealProject.EBotStates
// NumValues: 0x0008
enum class EBotStates : uint8
{
	Idle                                     = 0,
	MoveForward                              = 1,
	MoveBackAndForth                         = 2,
	MoveAndJump                              = 3,
	MoveBackAndForthJumping                  = 4,
	SlowBackAndForth                         = 5,
	SlowBackAndForthJumping                  = 6,
	EBotStates_MAX                           = 7,
};

// Enum UnrealProject.ENGDCharacterExtraFlags
// NumValues: 0x000A
enum class ENGDCharacterExtraFlags : uint8
{
	None                                     = 0,
	Focusing                                 = 1,
	ADS                                      = 2,
	FP                                       = 4,
	FreeLook                                 = 8,
	Firing                                   = 16,
	Reloading                                = 32,
	WeaponDrawed                             = 64,
	Boarded                                  = 128,
	ENGDCharacterExtraFlags_MAX              = 129,
};

// Enum UnrealProject.ENGDCharacterLocomotionFlags
// NumValues: 0x000A
enum class ENGDCharacterLocomotionFlags : uint8
{
	None                                     = 0,
	SlowDown                                 = 1,
	Sprinting                                = 2,
	Jumping                                  = 4,
	Crouching                                = 8,
	Proning                                  = 16,
	LeaningLeft                              = 32,
	LeaningRight                             = 64,
	Sliding                                  = 128,
	ENGDCharacterLocomotionFlags_MAX         = 129,
};

// Enum UnrealProject.EDoorState
// NumValues: 0x0005
enum class EDoorState : uint8
{
	Opening                                  = 0,
	Opened                                   = 1,
	Closing                                  = 2,
	Closed                                   = 3,
	EDoorState_MAX                           = 4,
};

// Enum UnrealProject.EValidationResult
// NumValues: 0x0009
enum class EValidationResult : uint8
{
	LocalHit                                 = 0,
	ServerNoAckNoHit                         = 1,
	ServerNoAckHitDifferentActor             = 2,
	ServerNoAckHitStatic                     = 3,
	ServerAckClean                           = 4,
	ServerAckDifferentBone                   = 5,
	ServerAckCleanWithTravelTimeForced       = 6,
	ServerAckDifferentBoneWithTravelTimeForced = 7,
	EValidationResult_MAX                    = 8,
};

// Enum UnrealProject.ENGDPlayerFilterComparative
// NumValues: 0x0006
enum class ENGDPlayerFilterComparative : uint8
{
	ENGDPFC_MoreThan                         = 0,
	ENGDPFC_MoreEqualThan                    = 1,
	ENGDPFC_LessThan                         = 2,
	ENGDPFC_LessEqualThan                    = 3,
	ENGDPFC_EqualThan                        = 4,
	ENGDPFC_MAX                              = 5,
};

// Enum UnrealProject.EPlayerReportType
// NumValues: 0x0009
enum class EPlayerReportType : uint8
{
	PlayerReportInvalid                      = 0,
	PlayerReportCheating                     = 1,
	PlayerReportExploiting                   = 2,
	PlayerReportProfile                      = 3,
	PlayerReportVerbalAbuse                  = 4,
	PlayerReportScamming                     = 5,
	PlayerReportSpamming                     = 6,
	PlayerReportOther                        = 7,
	EPlayerReportType_MAX                    = 8,
};

// Enum UnrealProject.ETimerMode
// NumValues: 0x0004
enum class ETimerMode : uint8
{
	ETM_CountSinceAiming                     = 0,
	ETM_CountSinceLeverReleased              = 1,
	ETM_CountSinceLaunched                   = 2,
	ETM_MAX                                  = 3,
};

// Enum UnrealProject.EScreenMessageKey
// NumValues: 0x0003
enum class EScreenMessageKey : uint64
{
	NoKey                                    = 18446744073709551615,
	CheatManager_CheatsEnabled               = 1000,
	EScreenMessageKey_MAX                    = 1001,
};

// Enum UnrealProject.EPhysMaterialType
// NumValues: 0x0008
enum class EPhysMaterialType : uint8
{
	Unknown                                  = 0,
	Asphalt                                  = 1,
	Dirt                                     = 2,
	Water                                    = 3,
	Wood                                     = 4,
	Stone                                    = 5,
	Metal                                    = 6,
	EPhysMaterialType_MAX                    = 7,
};

// ScriptStruct UnrealProject.GeometryData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FGeometryData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometryData) == 0x000010, "Wrong alignment on FGeometryData");
static_assert(sizeof(FGeometryData) == 0x000040, "Wrong size on FGeometryData");

// ScriptStruct UnrealProject.NGDSoundSwitch
// 0x0020 (0x0020 - 0x0000)
struct FNGDSoundSwitch final
{
public:
	class FString                                 Group;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDSoundSwitch) == 0x000008, "Wrong alignment on FNGDSoundSwitch");
static_assert(sizeof(FNGDSoundSwitch) == 0x000020, "Wrong size on FNGDSoundSwitch");
static_assert(offsetof(FNGDSoundSwitch, Group) == 0x000000, "Member 'FNGDSoundSwitch::Group' has a wrong offset!");
static_assert(offsetof(FNGDSoundSwitch, Name) == 0x000010, "Member 'FNGDSoundSwitch::Name' has a wrong offset!");

// ScriptStruct UnrealProject.NGDSpatialAudio
// 0x0028 (0x0028 - 0x0000)
struct FNGDSpatialAudio final
{
public:
	class UAkAuxBus*                              EarlyReflectionAuxBus;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EarlyReflectionAuxBusName;                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EarlyReflectionOrder;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EarlyReflectionBusSendGain;                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EarlyReflectionMaxPathLength;                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableSpotReflectors : 1;                          // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDSpatialAudio) == 0x000008, "Wrong alignment on FNGDSpatialAudio");
static_assert(sizeof(FNGDSpatialAudio) == 0x000028, "Wrong size on FNGDSpatialAudio");
static_assert(offsetof(FNGDSpatialAudio, EarlyReflectionAuxBus) == 0x000000, "Member 'FNGDSpatialAudio::EarlyReflectionAuxBus' has a wrong offset!");
static_assert(offsetof(FNGDSpatialAudio, EarlyReflectionAuxBusName) == 0x000008, "Member 'FNGDSpatialAudio::EarlyReflectionAuxBusName' has a wrong offset!");
static_assert(offsetof(FNGDSpatialAudio, EarlyReflectionOrder) == 0x000018, "Member 'FNGDSpatialAudio::EarlyReflectionOrder' has a wrong offset!");
static_assert(offsetof(FNGDSpatialAudio, EarlyReflectionBusSendGain) == 0x00001C, "Member 'FNGDSpatialAudio::EarlyReflectionBusSendGain' has a wrong offset!");
static_assert(offsetof(FNGDSpatialAudio, EarlyReflectionMaxPathLength) == 0x000020, "Member 'FNGDSpatialAudio::EarlyReflectionMaxPathLength' has a wrong offset!");

// ScriptStruct UnrealProject.NGDSoundConfig
// 0x0058 (0x0058 - 0x0000)
struct FNGDSoundConfig final
{
public:
	class UAkAudioEvent*                          Event;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachToActor;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationScale;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNGDSoundSwitch>                Switches;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ProvideIsPlayer;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProvideTimeDilation;                               // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDSpatialAudio                       SpatialAudio;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDSoundConfig) == 0x000008, "Wrong alignment on FNGDSoundConfig");
static_assert(sizeof(FNGDSoundConfig) == 0x000058, "Wrong size on FNGDSoundConfig");
static_assert(offsetof(FNGDSoundConfig, Event) == 0x000000, "Member 'FNGDSoundConfig::Event' has a wrong offset!");
static_assert(offsetof(FNGDSoundConfig, AttachToActor) == 0x000008, "Member 'FNGDSoundConfig::AttachToActor' has a wrong offset!");
static_assert(offsetof(FNGDSoundConfig, OcclusionRefreshInterval) == 0x00000C, "Member 'FNGDSoundConfig::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FNGDSoundConfig, AttenuationScale) == 0x000010, "Member 'FNGDSoundConfig::AttenuationScale' has a wrong offset!");
static_assert(offsetof(FNGDSoundConfig, Switches) == 0x000018, "Member 'FNGDSoundConfig::Switches' has a wrong offset!");
static_assert(offsetof(FNGDSoundConfig, ProvideIsPlayer) == 0x000028, "Member 'FNGDSoundConfig::ProvideIsPlayer' has a wrong offset!");
static_assert(offsetof(FNGDSoundConfig, ProvideTimeDilation) == 0x000029, "Member 'FNGDSoundConfig::ProvideTimeDilation' has a wrong offset!");
static_assert(offsetof(FNGDSoundConfig, SpatialAudio) == 0x000030, "Member 'FNGDSoundConfig::SpatialAudio' has a wrong offset!");

// ScriptStruct UnrealProject.PostSoundParams
// 0x0098 (0x0098 - 0x0000)
struct FPostSoundParams final
{
public:
	struct FNGDSoundConfig                        AudioConfig;                                       // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Context;                                           // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDAkComponent*                        AkComponentToPostFrom;                             // 0x0090(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPostSoundParams) == 0x000008, "Wrong alignment on FPostSoundParams");
static_assert(sizeof(FPostSoundParams) == 0x000098, "Wrong size on FPostSoundParams");
static_assert(offsetof(FPostSoundParams, AudioConfig) == 0x000000, "Member 'FPostSoundParams::AudioConfig' has a wrong offset!");
static_assert(offsetof(FPostSoundParams, Context) == 0x000070, "Member 'FPostSoundParams::Context' has a wrong offset!");
static_assert(offsetof(FPostSoundParams, AkComponentToPostFrom) == 0x000090, "Member 'FPostSoundParams::AkComponentToPostFrom' has a wrong offset!");

// ScriptStruct UnrealProject.AnimNode_HandJointTarget
// 0x0030 (0x0210 - 0x01E0)
struct FAnimNode_HandJointTarget final : public FAnimNode_TwoBoneIK
{
public:
	struct FBoneReference                         IKHand;                                            // 0x01D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         JointTargetLocationOffset;                         // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x24];                                     // 0x01EC(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_HandJointTarget) == 0x000010, "Wrong alignment on FAnimNode_HandJointTarget");
static_assert(sizeof(FAnimNode_HandJointTarget) == 0x000210, "Wrong size on FAnimNode_HandJointTarget");
static_assert(offsetof(FAnimNode_HandJointTarget, IKHand) == 0x0001D8, "Member 'FAnimNode_HandJointTarget::IKHand' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandJointTarget, JointTargetLocationOffset) == 0x0001E8, "Member 'FAnimNode_HandJointTarget::JointTargetLocationOffset' has a wrong offset!");

// ScriptStruct UnrealProject.FloatValueToShow
// 0x0020 (0x0020 - 0x0000)
struct FFloatValueToShow final
{
public:
	float                                         MinDebug;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDebug;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugName;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatValueToShow) == 0x000008, "Wrong alignment on FFloatValueToShow");
static_assert(sizeof(FFloatValueToShow) == 0x000020, "Wrong size on FFloatValueToShow");
static_assert(offsetof(FFloatValueToShow, MinDebug) == 0x000000, "Member 'FFloatValueToShow::MinDebug' has a wrong offset!");
static_assert(offsetof(FFloatValueToShow, MaxDebug) == 0x000004, "Member 'FFloatValueToShow::MaxDebug' has a wrong offset!");
static_assert(offsetof(FFloatValueToShow, DebugName) == 0x000010, "Member 'FFloatValueToShow::DebugName' has a wrong offset!");

// ScriptStruct UnrealProject.NGDAxis
// 0x0010 (0x0010 - 0x0000)
struct FNGDAxis final
{
public:
	struct FVector                                Axis;                                              // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLocalSpace;                                     // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDAxis) == 0x000004, "Wrong alignment on FNGDAxis");
static_assert(sizeof(FNGDAxis) == 0x000010, "Wrong size on FNGDAxis");
static_assert(offsetof(FNGDAxis, Axis) == 0x000000, "Member 'FNGDAxis::Axis' has a wrong offset!");
static_assert(offsetof(FNGDAxis, bInLocalSpace) == 0x00000C, "Member 'FNGDAxis::bInLocalSpace' has a wrong offset!");

// ScriptStruct UnrealProject.CameraConfig
// 0x0040 (0x0040 - 0x0000)
struct FCameraConfig final
{
public:
	struct FTransform                             CameraTransform;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CameraFOV;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraConfig) == 0x000010, "Wrong alignment on FCameraConfig");
static_assert(sizeof(FCameraConfig) == 0x000040, "Wrong size on FCameraConfig");
static_assert(offsetof(FCameraConfig, CameraTransform) == 0x000000, "Member 'FCameraConfig::CameraTransform' has a wrong offset!");
static_assert(offsetof(FCameraConfig, CameraFOV) == 0x000030, "Member 'FCameraConfig::CameraFOV' has a wrong offset!");

// ScriptStruct UnrealProject.AnimNode_TwoBoneIKHACK
// 0x0118 (0x01E0 - 0x00C8)
struct FAnimNode_TwoBoneIKHACK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         IKBone;                                            // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartStretchRatio;                                 // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStretchScale;                                   // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x00E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      EffectorTarget;                                    // 0x00F0(0x0060)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                JointTargetLocation;                               // 0x0150(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      JointTarget;                                       // 0x0160(0x0060)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNGDAxis                               TwistAxis;                                         // 0x01C0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x01D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             JointTargetLocationSpace;                          // 0x01D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowStretching : 1;                              // 0x01D2(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTakeRotationFromEffectorSpace : 1;                // 0x01D2(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMaintainEffectorRelRot : 1;                       // 0x01D2(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowTwist : 1;                                   // 0x01D2(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D3[0xD];                                      // 0x01D3(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_TwoBoneIKHACK) == 0x000010, "Wrong alignment on FAnimNode_TwoBoneIKHACK");
static_assert(sizeof(FAnimNode_TwoBoneIKHACK) == 0x0001E0, "Wrong size on FAnimNode_TwoBoneIKHACK");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, IKBone) == 0x0000C8, "Member 'FAnimNode_TwoBoneIKHACK::IKBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, StartStretchRatio) == 0x0000D8, "Member 'FAnimNode_TwoBoneIKHACK::StartStretchRatio' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, MaxStretchScale) == 0x0000DC, "Member 'FAnimNode_TwoBoneIKHACK::MaxStretchScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, EffectorLocation) == 0x0000E0, "Member 'FAnimNode_TwoBoneIKHACK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, EffectorTarget) == 0x0000F0, "Member 'FAnimNode_TwoBoneIKHACK::EffectorTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, JointTargetLocation) == 0x000150, "Member 'FAnimNode_TwoBoneIKHACK::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, JointTarget) == 0x000160, "Member 'FAnimNode_TwoBoneIKHACK::JointTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, TwistAxis) == 0x0001C0, "Member 'FAnimNode_TwoBoneIKHACK::TwistAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, EffectorLocationSpace) == 0x0001D0, "Member 'FAnimNode_TwoBoneIKHACK::EffectorLocationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIKHACK, JointTargetLocationSpace) == 0x0001D1, "Member 'FAnimNode_TwoBoneIKHACK::JointTargetLocationSpace' has a wrong offset!");

// ScriptStruct UnrealProject.SocketData
// 0x0040 (0x0040 - 0x0000)
struct FSocketData final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocketData) == 0x000010, "Wrong alignment on FSocketData");
static_assert(sizeof(FSocketData) == 0x000040, "Wrong size on FSocketData");
static_assert(offsetof(FSocketData, BoneName) == 0x000000, "Member 'FSocketData::BoneName' has a wrong offset!");
static_assert(offsetof(FSocketData, Transform) == 0x000010, "Member 'FSocketData::Transform' has a wrong offset!");

// ScriptStruct UnrealProject.AttachmentReplicationData
// 0x0010 (0x0010 - 0x0000)
struct FAttachmentReplicationData final
{
public:
	class UNGDAttachmentContainerComponent*       OwnerAttachmentContainer;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SlotIndex;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachmentReplicationData) == 0x000008, "Wrong alignment on FAttachmentReplicationData");
static_assert(sizeof(FAttachmentReplicationData) == 0x000010, "Wrong size on FAttachmentReplicationData");
static_assert(offsetof(FAttachmentReplicationData, OwnerAttachmentContainer) == 0x000000, "Member 'FAttachmentReplicationData::OwnerAttachmentContainer' has a wrong offset!");
static_assert(offsetof(FAttachmentReplicationData, SlotIndex) == 0x000008, "Member 'FAttachmentReplicationData::SlotIndex' has a wrong offset!");

// ScriptStruct UnrealProject.RemoteHitEvent
// 0x0030 (0x0030 - 0x0000)
struct FRemoteHitEvent final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitPosition;                                       // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               HitNormal;                                         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorHitted;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoteHitEvent) == 0x000008, "Wrong alignment on FRemoteHitEvent");
static_assert(sizeof(FRemoteHitEvent) == 0x000030, "Wrong size on FRemoteHitEvent");
static_assert(offsetof(FRemoteHitEvent, Timestamp) == 0x000000, "Member 'FRemoteHitEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(FRemoteHitEvent, HitPosition) == 0x000004, "Member 'FRemoteHitEvent::HitPosition' has a wrong offset!");
static_assert(offsetof(FRemoteHitEvent, HitNormal) == 0x000010, "Member 'FRemoteHitEvent::HitNormal' has a wrong offset!");
static_assert(offsetof(FRemoteHitEvent, ActorHitted) == 0x000020, "Member 'FRemoteHitEvent::ActorHitted' has a wrong offset!");
static_assert(offsetof(FRemoteHitEvent, BoneName) == 0x000028, "Member 'FRemoteHitEvent::BoneName' has a wrong offset!");

// ScriptStruct UnrealProject.FirearmFeelComponentOverrides
// 0x0014 (0x0014 - 0x0000)
struct FFirearmFeelComponentOverrides final
{
public:
	float                                         Scale_Deviation;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationModifier;                                 // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrosshairSpreadMagnitudAdditive;                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumping;                                        // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale_ModifierLerpTime;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirearmFeelComponentOverrides) == 0x000004, "Wrong alignment on FFirearmFeelComponentOverrides");
static_assert(sizeof(FFirearmFeelComponentOverrides) == 0x000014, "Wrong size on FFirearmFeelComponentOverrides");
static_assert(offsetof(FFirearmFeelComponentOverrides, Scale_Deviation) == 0x000000, "Member 'FFirearmFeelComponentOverrides::Scale_Deviation' has a wrong offset!");
static_assert(offsetof(FFirearmFeelComponentOverrides, DeviationModifier) == 0x000004, "Member 'FFirearmFeelComponentOverrides::DeviationModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelComponentOverrides, CrosshairSpreadMagnitudAdditive) == 0x000008, "Member 'FFirearmFeelComponentOverrides::CrosshairSpreadMagnitudAdditive' has a wrong offset!");
static_assert(offsetof(FFirearmFeelComponentOverrides, bIsJumping) == 0x00000C, "Member 'FFirearmFeelComponentOverrides::bIsJumping' has a wrong offset!");
static_assert(offsetof(FFirearmFeelComponentOverrides, Scale_ModifierLerpTime) == 0x000010, "Member 'FFirearmFeelComponentOverrides::Scale_ModifierLerpTime' has a wrong offset!");

// ScriptStruct UnrealProject.DeviationStateOverrides
// 0x00D0 (0x00D0 - 0x0000)
struct FDeviationStateOverrides final
{
public:
	bool                                          bUseJumpOverride;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFirearmFeelComponentOverrides         Locomotion_Jump_Override;                          // 0x0004(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TMap<ENGDCharacterLocomotionFlags, struct FFirearmFeelComponentOverrides> Locomotion_Override;   // 0x0018(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ENGDCharacterLocomotionFlags, struct FFirearmFeelComponentOverrides> ExtraFlags_Override;   // 0x0068(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFirearmFeelComponentOverrides         BaseValue;                                         // 0x00B8(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeviationStateOverrides) == 0x000008, "Wrong alignment on FDeviationStateOverrides");
static_assert(sizeof(FDeviationStateOverrides) == 0x0000D0, "Wrong size on FDeviationStateOverrides");
static_assert(offsetof(FDeviationStateOverrides, bUseJumpOverride) == 0x000000, "Member 'FDeviationStateOverrides::bUseJumpOverride' has a wrong offset!");
static_assert(offsetof(FDeviationStateOverrides, Locomotion_Jump_Override) == 0x000004, "Member 'FDeviationStateOverrides::Locomotion_Jump_Override' has a wrong offset!");
static_assert(offsetof(FDeviationStateOverrides, Locomotion_Override) == 0x000018, "Member 'FDeviationStateOverrides::Locomotion_Override' has a wrong offset!");
static_assert(offsetof(FDeviationStateOverrides, ExtraFlags_Override) == 0x000068, "Member 'FDeviationStateOverrides::ExtraFlags_Override' has a wrong offset!");
static_assert(offsetof(FDeviationStateOverrides, BaseValue) == 0x0000B8, "Member 'FDeviationStateOverrides::BaseValue' has a wrong offset!");

// ScriptStruct UnrealProject.FirearmFeelShake
// 0x0010 (0x0010 - 0x0000)
struct FFirearmFeelShake final
{
public:
	TSubclassOf<class UCameraShake>               Shake;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirearmFeelShake) == 0x000008, "Wrong alignment on FFirearmFeelShake");
static_assert(sizeof(FFirearmFeelShake) == 0x000010, "Wrong size on FFirearmFeelShake");
static_assert(offsetof(FFirearmFeelShake, Shake) == 0x000000, "Member 'FFirearmFeelShake::Shake' has a wrong offset!");
static_assert(offsetof(FFirearmFeelShake, Scale) == 0x000008, "Member 'FFirearmFeelShake::Scale' has a wrong offset!");

// ScriptStruct UnrealProject.FirearmFeelResult
// 0x0060 (0x0060 - 0x0000)
struct FFirearmFeelResult final
{
public:
	float                                         SpreadMagnitude;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PlayerDeltaInput;                                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               FireDirection;                                     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ControllerDeltaInput;                              // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFirearmFeelShake>              Shakes;                                            // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                WeaponIKTranslation;                               // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponIKRotation;                                  // 0x0054(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirearmFeelResult) == 0x000008, "Wrong alignment on FFirearmFeelResult");
static_assert(sizeof(FFirearmFeelResult) == 0x000060, "Wrong size on FFirearmFeelResult");
static_assert(offsetof(FFirearmFeelResult, SpreadMagnitude) == 0x000000, "Member 'FFirearmFeelResult::SpreadMagnitude' has a wrong offset!");
static_assert(offsetof(FFirearmFeelResult, PlayerDeltaInput) == 0x000004, "Member 'FFirearmFeelResult::PlayerDeltaInput' has a wrong offset!");
static_assert(offsetof(FFirearmFeelResult, FireDirection) == 0x000010, "Member 'FFirearmFeelResult::FireDirection' has a wrong offset!");
static_assert(offsetof(FFirearmFeelResult, ControllerDeltaInput) == 0x00001C, "Member 'FFirearmFeelResult::ControllerDeltaInput' has a wrong offset!");
static_assert(offsetof(FFirearmFeelResult, CameraRotation) == 0x000028, "Member 'FFirearmFeelResult::CameraRotation' has a wrong offset!");
static_assert(offsetof(FFirearmFeelResult, Shakes) == 0x000038, "Member 'FFirearmFeelResult::Shakes' has a wrong offset!");
static_assert(offsetof(FFirearmFeelResult, WeaponIKTranslation) == 0x000048, "Member 'FFirearmFeelResult::WeaponIKTranslation' has a wrong offset!");
static_assert(offsetof(FFirearmFeelResult, WeaponIKRotation) == 0x000054, "Member 'FFirearmFeelResult::WeaponIKRotation' has a wrong offset!");

// ScriptStruct UnrealProject.FirearmFeelCharacterModifiers
// 0x0028 (0x0028 - 0x0000)
struct FFirearmFeelCharacterModifiers final
{
public:
	float                                         HIPModifier;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusModifier;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSModifier;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchModifier;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneModifier;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkModifier;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunModifier;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintModifier;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpModifier;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideModifier;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirearmFeelCharacterModifiers) == 0x000004, "Wrong alignment on FFirearmFeelCharacterModifiers");
static_assert(sizeof(FFirearmFeelCharacterModifiers) == 0x000028, "Wrong size on FFirearmFeelCharacterModifiers");
static_assert(offsetof(FFirearmFeelCharacterModifiers, HIPModifier) == 0x000000, "Member 'FFirearmFeelCharacterModifiers::HIPModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, FocusModifier) == 0x000004, "Member 'FFirearmFeelCharacterModifiers::FocusModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, ADSModifier) == 0x000008, "Member 'FFirearmFeelCharacterModifiers::ADSModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, CrouchModifier) == 0x00000C, "Member 'FFirearmFeelCharacterModifiers::CrouchModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, ProneModifier) == 0x000010, "Member 'FFirearmFeelCharacterModifiers::ProneModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, WalkModifier) == 0x000014, "Member 'FFirearmFeelCharacterModifiers::WalkModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, RunModifier) == 0x000018, "Member 'FFirearmFeelCharacterModifiers::RunModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, SprintModifier) == 0x00001C, "Member 'FFirearmFeelCharacterModifiers::SprintModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, JumpModifier) == 0x000020, "Member 'FFirearmFeelCharacterModifiers::JumpModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelCharacterModifiers, SlideModifier) == 0x000024, "Member 'FFirearmFeelCharacterModifiers::SlideModifier' has a wrong offset!");

// ScriptStruct UnrealProject.FirearmFeelModifiers
// 0x000C (0x000C - 0x0000)
struct FFirearmFeelModifiers final
{
public:
	float                                         HorizontalModifier;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalModifier;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeModifier;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirearmFeelModifiers) == 0x000004, "Wrong alignment on FFirearmFeelModifiers");
static_assert(sizeof(FFirearmFeelModifiers) == 0x00000C, "Wrong size on FFirearmFeelModifiers");
static_assert(offsetof(FFirearmFeelModifiers, HorizontalModifier) == 0x000000, "Member 'FFirearmFeelModifiers::HorizontalModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelModifiers, VerticalModifier) == 0x000004, "Member 'FFirearmFeelModifiers::VerticalModifier' has a wrong offset!");
static_assert(offsetof(FFirearmFeelModifiers, TimeModifier) == 0x000008, "Member 'FFirearmFeelModifiers::TimeModifier' has a wrong offset!");

// ScriptStruct UnrealProject.FirearmFeelComponentModifier
// 0x0018 (0x0018 - 0x0000)
struct FFirearmFeelComponentModifier final
{
public:
	TSubclassOf<class UBaseFirearmFeelComponent>  ComponentClass;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFirearmFeelModifiers                  ModifierValues;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirearmFeelComponentModifier) == 0x000008, "Wrong alignment on FFirearmFeelComponentModifier");
static_assert(sizeof(FFirearmFeelComponentModifier) == 0x000018, "Wrong size on FFirearmFeelComponentModifier");
static_assert(offsetof(FFirearmFeelComponentModifier, ComponentClass) == 0x000000, "Member 'FFirearmFeelComponentModifier::ComponentClass' has a wrong offset!");
static_assert(offsetof(FFirearmFeelComponentModifier, ModifierValues) == 0x000008, "Member 'FFirearmFeelComponentModifier::ModifierValues' has a wrong offset!");

// ScriptStruct UnrealProject.ScalableCurve
// 0x0018 (0x0018 - 0x0000)
struct FScalableCurve
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScalableCurve) == 0x000008, "Wrong alignment on FScalableCurve");
static_assert(sizeof(FScalableCurve) == 0x000018, "Wrong size on FScalableCurve");
static_assert(offsetof(FScalableCurve, Curve) == 0x000008, "Member 'FScalableCurve::Curve' has a wrong offset!");
static_assert(offsetof(FScalableCurve, Multiplier) == 0x000010, "Member 'FScalableCurve::Multiplier' has a wrong offset!");

// ScriptStruct UnrealProject.NGDDamageConfig
// 0x000C (0x000C - 0x0000)
struct FNGDDamageConfig
{
public:
	float                                         BaseDamage;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Impulse;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyImpulseOnDamage;                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDDamageConfig) == 0x000004, "Wrong alignment on FNGDDamageConfig");
static_assert(sizeof(FNGDDamageConfig) == 0x00000C, "Wrong size on FNGDDamageConfig");
static_assert(offsetof(FNGDDamageConfig, BaseDamage) == 0x000000, "Member 'FNGDDamageConfig::BaseDamage' has a wrong offset!");
static_assert(offsetof(FNGDDamageConfig, Impulse) == 0x000004, "Member 'FNGDDamageConfig::Impulse' has a wrong offset!");
static_assert(offsetof(FNGDDamageConfig, ApplyImpulseOnDamage) == 0x000008, "Member 'FNGDDamageConfig::ApplyImpulseOnDamage' has a wrong offset!");

// ScriptStruct UnrealProject.ActiveWeaponData
// 0x0010 (0x0010 - 0x0000)
struct FActiveWeaponData final
{
public:
	class AWeapon*                                ActiveWeapon;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                LastActiveWeapon;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveWeaponData) == 0x000008, "Wrong alignment on FActiveWeaponData");
static_assert(sizeof(FActiveWeaponData) == 0x000010, "Wrong size on FActiveWeaponData");
static_assert(offsetof(FActiveWeaponData, ActiveWeapon) == 0x000000, "Member 'FActiveWeaponData::ActiveWeapon' has a wrong offset!");
static_assert(offsetof(FActiveWeaponData, LastActiveWeapon) == 0x000008, "Member 'FActiveWeaponData::LastActiveWeapon' has a wrong offset!");

// ScriptStruct UnrealProject.LinearScalableCurve
// 0x0000 (0x0018 - 0x0018)
struct FLinearScalableCurve final : public FScalableCurve
{
};
static_assert(alignof(FLinearScalableCurve) == 0x000008, "Wrong alignment on FLinearScalableCurve");
static_assert(sizeof(FLinearScalableCurve) == 0x000018, "Wrong size on FLinearScalableCurve");

// ScriptStruct UnrealProject.ScalableVectorCurve
// 0x0020 (0x0020 - 0x0000)
struct FScalableVectorCurve final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Curve;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Multiplier;                                        // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScalableVectorCurve) == 0x000008, "Wrong alignment on FScalableVectorCurve");
static_assert(sizeof(FScalableVectorCurve) == 0x000020, "Wrong size on FScalableVectorCurve");
static_assert(offsetof(FScalableVectorCurve, Curve) == 0x000008, "Member 'FScalableVectorCurve::Curve' has a wrong offset!");
static_assert(offsetof(FScalableVectorCurve, Multiplier) == 0x000010, "Member 'FScalableVectorCurve::Multiplier' has a wrong offset!");

// ScriptStruct UnrealProject.NGDRadialDamageConfig
// 0x0024 (0x0030 - 0x000C)
struct FNGDRadialDamageConfig final : public FNGDDamageConfig
{
public:
	float                                         InnerRadius;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DamageCurve;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AfectedSocket;                                     // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDRadialDamageConfig) == 0x000008, "Wrong alignment on FNGDRadialDamageConfig");
static_assert(sizeof(FNGDRadialDamageConfig) == 0x000030, "Wrong size on FNGDRadialDamageConfig");
static_assert(offsetof(FNGDRadialDamageConfig, InnerRadius) == 0x00000C, "Member 'FNGDRadialDamageConfig::InnerRadius' has a wrong offset!");
static_assert(offsetof(FNGDRadialDamageConfig, OuterRadius) == 0x000010, "Member 'FNGDRadialDamageConfig::OuterRadius' has a wrong offset!");
static_assert(offsetof(FNGDRadialDamageConfig, MinimumDamage) == 0x000014, "Member 'FNGDRadialDamageConfig::MinimumDamage' has a wrong offset!");
static_assert(offsetof(FNGDRadialDamageConfig, DamageCurve) == 0x000018, "Member 'FNGDRadialDamageConfig::DamageCurve' has a wrong offset!");
static_assert(offsetof(FNGDRadialDamageConfig, DamagePreventionChannel) == 0x000020, "Member 'FNGDRadialDamageConfig::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(FNGDRadialDamageConfig, AfectedSocket) == 0x000024, "Member 'FNGDRadialDamageConfig::AfectedSocket' has a wrong offset!");

// ScriptStruct UnrealProject.ActionParams
// 0x0030 (0x0030 - 0x0000)
struct FActionParams final
{
public:
	class UPlayTestComponent*                     PlayTestComp;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveToLocation;                                    // 0x0008(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AimToLocation;                                     // 0x0014(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AimToActor;                                        // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimDuration;                                       // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirePressed;                                      // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionParams) == 0x000008, "Wrong alignment on FActionParams");
static_assert(sizeof(FActionParams) == 0x000030, "Wrong size on FActionParams");
static_assert(offsetof(FActionParams, PlayTestComp) == 0x000000, "Member 'FActionParams::PlayTestComp' has a wrong offset!");
static_assert(offsetof(FActionParams, MoveToLocation) == 0x000008, "Member 'FActionParams::MoveToLocation' has a wrong offset!");
static_assert(offsetof(FActionParams, AimToLocation) == 0x000014, "Member 'FActionParams::AimToLocation' has a wrong offset!");
static_assert(offsetof(FActionParams, AimToActor) == 0x000020, "Member 'FActionParams::AimToActor' has a wrong offset!");
static_assert(offsetof(FActionParams, AimDuration) == 0x000028, "Member 'FActionParams::AimDuration' has a wrong offset!");
static_assert(offsetof(FActionParams, bFirePressed) == 0x00002C, "Member 'FActionParams::bFirePressed' has a wrong offset!");

// ScriptStruct UnrealProject.HitRegistrationBullet
// 0x0024 (0x0024 - 0x0000)
struct FHitRegistrationBullet final
{
public:
	float                                         GravityScale;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drag;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixedStep;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusIncreaseAgainstRewindables_Global;           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusIncreaseAgainstRewindables_Local;            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugBulletIndex;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalyPredicted;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitRegistrationBullet) == 0x000004, "Wrong alignment on FHitRegistrationBullet");
static_assert(sizeof(FHitRegistrationBullet) == 0x000024, "Wrong size on FHitRegistrationBullet");
static_assert(offsetof(FHitRegistrationBullet, GravityScale) == 0x000000, "Member 'FHitRegistrationBullet::GravityScale' has a wrong offset!");
static_assert(offsetof(FHitRegistrationBullet, Drag) == 0x000004, "Member 'FHitRegistrationBullet::Drag' has a wrong offset!");
static_assert(offsetof(FHitRegistrationBullet, FixedStep) == 0x000008, "Member 'FHitRegistrationBullet::FixedStep' has a wrong offset!");
static_assert(offsetof(FHitRegistrationBullet, Radius) == 0x00000C, "Member 'FHitRegistrationBullet::Radius' has a wrong offset!");
static_assert(offsetof(FHitRegistrationBullet, InitialSpeed) == 0x000010, "Member 'FHitRegistrationBullet::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FHitRegistrationBullet, RadiusIncreaseAgainstRewindables_Global) == 0x000014, "Member 'FHitRegistrationBullet::RadiusIncreaseAgainstRewindables_Global' has a wrong offset!");
static_assert(offsetof(FHitRegistrationBullet, RadiusIncreaseAgainstRewindables_Local) == 0x000018, "Member 'FHitRegistrationBullet::RadiusIncreaseAgainstRewindables_Local' has a wrong offset!");
static_assert(offsetof(FHitRegistrationBullet, DebugBulletIndex) == 0x00001C, "Member 'FHitRegistrationBullet::DebugBulletIndex' has a wrong offset!");
static_assert(offsetof(FHitRegistrationBullet, IsLocalyPredicted) == 0x000020, "Member 'FHitRegistrationBullet::IsLocalyPredicted' has a wrong offset!");

// ScriptStruct UnrealProject.SpringArmConfig
// 0x0050 (0x0050 - 0x0000)
struct FSpringArmConfig final
{
public:
	struct FTransform                             ArmTransform;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ArmLenght;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketOffset;                                      // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpringArmConfig) == 0x000010, "Wrong alignment on FSpringArmConfig");
static_assert(sizeof(FSpringArmConfig) == 0x000050, "Wrong size on FSpringArmConfig");
static_assert(offsetof(FSpringArmConfig, ArmTransform) == 0x000000, "Member 'FSpringArmConfig::ArmTransform' has a wrong offset!");
static_assert(offsetof(FSpringArmConfig, ArmLenght) == 0x000030, "Member 'FSpringArmConfig::ArmLenght' has a wrong offset!");
static_assert(offsetof(FSpringArmConfig, SocketOffset) == 0x000034, "Member 'FSpringArmConfig::SocketOffset' has a wrong offset!");
static_assert(offsetof(FSpringArmConfig, TargetOffset) == 0x000040, "Member 'FSpringArmConfig::TargetOffset' has a wrong offset!");

// ScriptStruct UnrealProject.CompleteCameraConfig
// 0x0090 (0x0090 - 0x0000)
struct FCompleteCameraConfig final
{
public:
	struct FCameraConfig                          CameraConfig;                                      // 0x0000(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSpringArmConfig                       SpringArmConfig;                                   // 0x0040(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompleteCameraConfig) == 0x000010, "Wrong alignment on FCompleteCameraConfig");
static_assert(sizeof(FCompleteCameraConfig) == 0x000090, "Wrong size on FCompleteCameraConfig");
static_assert(offsetof(FCompleteCameraConfig, CameraConfig) == 0x000000, "Member 'FCompleteCameraConfig::CameraConfig' has a wrong offset!");
static_assert(offsetof(FCompleteCameraConfig, SpringArmConfig) == 0x000040, "Member 'FCompleteCameraConfig::SpringArmConfig' has a wrong offset!");

// ScriptStruct UnrealProject.ActorSample
// 0x0038 (0x0038 - 0x0000)
struct FActorSample final
{
public:
	class AActor*                                 RewindableActor;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSocketData>                    SocketDataArray;                                   // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorSample) == 0x000008, "Wrong alignment on FActorSample");
static_assert(sizeof(FActorSample) == 0x000038, "Wrong size on FActorSample");
static_assert(offsetof(FActorSample, RewindableActor) == 0x000000, "Member 'FActorSample::RewindableActor' has a wrong offset!");
static_assert(offsetof(FActorSample, Timestamp) == 0x000008, "Member 'FActorSample::Timestamp' has a wrong offset!");
static_assert(offsetof(FActorSample, Location) == 0x00000C, "Member 'FActorSample::Location' has a wrong offset!");
static_assert(offsetof(FActorSample, Velocity) == 0x000018, "Member 'FActorSample::Velocity' has a wrong offset!");
static_assert(offsetof(FActorSample, SocketDataArray) == 0x000028, "Member 'FActorSample::SocketDataArray' has a wrong offset!");

// ScriptStruct UnrealProject.ADSState
// 0x0010 (0x0010 - 0x0000)
struct FADSState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ANGDCharacter*                          LocalOrSpectatingCharacter;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FADSState) == 0x000008, "Wrong alignment on FADSState");
static_assert(sizeof(FADSState) == 0x000010, "Wrong size on FADSState");
static_assert(offsetof(FADSState, LocalOrSpectatingCharacter) == 0x000008, "Member 'FADSState::LocalOrSpectatingCharacter' has a wrong offset!");

// ScriptStruct UnrealProject.LocalHitEvent
// 0x0020 (0x0020 - 0x0000)
struct FLocalHitEvent final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Victim;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientPing;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraveledTime;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        BulletIndex;                                       // 0x001C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PelletIndex;                                       // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocalHitEvent) == 0x000008, "Wrong alignment on FLocalHitEvent");
static_assert(sizeof(FLocalHitEvent) == 0x000020, "Wrong size on FLocalHitEvent");
static_assert(offsetof(FLocalHitEvent, Timestamp) == 0x000000, "Member 'FLocalHitEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(FLocalHitEvent, Victim) == 0x000008, "Member 'FLocalHitEvent::Victim' has a wrong offset!");
static_assert(offsetof(FLocalHitEvent, BoneIndex) == 0x000010, "Member 'FLocalHitEvent::BoneIndex' has a wrong offset!");
static_assert(offsetof(FLocalHitEvent, ClientPing) == 0x000014, "Member 'FLocalHitEvent::ClientPing' has a wrong offset!");
static_assert(offsetof(FLocalHitEvent, TraveledTime) == 0x000018, "Member 'FLocalHitEvent::TraveledTime' has a wrong offset!");
static_assert(offsetof(FLocalHitEvent, BulletIndex) == 0x00001C, "Member 'FLocalHitEvent::BulletIndex' has a wrong offset!");
static_assert(offsetof(FLocalHitEvent, PelletIndex) == 0x00001E, "Member 'FLocalHitEvent::PelletIndex' has a wrong offset!");

// ScriptStruct UnrealProject.ControllerRotationData
// 0x0010 (0x0010 - 0x0000)
struct FControllerRotationData final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControllerRotationData) == 0x000004, "Wrong alignment on FControllerRotationData");
static_assert(sizeof(FControllerRotationData) == 0x000010, "Wrong size on FControllerRotationData");
static_assert(offsetof(FControllerRotationData, Timestamp) == 0x000000, "Member 'FControllerRotationData::Timestamp' has a wrong offset!");
static_assert(offsetof(FControllerRotationData, Rotation) == 0x000004, "Member 'FControllerRotationData::Rotation' has a wrong offset!");

// ScriptStruct UnrealProject.EquipmentSlot
// 0x0020 (0x0020 - 0x0000)
struct FEquipmentSlot final
{
public:
	class FString                                 SlotType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AttachSocket;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AEquipment*                             Equipment;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEquipmentSlot) == 0x000008, "Wrong alignment on FEquipmentSlot");
static_assert(sizeof(FEquipmentSlot) == 0x000020, "Wrong size on FEquipmentSlot");
static_assert(offsetof(FEquipmentSlot, SlotType) == 0x000000, "Member 'FEquipmentSlot::SlotType' has a wrong offset!");
static_assert(offsetof(FEquipmentSlot, AttachSocket) == 0x000010, "Member 'FEquipmentSlot::AttachSocket' has a wrong offset!");
static_assert(offsetof(FEquipmentSlot, Equipment) == 0x000018, "Member 'FEquipmentSlot::Equipment' has a wrong offset!");

// ScriptStruct UnrealProject.FirearmMode
// 0x0028 (0x0028 - 0x0000)
struct FFirearmMode final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoFire;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BurstCount;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurstTimer;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCookProjectiles;                               // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxCookTime;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCookTime;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirearmMode) == 0x000008, "Wrong alignment on FFirearmMode");
static_assert(sizeof(FFirearmMode) == 0x000028, "Wrong size on FFirearmMode");
static_assert(offsetof(FFirearmMode, Name) == 0x000000, "Member 'FFirearmMode::Name' has a wrong offset!");
static_assert(offsetof(FFirearmMode, AutoFire) == 0x000010, "Member 'FFirearmMode::AutoFire' has a wrong offset!");
static_assert(offsetof(FFirearmMode, BurstCount) == 0x000014, "Member 'FFirearmMode::BurstCount' has a wrong offset!");
static_assert(offsetof(FFirearmMode, BurstTimer) == 0x000018, "Member 'FFirearmMode::BurstTimer' has a wrong offset!");
static_assert(offsetof(FFirearmMode, bCanCookProjectiles) == 0x00001C, "Member 'FFirearmMode::bCanCookProjectiles' has a wrong offset!");
static_assert(offsetof(FFirearmMode, MaxCookTime) == 0x000020, "Member 'FFirearmMode::MaxCookTime' has a wrong offset!");
static_assert(offsetof(FFirearmMode, MinCookTime) == 0x000024, "Member 'FFirearmMode::MinCookTime' has a wrong offset!");

// ScriptStruct UnrealProject.DefaultItemConfig
// 0x0010 (0x0010 - 0x0000)
struct FDefaultItemConfig final
{
public:
	TSubclassOf<class AItem>                      Item;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDefaultItemConfig) == 0x000008, "Wrong alignment on FDefaultItemConfig");
static_assert(sizeof(FDefaultItemConfig) == 0x000010, "Wrong size on FDefaultItemConfig");
static_assert(offsetof(FDefaultItemConfig, Item) == 0x000000, "Member 'FDefaultItemConfig::Item' has a wrong offset!");
static_assert(offsetof(FDefaultItemConfig, Quantity) == 0x000008, "Member 'FDefaultItemConfig::Quantity' has a wrong offset!");

// ScriptStruct UnrealProject.InventoryData
// 0x0010 (0x0010 - 0x0000)
struct FInventoryData final
{
public:
	class UInventoryComponent*                    OwnerInventory;                                    // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SlotIndex;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         State;                                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetHolstered;                                     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Version;                                           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryData) == 0x000008, "Wrong alignment on FInventoryData");
static_assert(sizeof(FInventoryData) == 0x000010, "Wrong size on FInventoryData");
static_assert(offsetof(FInventoryData, OwnerInventory) == 0x000000, "Member 'FInventoryData::OwnerInventory' has a wrong offset!");
static_assert(offsetof(FInventoryData, SlotIndex) == 0x000008, "Member 'FInventoryData::SlotIndex' has a wrong offset!");
static_assert(offsetof(FInventoryData, State) == 0x000009, "Member 'FInventoryData::State' has a wrong offset!");
static_assert(offsetof(FInventoryData, bSetHolstered) == 0x00000A, "Member 'FInventoryData::bSetHolstered' has a wrong offset!");
static_assert(offsetof(FInventoryData, Version) == 0x00000B, "Member 'FInventoryData::Version' has a wrong offset!");

// ScriptStruct UnrealProject.VehicleEngineDatum
// 0x0014 (0x0014 - 0x0000)
struct FVehicleEngineDatum final
{
public:
	float                                         FadeInRPMStart;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInRPMEnd;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutRPMStart;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutRPMEnd;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchMultiplier;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleEngineDatum) == 0x000004, "Wrong alignment on FVehicleEngineDatum");
static_assert(sizeof(FVehicleEngineDatum) == 0x000014, "Wrong size on FVehicleEngineDatum");
static_assert(offsetof(FVehicleEngineDatum, FadeInRPMStart) == 0x000000, "Member 'FVehicleEngineDatum::FadeInRPMStart' has a wrong offset!");
static_assert(offsetof(FVehicleEngineDatum, FadeInRPMEnd) == 0x000004, "Member 'FVehicleEngineDatum::FadeInRPMEnd' has a wrong offset!");
static_assert(offsetof(FVehicleEngineDatum, FadeOutRPMStart) == 0x000008, "Member 'FVehicleEngineDatum::FadeOutRPMStart' has a wrong offset!");
static_assert(offsetof(FVehicleEngineDatum, FadeOutRPMEnd) == 0x00000C, "Member 'FVehicleEngineDatum::FadeOutRPMEnd' has a wrong offset!");
static_assert(offsetof(FVehicleEngineDatum, MaxPitchMultiplier) == 0x000010, "Member 'FVehicleEngineDatum::MaxPitchMultiplier' has a wrong offset!");

// ScriptStruct UnrealProject.MagazineAttachmentConfig
// 0x0020 (0x0020 - 0x0000)
struct FMagazineAttachmentConfig final
{
public:
	int32                                         ClipSizeModifier;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTimeModifier;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            EmptyMagazineStaticMesh;                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            FullMagazineStaticMesh;                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADropMagazine>              DropMagazineClass;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMagazineAttachmentConfig) == 0x000008, "Wrong alignment on FMagazineAttachmentConfig");
static_assert(sizeof(FMagazineAttachmentConfig) == 0x000020, "Wrong size on FMagazineAttachmentConfig");
static_assert(offsetof(FMagazineAttachmentConfig, ClipSizeModifier) == 0x000000, "Member 'FMagazineAttachmentConfig::ClipSizeModifier' has a wrong offset!");
static_assert(offsetof(FMagazineAttachmentConfig, ReloadTimeModifier) == 0x000004, "Member 'FMagazineAttachmentConfig::ReloadTimeModifier' has a wrong offset!");
static_assert(offsetof(FMagazineAttachmentConfig, EmptyMagazineStaticMesh) == 0x000008, "Member 'FMagazineAttachmentConfig::EmptyMagazineStaticMesh' has a wrong offset!");
static_assert(offsetof(FMagazineAttachmentConfig, FullMagazineStaticMesh) == 0x000010, "Member 'FMagazineAttachmentConfig::FullMagazineStaticMesh' has a wrong offset!");
static_assert(offsetof(FMagazineAttachmentConfig, DropMagazineClass) == 0x000018, "Member 'FMagazineAttachmentConfig::DropMagazineClass' has a wrong offset!");

// ScriptStruct UnrealProject.KeybindingUIConfig
// 0x0050 (0x0050 - 0x0000)
struct FKeybindingUIConfig final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0010(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeybindingUIConfig) == 0x000008, "Wrong alignment on FKeybindingUIConfig");
static_assert(sizeof(FKeybindingUIConfig) == 0x000050, "Wrong size on FKeybindingUIConfig");
static_assert(offsetof(FKeybindingUIConfig, ActionName) == 0x000000, "Member 'FKeybindingUIConfig::ActionName' has a wrong offset!");
static_assert(offsetof(FKeybindingUIConfig, AxisName) == 0x000008, "Member 'FKeybindingUIConfig::AxisName' has a wrong offset!");
static_assert(offsetof(FKeybindingUIConfig, Key) == 0x000010, "Member 'FKeybindingUIConfig::Key' has a wrong offset!");
static_assert(offsetof(FKeybindingUIConfig, Scale) == 0x000028, "Member 'FKeybindingUIConfig::Scale' has a wrong offset!");
static_assert(offsetof(FKeybindingUIConfig, DisplayName) == 0x000030, "Member 'FKeybindingUIConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FKeybindingUIConfig, GroupName) == 0x000048, "Member 'FKeybindingUIConfig::GroupName' has a wrong offset!");

// ScriptStruct UnrealProject.AttachmentMuzzleConfig
// 0x0060 (0x0060 - 0x0000)
struct FAttachmentMuzzleConfig final
{
public:
	class UParticleSystem*                        FireMuzzleParticleSystem;                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDSoundConfig                        FireSoundConfig;                                   // 0x0008(0x0058)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachmentMuzzleConfig) == 0x000008, "Wrong alignment on FAttachmentMuzzleConfig");
static_assert(sizeof(FAttachmentMuzzleConfig) == 0x000060, "Wrong size on FAttachmentMuzzleConfig");
static_assert(offsetof(FAttachmentMuzzleConfig, FireMuzzleParticleSystem) == 0x000000, "Member 'FAttachmentMuzzleConfig::FireMuzzleParticleSystem' has a wrong offset!");
static_assert(offsetof(FAttachmentMuzzleConfig, FireSoundConfig) == 0x000008, "Member 'FAttachmentMuzzleConfig::FireSoundConfig' has a wrong offset!");

// ScriptStruct UnrealProject.AttachmentSlot
// 0x0020 (0x0020 - 0x0000)
struct FAttachmentSlot final
{
public:
	class FName                                   SlotType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAttachment>                DefaultAttachmentClass;                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAttachment*                            DefaultAttachment;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAttachment*                            Attachment;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachmentSlot) == 0x000008, "Wrong alignment on FAttachmentSlot");
static_assert(sizeof(FAttachmentSlot) == 0x000020, "Wrong size on FAttachmentSlot");
static_assert(offsetof(FAttachmentSlot, SlotType) == 0x000000, "Member 'FAttachmentSlot::SlotType' has a wrong offset!");
static_assert(offsetof(FAttachmentSlot, DefaultAttachmentClass) == 0x000008, "Member 'FAttachmentSlot::DefaultAttachmentClass' has a wrong offset!");
static_assert(offsetof(FAttachmentSlot, DefaultAttachment) == 0x000010, "Member 'FAttachmentSlot::DefaultAttachment' has a wrong offset!");
static_assert(offsetof(FAttachmentSlot, Attachment) == 0x000018, "Member 'FAttachmentSlot::Attachment' has a wrong offset!");

// ScriptStruct UnrealProject.ValidationPriorityHit
// 0x0010 (0x0010 - 0x0000)
struct FValidationPriorityHit final
{
public:
	class AActor*                                 ActorHitted;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValidationPriorityHit) == 0x000008, "Wrong alignment on FValidationPriorityHit");
static_assert(sizeof(FValidationPriorityHit) == 0x000010, "Wrong size on FValidationPriorityHit");
static_assert(offsetof(FValidationPriorityHit, ActorHitted) == 0x000000, "Member 'FValidationPriorityHit::ActorHitted' has a wrong offset!");

// ScriptStruct UnrealProject.CustomScalarParameter
// 0x0028 (0x0028 - 0x0000)
struct FCustomScalarParameter final
{
public:
	struct FCollectionScalarParameter             CustomScalarParameter;                             // 0x0000(0x001C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomScalarParameter) == 0x000008, "Wrong alignment on FCustomScalarParameter");
static_assert(sizeof(FCustomScalarParameter) == 0x000028, "Wrong size on FCustomScalarParameter");
static_assert(offsetof(FCustomScalarParameter, CustomScalarParameter) == 0x000000, "Member 'FCustomScalarParameter::CustomScalarParameter' has a wrong offset!");
static_assert(offsetof(FCustomScalarParameter, Curve) == 0x000020, "Member 'FCustomScalarParameter::Curve' has a wrong offset!");

// ScriptStruct UnrealProject.PostProcess
// 0x0048 (0x0048 - 0x0000)
struct FPostProcess final
{
public:
	class UNGDPostProcessCameraConfig*            ConfigAsset;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomAlpha;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomAlpha;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           MPC;                                               // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomScalarParameter>         CustomScalarParametersConfig;                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ViewTargetClassFilter;                             // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedDuration;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTimeDilation;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPostProcess) == 0x000008, "Wrong alignment on FPostProcess");
static_assert(sizeof(FPostProcess) == 0x000048, "Wrong size on FPostProcess");
static_assert(offsetof(FPostProcess, ConfigAsset) == 0x000000, "Member 'FPostProcess::ConfigAsset' has a wrong offset!");
static_assert(offsetof(FPostProcess, bUseCustomAlpha) == 0x000008, "Member 'FPostProcess::bUseCustomAlpha' has a wrong offset!");
static_assert(offsetof(FPostProcess, CustomAlpha) == 0x000010, "Member 'FPostProcess::CustomAlpha' has a wrong offset!");
static_assert(offsetof(FPostProcess, MPC) == 0x000018, "Member 'FPostProcess::MPC' has a wrong offset!");
static_assert(offsetof(FPostProcess, CustomScalarParametersConfig) == 0x000020, "Member 'FPostProcess::CustomScalarParametersConfig' has a wrong offset!");
static_assert(offsetof(FPostProcess, ViewTargetClassFilter) == 0x000030, "Member 'FPostProcess::ViewTargetClassFilter' has a wrong offset!");
static_assert(offsetof(FPostProcess, bFixedDuration) == 0x000038, "Member 'FPostProcess::bFixedDuration' has a wrong offset!");
static_assert(offsetof(FPostProcess, Duration) == 0x00003C, "Member 'FPostProcess::Duration' has a wrong offset!");
static_assert(offsetof(FPostProcess, bUseTimeDilation) == 0x000040, "Member 'FPostProcess::bUseTimeDilation' has a wrong offset!");

// ScriptStruct UnrealProject.ReportablePlayer
// 0x0048 (0x0048 - 0x0000)
struct FReportablePlayer final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0000(0x0028)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   Reports;                                           // 0x0038(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportablePlayer) == 0x000008, "Wrong alignment on FReportablePlayer");
static_assert(sizeof(FReportablePlayer) == 0x000048, "Wrong size on FReportablePlayer");
static_assert(offsetof(FReportablePlayer, UniqueNetId) == 0x000000, "Member 'FReportablePlayer::UniqueNetId' has a wrong offset!");
static_assert(offsetof(FReportablePlayer, PlayerName) == 0x000028, "Member 'FReportablePlayer::PlayerName' has a wrong offset!");
static_assert(offsetof(FReportablePlayer, Reports) == 0x000038, "Member 'FReportablePlayer::Reports' has a wrong offset!");

// ScriptStruct UnrealProject.NGDDamageEvent
// 0x0030 (0x0040 - 0x0010)
struct FNGDDamageEvent final : public FDamageEvent
{
public:
	float                                         Timestamp;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   boneNameHit;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNGDBodyPart>               bodyPartClass;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Impulse;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirection;                                  // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMeleeDamage;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDDamageEvent) == 0x000008, "Wrong alignment on FNGDDamageEvent");
static_assert(sizeof(FNGDDamageEvent) == 0x000040, "Wrong size on FNGDDamageEvent");
static_assert(offsetof(FNGDDamageEvent, Timestamp) == 0x000010, "Member 'FNGDDamageEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(FNGDDamageEvent, boneNameHit) == 0x000014, "Member 'FNGDDamageEvent::boneNameHit' has a wrong offset!");
static_assert(offsetof(FNGDDamageEvent, bodyPartClass) == 0x000020, "Member 'FNGDDamageEvent::bodyPartClass' has a wrong offset!");
static_assert(offsetof(FNGDDamageEvent, Impulse) == 0x000028, "Member 'FNGDDamageEvent::Impulse' has a wrong offset!");
static_assert(offsetof(FNGDDamageEvent, ImpulseDirection) == 0x00002C, "Member 'FNGDDamageEvent::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(FNGDDamageEvent, bIsMeleeDamage) == 0x000038, "Member 'FNGDDamageEvent::bIsMeleeDamage' has a wrong offset!");

// ScriptStruct UnrealProject.BoardContract
// 0x0010 (0x0010 - 0x0000)
struct FBoardContract final
{
public:
	class APawn*                                  VehicleToBoard;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeatIndex;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoardContract) == 0x000008, "Wrong alignment on FBoardContract");
static_assert(sizeof(FBoardContract) == 0x000010, "Wrong size on FBoardContract");
static_assert(offsetof(FBoardContract, VehicleToBoard) == 0x000000, "Member 'FBoardContract::VehicleToBoard' has a wrong offset!");
static_assert(offsetof(FBoardContract, SeatIndex) == 0x000008, "Member 'FBoardContract::SeatIndex' has a wrong offset!");

// ScriptStruct UnrealProject.DoorRepState
// 0x0002 (0x0002 - 0x0000)
struct FDoorRepState final
{
public:
	EDoorState                                    DoorState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          OpenSign;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoorRepState) == 0x000001, "Wrong alignment on FDoorRepState");
static_assert(sizeof(FDoorRepState) == 0x000002, "Wrong size on FDoorRepState");
static_assert(offsetof(FDoorRepState, DoorState) == 0x000000, "Member 'FDoorRepState::DoorState' has a wrong offset!");
static_assert(offsetof(FDoorRepState, OpenSign) == 0x000001, "Member 'FDoorRepState::OpenSign' has a wrong offset!");

// ScriptStruct UnrealProject.CollisionResult
// 0x0020 (0x0020 - 0x0000)
struct FCollisionResult final
{
public:
	bool                                          Collided;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitTime;                                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitPoint;                                          // 0x0008(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0014(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollisionResult) == 0x000004, "Wrong alignment on FCollisionResult");
static_assert(sizeof(FCollisionResult) == 0x000020, "Wrong size on FCollisionResult");
static_assert(offsetof(FCollisionResult, Collided) == 0x000000, "Member 'FCollisionResult::Collided' has a wrong offset!");
static_assert(offsetof(FCollisionResult, HitTime) == 0x000004, "Member 'FCollisionResult::HitTime' has a wrong offset!");
static_assert(offsetof(FCollisionResult, HitPoint) == 0x000008, "Member 'FCollisionResult::HitPoint' has a wrong offset!");
static_assert(offsetof(FCollisionResult, HitNormal) == 0x000014, "Member 'FCollisionResult::HitNormal' has a wrong offset!");

// ScriptStruct UnrealProject.PropertyRepCoordinator
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPropertyRepCoordinator final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropertyRepCoordinator) == 0x000008, "Wrong alignment on FPropertyRepCoordinator");
static_assert(sizeof(FPropertyRepCoordinator) == 0x000010, "Wrong size on FPropertyRepCoordinator");

// ScriptStruct UnrealProject.ServerValidationHit
// 0x00B0 (0x00B0 - 0x0000)
struct FServerValidationHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FValidationPriorityHit                 PriorityHit;                                       // 0x00A0(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerValidationHit) == 0x000008, "Wrong alignment on FServerValidationHit");
static_assert(sizeof(FServerValidationHit) == 0x0000B0, "Wrong size on FServerValidationHit");
static_assert(offsetof(FServerValidationHit, HitResult) == 0x000000, "Member 'FServerValidationHit::HitResult' has a wrong offset!");
static_assert(offsetof(FServerValidationHit, PriorityHit) == 0x0000A0, "Member 'FServerValidationHit::PriorityHit' has a wrong offset!");

// ScriptStruct UnrealProject.ItemClassArray
// 0x0010 (0x0010 - 0x0000)
struct FItemClassArray final
{
public:
	TArray<TSubclassOf<class AItem>>              ItemClasses;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemClassArray) == 0x000008, "Wrong alignment on FItemClassArray");
static_assert(sizeof(FItemClassArray) == 0x000010, "Wrong size on FItemClassArray");
static_assert(offsetof(FItemClassArray, ItemClasses) == 0x000000, "Member 'FItemClassArray::ItemClasses' has a wrong offset!");

// ScriptStruct UnrealProject.HitRegistrationData
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FHitRegistrationData final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitRegistrationData) == 0x000008, "Wrong alignment on FHitRegistrationData");
static_assert(sizeof(FHitRegistrationData) == 0x000038, "Wrong size on FHitRegistrationData");

// ScriptStruct UnrealProject.BoneBodyData
// 0x0018 (0x0018 - 0x0000)
struct FBoneBodyData final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGeometryData>                  GeometryDataArray;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneBodyData) == 0x000008, "Wrong alignment on FBoneBodyData");
static_assert(sizeof(FBoneBodyData) == 0x000018, "Wrong size on FBoneBodyData");
static_assert(offsetof(FBoneBodyData, BoneName) == 0x000000, "Member 'FBoneBodyData::BoneName' has a wrong offset!");
static_assert(offsetof(FBoneBodyData, GeometryDataArray) == 0x000008, "Member 'FBoneBodyData::GeometryDataArray' has a wrong offset!");

// ScriptStruct UnrealProject.LocalReloadEvent
// 0x0004 (0x0004 - 0x0000)
struct FLocalReloadEvent final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalReloadEvent) == 0x000004, "Wrong alignment on FLocalReloadEvent");
static_assert(sizeof(FLocalReloadEvent) == 0x000004, "Wrong size on FLocalReloadEvent");
static_assert(offsetof(FLocalReloadEvent, Timestamp) == 0x000000, "Member 'FLocalReloadEvent::Timestamp' has a wrong offset!");

// ScriptStruct UnrealProject.UnBoardContract
// 0x0018 (0x0018 - 0x0000)
struct FUnBoardContract final
{
public:
	class APawn*                                  VehicleToBoard;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeatIndex;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExitPosition;                                      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnBoardContract) == 0x000008, "Wrong alignment on FUnBoardContract");
static_assert(sizeof(FUnBoardContract) == 0x000018, "Wrong size on FUnBoardContract");
static_assert(offsetof(FUnBoardContract, VehicleToBoard) == 0x000000, "Member 'FUnBoardContract::VehicleToBoard' has a wrong offset!");
static_assert(offsetof(FUnBoardContract, SeatIndex) == 0x000008, "Member 'FUnBoardContract::SeatIndex' has a wrong offset!");
static_assert(offsetof(FUnBoardContract, ExitPosition) == 0x00000C, "Member 'FUnBoardContract::ExitPosition' has a wrong offset!");

// ScriptStruct UnrealProject.VehicleSample
// 0x0050 (0x0050 - 0x0000)
struct FVehicleSample final
{
public:
	struct FRigidBodyState                        RigidBodyState;                                    // 0x0000(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleSample) == 0x000010, "Wrong alignment on FVehicleSample");
static_assert(sizeof(FVehicleSample) == 0x000050, "Wrong size on FVehicleSample");
static_assert(offsetof(FVehicleSample, RigidBodyState) == 0x000000, "Member 'FVehicleSample::RigidBodyState' has a wrong offset!");
static_assert(offsetof(FVehicleSample, Timestamp) == 0x000040, "Member 'FVehicleSample::Timestamp' has a wrong offset!");

// ScriptStruct UnrealProject.AttachmentScopeConfig
// 0x0030 (0x0030 - 0x0000)
struct FAttachmentScopeConfig final
{
public:
	class UStaticMesh*                            MeshADS;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            MeshCrosshair;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CrosshairAttachSocket;                             // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ADSAttachSocket;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Anim_ADSOffset;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSFOV;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachmentScopeConfig) == 0x000008, "Wrong alignment on FAttachmentScopeConfig");
static_assert(sizeof(FAttachmentScopeConfig) == 0x000030, "Wrong size on FAttachmentScopeConfig");
static_assert(offsetof(FAttachmentScopeConfig, MeshADS) == 0x000000, "Member 'FAttachmentScopeConfig::MeshADS' has a wrong offset!");
static_assert(offsetof(FAttachmentScopeConfig, MeshCrosshair) == 0x000008, "Member 'FAttachmentScopeConfig::MeshCrosshair' has a wrong offset!");
static_assert(offsetof(FAttachmentScopeConfig, CrosshairAttachSocket) == 0x000010, "Member 'FAttachmentScopeConfig::CrosshairAttachSocket' has a wrong offset!");
static_assert(offsetof(FAttachmentScopeConfig, ADSAttachSocket) == 0x000018, "Member 'FAttachmentScopeConfig::ADSAttachSocket' has a wrong offset!");
static_assert(offsetof(FAttachmentScopeConfig, Anim_ADSOffset) == 0x000020, "Member 'FAttachmentScopeConfig::Anim_ADSOffset' has a wrong offset!");
static_assert(offsetof(FAttachmentScopeConfig, ADSFOV) == 0x000028, "Member 'FAttachmentScopeConfig::ADSFOV' has a wrong offset!");

// ScriptStruct UnrealProject.RemoteDesyncFireEvent
// 0x0028 (0x0028 - 0x0000)
struct FRemoteDesyncFireEvent final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeapon*                                Weapon;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirePosition;                                      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FireDirection;                                     // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoteDesyncFireEvent) == 0x000008, "Wrong alignment on FRemoteDesyncFireEvent");
static_assert(sizeof(FRemoteDesyncFireEvent) == 0x000028, "Wrong size on FRemoteDesyncFireEvent");
static_assert(offsetof(FRemoteDesyncFireEvent, Timestamp) == 0x000000, "Member 'FRemoteDesyncFireEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(FRemoteDesyncFireEvent, Weapon) == 0x000008, "Member 'FRemoteDesyncFireEvent::Weapon' has a wrong offset!");
static_assert(offsetof(FRemoteDesyncFireEvent, FirePosition) == 0x000010, "Member 'FRemoteDesyncFireEvent::FirePosition' has a wrong offset!");
static_assert(offsetof(FRemoteDesyncFireEvent, FireDirection) == 0x00001C, "Member 'FRemoteDesyncFireEvent::FireDirection' has a wrong offset!");

// ScriptStruct UnrealProject.RemoteFireEvent
// 0x0030 (0x0030 - 0x0000)
struct FRemoteFireEvent final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeapon*                                Weapon;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirePosition;                                      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FireDirection;                                     // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint16                                        BulletIndex;                                       // 0x0028(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoteFireEvent) == 0x000008, "Wrong alignment on FRemoteFireEvent");
static_assert(sizeof(FRemoteFireEvent) == 0x000030, "Wrong size on FRemoteFireEvent");
static_assert(offsetof(FRemoteFireEvent, Timestamp) == 0x000000, "Member 'FRemoteFireEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(FRemoteFireEvent, Weapon) == 0x000008, "Member 'FRemoteFireEvent::Weapon' has a wrong offset!");
static_assert(offsetof(FRemoteFireEvent, FirePosition) == 0x000010, "Member 'FRemoteFireEvent::FirePosition' has a wrong offset!");
static_assert(offsetof(FRemoteFireEvent, FireDirection) == 0x00001C, "Member 'FRemoteFireEvent::FireDirection' has a wrong offset!");
static_assert(offsetof(FRemoteFireEvent, BulletIndex) == 0x000028, "Member 'FRemoteFireEvent::BulletIndex' has a wrong offset!");

// ScriptStruct UnrealProject.RemoteReloadEvent
// 0x0010 (0x0010 - 0x0000)
struct FRemoteReloadEvent final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeapon*                                Weapon;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoteReloadEvent) == 0x000008, "Wrong alignment on FRemoteReloadEvent");
static_assert(sizeof(FRemoteReloadEvent) == 0x000010, "Wrong size on FRemoteReloadEvent");
static_assert(offsetof(FRemoteReloadEvent, Timestamp) == 0x000000, "Member 'FRemoteReloadEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(FRemoteReloadEvent, Weapon) == 0x000008, "Member 'FRemoteReloadEvent::Weapon' has a wrong offset!");

// ScriptStruct UnrealProject.LocalFireEvent
// 0x0024 (0x0024 - 0x0000)
struct FLocalFireEvent final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirePosition;                                      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FireDirection;                                     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint16                                        BulletIndex;                                       // 0x001C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InstigatorFlags;                                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CookTime;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalFireEvent) == 0x000004, "Wrong alignment on FLocalFireEvent");
static_assert(sizeof(FLocalFireEvent) == 0x000024, "Wrong size on FLocalFireEvent");
static_assert(offsetof(FLocalFireEvent, Timestamp) == 0x000000, "Member 'FLocalFireEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(FLocalFireEvent, FirePosition) == 0x000004, "Member 'FLocalFireEvent::FirePosition' has a wrong offset!");
static_assert(offsetof(FLocalFireEvent, FireDirection) == 0x000010, "Member 'FLocalFireEvent::FireDirection' has a wrong offset!");
static_assert(offsetof(FLocalFireEvent, BulletIndex) == 0x00001C, "Member 'FLocalFireEvent::BulletIndex' has a wrong offset!");
static_assert(offsetof(FLocalFireEvent, InstigatorFlags) == 0x00001E, "Member 'FLocalFireEvent::InstigatorFlags' has a wrong offset!");
static_assert(offsetof(FLocalFireEvent, CookTime) == 0x000020, "Member 'FLocalFireEvent::CookTime' has a wrong offset!");

}

