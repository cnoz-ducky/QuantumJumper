#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crosshair_Rifle

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Crosshair_Rifle.Crosshair_Rifle_C
// 0x0068 (0x0368 - 0x0300)
class UCrosshair_Rifle_C final : public UTWLinearCrosshairWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HitAnim;                                           // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BottomLeft;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomRight;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Center;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CenterBottom;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CenterLeft;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CenterRight;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CenterTop;                                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopLeft;                                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopRight;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         MinCenterOffset;                                   // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCenterOffset;                                   // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TranslationFactor;                                 // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TranslationConstant;                               // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Crosshair_Rifle(int32 EntryPoint);
	void ShowHitFeedback(const struct FLinearColor& HitColor);
	void UpdateCrosshairColor(int32 ColorIndex);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnSpreadChanged(float Spread);
	void Construct();
	void SetImpactCrosshair(bool Show);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Crosshair_Rifle_C">();
	}
	static class UCrosshair_Rifle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrosshair_Rifle_C>();
	}
};
static_assert(alignof(UCrosshair_Rifle_C) == 0x000008, "Wrong alignment on UCrosshair_Rifle_C");
static_assert(sizeof(UCrosshair_Rifle_C) == 0x000368, "Wrong size on UCrosshair_Rifle_C");
static_assert(offsetof(UCrosshair_Rifle_C, UberGraphFrame) == 0x000300, "Member 'UCrosshair_Rifle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, HitAnim) == 0x000308, "Member 'UCrosshair_Rifle_C::HitAnim' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, BottomLeft) == 0x000310, "Member 'UCrosshair_Rifle_C::BottomLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, BottomRight) == 0x000318, "Member 'UCrosshair_Rifle_C::BottomRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, Center) == 0x000320, "Member 'UCrosshair_Rifle_C::Center' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, CenterBottom) == 0x000328, "Member 'UCrosshair_Rifle_C::CenterBottom' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, CenterLeft) == 0x000330, "Member 'UCrosshair_Rifle_C::CenterLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, CenterRight) == 0x000338, "Member 'UCrosshair_Rifle_C::CenterRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, CenterTop) == 0x000340, "Member 'UCrosshair_Rifle_C::CenterTop' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, TopLeft) == 0x000348, "Member 'UCrosshair_Rifle_C::TopLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, TopRight) == 0x000350, "Member 'UCrosshair_Rifle_C::TopRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, MinCenterOffset) == 0x000358, "Member 'UCrosshair_Rifle_C::MinCenterOffset' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, MaxCenterOffset) == 0x00035C, "Member 'UCrosshair_Rifle_C::MaxCenterOffset' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, TranslationFactor) == 0x000360, "Member 'UCrosshair_Rifle_C::TranslationFactor' has a wrong offset!");
static_assert(offsetof(UCrosshair_Rifle_C, TranslationConstant) == 0x000364, "Member 'UCrosshair_Rifle_C::TranslationConstant' has a wrong offset!");

}

