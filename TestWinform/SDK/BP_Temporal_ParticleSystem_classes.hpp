#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Temporal_ParticleSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_TemporalParticle_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Temporal_ParticleSystem.BP_Temporal_ParticleSystem_C
// 0x0038 (0x0288 - 0x0250)
class ABP_Temporal_ParticleSystem_C : public ABP_TemporalParticle_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_Temporal_Emitter_C*                 Emitter;                                           // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_Temporal_Emitter_C*>         Emitters;                                          // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UTWStaticMeshComponent*>         Mesh_Array;                                        // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          ShowDebug;                                         // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsAlive;                                           // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Temporal_ParticleSystem(int32 EntryPoint);
	void SetOwnerSee(bool NewState);
	void SetOnlyOwnerSee(bool NewState);
	void BP_SetEnabled(bool NewState);
	void LogDebug(const class FString& Header);
	void ParticleTick(float LifeCylcle);
	void OnParticleEnabled(bool NewState);
	void ReceiveBeginPlay();
	void SetOnlyOwnerSeeConfig(bool New_State);
	void SetOwnerSeeConfig(bool New_State);
	void SetupEmitters();
	void Recalculate(class UBP_Temporal_Emitter_C* Emitter_0, class UTWStaticMeshComponent* Mesh, bool is_First_Person);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Temporal_ParticleSystem_C">();
	}
	static class ABP_Temporal_ParticleSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Temporal_ParticleSystem_C>();
	}
};
static_assert(alignof(ABP_Temporal_ParticleSystem_C) == 0x000008, "Wrong alignment on ABP_Temporal_ParticleSystem_C");
static_assert(sizeof(ABP_Temporal_ParticleSystem_C) == 0x000288, "Wrong size on ABP_Temporal_ParticleSystem_C");
static_assert(offsetof(ABP_Temporal_ParticleSystem_C, UberGraphFrame) == 0x000250, "Member 'ABP_Temporal_ParticleSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Temporal_ParticleSystem_C, Emitter) == 0x000258, "Member 'ABP_Temporal_ParticleSystem_C::Emitter' has a wrong offset!");
static_assert(offsetof(ABP_Temporal_ParticleSystem_C, Emitters) == 0x000260, "Member 'ABP_Temporal_ParticleSystem_C::Emitters' has a wrong offset!");
static_assert(offsetof(ABP_Temporal_ParticleSystem_C, Mesh_Array) == 0x000270, "Member 'ABP_Temporal_ParticleSystem_C::Mesh_Array' has a wrong offset!");
static_assert(offsetof(ABP_Temporal_ParticleSystem_C, ShowDebug) == 0x000280, "Member 'ABP_Temporal_ParticleSystem_C::ShowDebug' has a wrong offset!");
static_assert(offsetof(ABP_Temporal_ParticleSystem_C, IsAlive) == 0x000281, "Member 'ABP_Temporal_ParticleSystem_C::IsAlive' has a wrong offset!");

}

