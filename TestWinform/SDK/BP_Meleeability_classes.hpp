#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Meleeability

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"
#include "UnrealProject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Meleeability.BP_MeleeAbility_C
// 0x0108 (0x01D0 - 0x00C8)
class UBP_MeleeAbility_C final : public UTWAbilityMelee
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         StartingPosition;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AbilityMontage;                                    // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTriggerLogic;                                // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OnePMontageName;                                   // 0x00E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AbilityMontageTP;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldAttackBP;                                   // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FNGDSoundConfig>   SwingSoundConfig;                                  // 0x0100(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FNGDSoundConfig                        Hit_Sound_Config;                                  // 0x0150(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 StartAttackCameraShake;                            // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartAttackShakeIntensity;                         // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 HitCameraShake;                                    // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitShakeIntensity;                                 // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATemporalWeapon*                        UsedWeapon;                                        // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MeleeAbility(int32 EntryPoint);
	void PlayOtherActorHitFX(const struct FHitResult& Hit);
	void PlayBarrelHitFX(const struct FHitResult& Hit);
	void PlayDamageFX(const struct FHitResult& Hit);
	void PlayPhysicsHitFX(const struct FHitResult& Hit);
	void BP_OnReExecuted(class UTWGameplayAbilitySystem* InTWAbilitySystem, const struct FTWAbilityCustomDataHandle& AbilityDataHandle, const bool bShouldTriggerLogic);
	void BP_OnPreActivated(class UTWGameplayAbilitySystem* InTWAbilitySystem, class UTWAbilitiesComponent* Caster_AbilityComp);
	void BP_Update(float DeltaSeconds);
	void BP_OnPause();
	void BP_OnResume();
	void BP_OnActivated(class UTWGameplayAbilitySystem* InTWAbilitySystem, const struct FTWAbilityCustomDataHandle& AbilityDataHandle, const bool bShouldTriggerLogic);
	void BP_OnFinished();
	void ShouldUpdateSimulation(bool* ShouldUpdateSimulation_0);
	void ShouldTriggerDamage(bool* Value);
	void Play_Melee_Hit_Sound(const struct FHitResult& Hit);
	void ShakeCamera(class UClass* ShakeClass, float IntensityScale);
	void PlaySwingSound();
	bool IsSinglePlayer(class UTWAbilitiesComponent* CasterComp);
	void Play_Hit_FX(const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MeleeAbility_C">();
	}
	static class UBP_MeleeAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MeleeAbility_C>();
	}
};
static_assert(alignof(UBP_MeleeAbility_C) == 0x000008, "Wrong alignment on UBP_MeleeAbility_C");
static_assert(sizeof(UBP_MeleeAbility_C) == 0x0001D0, "Wrong size on UBP_MeleeAbility_C");
static_assert(offsetof(UBP_MeleeAbility_C, UberGraphFrame) == 0x0000C8, "Member 'UBP_MeleeAbility_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, StartingPosition) == 0x0000D0, "Member 'UBP_MeleeAbility_C::StartingPosition' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, PlayRate) == 0x0000D4, "Member 'UBP_MeleeAbility_C::PlayRate' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, AbilityMontage) == 0x0000D8, "Member 'UBP_MeleeAbility_C::AbilityMontage' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, ShouldTriggerLogic) == 0x0000E0, "Member 'UBP_MeleeAbility_C::ShouldTriggerLogic' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, OnePMontageName) == 0x0000E4, "Member 'UBP_MeleeAbility_C::OnePMontageName' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, AbilityMontageTP) == 0x0000F0, "Member 'UBP_MeleeAbility_C::AbilityMontageTP' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, bShouldAttackBP) == 0x0000F8, "Member 'UBP_MeleeAbility_C::bShouldAttackBP' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, SwingSoundConfig) == 0x000100, "Member 'UBP_MeleeAbility_C::SwingSoundConfig' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, Hit_Sound_Config) == 0x000150, "Member 'UBP_MeleeAbility_C::Hit_Sound_Config' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, StartAttackCameraShake) == 0x0001A8, "Member 'UBP_MeleeAbility_C::StartAttackCameraShake' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, StartAttackShakeIntensity) == 0x0001B0, "Member 'UBP_MeleeAbility_C::StartAttackShakeIntensity' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, HitCameraShake) == 0x0001B8, "Member 'UBP_MeleeAbility_C::HitCameraShake' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, HitShakeIntensity) == 0x0001C0, "Member 'UBP_MeleeAbility_C::HitShakeIntensity' has a wrong offset!");
static_assert(offsetof(UBP_MeleeAbility_C, UsedWeapon) == 0x0001C8, "Member 'UBP_MeleeAbility_C::UsedWeapon' has a wrong offset!");

}

