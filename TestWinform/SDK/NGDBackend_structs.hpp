#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NGDBackend

#include "Basic.hpp"


namespace SDK
{

// Enum NGDBackend.ENGDBackendServerErrorResponse
// NumValues: 0x0005
enum class ENGDBackendServerErrorResponse : uint8
{
	Response_NULL                            = 0,
	Response_ERROR_MAINTENANCE               = 1,
	Response_ERROR_CODE                      = 2,
	Response_ERROR_JSON                      = 3,
	Response_MAX                             = 4,
};

// Enum NGDBackend.ENGDBackendLeaderboardLevel
// NumValues: 0x0011
enum class ENGDBackendLeaderboardLevel : uint8
{
	Level_Bronze3                            = 0,
	Level_Bronze2                            = 1,
	Level_Bronze1                            = 2,
	Level_Silver3                            = 3,
	Level_Silver2                            = 4,
	Level_Silver1                            = 5,
	Level_Gold3                              = 6,
	Level_Gold2                              = 7,
	Level_Gold1                              = 8,
	Level_Platinum3                          = 9,
	Level_Platinum2                          = 10,
	Level_Platinum1                          = 11,
	Level_Diamond3                           = 12,
	Level_Diamond2                           = 13,
	Level_Diamond1                           = 14,
	NONE                                     = 99,
	ENGDBackendLeaderboardLevel_MAX          = 100,
};

// Enum NGDBackend.ENGDBackendAccountAccessStatus
// NumValues: 0x0003
enum class ENGDBackendAccountAccessStatus : uint8
{
	Status_Free                              = 0,
	Status_Premium                           = 10,
	Status_MAX                               = 11,
};

// Enum NGDBackend.ENGDBackendGameSessionResult
// NumValues: 0x0005
enum class ENGDBackendGameSessionResult : uint8
{
	Result_PENDING                           = 0,
	Result_FULFILLED                         = 1,
	Result_CANCELLED                         = 2,
	Result_TIMED_OUT                         = 3,
	Result_MAX                               = 4,
};

// Enum NGDBackend.ENGDBackendMatchmakingResult
// NumValues: 0x0009
enum class ENGDBackendMatchmakingResult : uint8
{
	Result_QUEUED                            = 0,
	Result_SEARCHING                         = 1,
	Result_PLACING                           = 2,
	Result_COMPLETED                         = 3,
	Result_FAILED                            = 4,
	Result_CANCELLED                         = 5,
	Result_TIMED_OUT                         = 6,
	Result_REQUIRES_ACCEPTANCE               = 7,
	Result_MAX                               = 8,
};

// Enum NGDBackend.ENGDBackendAccountLeaderboardContext
// NumValues: 0x0004
enum class ENGDBackendAccountLeaderboardContext : uint8
{
	NGDLC_RequestGlobal                      = 0,
	NGDLC_RequestAroundUser                  = 1,
	NGDLC_RequestFriends                     = 2,
	NGDLC_MAX                                = 3,
};

// Enum NGDBackend.ENGDBackendItemAvailalability
// NumValues: 0x0004
enum class ENGDBackendItemAvailalability : uint8
{
	Available                                = 0,
	Hidden                                   = 1,
	Unavailable                              = 2,
	ENGDBackendItemAvailalability_MAX        = 3,
};

// Enum NGDBackend.ENGDBackendItemRarity
// NumValues: 0x0006
enum class ENGDBackendItemRarity : uint8
{
	Rarity_Common                            = 0,
	Rarity_Uncommon                          = 1,
	Rarity_Rare                              = 2,
	Rarity_Epic                              = 3,
	Rarity_Legendary                         = 4,
	Rarity_MAX                               = 5,
};

// ScriptStruct NGDBackend.NGDBackendReward
// 0x0028 (0x0028 - 0x0000)
struct FNGDBackendReward final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SKU;                                               // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendReward) == 0x000008, "Wrong alignment on FNGDBackendReward");
static_assert(sizeof(FNGDBackendReward) == 0x000028, "Wrong size on FNGDBackendReward");
static_assert(offsetof(FNGDBackendReward, Type) == 0x000000, "Member 'FNGDBackendReward::Type' has a wrong offset!");
static_assert(offsetof(FNGDBackendReward, Value) == 0x000010, "Member 'FNGDBackendReward::Value' has a wrong offset!");
static_assert(offsetof(FNGDBackendReward, SKU) == 0x000018, "Member 'FNGDBackendReward::SKU' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendQuarkBundleData
// 0x0048 (0x0048 - 0x0000)
struct FNGDBackendQuarkBundleData final
{
public:
	class FString                                 BundleName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Price;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNGDBackendReward>              Rewards;                                           // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendQuarkBundleData) == 0x000008, "Wrong alignment on FNGDBackendQuarkBundleData");
static_assert(sizeof(FNGDBackendQuarkBundleData) == 0x000048, "Wrong size on FNGDBackendQuarkBundleData");
static_assert(offsetof(FNGDBackendQuarkBundleData, BundleName) == 0x000000, "Member 'FNGDBackendQuarkBundleData::BundleName' has a wrong offset!");
static_assert(offsetof(FNGDBackendQuarkBundleData, Currency) == 0x000010, "Member 'FNGDBackendQuarkBundleData::Currency' has a wrong offset!");
static_assert(offsetof(FNGDBackendQuarkBundleData, Price) == 0x000020, "Member 'FNGDBackendQuarkBundleData::Price' has a wrong offset!");
static_assert(offsetof(FNGDBackendQuarkBundleData, Description) == 0x000028, "Member 'FNGDBackendQuarkBundleData::Description' has a wrong offset!");
static_assert(offsetof(FNGDBackendQuarkBundleData, Rewards) == 0x000038, "Member 'FNGDBackendQuarkBundleData::Rewards' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendQuarkStoreData
// 0x0050 (0x0050 - 0x0000)
struct FNGDBackendQuarkStoreData final
{
public:
	TMap<class FString, struct FNGDBackendQuarkBundleData> Bundles;                                  // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendQuarkStoreData) == 0x000008, "Wrong alignment on FNGDBackendQuarkStoreData");
static_assert(sizeof(FNGDBackendQuarkStoreData) == 0x000050, "Wrong size on FNGDBackendQuarkStoreData");
static_assert(offsetof(FNGDBackendQuarkStoreData, Bundles) == 0x000000, "Member 'FNGDBackendQuarkStoreData::Bundles' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendReceivedRewards
// 0x0010 (0x0010 - 0x0000)
struct FNGDBackendReceivedRewards final
{
public:
	TArray<struct FNGDBackendReward>              Rewards;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendReceivedRewards) == 0x000008, "Wrong alignment on FNGDBackendReceivedRewards");
static_assert(sizeof(FNGDBackendReceivedRewards) == 0x000010, "Wrong size on FNGDBackendReceivedRewards");
static_assert(offsetof(FNGDBackendReceivedRewards, Rewards) == 0x000000, "Member 'FNGDBackendReceivedRewards::Rewards' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendNewsEntry
// 0x0040 (0x0040 - 0x0000)
struct FNGDBackendNewsEntry final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageCode;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendNewsEntry) == 0x000008, "Wrong alignment on FNGDBackendNewsEntry");
static_assert(sizeof(FNGDBackendNewsEntry) == 0x000040, "Wrong size on FNGDBackendNewsEntry");
static_assert(offsetof(FNGDBackendNewsEntry, Title) == 0x000000, "Member 'FNGDBackendNewsEntry::Title' has a wrong offset!");
static_assert(offsetof(FNGDBackendNewsEntry, Body) == 0x000010, "Member 'FNGDBackendNewsEntry::Body' has a wrong offset!");
static_assert(offsetof(FNGDBackendNewsEntry, URL) == 0x000020, "Member 'FNGDBackendNewsEntry::URL' has a wrong offset!");
static_assert(offsetof(FNGDBackendNewsEntry, ImageCode) == 0x000030, "Member 'FNGDBackendNewsEntry::ImageCode' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendBattlePass
// 0x0018 (0x0018 - 0x0000)
struct FNGDBackendBattlePass final
{
public:
	class FString                                 RewardTrackID;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPremium;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDBackendBattlePass) == 0x000008, "Wrong alignment on FNGDBackendBattlePass");
static_assert(sizeof(FNGDBackendBattlePass) == 0x000018, "Wrong size on FNGDBackendBattlePass");
static_assert(offsetof(FNGDBackendBattlePass, RewardTrackID) == 0x000000, "Member 'FNGDBackendBattlePass::RewardTrackID' has a wrong offset!");
static_assert(offsetof(FNGDBackendBattlePass, bIsPremium) == 0x000010, "Member 'FNGDBackendBattlePass::bIsPremium' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendTournamentBoardEntry
// 0x0038 (0x0038 - 0x0000)
struct FNGDBackendTournamentBoardEntry final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENGDBackendLeaderboardLevel                   Level;                                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         rank;                                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankDifference;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelf;                                            // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDBackendTournamentBoardEntry) == 0x000008, "Wrong alignment on FNGDBackendTournamentBoardEntry");
static_assert(sizeof(FNGDBackendTournamentBoardEntry) == 0x000038, "Wrong size on FNGDBackendTournamentBoardEntry");
static_assert(offsetof(FNGDBackendTournamentBoardEntry, PlayerName) == 0x000000, "Member 'FNGDBackendTournamentBoardEntry::PlayerName' has a wrong offset!");
static_assert(offsetof(FNGDBackendTournamentBoardEntry, PlayerId) == 0x000010, "Member 'FNGDBackendTournamentBoardEntry::PlayerId' has a wrong offset!");
static_assert(offsetof(FNGDBackendTournamentBoardEntry, Level) == 0x000020, "Member 'FNGDBackendTournamentBoardEntry::Level' has a wrong offset!");
static_assert(offsetof(FNGDBackendTournamentBoardEntry, rank) == 0x000024, "Member 'FNGDBackendTournamentBoardEntry::rank' has a wrong offset!");
static_assert(offsetof(FNGDBackendTournamentBoardEntry, RankDifference) == 0x000028, "Member 'FNGDBackendTournamentBoardEntry::RankDifference' has a wrong offset!");
static_assert(offsetof(FNGDBackendTournamentBoardEntry, Score) == 0x00002C, "Member 'FNGDBackendTournamentBoardEntry::Score' has a wrong offset!");
static_assert(offsetof(FNGDBackendTournamentBoardEntry, IsSelf) == 0x000030, "Member 'FNGDBackendTournamentBoardEntry::IsSelf' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendGlobalLeaderboardEntry
// 0x0028 (0x0028 - 0x0000)
struct FNGDBackendGlobalLeaderboardEntry final
{
public:
	int32                                         rank;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Elo;                                               // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wins;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Losses;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendGlobalLeaderboardEntry) == 0x000008, "Wrong alignment on FNGDBackendGlobalLeaderboardEntry");
static_assert(sizeof(FNGDBackendGlobalLeaderboardEntry) == 0x000028, "Wrong size on FNGDBackendGlobalLeaderboardEntry");
static_assert(offsetof(FNGDBackendGlobalLeaderboardEntry, rank) == 0x000000, "Member 'FNGDBackendGlobalLeaderboardEntry::rank' has a wrong offset!");
static_assert(offsetof(FNGDBackendGlobalLeaderboardEntry, PlayerName) == 0x000008, "Member 'FNGDBackendGlobalLeaderboardEntry::PlayerName' has a wrong offset!");
static_assert(offsetof(FNGDBackendGlobalLeaderboardEntry, Score) == 0x000018, "Member 'FNGDBackendGlobalLeaderboardEntry::Score' has a wrong offset!");
static_assert(offsetof(FNGDBackendGlobalLeaderboardEntry, Elo) == 0x00001C, "Member 'FNGDBackendGlobalLeaderboardEntry::Elo' has a wrong offset!");
static_assert(offsetof(FNGDBackendGlobalLeaderboardEntry, Wins) == 0x000020, "Member 'FNGDBackendGlobalLeaderboardEntry::Wins' has a wrong offset!");
static_assert(offsetof(FNGDBackendGlobalLeaderboardEntry, Losses) == 0x000024, "Member 'FNGDBackendGlobalLeaderboardEntry::Losses' has a wrong offset!");

// ScriptStruct NGDBackend.NGDStoreItem
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FNGDStoreItem final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDStoreItem) == 0x000008, "Wrong alignment on FNGDStoreItem");
static_assert(sizeof(FNGDStoreItem) == 0x000078, "Wrong size on FNGDStoreItem");

// ScriptStruct NGDBackend.NGDBackendDailyStoreSlot
// 0x0018 (0x0018 - 0x0000)
struct FNGDBackendDailyStoreSlot final
{
public:
	class FString                                 SKU;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDBackendDailyStoreSlot) == 0x000008, "Wrong alignment on FNGDBackendDailyStoreSlot");
static_assert(sizeof(FNGDBackendDailyStoreSlot) == 0x000018, "Wrong size on FNGDBackendDailyStoreSlot");
static_assert(offsetof(FNGDBackendDailyStoreSlot, SKU) == 0x000000, "Member 'FNGDBackendDailyStoreSlot::SKU' has a wrong offset!");
static_assert(offsetof(FNGDBackendDailyStoreSlot, Price) == 0x000010, "Member 'FNGDBackendDailyStoreSlot::Price' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendDailyStoreData
// 0x0060 (0x0060 - 0x0000)
struct FNGDBackendDailyStoreData final
{
public:
	float                                         FeaturedRemainingTime;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DailyDealRemainingTime;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowQuarkStore;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FNGDBackendDailyStoreSlot> Slots;                                     // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendDailyStoreData) == 0x000008, "Wrong alignment on FNGDBackendDailyStoreData");
static_assert(sizeof(FNGDBackendDailyStoreData) == 0x000060, "Wrong size on FNGDBackendDailyStoreData");
static_assert(offsetof(FNGDBackendDailyStoreData, FeaturedRemainingTime) == 0x000000, "Member 'FNGDBackendDailyStoreData::FeaturedRemainingTime' has a wrong offset!");
static_assert(offsetof(FNGDBackendDailyStoreData, DailyDealRemainingTime) == 0x000004, "Member 'FNGDBackendDailyStoreData::DailyDealRemainingTime' has a wrong offset!");
static_assert(offsetof(FNGDBackendDailyStoreData, bShowQuarkStore) == 0x000008, "Member 'FNGDBackendDailyStoreData::bShowQuarkStore' has a wrong offset!");
static_assert(offsetof(FNGDBackendDailyStoreData, Slots) == 0x000010, "Member 'FNGDBackendDailyStoreData::Slots' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendRegistryValue
// 0x0018 (0x0018 - 0x0000)
struct FNGDBackendRegistryValue final
{
public:
	class FString                                 StringValue;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDBackendRegistryValue) == 0x000008, "Wrong alignment on FNGDBackendRegistryValue");
static_assert(sizeof(FNGDBackendRegistryValue) == 0x000018, "Wrong size on FNGDBackendRegistryValue");
static_assert(offsetof(FNGDBackendRegistryValue, StringValue) == 0x000000, "Member 'FNGDBackendRegistryValue::StringValue' has a wrong offset!");
static_assert(offsetof(FNGDBackendRegistryValue, IntValue) == 0x000010, "Member 'FNGDBackendRegistryValue::IntValue' has a wrong offset!");
static_assert(offsetof(FNGDBackendRegistryValue, BoolValue) == 0x000014, "Member 'FNGDBackendRegistryValue::BoolValue' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendItemData
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FNGDBackendItemData final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDBackendItemData) == 0x000008, "Wrong alignment on FNGDBackendItemData");
static_assert(sizeof(FNGDBackendItemData) == 0x000068, "Wrong size on FNGDBackendItemData");

// ScriptStruct NGDBackend.NGDBackendUserGlobalStatsEntry
// 0x0040 (0x0040 - 0x0000)
struct FNGDBackendUserGlobalStatsEntry final
{
public:
	int32                                         RankedEloRank;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominanceSingleRank;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DominanceDoublesRank;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedElo;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DominanceSingle;                                   // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DominanceDoubles;                                  // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedSingleWins;                                  // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedSingleLosses;                                // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedDoublesWins;                                 // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedDoublesLosses;                               // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDBackendUserGlobalStatsEntry) == 0x000008, "Wrong alignment on FNGDBackendUserGlobalStatsEntry");
static_assert(sizeof(FNGDBackendUserGlobalStatsEntry) == 0x000040, "Wrong size on FNGDBackendUserGlobalStatsEntry");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, RankedEloRank) == 0x000000, "Member 'FNGDBackendUserGlobalStatsEntry::RankedEloRank' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, DominanceSingleRank) == 0x000004, "Member 'FNGDBackendUserGlobalStatsEntry::DominanceSingleRank' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, DominanceDoublesRank) == 0x000008, "Member 'FNGDBackendUserGlobalStatsEntry::DominanceDoublesRank' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, PlayerName) == 0x000010, "Member 'FNGDBackendUserGlobalStatsEntry::PlayerName' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, RankedElo) == 0x000020, "Member 'FNGDBackendUserGlobalStatsEntry::RankedElo' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, DominanceSingle) == 0x000024, "Member 'FNGDBackendUserGlobalStatsEntry::DominanceSingle' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, DominanceDoubles) == 0x000028, "Member 'FNGDBackendUserGlobalStatsEntry::DominanceDoubles' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, RankedSingleWins) == 0x00002C, "Member 'FNGDBackendUserGlobalStatsEntry::RankedSingleWins' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, RankedSingleLosses) == 0x000030, "Member 'FNGDBackendUserGlobalStatsEntry::RankedSingleLosses' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, RankedDoublesWins) == 0x000034, "Member 'FNGDBackendUserGlobalStatsEntry::RankedDoublesWins' has a wrong offset!");
static_assert(offsetof(FNGDBackendUserGlobalStatsEntry, RankedDoublesLosses) == 0x000038, "Member 'FNGDBackendUserGlobalStatsEntry::RankedDoublesLosses' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendTiers
// 0x0018 (0x0018 - 0x0000)
struct FNGDBackendTiers final
{
public:
	int32                                         PointsRequired;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNGDBackendReward>              Rewards;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendTiers) == 0x000008, "Wrong alignment on FNGDBackendTiers");
static_assert(sizeof(FNGDBackendTiers) == 0x000018, "Wrong size on FNGDBackendTiers");
static_assert(offsetof(FNGDBackendTiers, PointsRequired) == 0x000000, "Member 'FNGDBackendTiers::PointsRequired' has a wrong offset!");
static_assert(offsetof(FNGDBackendTiers, Rewards) == 0x000008, "Member 'FNGDBackendTiers::Rewards' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendRewardTrack
// 0x0040 (0x0040 - 0x0000)
struct FNGDBackendRewardTrack final
{
public:
	class FString                                 RewardTrackID;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingMinutes;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsPerPlay;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusPointsPerWin;                                 // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeasonNum;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNGDBackendTiers>               Tiers;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendRewardTrack) == 0x000008, "Wrong alignment on FNGDBackendRewardTrack");
static_assert(sizeof(FNGDBackendRewardTrack) == 0x000040, "Wrong size on FNGDBackendRewardTrack");
static_assert(offsetof(FNGDBackendRewardTrack, RewardTrackID) == 0x000000, "Member 'FNGDBackendRewardTrack::RewardTrackID' has a wrong offset!");
static_assert(offsetof(FNGDBackendRewardTrack, RemainingMinutes) == 0x000010, "Member 'FNGDBackendRewardTrack::RemainingMinutes' has a wrong offset!");
static_assert(offsetof(FNGDBackendRewardTrack, PointsPerPlay) == 0x000014, "Member 'FNGDBackendRewardTrack::PointsPerPlay' has a wrong offset!");
static_assert(offsetof(FNGDBackendRewardTrack, BonusPointsPerWin) == 0x000018, "Member 'FNGDBackendRewardTrack::BonusPointsPerWin' has a wrong offset!");
static_assert(offsetof(FNGDBackendRewardTrack, SeasonNum) == 0x000020, "Member 'FNGDBackendRewardTrack::SeasonNum' has a wrong offset!");
static_assert(offsetof(FNGDBackendRewardTrack, Tiers) == 0x000030, "Member 'FNGDBackendRewardTrack::Tiers' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendPlayerBoost
// 0x0020 (0x0020 - 0x0000)
struct FNGDBackendPlayerBoost final
{
public:
	class FString                                 Condition;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNGDBackendReward>              Rewards;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendPlayerBoost) == 0x000008, "Wrong alignment on FNGDBackendPlayerBoost");
static_assert(sizeof(FNGDBackendPlayerBoost) == 0x000020, "Wrong size on FNGDBackendPlayerBoost");
static_assert(offsetof(FNGDBackendPlayerBoost, Condition) == 0x000000, "Member 'FNGDBackendPlayerBoost::Condition' has a wrong offset!");
static_assert(offsetof(FNGDBackendPlayerBoost, Rewards) == 0x000010, "Member 'FNGDBackendPlayerBoost::Rewards' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendClaimedChallengesRewards
// 0x0010 (0x0010 - 0x0000)
struct FNGDBackendClaimedChallengesRewards final
{
public:
	TArray<class FString>                         ChallengesID;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNGDBackendClaimedChallengesRewards) == 0x000008, "Wrong alignment on FNGDBackendClaimedChallengesRewards");
static_assert(sizeof(FNGDBackendClaimedChallengesRewards) == 0x000010, "Wrong size on FNGDBackendClaimedChallengesRewards");
static_assert(offsetof(FNGDBackendClaimedChallengesRewards, ChallengesID) == 0x000000, "Member 'FNGDBackendClaimedChallengesRewards::ChallengesID' has a wrong offset!");

// ScriptStruct NGDBackend.NGDBackendAccountPlayerStats
// 0x0068 (0x0068 - 0x0000)
struct FNGDBackendAccountPlayerStats final
{
public:
	int32                                         RankedElo;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasualElo;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Coins;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasualSingleWins;                                  // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasualSingleLosses;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasualDoublesWins;                                 // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CasualDoublesLosses;                               // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedSingleWins;                                  // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedSingleLosses;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedDoublesWins;                                 // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankedDoublesLosses;                               // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePoints;                                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDBackendBattlePass                  BattlePass;                                        // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FNGDBackendClaimedChallengesRewards    ClaimedChallengesRewards;                          // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RewardClaimedIndex;                                // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNGDBackendAccountPlayerStats) == 0x000008, "Wrong alignment on FNGDBackendAccountPlayerStats");
static_assert(sizeof(FNGDBackendAccountPlayerStats) == 0x000068, "Wrong size on FNGDBackendAccountPlayerStats");
static_assert(offsetof(FNGDBackendAccountPlayerStats, RankedElo) == 0x000000, "Member 'FNGDBackendAccountPlayerStats::RankedElo' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, CasualElo) == 0x000004, "Member 'FNGDBackendAccountPlayerStats::CasualElo' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, Xp) == 0x000008, "Member 'FNGDBackendAccountPlayerStats::Xp' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, Level) == 0x00000C, "Member 'FNGDBackendAccountPlayerStats::Level' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, Coins) == 0x000010, "Member 'FNGDBackendAccountPlayerStats::Coins' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, CasualSingleWins) == 0x000014, "Member 'FNGDBackendAccountPlayerStats::CasualSingleWins' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, CasualSingleLosses) == 0x000018, "Member 'FNGDBackendAccountPlayerStats::CasualSingleLosses' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, CasualDoublesWins) == 0x00001C, "Member 'FNGDBackendAccountPlayerStats::CasualDoublesWins' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, CasualDoublesLosses) == 0x000020, "Member 'FNGDBackendAccountPlayerStats::CasualDoublesLosses' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, RankedSingleWins) == 0x000024, "Member 'FNGDBackendAccountPlayerStats::RankedSingleWins' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, RankedSingleLosses) == 0x000028, "Member 'FNGDBackendAccountPlayerStats::RankedSingleLosses' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, RankedDoublesWins) == 0x00002C, "Member 'FNGDBackendAccountPlayerStats::RankedDoublesWins' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, RankedDoublesLosses) == 0x000030, "Member 'FNGDBackendAccountPlayerStats::RankedDoublesLosses' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, BattlePoints) == 0x000034, "Member 'FNGDBackendAccountPlayerStats::BattlePoints' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, BattlePass) == 0x000038, "Member 'FNGDBackendAccountPlayerStats::BattlePass' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, ClaimedChallengesRewards) == 0x000050, "Member 'FNGDBackendAccountPlayerStats::ClaimedChallengesRewards' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, RewardClaimedIndex) == 0x000060, "Member 'FNGDBackendAccountPlayerStats::RewardClaimedIndex' has a wrong offset!");
static_assert(offsetof(FNGDBackendAccountPlayerStats, bIsValid) == 0x000064, "Member 'FNGDBackendAccountPlayerStats::bIsValid' has a wrong offset!");

// ScriptStruct NGDBackend.LobbyPlayerInfo
// 0x0040 (0x0040 - 0x0000)
struct FLobbyPlayerInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamId;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitedTeamId;                                     // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyPlayerInfo) == 0x000008, "Wrong alignment on FLobbyPlayerInfo");
static_assert(sizeof(FLobbyPlayerInfo) == 0x000040, "Wrong size on FLobbyPlayerInfo");
static_assert(offsetof(FLobbyPlayerInfo, UserId) == 0x000000, "Member 'FLobbyPlayerInfo::UserId' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerInfo, UserName) == 0x000010, "Member 'FLobbyPlayerInfo::UserName' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerInfo, TeamId) == 0x000020, "Member 'FLobbyPlayerInfo::TeamId' has a wrong offset!");
static_assert(offsetof(FLobbyPlayerInfo, InvitedTeamId) == 0x000030, "Member 'FLobbyPlayerInfo::InvitedTeamId' has a wrong offset!");

}

