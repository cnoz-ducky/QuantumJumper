#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crosshair_Shotgun

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Crosshair_Shotgun.Crosshair_Shotgun_C
// 0x0070 (0x0370 - 0x0300)
class UCrosshair_Shotgun_C final : public UTWLinearCrosshairWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HitAnim;                                           // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Bottom;                                            // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomLeft;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomRight;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Center;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Left;                                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Right;                                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Top;                                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopLeft;                                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopRight;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         TranslationFactor;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TranslationConstant;                               // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Crosshairoffset_Focus;                             // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Crosshairoffset_Regular;                           // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastSpread;                                        // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Crosshair_Shotgun(int32 EntryPoint);
	void OnADSStartExit();
	void OnADSExit();
	void OnADSComplete();
	void OnADSEnter();
	void ShowHitFeedback(const struct FLinearColor& HitColor);
	void UpdateCrosshairColor(int32 ColorIndex);
	void OnSpreadChanged(float Spread);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void SetImpactCrosshair(bool Show);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Crosshair_Shotgun_C">();
	}
	static class UCrosshair_Shotgun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrosshair_Shotgun_C>();
	}
};
static_assert(alignof(UCrosshair_Shotgun_C) == 0x000008, "Wrong alignment on UCrosshair_Shotgun_C");
static_assert(sizeof(UCrosshair_Shotgun_C) == 0x000370, "Wrong size on UCrosshair_Shotgun_C");
static_assert(offsetof(UCrosshair_Shotgun_C, UberGraphFrame) == 0x000300, "Member 'UCrosshair_Shotgun_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, HitAnim) == 0x000308, "Member 'UCrosshair_Shotgun_C::HitAnim' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, Bottom) == 0x000310, "Member 'UCrosshair_Shotgun_C::Bottom' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, BottomLeft) == 0x000318, "Member 'UCrosshair_Shotgun_C::BottomLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, BottomRight) == 0x000320, "Member 'UCrosshair_Shotgun_C::BottomRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, Center) == 0x000328, "Member 'UCrosshair_Shotgun_C::Center' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, Left) == 0x000330, "Member 'UCrosshair_Shotgun_C::Left' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, Right) == 0x000338, "Member 'UCrosshair_Shotgun_C::Right' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, Top) == 0x000340, "Member 'UCrosshair_Shotgun_C::Top' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, TopLeft) == 0x000348, "Member 'UCrosshair_Shotgun_C::TopLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, TopRight) == 0x000350, "Member 'UCrosshair_Shotgun_C::TopRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, TranslationFactor) == 0x000358, "Member 'UCrosshair_Shotgun_C::TranslationFactor' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, TranslationConstant) == 0x00035C, "Member 'UCrosshair_Shotgun_C::TranslationConstant' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, Crosshairoffset_Focus) == 0x000360, "Member 'UCrosshair_Shotgun_C::Crosshairoffset_Focus' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, Crosshairoffset_Regular) == 0x000364, "Member 'UCrosshair_Shotgun_C::Crosshairoffset_Regular' has a wrong offset!");
static_assert(offsetof(UCrosshair_Shotgun_C, LastSpread) == 0x000368, "Member 'UCrosshair_Shotgun_C::LastSpread' has a wrong offset!");

}

