#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TWPlayerCameraManager

#include "Basic.hpp"

#include "TimeWatch_structs.hpp"
#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TWPlayerCameraManager.BP_TWPlayerCameraManager_C
// 0x0030 (0x2DD0 - 0x2DA0)
class ABP_TWPlayerCameraManager_C final : public ATWPlayerCameraManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2DA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNGDAkComponent*                        NGDAk_Transitions;                                 // 0x2DA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenEffectRewind;                                // 0x2DB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistortionValue;                                // 0x2DB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxBlurValue;                                      // 0x2DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAberrationValue;                                // 0x2DBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthPPScalar;                                    // 0x2DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransitionProgress;                                // 0x2DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TWPlayerCameraManager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void FindTransitionFXsMaxValues();
	void GetForwardAxisModifier(float* NewParam);
	void GetUpAxisModifier(float* NewParam);
	void GetRightAxisModifier(float* NewParam);
	void GetHealthPPModifier(float* NewParam);
	void OnGameStateChanged(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TWPlayerCameraManager_C">();
	}
	static class ABP_TWPlayerCameraManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TWPlayerCameraManager_C>();
	}
};
static_assert(alignof(ABP_TWPlayerCameraManager_C) == 0x000010, "Wrong alignment on ABP_TWPlayerCameraManager_C");
static_assert(sizeof(ABP_TWPlayerCameraManager_C) == 0x002DD0, "Wrong size on ABP_TWPlayerCameraManager_C");
static_assert(offsetof(ABP_TWPlayerCameraManager_C, UberGraphFrame) == 0x002DA0, "Member 'ABP_TWPlayerCameraManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TWPlayerCameraManager_C, NGDAk_Transitions) == 0x002DA8, "Member 'ABP_TWPlayerCameraManager_C::NGDAk_Transitions' has a wrong offset!");
static_assert(offsetof(ABP_TWPlayerCameraManager_C, ScreenEffectRewind) == 0x002DB0, "Member 'ABP_TWPlayerCameraManager_C::ScreenEffectRewind' has a wrong offset!");
static_assert(offsetof(ABP_TWPlayerCameraManager_C, MaxDistortionValue) == 0x002DB4, "Member 'ABP_TWPlayerCameraManager_C::MaxDistortionValue' has a wrong offset!");
static_assert(offsetof(ABP_TWPlayerCameraManager_C, MaxBlurValue) == 0x002DB8, "Member 'ABP_TWPlayerCameraManager_C::MaxBlurValue' has a wrong offset!");
static_assert(offsetof(ABP_TWPlayerCameraManager_C, MaxAberrationValue) == 0x002DBC, "Member 'ABP_TWPlayerCameraManager_C::MaxAberrationValue' has a wrong offset!");
static_assert(offsetof(ABP_TWPlayerCameraManager_C, HealthPPScalar) == 0x002DC0, "Member 'ABP_TWPlayerCameraManager_C::HealthPPScalar' has a wrong offset!");
static_assert(offsetof(ABP_TWPlayerCameraManager_C, TransitionProgress) == 0x002DC4, "Member 'ABP_TWPlayerCameraManager_C::TransitionProgress' has a wrong offset!");

}

