#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChromaSDKPlugin

#include "Basic.hpp"

#include "ChromaSDKPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function ChromaSDKPlugin.ChromaSDKPluginAnimation1DObject.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginAnimation1DObject_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginAnimation1DObject_IsLoaded) == 0x000001, "Wrong alignment on ChromaSDKPluginAnimation1DObject_IsLoaded");
static_assert(sizeof(ChromaSDKPluginAnimation1DObject_IsLoaded) == 0x000001, "Wrong size on ChromaSDKPluginAnimation1DObject_IsLoaded");
static_assert(offsetof(ChromaSDKPluginAnimation1DObject_IsLoaded, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginAnimation1DObject_IsLoaded::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginAnimation2DObject.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginAnimation2DObject_IsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginAnimation2DObject_IsLoaded) == 0x000001, "Wrong alignment on ChromaSDKPluginAnimation2DObject_IsLoaded");
static_assert(sizeof(ChromaSDKPluginAnimation2DObject_IsLoaded) == 0x000001, "Wrong size on ChromaSDKPluginAnimation2DObject_IsLoaded");
static_assert(offsetof(ChromaSDKPluginAnimation2DObject_IsLoaded, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginAnimation2DObject_IsLoaded::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeys final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeys::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeys::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeys, frameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeys::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFrames::targetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName, frameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroAllKeysName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFrames::targetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AddNonZeroTargetAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_AddNonZeroTargetAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AppendAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_AppendAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AppendAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_AppendAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AppendAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_AppendAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AppendAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AppendAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AppendAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_AppendAllFrames::targetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.AppendAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_AppendAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_AppendAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_AppendAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_AppendAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_AppendAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AppendAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_AppendAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_AppendAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_AppendAllFramesName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectCustom1D
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   Colors;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0018(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D, Colors) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom1D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectCustom2D
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0018(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D, Colors) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectCustom2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectKeyboardCustom2D
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D final
{
public:
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D, Colors) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectKeyboardCustom2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectNone
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectNone::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKCreateEffectStatic
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChromaSDKEffectResult                 ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic, colorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic::colorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic, ReturnValue) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKCreateEffectStatic::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKDeleteEffect
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect final
{
public:
	struct FChromaSDKGuid                         EffectId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect, EffectId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect::EffectId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKDeleteEffect::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKInit
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKInit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKInit) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKInit");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKInit) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKInit");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKInit, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKInit::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKSetEffect
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKSetEffect final
{
public:
	struct FChromaSDKGuid                         EffectId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKSetEffect) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKSetEffect");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKSetEffect) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKSetEffect");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKSetEffect, EffectId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKSetEffect::EffectId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKSetEffect, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKSetEffect::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ChromaSDKUnInit
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_ChromaSDKUnInit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ChromaSDKUnInit) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ChromaSDKUnInit");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ChromaSDKUnInit) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_ChromaSDKUnInit");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ChromaSDKUnInit, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ChromaSDKUnInit::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ClearAnimationType
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_ClearAnimationType final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ClearAnimationType) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_ClearAnimationType");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ClearAnimationType) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_ClearAnimationType");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ClearAnimationType, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ClearAnimationType::Device' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CloseAnimation
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_CloseAnimation final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CloseAnimation) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CloseAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CloseAnimation) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_CloseAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CloseAnimation, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CloseAnimation::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CloseAnimationName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_CloseAnimationName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CloseAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CloseAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CloseAnimationName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_CloseAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CloseAnimationName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CloseAnimationName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAllKeys final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeys, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeys::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeys, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeys::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeys, frameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeys::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysAllFrames::targetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysAllFramesName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAllKeysName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAllKeysName, frameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyAllKeysName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAnimation
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAnimation final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 targetAnimationName;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAnimation) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAnimation) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CopyAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAnimation, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAnimation::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAnimation, targetAnimationName) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyAnimation::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyAnimationName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyAnimationName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyAnimationName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAnimationName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyAnimationName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyAnimationName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyAnimationName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeyColor
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeyColor final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeyColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeyColor) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColor, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColor::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColor, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColor::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColor, frameIndex) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColor, Key) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColor::Key' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeyColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeyColorName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeyColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeyColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeyColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeyColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColorName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColorName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColorName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColorName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColorName, frameIndex) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeyColorName, Key) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_CopyKeyColorName::Key' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColor
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeysColor final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeysColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeysColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeysColor) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeysColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColor, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColor::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColor, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColor::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColor, frameIndex) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColor, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColor::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFrames::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName, Keys) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorAllFramesName::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyKeysColorName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyKeysColorName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyKeysColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyKeysColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyKeysColorName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_CopyKeysColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorName, frameIndex) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyKeysColorName, Keys) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_CopyKeysColorName::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys, frameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeys::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFrames::targetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName, frameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysOffset
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset, frameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset, Offset) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroAllKeysOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName, frameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName, Offset) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroAllKeysOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeyColor
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor, frameIndex) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor, Key) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColor::Key' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeyColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName, frameIndex) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName, Key) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeyColorName::Key' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColor
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor, frameIndex) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColor::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFrames::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName, Keys) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorAllFramesName::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroKeysColorName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName, frameIndex) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName, Keys) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroKeysColorName::Keys' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys, frameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeys::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFrames::targetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CopyNonZeroTargetAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName, frameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_CopyNonZeroTargetAllKeysName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateColors1D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateColors1D final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateColors1D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateColors1D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateColors1D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateColors1D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateColors1D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateColors1D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateColors1D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateColors1D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateColors2D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateColors2D final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateColors2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateColors2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateColors2D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateColors2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateColors2D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateColors2D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateColors2D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateColors2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColors1D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateRandomColors1D final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateRandomColors1D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateRandomColors1D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateRandomColors1D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateRandomColors1D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColors1D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColors1D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColors1D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColors1D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColors2D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateRandomColors2D final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateRandomColors2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateRandomColors2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateRandomColors2D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateRandomColors2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColors2D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColors2D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColors2D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColors2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColorsBlackAndWhite1D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite1D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.CreateRandomColorsBlackAndWhite2D
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D");
static_assert(sizeof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_CreateRandomColorsBlackAndWhite2D::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFirstFrame
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateFirstFrame final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateFirstFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateFirstFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateFirstFrame) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateFirstFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFirstFrame, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateFirstFrame::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFirstFrame, frameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_DuplicateFirstFrame::frameCount' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFirstFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateFirstFrameName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateFirstFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateFirstFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateFirstFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateFirstFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFirstFrameName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateFirstFrameName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFirstFrameName, frameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_DuplicateFirstFrameName::frameCount' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateFrames::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateFramesName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateMirrorFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateMirrorFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateMirrorFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateMirrorFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateMirrorFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateMirrorFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateMirrorFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateMirrorFrames::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.DuplicateMirrorFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_DuplicateMirrorFramesName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeEndFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_FadeEndFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         fade;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FadeEndFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FadeEndFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FadeEndFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_FadeEndFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeEndFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FadeEndFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeEndFrames, fade) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FadeEndFrames::fade' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeEndFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FadeEndFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         fade;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FadeEndFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FadeEndFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FadeEndFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FadeEndFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeEndFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FadeEndFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeEndFramesName, fade) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FadeEndFramesName::fade' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeStartFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_FadeStartFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         fade;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FadeStartFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FadeStartFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FadeStartFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_FadeStartFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeStartFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FadeStartFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeStartFrames, fade) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FadeStartFrames::fade' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FadeStartFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FadeStartFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         fade;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FadeStartFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FadeStartFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FadeStartFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FadeStartFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeStartFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FadeStartFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FadeStartFramesName, fade) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FadeStartFramesName::fade' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColor
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColor) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColor, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillColor::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColor, colorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillColor::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFrames
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorAllFrames) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFrames, colorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesName, colorParam) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesRGB
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorAllFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillColorAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB, red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB, green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGB, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName, red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName, green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillColorAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorName, colorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillColorName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillColorRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillColorRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillColorRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillColorRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillColorRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillColorRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillColorRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillColorRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillColorRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColor
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColor) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColor, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColor::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColor, colorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColor::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFrames
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames, colorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName, colorParam) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesRGB
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB, red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB, green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName, red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName, green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorName, colorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillNonZeroColorRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillNonZeroColorRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColors
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColors final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColors) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColors");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColors) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColors");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColors, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColors::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColors, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillRandomColors::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsAllFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsAllFrames::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsAllFramesName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhite
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhite::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteAllFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFrames::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteAllFramesName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsBlackAndWhiteName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsBlackAndWhiteName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillRandomColorsName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillRandomColorsName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillRandomColorsName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillRandomColorsName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillRandomColorsName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillRandomColorsName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillRandomColorsName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillRandomColorsName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames, Threshold) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames, colorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName, Threshold) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName, colorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, Threshold) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, Threshold) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsMinMaxAllFramesRGB
// 0x0024 (0x0024 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minThreshold;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minRed;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minGreen;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minBlue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxThreshold;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxRed;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxGreen;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxBlue;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB) == 0x000024, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, minThreshold) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::minThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, minRed) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::minRed' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, minGreen) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::minGreen' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, minBlue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::minBlue' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, maxThreshold) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::maxThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, maxRed) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::maxRed' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, maxGreen) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::maxGreen' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB, maxBlue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGB::maxBlue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsMinMaxAllFramesRGBName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minThreshold;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minRed;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minGreen;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minBlue;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxThreshold;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxRed;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxGreen;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxBlue;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, minThreshold) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::minThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, minRed) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::minRed' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, minGreen) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::minGreen' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, minBlue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::minBlue' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, maxThreshold) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::maxThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, maxRed) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::maxRed' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, maxGreen) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::maxGreen' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName, maxBlue) == 0x00002C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsMinMaxAllFramesRGBName::maxBlue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsRGB
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, Threshold) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, red) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, green) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGB, blue) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdColorsRGBName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, Threshold) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::Threshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, red) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, green) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName, blue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_FillThresholdColorsRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdRGBColorsAllFramesRGB
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         redThreshold;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         greenThreshold;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blueThreshold;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, redThreshold) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::redThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, greenThreshold) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::greenThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, blueThreshold) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::blueThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillThresholdRGBColorsAllFramesRGBName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         redThreshold;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         greenThreshold;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blueThreshold;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, redThreshold) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::redThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, greenThreshold) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::greenThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, blueThreshold) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::blueThreshold' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, red) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, green) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName, blue) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_FillThresholdRGBColorsAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColor
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColor) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColor, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillZeroColor::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColor, colorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillZeroColor::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFrames
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorAllFrames) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFrames, colorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName, colorParam) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesRGB
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB, red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB, green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName, red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName, green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorName, colorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.FillZeroColorRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_FillZeroColorRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_FillZeroColorRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_FillZeroColorRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_FillZeroColorRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_FillZeroColorRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimation
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimation final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimation) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimation) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimation, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimation::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimation, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetAnimation::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationCount
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimationCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimationCount) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimationCount");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimationCount) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimationCount");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationCount, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimationCount::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationId
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimationId final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimationId) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimationId");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimationId) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimationId");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationId, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimationId::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationId, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetAnimationId::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationIdByIndex
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimationIdByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimationIdByIndex) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimationIdByIndex");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimationIdByIndex) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimationIdByIndex");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationIdByIndex, Index_0) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimationIdByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationIdByIndex, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetAnimationIdByIndex::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetAnimationName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetAnimationName final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetAnimationName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationName, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetAnimationName::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetAnimationName, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetAnimationName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameCount
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetFrameCount final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetFrameCount) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetFrameCount");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetFrameCount) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetFrameCount");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameCount, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetFrameCount::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameCount, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetFrameCount::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetFrameCountName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetFrameCountName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetFrameCountName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetFrameCountName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetFrameCountName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_GetFrameCountName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameCountName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetFrameCountName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetFrameCountName, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetFrameCountName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyboardKeyColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyboardKeyColor final
{
public:
	EChromaSDKKeyboardKey                         Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyboardKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyboardKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor, Key) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardKeyColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor, Colors) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardKeyColor::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardKeyColor, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardKeyColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyboardRazerKey
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyboardRazerKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyboardRazerKey) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyboardRazerKey");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyboardRazerKey) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyboardRazerKey");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardRazerKey, Key) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardRazerKey::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyboardRazerKey, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_GetKeyboardRazerKey::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyColor
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyColor) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColor, frameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetKeyColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColor, Key) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetKeyColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColor, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_GetKeyColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetKeyColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetKeyColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetKeyColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetKeyColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetKeyColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_GetKeyColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetKeyColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColorName, frameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_GetKeyColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColorName, Key) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_GetKeyColorName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetKeyColorName, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_GetKeyColorName::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxColumn
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetMaxColumn final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetMaxColumn) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetMaxColumn");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetMaxColumn) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetMaxColumn");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxColumn, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetMaxColumn::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxColumn, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetMaxColumn::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxLeds
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetMaxLeds final
{
public:
	EChromaSDKDevice1DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetMaxLeds) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetMaxLeds");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetMaxLeds) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetMaxLeds");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxLeds, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetMaxLeds::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxLeds, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetMaxLeds::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMaxRow
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetMaxRow final
{
public:
	EChromaSDKDevice2DEnum                        Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetMaxRow) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetMaxRow");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetMaxRow) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetMaxRow");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxRow, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetMaxRow::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMaxRow, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetMaxRow::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetMouseLedColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetMouseLedColor final
{
public:
	EChromaSDKMouseLed                            led;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetMouseLedColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_GetMouseLedColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetMouseLedColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_GetMouseLedColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMouseLedColor, led) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetMouseLedColor::led' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMouseLedColor, Colors) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetMouseLedColor::Colors' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetMouseLedColor, ReturnValue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_GetMouseLedColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetPlayingAnimationCount
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetPlayingAnimationCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetPlayingAnimationCount) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetPlayingAnimationCount");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetPlayingAnimationCount) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_GetPlayingAnimationCount");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetPlayingAnimationCount, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetPlayingAnimationCount::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetPlayingAnimationId
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_GetPlayingAnimationId final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetPlayingAnimationId) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetPlayingAnimationId");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetPlayingAnimationId) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_GetPlayingAnimationId");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetPlayingAnimationId, Index_0) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetPlayingAnimationId::Index_0' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetPlayingAnimationId, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetPlayingAnimationId::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.GetRGB
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_GetRGB final
{
public:
	int32                                         red;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_GetRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_GetRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_GetRGB) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_GetRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetRGB, red) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_GetRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetRGB, green) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_GetRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetRGB, blue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_GetRGB::blue' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_GetRGB, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_GetRGB::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertDelay
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_InsertDelay final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InsertDelay) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_InsertDelay");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InsertDelay) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_InsertDelay");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelay, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InsertDelay::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelay, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_InsertDelay::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelay, Delay) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_InsertDelay::Delay' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertDelayName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_InsertDelayName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InsertDelayName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_InsertDelayName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InsertDelayName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_InsertDelayName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelayName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InsertDelayName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelayName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_InsertDelayName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertDelayName, Delay) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_InsertDelayName::Delay' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertFrame
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_InsertFrame final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sourceFrame;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetFrame;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InsertFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_InsertFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InsertFrame) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_InsertFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrame, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InsertFrame::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrame, sourceFrame) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_InsertFrame::sourceFrame' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrame, targetFrame) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_InsertFrame::targetFrame' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InsertFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_InsertFrameName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sourceFrame;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetFrame;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InsertFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_InsertFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InsertFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_InsertFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrameName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InsertFrameName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrameName, sourceFrame) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_InsertFrameName::sourceFrame' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InsertFrameName, targetFrame) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_InsertFrameName::targetFrame' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InvertColorsAllFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_InvertColorsAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InvertColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_InvertColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InvertColorsAllFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_InvertColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InvertColorsAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InvertColorsAllFrames::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.InvertColorsAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_InvertColorsAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_InvertColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_InvertColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_InvertColorsAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_InvertColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_InvertColorsAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_InvertColorsAllFramesName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsAnimationPlaying
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsAnimationPlaying final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsAnimationPlaying) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_IsAnimationPlaying");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsAnimationPlaying) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_IsAnimationPlaying");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationPlaying, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsAnimationPlaying::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationPlaying, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_IsAnimationPlaying::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsAnimationTypePlaying
// 0x0002 (0x0002 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsAnimationTypePlaying final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsAnimationTypePlaying) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_IsAnimationTypePlaying");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsAnimationTypePlaying) == 0x000002, "Wrong size on ChromaSDKPluginBPLibrary_IsAnimationTypePlaying");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationTypePlaying, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsAnimationTypePlaying::Device' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsAnimationTypePlaying, ReturnValue) == 0x000001, "Member 'ChromaSDKPluginBPLibrary_IsAnimationTypePlaying::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsInitialized) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_IsInitialized");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsInitialized) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_IsInitialized");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsInitialized, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsInitialized::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.IsPlatformWindows
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_IsPlatformWindows final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_IsPlatformWindows) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_IsPlatformWindows");
static_assert(sizeof(ChromaSDKPluginBPLibrary_IsPlatformWindows) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_IsPlatformWindows");
static_assert(offsetof(ChromaSDKPluginBPLibrary_IsPlatformWindows, ReturnValue) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_IsPlatformWindows::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.Lerp
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_Lerp final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         amt;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_Lerp) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_Lerp");
static_assert(sizeof(ChromaSDKPluginBPLibrary_Lerp) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_Lerp");
static_assert(offsetof(ChromaSDKPluginBPLibrary_Lerp, Start) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_Lerp::Start' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_Lerp, End) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_Lerp::End' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_Lerp, amt) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_Lerp::amt' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_Lerp, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_Lerp::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LerpColor
// 0x0034 (0x0034 - 0x0000)
struct ChromaSDKPluginBPLibrary_LerpColor final
{
public:
	struct FLinearColor                           colorParam1;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam2;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0024(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_LerpColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_LerpColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_LerpColor) == 0x000034, "Wrong size on ChromaSDKPluginBPLibrary_LerpColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColor, colorParam1) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_LerpColor::colorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColor, colorParam2) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_LerpColor::colorParam2' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColor, T) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_LerpColor::T' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColor, ReturnValue) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_LerpColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LerpColorBGR
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_LerpColorBGR final
{
public:
	int32                                         from;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         to;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_LerpColorBGR) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_LerpColorBGR");
static_assert(sizeof(ChromaSDKPluginBPLibrary_LerpColorBGR) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_LerpColorBGR");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColorBGR, from) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_LerpColorBGR::from' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColorBGR, to) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_LerpColorBGR::to' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColorBGR, T) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_LerpColorBGR::T' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LerpColorBGR, ReturnValue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_LerpColorBGR::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LoadAnimation
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_LoadAnimation final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_LoadAnimation) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_LoadAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_LoadAnimation) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_LoadAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LoadAnimation, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_LoadAnimation::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.LoadAnimationName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_LoadAnimationName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_LoadAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_LoadAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_LoadAnimationName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_LoadAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_LoadAnimationName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_LoadAnimationName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFrames
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFrames) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFrames, frameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFrames::frameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFrames, Duration) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFrames::Duration' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFrames, colorParam) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesName, frameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesName::frameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesName, Duration) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesName::Duration' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesName, colorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandom
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRandom final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRandom");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRandom");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandom::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom, frameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandom::frameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandom, Duration) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandom::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomBlackAndWhite
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite, frameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite::frameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite, Duration) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhite::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomBlackAndWhiteName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName, frameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName::frameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName, Duration) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomBlackAndWhiteName::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRandomName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName, frameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName::frameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName, Duration) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRandomName::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRGB
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, frameCount) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::frameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, Duration) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::Duration' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, red) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, green) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGB, blue) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MakeBlankFramesRGBName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, frameCount) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::frameCount' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, Duration) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::Duration' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, red) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, green) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName, blue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_MakeBlankFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyColorLerpAllFrames
// 0x0024 (0x0024 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam1;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam2;                                       // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames) == 0x000024, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames, colorParam1) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames::colorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames, colorParam2) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFrames::colorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyColorLerpAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam1;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam2;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName, colorParam1) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName::colorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName, colorParam2) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_MultiplyColorLerpAllFramesName::colorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensity
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensity final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensity) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensity");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensity) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensity");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensity, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensity::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensity, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensity::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensity, Intensity) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensity::Intensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames, Intensity) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFrames::Intensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName, Intensity) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesName::Intensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesRGB
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         redIntensity;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         greenIntensity;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blueIntensity;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB, redIntensity) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB::redIntensity' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB, greenIntensity) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB::greenIntensity' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB, blueIntensity) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGB::blueIntensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityAllFramesRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         redIntensity;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         greenIntensity;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blueIntensity;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName, redIntensity) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName::redIntensity' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName, greenIntensity) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName::greenIntensity' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName, blueIntensity) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityAllFramesRGBName::blueIntensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColor
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColor::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColor, colorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColor::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorAllFrames
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames, colorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName, colorParam) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityColorName, colorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityColorName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityName, Intensity) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityName::Intensity' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityRGB
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGB, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyIntensityRGBName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_MultiplyIntensityRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyNonZeroTargetColorLerpAllFrames
// 0x0024 (0x0024 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam1;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam2;                                       // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames) == 0x000024, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames, colorParam1) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames::colorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames, colorParam2) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFrames::colorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyNonZeroTargetColorLerpAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam1;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam2;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName, colorParam1) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName::colorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName, colorParam2) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_MultiplyNonZeroTargetColorLerpAllFramesName::colorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyTargetColorLerpAllFrames
// 0x0024 (0x0024 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam1;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam2;                                       // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames) == 0x000024, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames, colorParam1) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames::colorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames, colorParam2) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFrames::colorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.MultiplyTargetColorLerpAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam1;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam2;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName, colorParam1) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName::colorParam1' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName, colorParam2) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_MultiplyTargetColorLerpAllFramesName::colorParam2' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColors
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetColors final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetColors) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetColors");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetColors) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_OffsetColors");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColors, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetColors::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsAllFrames
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetColorsAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_OffsetColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames, red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFrames::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames, green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFrames::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFrames, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFrames::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName, red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName, green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsAllFramesName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetColorsName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetColorsName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetColorsName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetColorsName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetColorsName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_OffsetColorsName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetColorsName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_OffsetColorsName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColors
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetNonZeroColors final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetNonZeroColors");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_OffsetNonZeroColors");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, red) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, green) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColors, blue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColors::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsAllFrames
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames, red) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames, green) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames, blue) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFrames::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName, red) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName, green) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName, blue) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsAllFramesName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OffsetNonZeroColorsName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, red) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, green) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName, blue) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_OffsetNonZeroColorsName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.OverrideFrameDurationName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_OverrideFrameDurationName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_OverrideFrameDurationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_OverrideFrameDurationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_OverrideFrameDurationName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_OverrideFrameDurationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OverrideFrameDurationName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_OverrideFrameDurationName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_OverrideFrameDurationName, Duration) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_OverrideFrameDurationName::Duration' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimation
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PlayAnimation final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PlayAnimation) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PlayAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PlayAnimation) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PlayAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimation, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PlayAnimation::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimation, Loop) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PlayAnimation::Loop' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimationComposite
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PlayAnimationComposite final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PlayAnimationComposite) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PlayAnimationComposite");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PlayAnimationComposite) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PlayAnimationComposite");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimationComposite, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PlayAnimationComposite::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimationComposite, Loop) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PlayAnimationComposite::Loop' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimationName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PlayAnimationName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PlayAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PlayAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PlayAnimationName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PlayAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimationName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PlayAnimationName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimationName, Loop) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PlayAnimationName::Loop' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PlayAnimations
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PlayAnimations final
{
public:
	TArray<class FString>                         animationNames;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PlayAnimations) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PlayAnimations");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PlayAnimations) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PlayAnimations");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimations, animationNames) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PlayAnimations::animationNames' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PlayAnimations, Loop) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PlayAnimations::Loop' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PreviewFrame
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_PreviewFrame final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PreviewFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_PreviewFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PreviewFrame) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_PreviewFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrame, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PreviewFrame::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrame, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_PreviewFrame::frameId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrame, ReturnValue) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_PreviewFrame::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.PreviewFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_PreviewFrameName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_PreviewFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_PreviewFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_PreviewFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_PreviewFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrameName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_PreviewFrameName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_PreviewFrameName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_PreviewFrameName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReduceFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_ReduceFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         N;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ReduceFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ReduceFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ReduceFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_ReduceFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReduceFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ReduceFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReduceFrames, N) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_ReduceFrames::N' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReduceFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_ReduceFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         N;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ReduceFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ReduceFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ReduceFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_ReduceFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReduceFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ReduceFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReduceFramesName, N) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ReduceFramesName::N' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReverseAllFrames
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_ReverseAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ReverseAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ReverseAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ReverseAllFrames) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_ReverseAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReverseAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ReverseAllFrames::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ReverseAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_ReverseAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ReverseAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_ReverseAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ReverseAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_ReverseAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ReverseAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ReverseAllFramesName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetChromaCustomColorAllFramesName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetChromaCustomColorAllFramesName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetChromaCustomFlagName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetChromaCustomFlagName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          flag;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetChromaCustomFlagName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetChromaCustomFlagName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetChromaCustomFlagName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_SetChromaCustomFlagName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetChromaCustomFlagName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetChromaCustomFlagName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetChromaCustomFlagName, flag) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetChromaCustomFlagName::flag' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyboardKeyColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyboardKeyColor final
{
public:
	EChromaSDKKeyboardKey                         Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyboardKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyboardKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor, Key) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyboardKeyColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor, colorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyboardKeyColor::colorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyboardKeyColor, Colors) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeyboardKeyColor::Colors' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColor
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyColor) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColor, frameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColor, Key) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeyColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColor, colorParam) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_SetKeyColor::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyColorAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames, Key) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFrames::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFrames, colorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorAllFramesName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName, Key) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName, colorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorName, frameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorName, Key) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyColorName, colorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeyColorName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColor
// 0x001C (0x001C - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyNonZeroColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyNonZeroColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor) == 0x00001C, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyNonZeroColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor, frameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor, Key) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColor::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColor, colorParam) == 0x00000C, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColor::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorAllFrames
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames, Key) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames, colorParam) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorAllFramesName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName, Key) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName, colorParam) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeyNonZeroColorName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChromaSDKKeyboardKey                         Key;                                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName, frameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName, Key) == 0x000014, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName::Key' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName, colorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeyNonZeroColorName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColor, frameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeysColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColor, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysColor::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColor, colorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColor::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFrames
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFrames::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFrames, colorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName, colorParam) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesRGB
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, red) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, green) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB, blue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorAllFramesRGBName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, red) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, green) == 0x000024, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName, blue) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorAllFramesRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorName, frameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorName, Keys) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorName, colorParam) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorRGB
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorRGB final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorRGB) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorRGB");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorRGB) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorRGB");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, frameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, red) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, green) == 0x00001C, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGB, blue) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGB::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysColorRGBName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysColorRGBName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         red;                                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         green;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blue;                                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysColorRGBName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysColorRGBName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, frameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, Keys) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, red) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::red' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, green) == 0x00002C, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::green' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysColorRGBName, blue) == 0x000030, "Member 'ChromaSDKPluginBPLibrary_SetKeysColorRGBName::blue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysNonZeroColor final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysNonZeroColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysNonZeroColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColor::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor, frameIndex) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColor::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColor::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColor, colorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColor::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorAllFrames
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames, Keys) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames, colorParam) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFrames::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorAllFramesName
// 0x0030 (0x0030 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName) == 0x000030, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName, Keys) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName, colorParam) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorAllFramesName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetKeysNonZeroColorName
// 0x0038 (0x0038 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EChromaSDKKeyboardKey>                 Keys;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           colorParam;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName) == 0x000038, "Wrong size on ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName, frameIndex) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName::frameIndex' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName, Keys) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName::Keys' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName, colorParam) == 0x000028, "Member 'ChromaSDKPluginBPLibrary_SetKeysNonZeroColorName::colorParam' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SetMouseLedColor
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SetMouseLedColor final
{
public:
	EChromaSDKMouseLed                            led;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           colorParam;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChromaSDKColors>               Colors;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SetMouseLedColor) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SetMouseLedColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SetMouseLedColor) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SetMouseLedColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetMouseLedColor, led) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SetMouseLedColor::led' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetMouseLedColor, colorParam) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SetMouseLedColor::colorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SetMouseLedColor, Colors) == 0x000018, "Member 'ChromaSDKPluginBPLibrary_SetMouseLedColor::Colors' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimation
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimation final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimation) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimation) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimation, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimation::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimationComposite
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimationComposite final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimationComposite) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimationComposite");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimationComposite) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimationComposite");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimationComposite, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimationComposite::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimations
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimations final
{
public:
	TArray<class FString>                         animationNames;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimations) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimations");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimations) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimations");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimations, animationNames) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimations::animationNames' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.StopAnimationType
// 0x0001 (0x0001 - 0x0000)
struct ChromaSDKPluginBPLibrary_StopAnimationType final
{
public:
	EChromaSDKDeviceEnum                          Device;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_StopAnimationType) == 0x000001, "Wrong alignment on ChromaSDKPluginBPLibrary_StopAnimationType");
static_assert(sizeof(ChromaSDKPluginBPLibrary_StopAnimationType) == 0x000001, "Wrong size on ChromaSDKPluginBPLibrary_StopAnimationType");
static_assert(offsetof(ChromaSDKPluginBPLibrary_StopAnimationType, Device) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_StopAnimationType::Device' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeys
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys, frameId) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeys::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFrames::targetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroAllKeysName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName, frameId) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroAllKeysName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFrames::targetAnimationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesName
// 0x0020 (0x0020 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName) == 0x000020, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesName::targetAnimationName' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesOffset
// 0x000C (0x000C - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset final
{
public:
	int32                                         sourceAnimationId;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         targetAnimationId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset) == 0x00000C, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset, sourceAnimationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset::sourceAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset, targetAnimationId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset::targetAnimationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset, Offset) == 0x000008, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffset::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.SubtractNonZeroTargetAllKeysAllFramesOffsetName
// 0x0028 (0x0028 - 0x0000)
struct ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName final
{
public:
	class FString                                 sourceAnimationName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 targetAnimationName;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName) == 0x000028, "Wrong size on ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName, sourceAnimationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName::sourceAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName, targetAnimationName) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName::targetAnimationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName, Offset) == 0x000020, "Member 'ChromaSDKPluginBPLibrary_SubtractNonZeroTargetAllKeysAllFramesOffsetName::Offset' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ToBGR
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_ToBGR final
{
public:
	struct FLinearColor                           colorParam;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ToBGR) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ToBGR");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ToBGR) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_ToBGR");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ToBGR, colorParam) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ToBGR::colorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ToBGR, ReturnValue) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_ToBGR::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.ToLinearColor
// 0x0014 (0x0014 - 0x0000)
struct ChromaSDKPluginBPLibrary_ToLinearColor final
{
public:
	int32                                         colorParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_ToLinearColor) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_ToLinearColor");
static_assert(sizeof(ChromaSDKPluginBPLibrary_ToLinearColor) == 0x000014, "Wrong size on ChromaSDKPluginBPLibrary_ToLinearColor");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ToLinearColor, colorParam) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_ToLinearColor::colorParam' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_ToLinearColor, ReturnValue) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_ToLinearColor::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimEndFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimEndFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lastFrameId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimEndFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimEndFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimEndFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_TrimEndFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimEndFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimEndFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimEndFrames, lastFrameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_TrimEndFrames::lastFrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimEndFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimEndFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lastFrameId;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimEndFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimEndFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimEndFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_TrimEndFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimEndFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimEndFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimEndFramesName, lastFrameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_TrimEndFramesName::lastFrameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimFrame
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimFrame final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimFrame) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimFrame");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimFrame) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_TrimFrame");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimFrame, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimFrame::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimFrame, frameId) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_TrimFrame::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimFrameName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimFrameName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         frameId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimFrameName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimFrameName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimFrameName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_TrimFrameName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimFrameName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimFrameName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimFrameName, frameId) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_TrimFrameName::frameId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimStartFrames
// 0x0008 (0x0008 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimStartFrames final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         numberOfFrames;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimStartFrames) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimStartFrames");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimStartFrames) == 0x000008, "Wrong size on ChromaSDKPluginBPLibrary_TrimStartFrames");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimStartFrames, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimStartFrames::animationId' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimStartFrames, numberOfFrames) == 0x000004, "Member 'ChromaSDKPluginBPLibrary_TrimStartFrames::numberOfFrames' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.TrimStartFramesName
// 0x0018 (0x0018 - 0x0000)
struct ChromaSDKPluginBPLibrary_TrimStartFramesName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         numberOfFrames;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChromaSDKPluginBPLibrary_TrimStartFramesName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_TrimStartFramesName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_TrimStartFramesName) == 0x000018, "Wrong size on ChromaSDKPluginBPLibrary_TrimStartFramesName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimStartFramesName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_TrimStartFramesName::animationName' has a wrong offset!");
static_assert(offsetof(ChromaSDKPluginBPLibrary_TrimStartFramesName, numberOfFrames) == 0x000010, "Member 'ChromaSDKPluginBPLibrary_TrimStartFramesName::numberOfFrames' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UnloadAnimation
// 0x0004 (0x0004 - 0x0000)
struct ChromaSDKPluginBPLibrary_UnloadAnimation final
{
public:
	int32                                         animationId;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UnloadAnimation) == 0x000004, "Wrong alignment on ChromaSDKPluginBPLibrary_UnloadAnimation");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UnloadAnimation) == 0x000004, "Wrong size on ChromaSDKPluginBPLibrary_UnloadAnimation");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UnloadAnimation, animationId) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UnloadAnimation::animationId' has a wrong offset!");

// Function ChromaSDKPlugin.ChromaSDKPluginBPLibrary.UnloadAnimationName
// 0x0010 (0x0010 - 0x0000)
struct ChromaSDKPluginBPLibrary_UnloadAnimationName final
{
public:
	class FString                                 animationName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChromaSDKPluginBPLibrary_UnloadAnimationName) == 0x000008, "Wrong alignment on ChromaSDKPluginBPLibrary_UnloadAnimationName");
static_assert(sizeof(ChromaSDKPluginBPLibrary_UnloadAnimationName) == 0x000010, "Wrong size on ChromaSDKPluginBPLibrary_UnloadAnimationName");
static_assert(offsetof(ChromaSDKPluginBPLibrary_UnloadAnimationName, animationName) == 0x000000, "Member 'ChromaSDKPluginBPLibrary_UnloadAnimationName::animationName' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.GetChromaWrapper
// 0x0008 (0x0008 - 0x0000)
struct NGDChromaWrapper_GetChromaWrapper final
{
public:
	class UNGDChromaWrapper*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_GetChromaWrapper) == 0x000008, "Wrong alignment on NGDChromaWrapper_GetChromaWrapper");
static_assert(sizeof(NGDChromaWrapper_GetChromaWrapper) == 0x000008, "Wrong size on NGDChromaWrapper_GetChromaWrapper");
static_assert(offsetof(NGDChromaWrapper_GetChromaWrapper, ReturnValue) == 0x000000, "Member 'NGDChromaWrapper_GetChromaWrapper::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.AddKeyOverride
// 0x0028 (0x0028 - 0x0000)
struct NGDChromaWrapper_AddKeyOverride final
{
public:
	struct FChromaKeyColor                        KeyColor;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_AddKeyOverride) == 0x000008, "Wrong alignment on NGDChromaWrapper_AddKeyOverride");
static_assert(sizeof(NGDChromaWrapper_AddKeyOverride) == 0x000028, "Wrong size on NGDChromaWrapper_AddKeyOverride");
static_assert(offsetof(NGDChromaWrapper_AddKeyOverride, KeyColor) == 0x000000, "Member 'NGDChromaWrapper_AddKeyOverride::KeyColor' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.AddKeysOverride
// 0x0010 (0x0010 - 0x0000)
struct NGDChromaWrapper_AddKeysOverride final
{
public:
	TArray<struct FChromaKeyColor>                ChromaKeys;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_AddKeysOverride) == 0x000008, "Wrong alignment on NGDChromaWrapper_AddKeysOverride");
static_assert(sizeof(NGDChromaWrapper_AddKeysOverride) == 0x000010, "Wrong size on NGDChromaWrapper_AddKeysOverride");
static_assert(offsetof(NGDChromaWrapper_AddKeysOverride, ChromaKeys) == 0x000000, "Member 'NGDChromaWrapper_AddKeysOverride::ChromaKeys' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.AddKeysOverrideExistentGroup
// 0x0020 (0x0020 - 0x0000)
struct NGDChromaWrapper_AddKeysOverrideExistentGroup final
{
public:
	TArray<struct FChromaKeyColor>                ChromaKeys;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Group;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_AddKeysOverrideExistentGroup) == 0x000008, "Wrong alignment on NGDChromaWrapper_AddKeysOverrideExistentGroup");
static_assert(sizeof(NGDChromaWrapper_AddKeysOverrideExistentGroup) == 0x000020, "Wrong size on NGDChromaWrapper_AddKeysOverrideExistentGroup");
static_assert(offsetof(NGDChromaWrapper_AddKeysOverrideExistentGroup, ChromaKeys) == 0x000000, "Member 'NGDChromaWrapper_AddKeysOverrideExistentGroup::ChromaKeys' has a wrong offset!");
static_assert(offsetof(NGDChromaWrapper_AddKeysOverrideExistentGroup, Group) == 0x000010, "Member 'NGDChromaWrapper_AddKeysOverrideExistentGroup::Group' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.AddKeysOverrideExistentGroups
// 0x0010 (0x0010 - 0x0000)
struct NGDChromaWrapper_AddKeysOverrideExistentGroups final
{
public:
	TArray<struct FChromaKeyColor>                ChromaKeys;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_AddKeysOverrideExistentGroups) == 0x000008, "Wrong alignment on NGDChromaWrapper_AddKeysOverrideExistentGroups");
static_assert(sizeof(NGDChromaWrapper_AddKeysOverrideExistentGroups) == 0x000010, "Wrong size on NGDChromaWrapper_AddKeysOverrideExistentGroups");
static_assert(offsetof(NGDChromaWrapper_AddKeysOverrideExistentGroups, ChromaKeys) == 0x000000, "Member 'NGDChromaWrapper_AddKeysOverrideExistentGroups::ChromaKeys' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.AddKeysOverrideExistentGroupSingleColor
// 0x0030 (0x0030 - 0x0000)
struct NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Group;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor) == 0x000008, "Wrong alignment on NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor");
static_assert(sizeof(NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor) == 0x000030, "Wrong size on NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor");
static_assert(offsetof(NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor, Keys) == 0x000000, "Member 'NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor::Keys' has a wrong offset!");
static_assert(offsetof(NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor, Group) == 0x000010, "Member 'NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor::Group' has a wrong offset!");
static_assert(offsetof(NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor, Color) == 0x000020, "Member 'NGDChromaWrapper_AddKeysOverrideExistentGroupSingleColor::Color' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.ClearKeyOverrides
// 0x0010 (0x0010 - 0x0000)
struct NGDChromaWrapper_ClearKeyOverrides final
{
public:
	class FString                                 Group;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_ClearKeyOverrides) == 0x000008, "Wrong alignment on NGDChromaWrapper_ClearKeyOverrides");
static_assert(sizeof(NGDChromaWrapper_ClearKeyOverrides) == 0x000010, "Wrong size on NGDChromaWrapper_ClearKeyOverrides");
static_assert(offsetof(NGDChromaWrapper_ClearKeyOverrides, Group) == 0x000000, "Member 'NGDChromaWrapper_ClearKeyOverrides::Group' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct NGDChromaWrapper_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_IsInitialized) == 0x000001, "Wrong alignment on NGDChromaWrapper_IsInitialized");
static_assert(sizeof(NGDChromaWrapper_IsInitialized) == 0x000001, "Wrong size on NGDChromaWrapper_IsInitialized");
static_assert(offsetof(NGDChromaWrapper_IsInitialized, ReturnValue) == 0x000000, "Member 'NGDChromaWrapper_IsInitialized::ReturnValue' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.PlayBackgroundAnim
// 0x0020 (0x0020 - 0x0000)
struct NGDChromaWrapper_PlayBackgroundAnim final
{
public:
	EChromaDevice                                 Device;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcePlay;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDChromaWrapper_PlayBackgroundAnim) == 0x000008, "Wrong alignment on NGDChromaWrapper_PlayBackgroundAnim");
static_assert(sizeof(NGDChromaWrapper_PlayBackgroundAnim) == 0x000020, "Wrong size on NGDChromaWrapper_PlayBackgroundAnim");
static_assert(offsetof(NGDChromaWrapper_PlayBackgroundAnim, Device) == 0x000000, "Member 'NGDChromaWrapper_PlayBackgroundAnim::Device' has a wrong offset!");
static_assert(offsetof(NGDChromaWrapper_PlayBackgroundAnim, AnimName) == 0x000008, "Member 'NGDChromaWrapper_PlayBackgroundAnim::AnimName' has a wrong offset!");
static_assert(offsetof(NGDChromaWrapper_PlayBackgroundAnim, ForcePlay) == 0x000018, "Member 'NGDChromaWrapper_PlayBackgroundAnim::ForcePlay' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.PlayTemporalAnim
// 0x0018 (0x0018 - 0x0000)
struct NGDChromaWrapper_PlayTemporalAnim final
{
public:
	EChromaDevice                                 Device;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_PlayTemporalAnim) == 0x000008, "Wrong alignment on NGDChromaWrapper_PlayTemporalAnim");
static_assert(sizeof(NGDChromaWrapper_PlayTemporalAnim) == 0x000018, "Wrong size on NGDChromaWrapper_PlayTemporalAnim");
static_assert(offsetof(NGDChromaWrapper_PlayTemporalAnim, Device) == 0x000000, "Member 'NGDChromaWrapper_PlayTemporalAnim::Device' has a wrong offset!");
static_assert(offsetof(NGDChromaWrapper_PlayTemporalAnim, AnimName) == 0x000008, "Member 'NGDChromaWrapper_PlayTemporalAnim::AnimName' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.SetAnimationsPath
// 0x0010 (0x0010 - 0x0000)
struct NGDChromaWrapper_SetAnimationsPath final
{
public:
	class FString                                 NewAnimationsPath;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_SetAnimationsPath) == 0x000008, "Wrong alignment on NGDChromaWrapper_SetAnimationsPath");
static_assert(sizeof(NGDChromaWrapper_SetAnimationsPath) == 0x000010, "Wrong size on NGDChromaWrapper_SetAnimationsPath");
static_assert(offsetof(NGDChromaWrapper_SetAnimationsPath, NewAnimationsPath) == 0x000000, "Member 'NGDChromaWrapper_SetAnimationsPath::NewAnimationsPath' has a wrong offset!");

// Function ChromaSDKPlugin.NGDChromaWrapper.SetColorToDevice
// 0x0014 (0x0014 - 0x0000)
struct NGDChromaWrapper_SetColorToDevice final
{
public:
	EChromaDevice                                 Device;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDChromaWrapper_SetColorToDevice) == 0x000004, "Wrong alignment on NGDChromaWrapper_SetColorToDevice");
static_assert(sizeof(NGDChromaWrapper_SetColorToDevice) == 0x000014, "Wrong size on NGDChromaWrapper_SetColorToDevice");
static_assert(offsetof(NGDChromaWrapper_SetColorToDevice, Device) == 0x000000, "Member 'NGDChromaWrapper_SetColorToDevice::Device' has a wrong offset!");
static_assert(offsetof(NGDChromaWrapper_SetColorToDevice, Color) == 0x000004, "Member 'NGDChromaWrapper_SetColorToDevice::Color' has a wrong offset!");

}

