#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BeforeRewindVFx

#include "Basic.hpp"

#include "TimeWatch_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BeforeRewindVFx.BP_BeforeRewindVFx_C
// 0x00C8 (0x02E0 - 0x0218)
class ABP_BeforeRewindVFx_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0218(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               PS_Rewind_SphereContract_Idle_Loop_01_Pre;         // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Rewind_SphereContract_Idle_Loop_03_Pre;         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Rewind_SphereContract_Idle_Loop_00;             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Rewind_SphereContract_Idle_Loop_01;             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Rewind_Round_Charge;                            // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Rewind_Start_Loop;                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Rewind_Loop;                                    // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Paradox_Magnetic_Volume;                        // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Paradox_Magnetic_Volume2;                       // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Paradox_Magnetic_Volume1;                       // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNGDAkComponent*                        AkRewindSphere;                                    // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Paradox_Triangles_Filler_Scaleable;             // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AnimEnd_Darken_FX_B190FA2E4ED9E445E74B218D73C0E79A; // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimEnd_Material_Tile_B190FA2E4ED9E445E74B218D73C0E79A; // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimEnd_Material_Speed_B190FA2E4ED9E445E74B218D73C0E79A; // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimEnd_Material_Radius_B190FA2E4ED9E445E74B218D73C0E79A; // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimEnd_3DScalar_B190FA2E4ED9E445E74B218D73C0E79A; // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AnimEnd__Direction_B190FA2E4ED9E445E74B218D73C0E79A; // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AnimEnd;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimStart_Darken_FX_9F11E0F4415149D01060A4BC9BC1C23B; // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimStart_Material_Tiling_9F11E0F4415149D01060A4BC9BC1C23B; // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimStart_Material_Speed_9F11E0F4415149D01060A4BC9BC1C23B; // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimStart_Material_Radius_9F11E0F4415149D01060A4BC9BC1C23B; // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimStart_3DScalar_9F11E0F4415149D01060A4BC9BC1C23B; // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AnimStart__Direction_9F11E0F4415149D01060A4BC9BC1C23B; // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AnimStart;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCloneIndexAux;                              // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Rewind_Loop;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BeforeRewindVFx(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnStateChanged_Event(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState);
	void ReceiveBeginPlay();
	void End();
	void Start();
	void AnimEnd__UpdateFunc();
	void AnimEnd__FinishedFunc();
	void AnimStart__UpdateFunc();
	void AnimStart__FinishedFunc();
	void GetNewScale3D(float Scalar, struct FVector* NewParam);
	int32 GetGhostCloneIndex();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BeforeRewindVFx_C">();
	}
	static class ABP_BeforeRewindVFx_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BeforeRewindVFx_C>();
	}
};
static_assert(alignof(ABP_BeforeRewindVFx_C) == 0x000008, "Wrong alignment on ABP_BeforeRewindVFx_C");
static_assert(sizeof(ABP_BeforeRewindVFx_C) == 0x0002E0, "Wrong size on ABP_BeforeRewindVFx_C");
static_assert(offsetof(ABP_BeforeRewindVFx_C, UberGraphFrame) == 0x000218, "Member 'ABP_BeforeRewindVFx_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, PS_Rewind_SphereContract_Idle_Loop_01_Pre) == 0x000220, "Member 'ABP_BeforeRewindVFx_C::PS_Rewind_SphereContract_Idle_Loop_01_Pre' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, PS_Rewind_SphereContract_Idle_Loop_03_Pre) == 0x000228, "Member 'ABP_BeforeRewindVFx_C::PS_Rewind_SphereContract_Idle_Loop_03_Pre' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, PS_Rewind_SphereContract_Idle_Loop_00) == 0x000230, "Member 'ABP_BeforeRewindVFx_C::PS_Rewind_SphereContract_Idle_Loop_00' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, PS_Rewind_SphereContract_Idle_Loop_01) == 0x000238, "Member 'ABP_BeforeRewindVFx_C::PS_Rewind_SphereContract_Idle_Loop_01' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, PS_Rewind_Round_Charge) == 0x000240, "Member 'ABP_BeforeRewindVFx_C::PS_Rewind_Round_Charge' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, PS_Rewind_Start_Loop) == 0x000248, "Member 'ABP_BeforeRewindVFx_C::PS_Rewind_Start_Loop' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, PS_Rewind_Loop) == 0x000250, "Member 'ABP_BeforeRewindVFx_C::PS_Rewind_Loop' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, SM_Paradox_Magnetic_Volume) == 0x000258, "Member 'ABP_BeforeRewindVFx_C::SM_Paradox_Magnetic_Volume' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, SM_Paradox_Magnetic_Volume2) == 0x000260, "Member 'ABP_BeforeRewindVFx_C::SM_Paradox_Magnetic_Volume2' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, SM_Paradox_Magnetic_Volume1) == 0x000268, "Member 'ABP_BeforeRewindVFx_C::SM_Paradox_Magnetic_Volume1' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AkRewindSphere) == 0x000270, "Member 'ABP_BeforeRewindVFx_C::AkRewindSphere' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, PS_Paradox_Triangles_Filler_Scaleable) == 0x000278, "Member 'ABP_BeforeRewindVFx_C::PS_Paradox_Triangles_Filler_Scaleable' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, Sphere) == 0x000280, "Member 'ABP_BeforeRewindVFx_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, DefaultSceneRoot) == 0x000288, "Member 'ABP_BeforeRewindVFx_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimEnd_Darken_FX_B190FA2E4ED9E445E74B218D73C0E79A) == 0x000290, "Member 'ABP_BeforeRewindVFx_C::AnimEnd_Darken_FX_B190FA2E4ED9E445E74B218D73C0E79A' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimEnd_Material_Tile_B190FA2E4ED9E445E74B218D73C0E79A) == 0x000294, "Member 'ABP_BeforeRewindVFx_C::AnimEnd_Material_Tile_B190FA2E4ED9E445E74B218D73C0E79A' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimEnd_Material_Speed_B190FA2E4ED9E445E74B218D73C0E79A) == 0x000298, "Member 'ABP_BeforeRewindVFx_C::AnimEnd_Material_Speed_B190FA2E4ED9E445E74B218D73C0E79A' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimEnd_Material_Radius_B190FA2E4ED9E445E74B218D73C0E79A) == 0x00029C, "Member 'ABP_BeforeRewindVFx_C::AnimEnd_Material_Radius_B190FA2E4ED9E445E74B218D73C0E79A' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimEnd_3DScalar_B190FA2E4ED9E445E74B218D73C0E79A) == 0x0002A0, "Member 'ABP_BeforeRewindVFx_C::AnimEnd_3DScalar_B190FA2E4ED9E445E74B218D73C0E79A' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimEnd__Direction_B190FA2E4ED9E445E74B218D73C0E79A) == 0x0002A4, "Member 'ABP_BeforeRewindVFx_C::AnimEnd__Direction_B190FA2E4ED9E445E74B218D73C0E79A' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimEnd) == 0x0002A8, "Member 'ABP_BeforeRewindVFx_C::AnimEnd' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimStart_Darken_FX_9F11E0F4415149D01060A4BC9BC1C23B) == 0x0002B0, "Member 'ABP_BeforeRewindVFx_C::AnimStart_Darken_FX_9F11E0F4415149D01060A4BC9BC1C23B' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimStart_Material_Tiling_9F11E0F4415149D01060A4BC9BC1C23B) == 0x0002B4, "Member 'ABP_BeforeRewindVFx_C::AnimStart_Material_Tiling_9F11E0F4415149D01060A4BC9BC1C23B' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimStart_Material_Speed_9F11E0F4415149D01060A4BC9BC1C23B) == 0x0002B8, "Member 'ABP_BeforeRewindVFx_C::AnimStart_Material_Speed_9F11E0F4415149D01060A4BC9BC1C23B' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimStart_Material_Radius_9F11E0F4415149D01060A4BC9BC1C23B) == 0x0002BC, "Member 'ABP_BeforeRewindVFx_C::AnimStart_Material_Radius_9F11E0F4415149D01060A4BC9BC1C23B' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimStart_3DScalar_9F11E0F4415149D01060A4BC9BC1C23B) == 0x0002C0, "Member 'ABP_BeforeRewindVFx_C::AnimStart_3DScalar_9F11E0F4415149D01060A4BC9BC1C23B' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimStart__Direction_9F11E0F4415149D01060A4BC9BC1C23B) == 0x0002C4, "Member 'ABP_BeforeRewindVFx_C::AnimStart__Direction_9F11E0F4415149D01060A4BC9BC1C23B' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, AnimStart) == 0x0002C8, "Member 'ABP_BeforeRewindVFx_C::AnimStart' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, CurrentCloneIndexAux) == 0x0002D0, "Member 'ABP_BeforeRewindVFx_C::CurrentCloneIndexAux' has a wrong offset!");
static_assert(offsetof(ABP_BeforeRewindVFx_C, Rewind_Loop) == 0x0002D8, "Member 'ABP_BeforeRewindVFx_C::Rewind_Loop' has a wrong offset!");

}

