#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraModifier_OnRevive

#include "Basic.hpp"

#include "UnrealProject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CameraModifier_OnRevive.CameraModifier_OnRevive_C
// 0x0020 (0x00B8 - 0x0098)
class UCameraModifier_OnRevive_C final : public UNGDCameraModifier
{
public:
	float                                         EffectDilatiation;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FOVCurve;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveScale;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraModifierLength;                              // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ReviveCurve;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool BlueprintIsModifierActive();
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
	void BlueprintOverrideAlpha(float* OutNewAlpha);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void GetReviveAlphaValue(float Length, float* Alpha_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CameraModifier_OnRevive_C">();
	}
	static class UCameraModifier_OnRevive_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_OnRevive_C>();
	}
};
static_assert(alignof(UCameraModifier_OnRevive_C) == 0x000008, "Wrong alignment on UCameraModifier_OnRevive_C");
static_assert(sizeof(UCameraModifier_OnRevive_C) == 0x0000B8, "Wrong size on UCameraModifier_OnRevive_C");
static_assert(offsetof(UCameraModifier_OnRevive_C, EffectDilatiation) == 0x000098, "Member 'UCameraModifier_OnRevive_C::EffectDilatiation' has a wrong offset!");
static_assert(offsetof(UCameraModifier_OnRevive_C, FOVCurve) == 0x0000A0, "Member 'UCameraModifier_OnRevive_C::FOVCurve' has a wrong offset!");
static_assert(offsetof(UCameraModifier_OnRevive_C, CurveScale) == 0x0000A8, "Member 'UCameraModifier_OnRevive_C::CurveScale' has a wrong offset!");
static_assert(offsetof(UCameraModifier_OnRevive_C, CameraModifierLength) == 0x0000AC, "Member 'UCameraModifier_OnRevive_C::CameraModifierLength' has a wrong offset!");
static_assert(offsetof(UCameraModifier_OnRevive_C, ReviveCurve) == 0x0000B0, "Member 'UCameraModifier_OnRevive_C::ReviveCurve' has a wrong offset!");

}

