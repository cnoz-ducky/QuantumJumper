#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crosshair_SMGVar1

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Crosshair_SMGVar1.Crosshair_SMGVar1_C
// 0x0070 (0x0370 - 0x0300)
class UCrosshair_SMGVar1_C final : public UTWLinearCrosshairWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HitAnim;                                           // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BottomLeft;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomRight;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_Container;                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Center;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopLeft;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopRight;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         MinCenterOffset;                                   // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCenterOffset;                                   // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TranslationFactor;                                 // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TranslationConstant;                               // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Test;                                              // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastGained;                                        // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrosshairGainedScaleFeedback;                      // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentGained;                                     // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetGainedDelta;                                 // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeScalar_;                                       // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeScalar__0;                                     // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Crosshair_SMGVar1(int32 EntryPoint);
	void OnADSExit();
	void OnADSEnter();
	void ShowHitFeedback(const struct FLinearColor& HitColor);
	void UpdateCrosshairColor(int32 ColorIndex);
	void OnSpreadChanged(float Spread);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void SetImpactCrosshair(bool Show);
	void UpdateSprayGainFeedback(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Crosshair_SMGVar1_C">();
	}
	static class UCrosshair_SMGVar1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrosshair_SMGVar1_C>();
	}
};
static_assert(alignof(UCrosshair_SMGVar1_C) == 0x000008, "Wrong alignment on UCrosshair_SMGVar1_C");
static_assert(sizeof(UCrosshair_SMGVar1_C) == 0x000370, "Wrong size on UCrosshair_SMGVar1_C");
static_assert(offsetof(UCrosshair_SMGVar1_C, UberGraphFrame) == 0x000300, "Member 'UCrosshair_SMGVar1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, HitAnim) == 0x000308, "Member 'UCrosshair_SMGVar1_C::HitAnim' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, BottomLeft) == 0x000310, "Member 'UCrosshair_SMGVar1_C::BottomLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, BottomRight) == 0x000318, "Member 'UCrosshair_SMGVar1_C::BottomRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, CanvasPanel_Container) == 0x000320, "Member 'UCrosshair_SMGVar1_C::CanvasPanel_Container' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, Center) == 0x000328, "Member 'UCrosshair_SMGVar1_C::Center' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, TopLeft) == 0x000330, "Member 'UCrosshair_SMGVar1_C::TopLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, TopRight) == 0x000338, "Member 'UCrosshair_SMGVar1_C::TopRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, MinCenterOffset) == 0x000340, "Member 'UCrosshair_SMGVar1_C::MinCenterOffset' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, MaxCenterOffset) == 0x000344, "Member 'UCrosshair_SMGVar1_C::MaxCenterOffset' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, TranslationFactor) == 0x000348, "Member 'UCrosshair_SMGVar1_C::TranslationFactor' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, TranslationConstant) == 0x00034C, "Member 'UCrosshair_SMGVar1_C::TranslationConstant' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, Test) == 0x000350, "Member 'UCrosshair_SMGVar1_C::Test' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, LastGained) == 0x000354, "Member 'UCrosshair_SMGVar1_C::LastGained' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, CrosshairGainedScaleFeedback) == 0x000358, "Member 'UCrosshair_SMGVar1_C::CrosshairGainedScaleFeedback' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, CurrentGained) == 0x00035C, "Member 'UCrosshair_SMGVar1_C::CurrentGained' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, TargetGainedDelta) == 0x000360, "Member 'UCrosshair_SMGVar1_C::TargetGainedDelta' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, TimeScalar_) == 0x000364, "Member 'UCrosshair_SMGVar1_C::TimeScalar_' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMGVar1_C, TimeScalar__0) == 0x000368, "Member 'UCrosshair_SMGVar1_C::TimeScalar__0' has a wrong offset!");

}

