#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutoSettings

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum AutoSettings.EBindingCaptureMode
// NumValues: 0x0003
enum class EBindingCaptureMode : uint8
{
	OnReleased                               = 0,
	OnPressed                                = 1,
	EBindingCaptureMode_MAX                  = 2,
};

// ScriptStruct AutoSettings.AutoSettingData
// 0x0038 (0x0038 - 0x0000)
struct FAutoSettingData final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0018(0x0020)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAutoSettingData) == 0x000008, "Wrong alignment on FAutoSettingData");
static_assert(sizeof(FAutoSettingData) == 0x000038, "Wrong size on FAutoSettingData");
static_assert(offsetof(FAutoSettingData, Key) == 0x000000, "Member 'FAutoSettingData::Key' has a wrong offset!");
static_assert(offsetof(FAutoSettingData, Value) == 0x000008, "Member 'FAutoSettingData::Value' has a wrong offset!");
static_assert(offsetof(FAutoSettingData, Tags) == 0x000018, "Member 'FAutoSettingData::Tags' has a wrong offset!");

// ScriptStruct AutoSettings.KeyFriendlyName
// 0x0030 (0x0030 - 0x0000)
struct FKeyFriendlyName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FriendlyName;                                      // 0x0018(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyFriendlyName) == 0x000008, "Wrong alignment on FKeyFriendlyName");
static_assert(sizeof(FKeyFriendlyName) == 0x000030, "Wrong size on FKeyFriendlyName");
static_assert(offsetof(FKeyFriendlyName, Key) == 0x000000, "Member 'FKeyFriendlyName::Key' has a wrong offset!");
static_assert(offsetof(FKeyFriendlyName, FriendlyName) == 0x000018, "Member 'FKeyFriendlyName::FriendlyName' has a wrong offset!");

// ScriptStruct AutoSettings.KeyIconPair
// 0x0020 (0x0020 - 0x0000)
struct FKeyIconPair final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Icon;                                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyIconPair) == 0x000008, "Wrong alignment on FKeyIconPair");
static_assert(sizeof(FKeyIconPair) == 0x000020, "Wrong size on FKeyIconPair");
static_assert(offsetof(FKeyIconPair, Key) == 0x000000, "Member 'FKeyIconPair::Key' has a wrong offset!");
static_assert(offsetof(FKeyIconPair, Icon) == 0x000018, "Member 'FKeyIconPair::Icon' has a wrong offset!");

// ScriptStruct AutoSettings.KeyIconSet
// 0x0030 (0x0030 - 0x0000)
struct FKeyIconSet final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	TArray<struct FKeyIconPair>                   Icons;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyIconSet) == 0x000008, "Wrong alignment on FKeyIconSet");
static_assert(sizeof(FKeyIconSet) == 0x000030, "Wrong size on FKeyIconSet");
static_assert(offsetof(FKeyIconSet, Tags) == 0x000000, "Member 'FKeyIconSet::Tags' has a wrong offset!");
static_assert(offsetof(FKeyIconSet, Icons) == 0x000020, "Member 'FKeyIconSet::Icons' has a wrong offset!");

// ScriptStruct AutoSettings.KeyScale
// 0x0020 (0x0020 - 0x0000)
struct FKeyScale final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeyScale) == 0x000008, "Wrong alignment on FKeyScale");
static_assert(sizeof(FKeyScale) == 0x000020, "Wrong size on FKeyScale");
static_assert(offsetof(FKeyScale, Key) == 0x000000, "Member 'FKeyScale::Key' has a wrong offset!");
static_assert(offsetof(FKeyScale, Scale) == 0x000018, "Member 'FKeyScale::Scale' has a wrong offset!");

// ScriptStruct AutoSettings.AxisAssociation
// 0x0028 (0x0028 - 0x0000)
struct FAxisAssociation final
{
public:
	struct FKey                                   AnalogKey;                                         // 0x0000(0x0018)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKeyScale>                      BooleanKeys;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAxisAssociation) == 0x000008, "Wrong alignment on FAxisAssociation");
static_assert(sizeof(FAxisAssociation) == 0x000028, "Wrong size on FAxisAssociation");
static_assert(offsetof(FAxisAssociation, AnalogKey) == 0x000000, "Member 'FAxisAssociation::AnalogKey' has a wrong offset!");
static_assert(offsetof(FAxisAssociation, BooleanKeys) == 0x000018, "Member 'FAxisAssociation::BooleanKeys' has a wrong offset!");

// ScriptStruct AutoSettings.MappingGroupLink
// 0x0010 (0x0010 - 0x0000)
struct FMappingGroupLink final
{
public:
	TArray<int32>                                 MappingGroups;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMappingGroupLink) == 0x000008, "Wrong alignment on FMappingGroupLink");
static_assert(sizeof(FMappingGroupLink) == 0x000010, "Wrong size on FMappingGroupLink");
static_assert(offsetof(FMappingGroupLink, MappingGroups) == 0x000000, "Member 'FMappingGroupLink::MappingGroups' has a wrong offset!");

// ScriptStruct AutoSettings.KeyGroup
// 0x0020 (0x0020 - 0x0000)
struct FKeyGroup final
{
public:
	struct FGameplayTag                           KeyGroupTag;                                       // 0x0000(0x0008)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGamepadKeys;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNonGamepadKeys;                                // 0x0009(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           Keys;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyGroup) == 0x000008, "Wrong alignment on FKeyGroup");
static_assert(sizeof(FKeyGroup) == 0x000020, "Wrong size on FKeyGroup");
static_assert(offsetof(FKeyGroup, KeyGroupTag) == 0x000000, "Member 'FKeyGroup::KeyGroupTag' has a wrong offset!");
static_assert(offsetof(FKeyGroup, bUseGamepadKeys) == 0x000008, "Member 'FKeyGroup::bUseGamepadKeys' has a wrong offset!");
static_assert(offsetof(FKeyGroup, bUseNonGamepadKeys) == 0x000009, "Member 'FKeyGroup::bUseNonGamepadKeys' has a wrong offset!");
static_assert(offsetof(FKeyGroup, Keys) == 0x000010, "Member 'FKeyGroup::Keys' has a wrong offset!");

// ScriptStruct AutoSettings.ConfigActionKeyMapping
// 0x0000 (0x0028 - 0x0028)
struct FConfigActionKeyMapping final : public FInputActionKeyMapping
{
};
static_assert(alignof(FConfigActionKeyMapping) == 0x000008, "Wrong alignment on FConfigActionKeyMapping");
static_assert(sizeof(FConfigActionKeyMapping) == 0x000028, "Wrong size on FConfigActionKeyMapping");

// ScriptStruct AutoSettings.ConfigAxisKeyMapping
// 0x0000 (0x0028 - 0x0028)
struct FConfigAxisKeyMapping final : public FInputAxisKeyMapping
{
};
static_assert(alignof(FConfigAxisKeyMapping) == 0x000008, "Wrong alignment on FConfigAxisKeyMapping");
static_assert(sizeof(FConfigAxisKeyMapping) == 0x000028, "Wrong size on FConfigAxisKeyMapping");

// ScriptStruct AutoSettings.InputMappingGroup
// 0x0020 (0x0020 - 0x0000)
struct FInputMappingGroup final
{
public:
	TArray<struct FConfigActionKeyMapping>        ActionMappings;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FConfigAxisKeyMapping>          AxisMappings;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputMappingGroup) == 0x000008, "Wrong alignment on FInputMappingGroup");
static_assert(sizeof(FInputMappingGroup) == 0x000020, "Wrong size on FInputMappingGroup");
static_assert(offsetof(FInputMappingGroup, ActionMappings) == 0x000000, "Member 'FInputMappingGroup::ActionMappings' has a wrong offset!");
static_assert(offsetof(FInputMappingGroup, AxisMappings) == 0x000010, "Member 'FInputMappingGroup::AxisMappings' has a wrong offset!");

// ScriptStruct AutoSettings.InputMappingPreset
// 0x0020 (0x0020 - 0x0000)
struct FInputMappingPreset final
{
public:
	struct FGameplayTag                           PresetTag;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultMappings;                               // 0x0008(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputMappingGroup>             MappingGroups;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputMappingPreset) == 0x000008, "Wrong alignment on FInputMappingPreset");
static_assert(sizeof(FInputMappingPreset) == 0x000020, "Wrong size on FInputMappingPreset");
static_assert(offsetof(FInputMappingPreset, PresetTag) == 0x000000, "Member 'FInputMappingPreset::PresetTag' has a wrong offset!");
static_assert(offsetof(FInputMappingPreset, bUseDefaultMappings) == 0x000008, "Member 'FInputMappingPreset::bUseDefaultMappings' has a wrong offset!");
static_assert(offsetof(FInputMappingPreset, MappingGroups) == 0x000010, "Member 'FInputMappingPreset::MappingGroups' has a wrong offset!");

// ScriptStruct AutoSettings.PlayerInputMappings
// 0x0040 (0x0040 - 0x0000)
struct FPlayerInputMappings final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Custom;                                            // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputMappingPreset                    Preset;                                            // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerKeyGroup;                                    // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerInputMappings) == 0x000008, "Wrong alignment on FPlayerInputMappings");
static_assert(sizeof(FPlayerInputMappings) == 0x000040, "Wrong size on FPlayerInputMappings");
static_assert(offsetof(FPlayerInputMappings, PlayerId) == 0x000000, "Member 'FPlayerInputMappings::PlayerId' has a wrong offset!");
static_assert(offsetof(FPlayerInputMappings, PlayerIndex) == 0x000010, "Member 'FPlayerInputMappings::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FPlayerInputMappings, Custom) == 0x000014, "Member 'FPlayerInputMappings::Custom' has a wrong offset!");
static_assert(offsetof(FPlayerInputMappings, Preset) == 0x000018, "Member 'FPlayerInputMappings::Preset' has a wrong offset!");
static_assert(offsetof(FPlayerInputMappings, PlayerKeyGroup) == 0x000038, "Member 'FPlayerInputMappings::PlayerKeyGroup' has a wrong offset!");

// ScriptStruct AutoSettings.SettingOption
// 0x0028 (0x0028 - 0x0000)
struct FSettingOption final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingOption) == 0x000008, "Wrong alignment on FSettingOption");
static_assert(sizeof(FSettingOption) == 0x000028, "Wrong size on FSettingOption");
static_assert(offsetof(FSettingOption, Label) == 0x000000, "Member 'FSettingOption::Label' has a wrong offset!");
static_assert(offsetof(FSettingOption, Value) == 0x000018, "Member 'FSettingOption::Value' has a wrong offset!");

}

