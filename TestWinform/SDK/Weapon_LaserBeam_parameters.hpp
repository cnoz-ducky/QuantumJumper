#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Weapon_LaserBeam

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "TimeWatch_structs.hpp"


namespace SDK::Params
{

// Function Weapon_LaserBeam.Weapon_LaserBeam_C.ExecuteUbergraph_Weapon_LaserBeam
// 0x0058 (0x0058 - 0x0000)
struct Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsFirstPerson;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_NewState_1;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EFluxCapacitorStates OldState, EFluxCapacitorStates NewState)> K2Node_CreateDelegate_OutputDelegate; // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class ABP_MuzzleFlash_Laser_Base_C*           K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base;   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Impact_Laser_Base_C*                K2Node_DynamicCast_AsBP_Impact_Laser_Base;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_NewState;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ELaserSoundEventType                          K2Node_Event_Type;                                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsTimeGoingForward;                   // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFluxCapacitorStates                          K2Node_CustomEvent_OldState;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFluxCapacitorStates                          K2Node_CustomEvent_NewState;                       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATimeWatchGameState*                    K2Node_DynamicCast_AsTime_Watch_Game_State;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam) == 0x000008, "Wrong alignment on Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam");
static_assert(sizeof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam) == 0x000058, "Wrong size on Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, EntryPoint) == 0x000000, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::EntryPoint' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_Event_bIsFirstPerson) == 0x000004, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_Event_bIsFirstPerson' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_Event_NewState_1) == 0x000005, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_Event_NewState_1' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base) == 0x000018, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_DynamicCast_AsBP_Impact_Laser_Base) == 0x000028, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_DynamicCast_AsBP_Impact_Laser_Base' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_Event_NewState) == 0x000031, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_Event_Type) == 0x000032, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_Event_Type' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_Event_IsTimeGoingForward) == 0x000033, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_Event_IsTimeGoingForward' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, CallFunc_GetGameState_ReturnValue) == 0x000038, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_CustomEvent_OldState) == 0x000040, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_CustomEvent_OldState' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_CustomEvent_NewState) == 0x000041, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_CustomEvent_NewState' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_DynamicCast_AsTime_Watch_Game_State) == 0x000048, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_DynamicCast_AsTime_Watch_Game_State' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'Weapon_LaserBeam_C_ExecuteUbergraph_Weapon_LaserBeam::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function Weapon_LaserBeam.Weapon_LaserBeam_C.CustomEvent
// 0x0002 (0x0002 - 0x0000)
struct Weapon_LaserBeam_C_CustomEvent final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_LaserBeam_C_CustomEvent) == 0x000001, "Wrong alignment on Weapon_LaserBeam_C_CustomEvent");
static_assert(sizeof(Weapon_LaserBeam_C_CustomEvent) == 0x000002, "Wrong size on Weapon_LaserBeam_C_CustomEvent");
static_assert(offsetof(Weapon_LaserBeam_C_CustomEvent, OldState) == 0x000000, "Member 'Weapon_LaserBeam_C_CustomEvent::OldState' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_CustomEvent, NewState) == 0x000001, "Member 'Weapon_LaserBeam_C_CustomEvent::NewState' has a wrong offset!");

// Function Weapon_LaserBeam.Weapon_LaserBeam_C.OnSoundEvent
// 0x0002 (0x0002 - 0x0000)
struct Weapon_LaserBeam_C_OnSoundEvent final
{
public:
	ELaserSoundEventType                          Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTimeGoingForward;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Weapon_LaserBeam_C_OnSoundEvent) == 0x000001, "Wrong alignment on Weapon_LaserBeam_C_OnSoundEvent");
static_assert(sizeof(Weapon_LaserBeam_C_OnSoundEvent) == 0x000002, "Wrong size on Weapon_LaserBeam_C_OnSoundEvent");
static_assert(offsetof(Weapon_LaserBeam_C_OnSoundEvent, Type) == 0x000000, "Member 'Weapon_LaserBeam_C_OnSoundEvent::Type' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_OnSoundEvent, IsTimeGoingForward) == 0x000001, "Member 'Weapon_LaserBeam_C_OnSoundEvent::IsTimeGoingForward' has a wrong offset!");

// Function Weapon_LaserBeam.Weapon_LaserBeam_C.OnImpactStateChange
// 0x0001 (0x0001 - 0x0000)
struct Weapon_LaserBeam_C_OnImpactStateChange final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Weapon_LaserBeam_C_OnImpactStateChange) == 0x000001, "Wrong alignment on Weapon_LaserBeam_C_OnImpactStateChange");
static_assert(sizeof(Weapon_LaserBeam_C_OnImpactStateChange) == 0x000001, "Wrong size on Weapon_LaserBeam_C_OnImpactStateChange");
static_assert(offsetof(Weapon_LaserBeam_C_OnImpactStateChange, NewState) == 0x000000, "Member 'Weapon_LaserBeam_C_OnImpactStateChange::NewState' has a wrong offset!");

// Function Weapon_LaserBeam.Weapon_LaserBeam_C.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct Weapon_LaserBeam_C_OnStateChanged final
{
public:
	bool                                          bIsFirstPerson;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Weapon_LaserBeam_C_OnStateChanged) == 0x000001, "Wrong alignment on Weapon_LaserBeam_C_OnStateChanged");
static_assert(sizeof(Weapon_LaserBeam_C_OnStateChanged) == 0x000002, "Wrong size on Weapon_LaserBeam_C_OnStateChanged");
static_assert(offsetof(Weapon_LaserBeam_C_OnStateChanged, bIsFirstPerson) == 0x000000, "Member 'Weapon_LaserBeam_C_OnStateChanged::bIsFirstPerson' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_OnStateChanged, NewState) == 0x000001, "Member 'Weapon_LaserBeam_C_OnStateChanged::NewState' has a wrong offset!");

// Function Weapon_LaserBeam.Weapon_LaserBeam_C.UpdateVFXs
// 0x0028 (0x0028 - 0x0000)
struct Weapon_LaserBeam_C_UpdateVFXs final
{
public:
	bool                                          IsFirstPerson;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MuzzleFlash_Laser_Base_C*           K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MuzzleFlash_Laser_Base_C*           K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base_1; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Weapon_LaserBeam_C_UpdateVFXs) == 0x000008, "Wrong alignment on Weapon_LaserBeam_C_UpdateVFXs");
static_assert(sizeof(Weapon_LaserBeam_C_UpdateVFXs) == 0x000028, "Wrong size on Weapon_LaserBeam_C_UpdateVFXs");
static_assert(offsetof(Weapon_LaserBeam_C_UpdateVFXs, IsFirstPerson) == 0x000000, "Member 'Weapon_LaserBeam_C_UpdateVFXs::IsFirstPerson' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_UpdateVFXs, NewState) == 0x000001, "Member 'Weapon_LaserBeam_C_UpdateVFXs::NewState' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_UpdateVFXs, K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base) == 0x000008, "Member 'Weapon_LaserBeam_C_UpdateVFXs::K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_UpdateVFXs, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Weapon_LaserBeam_C_UpdateVFXs::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_UpdateVFXs, K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base_1) == 0x000018, "Member 'Weapon_LaserBeam_C_UpdateVFXs::K2Node_DynamicCast_AsBP_Muzzle_Flash_Laser_Base_1' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_UpdateVFXs, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'Weapon_LaserBeam_C_UpdateVFXs::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function Weapon_LaserBeam.Weapon_LaserBeam_C.FakeTimeDilationSound
// 0x0058 (0x0058 - 0x0000)
struct Weapon_LaserBeam_C_FakeTimeDilationSound final
{
public:
	EFluxCapacitorStates                          GameState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0008(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable; // 0x001C(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0030(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1; // 0x0040(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Weapon_LaserBeam_C_FakeTimeDilationSound) == 0x000008, "Wrong alignment on Weapon_LaserBeam_C_FakeTimeDilationSound");
static_assert(sizeof(Weapon_LaserBeam_C_FakeTimeDilationSound) == 0x000058, "Wrong size on Weapon_LaserBeam_C_FakeTimeDilationSound");
static_assert(offsetof(Weapon_LaserBeam_C_FakeTimeDilationSound, GameState) == 0x000000, "Member 'Weapon_LaserBeam_C_FakeTimeDilationSound::GameState' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_FakeTimeDilationSound, Temp_struct_Variable) == 0x000008, "Member 'Weapon_LaserBeam_C_FakeTimeDilationSound::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_FakeTimeDilationSound, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'Weapon_LaserBeam_C_FakeTimeDilationSound::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_FakeTimeDilationSound, Temp_delegate_Variable) == 0x00001C, "Member 'Weapon_LaserBeam_C_FakeTimeDilationSound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_FakeTimeDilationSound, Temp_struct_Variable_1) == 0x000030, "Member 'Weapon_LaserBeam_C_FakeTimeDilationSound::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_FakeTimeDilationSound, Temp_delegate_Variable_1) == 0x000040, "Member 'Weapon_LaserBeam_C_FakeTimeDilationSound::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_FakeTimeDilationSound, CallFunc_PostAkEvent_ReturnValue) == 0x000050, "Member 'Weapon_LaserBeam_C_FakeTimeDilationSound::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Weapon_LaserBeam_C_FakeTimeDilationSound, CallFunc_PostAkEvent_ReturnValue_1) == 0x000054, "Member 'Weapon_LaserBeam_C_FakeTimeDilationSound::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");

}

