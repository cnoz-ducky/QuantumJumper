#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Crosshair_SMG

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Crosshair_SMG.Crosshair_SMG_C
// 0x0048 (0x0348 - 0x0300)
class UCrosshair_SMG_C final : public UTWLinearCrosshairWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HitAnim;                                           // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BottomLeft;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomRight;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Center;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopLeft;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopRight;                                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         MinCenterOffset;                                   // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCenterOffset;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TranslationFactor;                                 // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TranslationConstant;                               // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Crosshair_SMG(int32 EntryPoint);
	void ShowHitFeedback(const struct FLinearColor& HitColor);
	void UpdateCrosshairColor(int32 ColorIndex);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void SetImpactCrosshair(bool Show);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Crosshair_SMG_C">();
	}
	static class UCrosshair_SMG_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCrosshair_SMG_C>();
	}
};
static_assert(alignof(UCrosshair_SMG_C) == 0x000008, "Wrong alignment on UCrosshair_SMG_C");
static_assert(sizeof(UCrosshair_SMG_C) == 0x000348, "Wrong size on UCrosshair_SMG_C");
static_assert(offsetof(UCrosshair_SMG_C, UberGraphFrame) == 0x000300, "Member 'UCrosshair_SMG_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, HitAnim) == 0x000308, "Member 'UCrosshair_SMG_C::HitAnim' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, BottomLeft) == 0x000310, "Member 'UCrosshair_SMG_C::BottomLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, BottomRight) == 0x000318, "Member 'UCrosshair_SMG_C::BottomRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, Center) == 0x000320, "Member 'UCrosshair_SMG_C::Center' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, TopLeft) == 0x000328, "Member 'UCrosshair_SMG_C::TopLeft' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, TopRight) == 0x000330, "Member 'UCrosshair_SMG_C::TopRight' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, MinCenterOffset) == 0x000338, "Member 'UCrosshair_SMG_C::MinCenterOffset' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, MaxCenterOffset) == 0x00033C, "Member 'UCrosshair_SMG_C::MaxCenterOffset' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, TranslationFactor) == 0x000340, "Member 'UCrosshair_SMG_C::TranslationFactor' has a wrong offset!");
static_assert(offsetof(UCrosshair_SMG_C, TranslationConstant) == 0x000344, "Member 'UCrosshair_SMG_C::TranslationConstant' has a wrong offset!");

}

