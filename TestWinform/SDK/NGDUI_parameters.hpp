#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NGDUI

#include "Basic.hpp"

#include "NGDUI_structs.hpp"


namespace SDK::Params
{

// Function NGDUI.UserWidgetBase.CreateWidgetComponent
// 0x0010 (0x0010 - 0x0000)
struct UserWidgetBase_CreateWidgetComponent final
{
public:
	TSubclassOf<class UWidget>                    WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserWidgetBase_CreateWidgetComponent) == 0x000008, "Wrong alignment on UserWidgetBase_CreateWidgetComponent");
static_assert(sizeof(UserWidgetBase_CreateWidgetComponent) == 0x000010, "Wrong size on UserWidgetBase_CreateWidgetComponent");
static_assert(offsetof(UserWidgetBase_CreateWidgetComponent, WidgetClass) == 0x000000, "Member 'UserWidgetBase_CreateWidgetComponent::WidgetClass' has a wrong offset!");
static_assert(offsetof(UserWidgetBase_CreateWidgetComponent, ReturnValue) == 0x000008, "Member 'UserWidgetBase_CreateWidgetComponent::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.AddNewWidgetContainer
// 0x0018 (0x0018 - 0x0000)
struct NGDManagedLayer_AddNewWidgetContainer final
{
public:
	struct FWidgetContainerConfig                 NewWidgetContainerData;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_AddNewWidgetContainer) == 0x000008, "Wrong alignment on NGDManagedLayer_AddNewWidgetContainer");
static_assert(sizeof(NGDManagedLayer_AddNewWidgetContainer) == 0x000018, "Wrong size on NGDManagedLayer_AddNewWidgetContainer");
static_assert(offsetof(NGDManagedLayer_AddNewWidgetContainer, NewWidgetContainerData) == 0x000000, "Member 'NGDManagedLayer_AddNewWidgetContainer::NewWidgetContainerData' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.CreateHUDState
// 0x0010 (0x0010 - 0x0000)
struct NGDManagedLayer_CreateHUDState final
{
public:
	TSubclassOf<class UNGDHUDState>               StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDHUDState*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_CreateHUDState) == 0x000008, "Wrong alignment on NGDManagedLayer_CreateHUDState");
static_assert(sizeof(NGDManagedLayer_CreateHUDState) == 0x000010, "Wrong size on NGDManagedLayer_CreateHUDState");
static_assert(offsetof(NGDManagedLayer_CreateHUDState, StateClass) == 0x000000, "Member 'NGDManagedLayer_CreateHUDState::StateClass' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_CreateHUDState, ReturnValue) == 0x000008, "Member 'NGDManagedLayer_CreateHUDState::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.CreateWidgetContainer
// 0x0020 (0x0020 - 0x0000)
struct NGDManagedLayer_CreateWidgetContainer final
{
public:
	struct FWidgetContainerConfig                 WidgetData;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UNGDWidgetContainer*                    ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_CreateWidgetContainer) == 0x000008, "Wrong alignment on NGDManagedLayer_CreateWidgetContainer");
static_assert(sizeof(NGDManagedLayer_CreateWidgetContainer) == 0x000020, "Wrong size on NGDManagedLayer_CreateWidgetContainer");
static_assert(offsetof(NGDManagedLayer_CreateWidgetContainer, WidgetData) == 0x000000, "Member 'NGDManagedLayer_CreateWidgetContainer::WidgetData' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_CreateWidgetContainer, ReturnValue) == 0x000018, "Member 'NGDManagedLayer_CreateWidgetContainer::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.GetCurrentState
// 0x0008 (0x0008 - 0x0000)
struct NGDManagedLayer_GetCurrentState final
{
public:
	class UNGDHUDState*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_GetCurrentState) == 0x000008, "Wrong alignment on NGDManagedLayer_GetCurrentState");
static_assert(sizeof(NGDManagedLayer_GetCurrentState) == 0x000008, "Wrong size on NGDManagedLayer_GetCurrentState");
static_assert(offsetof(NGDManagedLayer_GetCurrentState, ReturnValue) == 0x000000, "Member 'NGDManagedLayer_GetCurrentState::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.GetLayerID
// 0x0004 (0x0004 - 0x0000)
struct NGDManagedLayer_GetLayerID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_GetLayerID) == 0x000004, "Wrong alignment on NGDManagedLayer_GetLayerID");
static_assert(sizeof(NGDManagedLayer_GetLayerID) == 0x000004, "Wrong size on NGDManagedLayer_GetLayerID");
static_assert(offsetof(NGDManagedLayer_GetLayerID, ReturnValue) == 0x000000, "Member 'NGDManagedLayer_GetLayerID::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.GetState
// 0x0028 (0x0028 - 0x0000)
struct NGDManagedLayer_GetState final
{
public:
	TSubclassOf<class UNGDHUDState>               StateClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDHUDState*                           ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_GetState) == 0x000008, "Wrong alignment on NGDManagedLayer_GetState");
static_assert(sizeof(NGDManagedLayer_GetState) == 0x000028, "Wrong size on NGDManagedLayer_GetState");
static_assert(offsetof(NGDManagedLayer_GetState, StateClass) == 0x000000, "Member 'NGDManagedLayer_GetState::StateClass' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_GetState, Offset) == 0x000008, "Member 'NGDManagedLayer_GetState::Offset' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_GetState, Name_0) == 0x000010, "Member 'NGDManagedLayer_GetState::Name_0' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_GetState, ReturnValue) == 0x000020, "Member 'NGDManagedLayer_GetState::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.GetZOrder
// 0x0004 (0x0004 - 0x0000)
struct NGDManagedLayer_GetZOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_GetZOrder) == 0x000004, "Wrong alignment on NGDManagedLayer_GetZOrder");
static_assert(sizeof(NGDManagedLayer_GetZOrder) == 0x000004, "Wrong size on NGDManagedLayer_GetZOrder");
static_assert(offsetof(NGDManagedLayer_GetZOrder, ReturnValue) == 0x000000, "Member 'NGDManagedLayer_GetZOrder::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.InitializeLayer
// 0x0008 (0x0008 - 0x0000)
struct NGDManagedLayer_InitializeLayer final
{
public:
	struct FLayerConfig                           InLayerConfig;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_InitializeLayer) == 0x000004, "Wrong alignment on NGDManagedLayer_InitializeLayer");
static_assert(sizeof(NGDManagedLayer_InitializeLayer) == 0x000008, "Wrong size on NGDManagedLayer_InitializeLayer");
static_assert(offsetof(NGDManagedLayer_InitializeLayer, InLayerConfig) == 0x000000, "Member 'NGDManagedLayer_InitializeLayer::InLayerConfig' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.PopStateByClass
// 0x0018 (0x0018 - 0x0000)
struct NGDManagedLayer_PopStateByClass final
{
public:
	TSubclassOf<class UNGDHUDState>               StateClassToPop;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Inclusive;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDHUDState*                           ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_PopStateByClass) == 0x000008, "Wrong alignment on NGDManagedLayer_PopStateByClass");
static_assert(sizeof(NGDManagedLayer_PopStateByClass) == 0x000018, "Wrong size on NGDManagedLayer_PopStateByClass");
static_assert(offsetof(NGDManagedLayer_PopStateByClass, StateClassToPop) == 0x000000, "Member 'NGDManagedLayer_PopStateByClass::StateClassToPop' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_PopStateByClass, Inclusive) == 0x000008, "Member 'NGDManagedLayer_PopStateByClass::Inclusive' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_PopStateByClass, ReturnValue) == 0x000010, "Member 'NGDManagedLayer_PopStateByClass::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.PopStateByName
// 0x0020 (0x0020 - 0x0000)
struct NGDManagedLayer_PopStateByName final
{
public:
	class FString                                 StateToPopName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Inclusive;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDHUDState*                           ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_PopStateByName) == 0x000008, "Wrong alignment on NGDManagedLayer_PopStateByName");
static_assert(sizeof(NGDManagedLayer_PopStateByName) == 0x000020, "Wrong size on NGDManagedLayer_PopStateByName");
static_assert(offsetof(NGDManagedLayer_PopStateByName, StateToPopName) == 0x000000, "Member 'NGDManagedLayer_PopStateByName::StateToPopName' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_PopStateByName, Inclusive) == 0x000010, "Member 'NGDManagedLayer_PopStateByName::Inclusive' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_PopStateByName, ReturnValue) == 0x000018, "Member 'NGDManagedLayer_PopStateByName::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.PushState
// 0x0010 (0x0010 - 0x0000)
struct NGDManagedLayer_PushState final
{
public:
	class UNGDHUDState*                           StateToPush;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDHUDState*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_PushState) == 0x000008, "Wrong alignment on NGDManagedLayer_PushState");
static_assert(sizeof(NGDManagedLayer_PushState) == 0x000010, "Wrong size on NGDManagedLayer_PushState");
static_assert(offsetof(NGDManagedLayer_PushState, StateToPush) == 0x000000, "Member 'NGDManagedLayer_PushState::StateToPush' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_PushState, ReturnValue) == 0x000008, "Member 'NGDManagedLayer_PushState::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.PushStateByClass
// 0x0010 (0x0010 - 0x0000)
struct NGDManagedLayer_PushStateByClass final
{
public:
	TSubclassOf<class UNGDHUDState>               StateClassToPush;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDHUDState*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_PushStateByClass) == 0x000008, "Wrong alignment on NGDManagedLayer_PushStateByClass");
static_assert(sizeof(NGDManagedLayer_PushStateByClass) == 0x000010, "Wrong size on NGDManagedLayer_PushStateByClass");
static_assert(offsetof(NGDManagedLayer_PushStateByClass, StateClassToPush) == 0x000000, "Member 'NGDManagedLayer_PushStateByClass::StateClassToPush' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_PushStateByClass, ReturnValue) == 0x000008, "Member 'NGDManagedLayer_PushStateByClass::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.RemoveWidget
// 0x0008 (0x0008 - 0x0000)
struct NGDManagedLayer_RemoveWidget final
{
public:
	TSubclassOf<class UNGDWidgetContainer>        WidgetClassToRemove;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_RemoveWidget) == 0x000008, "Wrong alignment on NGDManagedLayer_RemoveWidget");
static_assert(sizeof(NGDManagedLayer_RemoveWidget) == 0x000008, "Wrong size on NGDManagedLayer_RemoveWidget");
static_assert(offsetof(NGDManagedLayer_RemoveWidget, WidgetClassToRemove) == 0x000000, "Member 'NGDManagedLayer_RemoveWidget::WidgetClassToRemove' has a wrong offset!");

// Function NGDUI.NGDManagedLayer.GetWidget
// 0x0010 (0x0010 - 0x0000)
struct NGDManagedLayer_GetWidget final
{
public:
	TSubclassOf<class UNGDWidgetContainer>        WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDWidgetContainer*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDManagedLayer_GetWidget) == 0x000008, "Wrong alignment on NGDManagedLayer_GetWidget");
static_assert(sizeof(NGDManagedLayer_GetWidget) == 0x000010, "Wrong size on NGDManagedLayer_GetWidget");
static_assert(offsetof(NGDManagedLayer_GetWidget, WidgetClass) == 0x000000, "Member 'NGDManagedLayer_GetWidget::WidgetClass' has a wrong offset!");
static_assert(offsetof(NGDManagedLayer_GetWidget, ReturnValue) == 0x000008, "Member 'NGDManagedLayer_GetWidget::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDWidgetContainer.GetOwnerHUDState
// 0x0008 (0x0008 - 0x0000)
struct NGDWidgetContainer_GetOwnerHUDState final
{
public:
	class UNGDHUDState*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDWidgetContainer_GetOwnerHUDState) == 0x000008, "Wrong alignment on NGDWidgetContainer_GetOwnerHUDState");
static_assert(sizeof(NGDWidgetContainer_GetOwnerHUDState) == 0x000008, "Wrong size on NGDWidgetContainer_GetOwnerHUDState");
static_assert(offsetof(NGDWidgetContainer_GetOwnerHUDState, ReturnValue) == 0x000000, "Member 'NGDWidgetContainer_GetOwnerHUDState::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDHUDState.GetWidgetContainer
// 0x0010 (0x0010 - 0x0000)
struct NGDHUDState_GetWidgetContainer final
{
public:
	TSubclassOf<class UNGDWidgetContainer>        WidgetContainerClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDWidgetContainer*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUDState_GetWidgetContainer) == 0x000008, "Wrong alignment on NGDHUDState_GetWidgetContainer");
static_assert(sizeof(NGDHUDState_GetWidgetContainer) == 0x000010, "Wrong size on NGDHUDState_GetWidgetContainer");
static_assert(offsetof(NGDHUDState_GetWidgetContainer, WidgetContainerClass) == 0x000000, "Member 'NGDHUDState_GetWidgetContainer::WidgetContainerClass' has a wrong offset!");
static_assert(offsetof(NGDHUDState_GetWidgetContainer, ReturnValue) == 0x000008, "Member 'NGDHUDState_GetWidgetContainer::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDHUDState.IsMultipleStateAllowed
// 0x0001 (0x0001 - 0x0000)
struct NGDHUDState_IsMultipleStateAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDHUDState_IsMultipleStateAllowed) == 0x000001, "Wrong alignment on NGDHUDState_IsMultipleStateAllowed");
static_assert(sizeof(NGDHUDState_IsMultipleStateAllowed) == 0x000001, "Wrong size on NGDHUDState_IsMultipleStateAllowed");
static_assert(offsetof(NGDHUDState_IsMultipleStateAllowed, ReturnValue) == 0x000000, "Member 'NGDHUDState_IsMultipleStateAllowed::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDLayeredHUD.GetDefaultLayer
// 0x0010 (0x0010 - 0x0000)
struct NGDLayeredHUD_GetDefaultLayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDManagedLayer*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLayeredHUD_GetDefaultLayer) == 0x000008, "Wrong alignment on NGDLayeredHUD_GetDefaultLayer");
static_assert(sizeof(NGDLayeredHUD_GetDefaultLayer) == 0x000010, "Wrong size on NGDLayeredHUD_GetDefaultLayer");
static_assert(offsetof(NGDLayeredHUD_GetDefaultLayer, WorldContextObject) == 0x000000, "Member 'NGDLayeredHUD_GetDefaultLayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_GetDefaultLayer, ReturnValue) == 0x000008, "Member 'NGDLayeredHUD_GetDefaultLayer::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDLayeredHUD.GetLayer
// 0x0018 (0x0018 - 0x0000)
struct NGDLayeredHUD_GetLayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDManagedLayer*                       ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLayeredHUD_GetLayer) == 0x000008, "Wrong alignment on NGDLayeredHUD_GetLayer");
static_assert(sizeof(NGDLayeredHUD_GetLayer) == 0x000018, "Wrong size on NGDLayeredHUD_GetLayer");
static_assert(offsetof(NGDLayeredHUD_GetLayer, WorldContextObject) == 0x000000, "Member 'NGDLayeredHUD_GetLayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_GetLayer, LayerIndex) == 0x000008, "Member 'NGDLayeredHUD_GetLayer::LayerIndex' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_GetLayer, ReturnValue) == 0x000010, "Member 'NGDLayeredHUD_GetLayer::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDLayeredHUD.GetPopupLayer
// 0x0010 (0x0010 - 0x0000)
struct NGDLayeredHUD_GetPopupLayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDManagedLayer*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLayeredHUD_GetPopupLayer) == 0x000008, "Wrong alignment on NGDLayeredHUD_GetPopupLayer");
static_assert(sizeof(NGDLayeredHUD_GetPopupLayer) == 0x000010, "Wrong size on NGDLayeredHUD_GetPopupLayer");
static_assert(offsetof(NGDLayeredHUD_GetPopupLayer, WorldContextObject) == 0x000000, "Member 'NGDLayeredHUD_GetPopupLayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_GetPopupLayer, ReturnValue) == 0x000008, "Member 'NGDLayeredHUD_GetPopupLayer::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDLayeredHUD.GetWorldHUD
// 0x0010 (0x0010 - 0x0000)
struct NGDLayeredHUD_GetWorldHUD final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANGDLayeredHUD*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLayeredHUD_GetWorldHUD) == 0x000008, "Wrong alignment on NGDLayeredHUD_GetWorldHUD");
static_assert(sizeof(NGDLayeredHUD_GetWorldHUD) == 0x000010, "Wrong size on NGDLayeredHUD_GetWorldHUD");
static_assert(offsetof(NGDLayeredHUD_GetWorldHUD, WorldContextObject) == 0x000000, "Member 'NGDLayeredHUD_GetWorldHUD::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_GetWorldHUD, ReturnValue) == 0x000008, "Member 'NGDLayeredHUD_GetWorldHUD::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDLayeredHUD.ShowPopup
// 0x0048 (0x0048 - 0x0000)
struct NGDLayeredHUD_ShowPopup final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPopUpButtonSettings>           Buttons;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNGDPopupHUDState>          HUDState;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNGDGenericPopup*                       ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLayeredHUD_ShowPopup) == 0x000008, "Wrong alignment on NGDLayeredHUD_ShowPopup");
static_assert(sizeof(NGDLayeredHUD_ShowPopup) == 0x000048, "Wrong size on NGDLayeredHUD_ShowPopup");
static_assert(offsetof(NGDLayeredHUD_ShowPopup, WorldContextObject) == 0x000000, "Member 'NGDLayeredHUD_ShowPopup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_ShowPopup, Title) == 0x000008, "Member 'NGDLayeredHUD_ShowPopup::Title' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_ShowPopup, Buttons) == 0x000020, "Member 'NGDLayeredHUD_ShowPopup::Buttons' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_ShowPopup, Priority) == 0x000030, "Member 'NGDLayeredHUD_ShowPopup::Priority' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_ShowPopup, HUDState) == 0x000038, "Member 'NGDLayeredHUD_ShowPopup::HUDState' has a wrong offset!");
static_assert(offsetof(NGDLayeredHUD_ShowPopup, ReturnValue) == 0x000040, "Member 'NGDLayeredHUD_ShowPopup::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDLayeredHUD.OnConfirm
// 0x0001 (0x0001 - 0x0000)
struct NGDLayeredHUD_OnConfirm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLayeredHUD_OnConfirm) == 0x000001, "Wrong alignment on NGDLayeredHUD_OnConfirm");
static_assert(sizeof(NGDLayeredHUD_OnConfirm) == 0x000001, "Wrong size on NGDLayeredHUD_OnConfirm");
static_assert(offsetof(NGDLayeredHUD_OnConfirm, ReturnValue) == 0x000000, "Member 'NGDLayeredHUD_OnConfirm::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDLayeredHUD.OnEscape
// 0x0001 (0x0001 - 0x0000)
struct NGDLayeredHUD_OnEscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLayeredHUD_OnEscape) == 0x000001, "Wrong alignment on NGDLayeredHUD_OnEscape");
static_assert(sizeof(NGDLayeredHUD_OnEscape) == 0x000001, "Wrong size on NGDLayeredHUD_OnEscape");
static_assert(offsetof(NGDLayeredHUD_OnEscape, ReturnValue) == 0x000000, "Member 'NGDLayeredHUD_OnEscape::ReturnValue' has a wrong offset!");

// Function NGDUI.NGDLayeredHUD.IsHUDInitialized
// 0x0001 (0x0001 - 0x0000)
struct NGDLayeredHUD_IsHUDInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDLayeredHUD_IsHUDInitialized) == 0x000001, "Wrong alignment on NGDLayeredHUD_IsHUDInitialized");
static_assert(sizeof(NGDLayeredHUD_IsHUDInitialized) == 0x000001, "Wrong size on NGDLayeredHUD_IsHUDInitialized");
static_assert(offsetof(NGDLayeredHUD_IsHUDInitialized, ReturnValue) == 0x000000, "Member 'NGDLayeredHUD_IsHUDInitialized::ReturnValue' has a wrong offset!");

}

