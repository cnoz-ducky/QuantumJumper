#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BaseMoveComponentType

#include "Basic.hpp"

#include "BaseMoveComponentType_classes.hpp"
#include "BaseMoveComponentType_parameters.hpp"


namespace SDK
{

// Function BaseMoveComponentType.BaseMoveComponentType_C.ExecuteUbergraph_BaseMoveComponentType
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBaseMoveComponentType_C::ExecuteUbergraph_BaseMoveComponentType(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseMoveComponentType_C", "ExecuteUbergraph_BaseMoveComponentType");

	Params::BaseMoveComponentType_C_ExecuteUbergraph_BaseMoveComponentType Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseMoveComponentType.BaseMoveComponentType_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBaseMoveComponentType_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseMoveComponentType_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseMoveComponentType.BaseMoveComponentType_C.GetRelativePosition
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBaseMoveComponentType_C::GetRelativePosition(struct FVector* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseMoveComponentType_C", "GetRelativePosition");

	Params::BaseMoveComponentType_C_GetRelativePosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}

}

