#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Passive_UnsyncedDisruptionsVision

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Passive_UnsyncedDisruptionsVision.BP_Passive_UnsyncedDisruptionsVision_C
// 0x0068 (0x00D8 - 0x0070)
class UBP_Passive_UnsyncedDisruptionsVision_C final : public UTWAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0070(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<class ATimeWatchCharacter*, class ATWCharacterGhostBP_C*> CharacterGhosts;                  // 0x0078(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         GhostLifeSpanOnDead;                               // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GhostLifeSpanOnFire;                               // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugPrintSwitch;                                  // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          isCharacter;                                       // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          shouldTriggerNormalResume;                         // 0x00D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Passive_UnsyncedDisruptionsVision(int32 EntryPoint);
	void OnGhostDisappear(class ATWCharacterGhost* TWGhacrGhost, class ATimeWatchCharacter* TWMimicCharacter);
	void OnHealthRestored(class ATimeWatchCharacter* Character, float NewHealth);
	void OnGenericObserverEvent(class UTimeWatchEvent* Event);
	void OnDestroyParadox(class ATWCharacterGhost* TWGhacrGhost, class ATimeWatchCharacter* TWMimicCharacter);
	void BP_OnPause();
	void BP_OnResume();
	void OnFirearmUsed(class ATimeWatchCharacter* TWChar, class AFirearm* Firearm);
	void BP_OnPreActivated(class UTWGameplayAbilitySystem* InTWAbilitySystem, class UTWAbilitiesComponent* Caster_AbilityComp);
	void BP_OnFinished();
	void BP_OnReExecuted(class UTWGameplayAbilitySystem* InTWAbilitySystem, const struct FTWAbilityCustomDataHandle& AbilityDataHandle, const bool bShouldTriggerLogic);
	void BP_Update(float DeltaSeconds);
	struct FTWAbilityCustomDataHandle MakeAbilityCustomDataHandle(class UTWAbilitiesComponent* Caster_AbilityComp);
	void Create_Ghost_Character(class ATimeWatchCharacter* TW_Character, bool shouldModifyLifeSpan, float DesiredLifespan, class ATWCharacterGhostBP_C** TW_Ghost_Charactere);
	void UpdateGhostForCharacter(class ATimeWatchCharacter* TW_Character, float DesiredLifespan);
	void DestroyParadox(class ATimeWatchCharacter* TW_Character);
	void CreateOrRefreshGhost(class ATWCharacterBP_C* Character, bool shouldModifyLifeSpan, float DesiredLifespan, class ATWCharacterGhostBP_C** Ghost_Character, bool* Existed_Before);
	void DestroyAllExistingGhosts();
	class ATimeWatchGameState* GetGameState();
	void Unbind_Events();
	void BindEvents();
	void DebugPrint(const class FString& DebugType);
	void PrepareRemainingGhostsForRewind();
	void UnbindSingleCharacterEvents(class ATimeWatchCharacter* CharacterToUnbind);
	void UnbindGameObserverEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Passive_UnsyncedDisruptionsVision_C">();
	}
	static class UBP_Passive_UnsyncedDisruptionsVision_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Passive_UnsyncedDisruptionsVision_C>();
	}
};
static_assert(alignof(UBP_Passive_UnsyncedDisruptionsVision_C) == 0x000008, "Wrong alignment on UBP_Passive_UnsyncedDisruptionsVision_C");
static_assert(sizeof(UBP_Passive_UnsyncedDisruptionsVision_C) == 0x0000D8, "Wrong size on UBP_Passive_UnsyncedDisruptionsVision_C");
static_assert(offsetof(UBP_Passive_UnsyncedDisruptionsVision_C, UberGraphFrame) == 0x000070, "Member 'UBP_Passive_UnsyncedDisruptionsVision_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Passive_UnsyncedDisruptionsVision_C, CharacterGhosts) == 0x000078, "Member 'UBP_Passive_UnsyncedDisruptionsVision_C::CharacterGhosts' has a wrong offset!");
static_assert(offsetof(UBP_Passive_UnsyncedDisruptionsVision_C, GhostLifeSpanOnDead) == 0x0000C8, "Member 'UBP_Passive_UnsyncedDisruptionsVision_C::GhostLifeSpanOnDead' has a wrong offset!");
static_assert(offsetof(UBP_Passive_UnsyncedDisruptionsVision_C, GhostLifeSpanOnFire) == 0x0000CC, "Member 'UBP_Passive_UnsyncedDisruptionsVision_C::GhostLifeSpanOnFire' has a wrong offset!");
static_assert(offsetof(UBP_Passive_UnsyncedDisruptionsVision_C, DebugPrintSwitch) == 0x0000D0, "Member 'UBP_Passive_UnsyncedDisruptionsVision_C::DebugPrintSwitch' has a wrong offset!");
static_assert(offsetof(UBP_Passive_UnsyncedDisruptionsVision_C, isCharacter) == 0x0000D1, "Member 'UBP_Passive_UnsyncedDisruptionsVision_C::isCharacter' has a wrong offset!");
static_assert(offsetof(UBP_Passive_UnsyncedDisruptionsVision_C, shouldTriggerNormalResume) == 0x0000D2, "Member 'UBP_Passive_UnsyncedDisruptionsVision_C::shouldTriggerNormalResume' has a wrong offset!");

}

