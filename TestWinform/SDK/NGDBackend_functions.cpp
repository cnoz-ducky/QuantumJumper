#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NGDBackend

#include "Basic.hpp"

#include "NGDBackend_classes.hpp"
#include "NGDBackend_parameters.hpp"


namespace SDK
{

// Function NGDBackend.NGDBackendAccount.AwsLatencyFake
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    TargetRegion                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::AwsLatencyFake(const class FString& TargetRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "AwsLatencyFake");

	Params::NGDBackendAccount_AwsLatencyFake Parms{};

	Parms.TargetRegion = std::move(TargetRegion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.AwsLatencyPrint
// (Final, Exec, Native, Public)

void UNGDBackendAccount::AwsLatencyPrint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "AwsLatencyPrint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.CheckGameSessionStatusResponse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    BackendResult                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENGDBackendGameSessionResult            ExpectedResult                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNGDBackendAccount::CheckGameSessionStatusResponse(const class FString& BackendResult, ENGDBackendGameSessionResult ExpectedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "CheckGameSessionStatusResponse");

	Params::NGDBackendAccount_CheckGameSessionStatusResponse Parms{};

	Parms.BackendResult = std::move(BackendResult);
	Parms.ExpectedResult = ExpectedResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.CheckMatchmakingStatusResponse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    BackendResult                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENGDBackendMatchmakingResult            ExpectedResult                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNGDBackendAccount::CheckMatchmakingStatusResponse(const class FString& BackendResult, ENGDBackendMatchmakingResult ExpectedResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "CheckMatchmakingStatusResponse");

	Params::NGDBackendAccount_CheckMatchmakingStatusResponse Parms{};

	Parms.BackendResult = std::move(BackendResult);
	Parms.ExpectedResult = ExpectedResult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.GameSessionPlacementAutoconnectStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PlacementId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::GameSessionPlacementAutoconnectStart(const class FString& PlacementId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GameSessionPlacementAutoconnectStart");

	Params::NGDBackendAccount_GameSessionPlacementAutoconnectStart Parms{};

	Parms.PlacementId = std::move(PlacementId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.GameSessionPlacementAutoconnectStop
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::GameSessionPlacementAutoconnectStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GameSessionPlacementAutoconnectStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.GameSessionPlacementPoll
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::GameSessionPlacementPoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GameSessionPlacementPoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.GameSessionPlacementStop
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::GameSessionPlacementStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GameSessionPlacementStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.GetLeaderboardTournament
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::GetLeaderboardTournament()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetLeaderboardTournament");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.GetPlayerNews
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::GetPlayerNews()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetPlayerNews");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.GetScoreTournament
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::GetScoreTournament()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetScoreTournament");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.JoinTournament
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AttemptIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::JoinTournament(int32 AttemptIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "JoinTournament");

	Params::NGDBackendAccount_JoinTournament Parms{};

	Parms.AttemptIndex = AttemptIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingAutoconnectStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RuleName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ClientGameVersion                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LastPlayedMap                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::MatchmakingAutoconnectStart(const class FString& RuleName, const class FString& ClientGameVersion, const class FString& LastPlayedMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingAutoconnectStart");

	Params::NGDBackendAccount_MatchmakingAutoconnectStart Parms{};

	Parms.RuleName = std::move(RuleName);
	Parms.ClientGameVersion = std::move(ClientGameVersion);
	Parms.LastPlayedMap = std::move(LastPlayedMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingAutoconnectStartWithLobby
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    QueueName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LobbyID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ClientGameVersion                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LastPlayedMap                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LobbyRuleName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchData                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::MatchmakingAutoconnectStartWithLobby(const class FString& QueueName, const class FString& LobbyID, const class FString& ClientGameVersion, const class FString& LastPlayedMap, const class FString& LobbyRuleName, const class FString& MatchData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingAutoconnectStartWithLobby");

	Params::NGDBackendAccount_MatchmakingAutoconnectStartWithLobby Parms{};

	Parms.QueueName = std::move(QueueName);
	Parms.LobbyID = std::move(LobbyID);
	Parms.ClientGameVersion = std::move(ClientGameVersion);
	Parms.LastPlayedMap = std::move(LastPlayedMap);
	Parms.LobbyRuleName = std::move(LobbyRuleName);
	Parms.MatchData = std::move(MatchData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingAutoconnectStartWithTicket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MatchmakingTicketId                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::MatchmakingAutoconnectStartWithTicket(const class FString& MatchmakingTicketId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingAutoconnectStartWithTicket");

	Params::NGDBackendAccount_MatchmakingAutoconnectStartWithTicket Parms{};

	Parms.MatchmakingTicketId = std::move(MatchmakingTicketId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingAutoconnectStop
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::MatchmakingAutoconnectStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingAutoconnectStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingAutoconnectStopWithLobby
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::MatchmakingAutoconnectStopWithLobby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingAutoconnectStopWithLobby");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingLobbyPoll
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::MatchmakingLobbyPoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingLobbyPoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingPoll
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::MatchmakingPoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingPoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    RuleName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ClientGameVersion                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LastPlayedMap                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::MatchmakingStart(const class FString& RuleName, const class FString& ClientGameVersion, const class FString& LastPlayedMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingStart");

	Params::NGDBackendAccount_MatchmakingStart Parms{};

	Parms.RuleName = std::move(RuleName);
	Parms.ClientGameVersion = std::move(ClientGameVersion);
	Parms.LastPlayedMap = std::move(LastPlayedMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.MatchmakingStop
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::MatchmakingStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "MatchmakingStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.RequestDailyStore
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::RequestDailyStore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "RequestDailyStore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.RequestDailyStoreBuy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SKU                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::RequestDailyStoreBuy(const class FString& SKU)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "RequestDailyStoreBuy");

	Params::NGDBackendAccount_RequestDailyStoreBuy Parms{};

	Parms.SKU = std::move(SKU);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.RequestGlobalLeaderboards
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    BoardType                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    MatchType                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TeamType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Period                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::RequestGlobalLeaderboards(int32 Start, int32 Stop, const class FString& BoardType, const class FString& MatchType, const class FString& TeamType, const class FString& Period)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "RequestGlobalLeaderboards");

	Params::NGDBackendAccount_RequestGlobalLeaderboards Parms{};

	Parms.Start = Start;
	Parms.Stop = Stop;
	Parms.BoardType = std::move(BoardType);
	Parms.MatchType = std::move(MatchType);
	Parms.TeamType = std::move(TeamType);
	Parms.Period = std::move(Period);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.RequestQuarksBundles
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::RequestQuarksBundles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "RequestQuarksBundles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.SetImpostorServerAddress
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    NewImpostorServerAddress                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendAccount::SetImpostorServerAddress(const class FString& NewImpostorServerAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "SetImpostorServerAddress");

	Params::NGDBackendAccount_SetImpostorServerAddress Parms{};

	Parms.NewImpostorServerAddress = std::move(NewImpostorServerAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.UpdatePlayerData
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::UpdatePlayerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "UpdatePlayerData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.UpdatePlayerInventory
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendAccount::UpdatePlayerInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "UpdatePlayerInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendAccount.GetAccountTicket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNGDBackendAccount::GetAccountTicket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetAccountTicket");

	Params::NGDBackendAccount_GetAccountTicket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.GetPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNGDBackendAccount::GetPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetPlayerName");

	Params::NGDBackendAccount_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.GetSavedUserName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNGDBackendAccount::GetSavedUserName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetSavedUserName");

	Params::NGDBackendAccount_GetSavedUserName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.GetUserAvatar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UNGDBackendAccount::GetUserAvatar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetUserAvatar");

	Params::NGDBackendAccount_GetUserAvatar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.GetUserId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNGDBackendAccount::GetUserId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetUserId");

	Params::NGDBackendAccount_GetUserId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.GetWalletBalance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    Currency                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNGDBackendAccount::GetWalletBalance(const class FString& Currency) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "GetWalletBalance");

	Params::NGDBackendAccount_GetWalletBalance Parms{};

	Parms.Currency = std::move(Currency);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.IsLoggedIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNGDBackendAccount::IsLoggedIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "IsLoggedIn");

	Params::NGDBackendAccount_IsLoggedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendAccount.IsMatchmaking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNGDBackendAccount::IsMatchmaking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendAccount", "IsMatchmaking");

	Params::NGDBackendAccount_IsMatchmaking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NGDBackend.NGDBackendLobby.AcceptTeamInvite
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendLobby::AcceptTeamInvite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendLobby", "AcceptTeamInvite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendLobby.ExitLobby
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendLobby::ExitLobby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendLobby", "ExitLobby");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendLobby.InvitePlayerToTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendLobby::InvitePlayerToTeam(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendLobby", "InvitePlayerToTeam");

	Params::NGDBackendLobby_InvitePlayerToTeam Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendLobby.StartGame
// (Final, Native, Public, BlueprintCallable)

void UNGDBackendLobby::StartGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendLobby", "StartGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendLobby.StartLobby
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNGDBackendLobby::StartLobby(const class FString& UserName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendLobby", "StartLobby");

	Params::NGDBackendLobby_StartLobby Parms{};

	Parms.UserName = std::move(UserName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NGDBackend.NGDBackendLobby.IsTeamOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNGDBackendLobby::IsTeamOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NGDBackendLobby", "IsTeamOwner");

	Params::NGDBackendLobby_IsTeamOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

