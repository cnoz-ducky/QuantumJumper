#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapAR

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MagicLeapAR.ELuminARLineTraceChannel
// NumValues: 0x0007
enum class ELuminARLineTraceChannel : uint8
{
	None                                     = 0,
	FeaturePoint                             = 1,
	InfinitePlane                            = 2,
	PlaneUsingExtent                         = 4,
	PlaneUsingBoundaryPolygon                = 8,
	FeaturePointWithSurfaceNormal            = 16,
	ELuminARLineTraceChannel_MAX             = 17,
};

// Enum MagicLeapAR.ELuminARTrackingState
// NumValues: 0x0004
enum class ELuminARTrackingState : uint8
{
	Tracking                                 = 0,
	NotTracking                              = 1,
	StoppedTracking                          = 2,
	ELuminARTrackingState_MAX                = 3,
};

// Enum MagicLeapAR.ELuminARFunctionStatus
// NumValues: 0x0009
enum class ELuminARFunctionStatus : uint8
{
	Success                                  = 0,
	Fatal                                    = 1,
	SessionPaused                            = 2,
	NotTracking                              = 3,
	ResourceExhausted                        = 4,
	NotAvailable                             = 5,
	InvalidType                              = 6,
	Unknown                                  = 7,
	ELuminARFunctionStatus_MAX               = 8,
};

// Enum MagicLeapAR.ELuminARAvailability
// NumValues: 0x0003
enum class ELuminARAvailability : uint8
{
	UnknownError                             = 0,
	SupportedInstalled                       = 200,
	ELuminARAvailability_MAX                 = 201,
};

// ScriptStruct MagicLeapAR.LuminARLightEstimate
// 0x0014 (0x0014 - 0x0000)
struct FLuminARLightEstimate final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PixelIntensity;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RGBScaleFactor;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLuminARLightEstimate) == 0x000004, "Wrong alignment on FLuminARLightEstimate");
static_assert(sizeof(FLuminARLightEstimate) == 0x000014, "Wrong size on FLuminARLightEstimate");
static_assert(offsetof(FLuminARLightEstimate, bIsValid) == 0x000000, "Member 'FLuminARLightEstimate::bIsValid' has a wrong offset!");
static_assert(offsetof(FLuminARLightEstimate, PixelIntensity) == 0x000004, "Member 'FLuminARLightEstimate::PixelIntensity' has a wrong offset!");
static_assert(offsetof(FLuminARLightEstimate, RGBScaleFactor) == 0x000008, "Member 'FLuminARLightEstimate::RGBScaleFactor' has a wrong offset!");

}

