#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ReplayFluxPlayerControllerBP

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ReplayFluxPlayerControllerBP.ReplayFluxPlayerControllerBP_C
// 0x0020 (0x0A18 - 0x09F8)
class AReplayFluxPlayerControllerBP_C final : public AFluxPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x09F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<float>                                 ReplaySpeeds;                                      // 0x0A00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         CurrentSpeed;                                      // 0x0A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          paused;                                            // 0x0A14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsGameInputEnabled;                                // 0x0A15(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ReplayFluxPlayerControllerBP(int32 EntryPoint);
	void BP_OnGameInitialized();
	void InpActEvt_Replay_ToggleHud_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Replay_Pause_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Replay_Speed__K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Replay_SpeedNormal_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Replay_Speed__K2Node_InputActionEvent_4(const struct FKey& Key);
	void SetControlMenuVisibility(ESlateVisibility InVisibility);
	class UNGDWidgetContainer* GetMenuWidgetContainer();
	bool ShouldAllowReplayActions();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ReplayFluxPlayerControllerBP_C">();
	}
	static class AReplayFluxPlayerControllerBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReplayFluxPlayerControllerBP_C>();
	}
};
static_assert(alignof(AReplayFluxPlayerControllerBP_C) == 0x000008, "Wrong alignment on AReplayFluxPlayerControllerBP_C");
static_assert(sizeof(AReplayFluxPlayerControllerBP_C) == 0x000A18, "Wrong size on AReplayFluxPlayerControllerBP_C");
static_assert(offsetof(AReplayFluxPlayerControllerBP_C, UberGraphFrame) == 0x0009F8, "Member 'AReplayFluxPlayerControllerBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AReplayFluxPlayerControllerBP_C, ReplaySpeeds) == 0x000A00, "Member 'AReplayFluxPlayerControllerBP_C::ReplaySpeeds' has a wrong offset!");
static_assert(offsetof(AReplayFluxPlayerControllerBP_C, CurrentSpeed) == 0x000A10, "Member 'AReplayFluxPlayerControllerBP_C::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(AReplayFluxPlayerControllerBP_C, paused) == 0x000A14, "Member 'AReplayFluxPlayerControllerBP_C::paused' has a wrong offset!");
static_assert(offsetof(AReplayFluxPlayerControllerBP_C, IsGameInputEnabled) == 0x000A15, "Member 'AReplayFluxPlayerControllerBP_C::IsGameInputEnabled' has a wrong offset!");

}

