#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TimeWatch

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "TimeWatch_structs.hpp"
#include "Engine_structs.hpp"
#include "NGDOnlineService_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "NGDBackend_structs.hpp"
#include "UnrealProject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AkAudio_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function TimeWatch.TWItemDataAsset.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct TWItemDataAsset_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWItemDataAsset_GetDisplayName) == 0x000008, "Wrong alignment on TWItemDataAsset_GetDisplayName");
static_assert(sizeof(TWItemDataAsset_GetDisplayName) == 0x000018, "Wrong size on TWItemDataAsset_GetDisplayName");
static_assert(offsetof(TWItemDataAsset_GetDisplayName, ReturnValue) == 0x000000, "Member 'TWItemDataAsset_GetDisplayName::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilityTargetActor.GenericAxisChanged
// 0x0004 (0x0004 - 0x0000)
struct TWGameplayAbilityTargetActor_GenericAxisChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayAbilityTargetActor_GenericAxisChanged) == 0x000004, "Wrong alignment on TWGameplayAbilityTargetActor_GenericAxisChanged");
static_assert(sizeof(TWGameplayAbilityTargetActor_GenericAxisChanged) == 0x000004, "Wrong size on TWGameplayAbilityTargetActor_GenericAxisChanged");
static_assert(offsetof(TWGameplayAbilityTargetActor_GenericAxisChanged, NewValue) == 0x000000, "Member 'TWGameplayAbilityTargetActor_GenericAxisChanged::NewValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilityTargetActor.StartTargeting
// 0x0008 (0x0008 - 0x0000)
struct TWGameplayAbilityTargetActor_StartTargeting final
{
public:
	class UTWAbility*                             Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayAbilityTargetActor_StartTargeting) == 0x000008, "Wrong alignment on TWGameplayAbilityTargetActor_StartTargeting");
static_assert(sizeof(TWGameplayAbilityTargetActor_StartTargeting) == 0x000008, "Wrong size on TWGameplayAbilityTargetActor_StartTargeting");
static_assert(offsetof(TWGameplayAbilityTargetActor_StartTargeting, Ability) == 0x000000, "Member 'TWGameplayAbilityTargetActor_StartTargeting::Ability' has a wrong offset!");

// Function TimeWatch.Actuate.Animate
// 0x0018 (0x0018 - 0x0000)
struct Actuate_Animate final
{
public:
	float                                         InAnimDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InInitialState;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFinalState;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTween*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Actuate_Animate) == 0x000008, "Wrong alignment on Actuate_Animate");
static_assert(sizeof(Actuate_Animate) == 0x000018, "Wrong size on Actuate_Animate");
static_assert(offsetof(Actuate_Animate, InAnimDuration) == 0x000000, "Member 'Actuate_Animate::InAnimDuration' has a wrong offset!");
static_assert(offsetof(Actuate_Animate, InInitialState) == 0x000004, "Member 'Actuate_Animate::InInitialState' has a wrong offset!");
static_assert(offsetof(Actuate_Animate, InFinalState) == 0x000008, "Member 'Actuate_Animate::InFinalState' has a wrong offset!");
static_assert(offsetof(Actuate_Animate, ReturnValue) == 0x000010, "Member 'Actuate_Animate::ReturnValue' has a wrong offset!");

// Function TimeWatch.AutomaticTurretBase.OnShootTriggerOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct AutomaticTurretBase_OnShootTriggerOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticTurretBase_OnShootTriggerOverlapBegin) == 0x000008, "Wrong alignment on AutomaticTurretBase_OnShootTriggerOverlapBegin");
static_assert(sizeof(AutomaticTurretBase_OnShootTriggerOverlapBegin) == 0x0000A8, "Wrong size on AutomaticTurretBase_OnShootTriggerOverlapBegin");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapBegin, OverlappedComp) == 0x000000, "Member 'AutomaticTurretBase_OnShootTriggerOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapBegin, OtherActor) == 0x000008, "Member 'AutomaticTurretBase_OnShootTriggerOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapBegin, OtherComp) == 0x000010, "Member 'AutomaticTurretBase_OnShootTriggerOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'AutomaticTurretBase_OnShootTriggerOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapBegin, bFromSweep) == 0x00001C, "Member 'AutomaticTurretBase_OnShootTriggerOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapBegin, SweepResult) == 0x000020, "Member 'AutomaticTurretBase_OnShootTriggerOverlapBegin::SweepResult' has a wrong offset!");

// Function TimeWatch.AutomaticTurretBase.OnShootTriggerOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct AutomaticTurretBase_OnShootTriggerOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomaticTurretBase_OnShootTriggerOverlapEnd) == 0x000008, "Wrong alignment on AutomaticTurretBase_OnShootTriggerOverlapEnd");
static_assert(sizeof(AutomaticTurretBase_OnShootTriggerOverlapEnd) == 0x000020, "Wrong size on AutomaticTurretBase_OnShootTriggerOverlapEnd");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapEnd, OverlappedComp) == 0x000000, "Member 'AutomaticTurretBase_OnShootTriggerOverlapEnd::OverlappedComp' has a wrong offset!");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapEnd, OtherActor) == 0x000008, "Member 'AutomaticTurretBase_OnShootTriggerOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapEnd, OtherComp) == 0x000010, "Member 'AutomaticTurretBase_OnShootTriggerOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(AutomaticTurretBase_OnShootTriggerOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'AutomaticTurretBase_OnShootTriggerOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function TimeWatch.AutomaticTurretBase.GetRelativeCooldown
// 0x0004 (0x0004 - 0x0000)
struct AutomaticTurretBase_GetRelativeCooldown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticTurretBase_GetRelativeCooldown) == 0x000004, "Wrong alignment on AutomaticTurretBase_GetRelativeCooldown");
static_assert(sizeof(AutomaticTurretBase_GetRelativeCooldown) == 0x000004, "Wrong size on AutomaticTurretBase_GetRelativeCooldown");
static_assert(offsetof(AutomaticTurretBase_GetRelativeCooldown, ReturnValue) == 0x000000, "Member 'AutomaticTurretBase_GetRelativeCooldown::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameModeBase.OnSeamlessTravelPlayerReady
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameModeBase_OnSeamlessTravelPlayerReady final
{
public:
	class AFluxPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameModeBase_OnSeamlessTravelPlayerReady) == 0x000008, "Wrong alignment on TimeWatchGameModeBase_OnSeamlessTravelPlayerReady");
static_assert(sizeof(TimeWatchGameModeBase_OnSeamlessTravelPlayerReady) == 0x000008, "Wrong size on TimeWatchGameModeBase_OnSeamlessTravelPlayerReady");
static_assert(offsetof(TimeWatchGameModeBase_OnSeamlessTravelPlayerReady, Player) == 0x000000, "Member 'TimeWatchGameModeBase_OnSeamlessTravelPlayerReady::Player' has a wrong offset!");

// Function TimeWatch.TimeWatchGameMode.GetScoreIncrement
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameMode_GetScoreIncrement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameMode_GetScoreIncrement) == 0x000004, "Wrong alignment on TimeWatchGameMode_GetScoreIncrement");
static_assert(sizeof(TimeWatchGameMode_GetScoreIncrement) == 0x000004, "Wrong size on TimeWatchGameMode_GetScoreIncrement");
static_assert(offsetof(TimeWatchGameMode_GetScoreIncrement, ReturnValue) == 0x000000, "Member 'TimeWatchGameMode_GetScoreIncrement::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameMode.MatchResultUpdateCompleted
// 0x0028 (0x0028 - 0x0000)
struct TimeWatchGameMode_MatchResultUpdateCompleted final
{
public:
	class FString                                 MatchResultJsonString;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameMode_MatchResultUpdateCompleted) == 0x000008, "Wrong alignment on TimeWatchGameMode_MatchResultUpdateCompleted");
static_assert(sizeof(TimeWatchGameMode_MatchResultUpdateCompleted) == 0x000028, "Wrong size on TimeWatchGameMode_MatchResultUpdateCompleted");
static_assert(offsetof(TimeWatchGameMode_MatchResultUpdateCompleted, MatchResultJsonString) == 0x000000, "Member 'TimeWatchGameMode_MatchResultUpdateCompleted::MatchResultJsonString' has a wrong offset!");
static_assert(offsetof(TimeWatchGameMode_MatchResultUpdateCompleted, bWasSuccessful) == 0x000010, "Member 'TimeWatchGameMode_MatchResultUpdateCompleted::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(TimeWatchGameMode_MatchResultUpdateCompleted, ErrorString) == 0x000018, "Member 'TimeWatchGameMode_MatchResultUpdateCompleted::ErrorString' has a wrong offset!");

// Function TimeWatch.TimeWatchGameMode.ProcessTWEvent
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameMode_ProcessTWEvent final
{
public:
	class UTimeWatchEvent*                        Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameMode_ProcessTWEvent) == 0x000008, "Wrong alignment on TimeWatchGameMode_ProcessTWEvent");
static_assert(sizeof(TimeWatchGameMode_ProcessTWEvent) == 0x000008, "Wrong size on TimeWatchGameMode_ProcessTWEvent");
static_assert(offsetof(TimeWatchGameMode_ProcessTWEvent, Event) == 0x000000, "Member 'TimeWatchGameMode_ProcessTWEvent::Event' has a wrong offset!");

// Function TimeWatch.TimeWatchGameMode.SetupNewPlayer
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameMode_SetupNewPlayer final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameMode_SetupNewPlayer) == 0x000008, "Wrong alignment on TimeWatchGameMode_SetupNewPlayer");
static_assert(sizeof(TimeWatchGameMode_SetupNewPlayer) == 0x000008, "Wrong size on TimeWatchGameMode_SetupNewPlayer");
static_assert(offsetof(TimeWatchGameMode_SetupNewPlayer, NewPlayer) == 0x000000, "Member 'TimeWatchGameMode_SetupNewPlayer::NewPlayer' has a wrong offset!");

// Function TimeWatch.TimeWatchGameMode.SwitchToSpectatorMode
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameMode_SwitchToSpectatorMode final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameMode_SwitchToSpectatorMode) == 0x000008, "Wrong alignment on TimeWatchGameMode_SwitchToSpectatorMode");
static_assert(sizeof(TimeWatchGameMode_SwitchToSpectatorMode) == 0x000008, "Wrong size on TimeWatchGameMode_SwitchToSpectatorMode");
static_assert(offsetof(TimeWatchGameMode_SwitchToSpectatorMode, Player) == 0x000000, "Member 'TimeWatchGameMode_SwitchToSpectatorMode::Player' has a wrong offset!");

// Function TimeWatch.TimeWatchGameMode.GetScoringTeamID
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameMode_GetScoringTeamID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameMode_GetScoringTeamID) == 0x000004, "Wrong alignment on TimeWatchGameMode_GetScoringTeamID");
static_assert(sizeof(TimeWatchGameMode_GetScoringTeamID) == 0x000004, "Wrong size on TimeWatchGameMode_GetScoringTeamID");
static_assert(offsetof(TimeWatchGameMode_GetScoringTeamID, ReturnValue) == 0x000000, "Member 'TimeWatchGameMode_GetScoringTeamID::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameMode.GetTWGameState
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameMode_GetTWGameState final
{
public:
	class ATimeWatchGameState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameMode_GetTWGameState) == 0x000008, "Wrong alignment on TimeWatchGameMode_GetTWGameState");
static_assert(sizeof(TimeWatchGameMode_GetTWGameState) == 0x000008, "Wrong size on TimeWatchGameMode_GetTWGameState");
static_assert(offsetof(TimeWatchGameMode_GetTWGameState, ReturnValue) == 0x000000, "Member 'TimeWatchGameMode_GetTWGameState::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.AbilityCustomDataFromTargetActors
// 0x0030 (0x0030 - 0x0000)
struct TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors final
{
public:
	TArray<class AActor*>                         TargetActors;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomDataHandle             ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors");
static_assert(sizeof(TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors) == 0x000030, "Wrong size on TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors");
static_assert(offsetof(TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors, TargetActors) == 0x000000, "Member 'TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors::TargetActors' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors, ReturnValue) == 0x000010, "Member 'TWGameplayAbilitySystem_AbilityCustomDataFromTargetActors::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.AbilityCustomDataFromVectors
// 0x0030 (0x0030 - 0x0000)
struct TWGameplayAbilitySystem_AbilityCustomDataFromVectors final
{
public:
	TArray<struct FVector>                        InVectors;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomDataHandle             ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayAbilitySystem_AbilityCustomDataFromVectors) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_AbilityCustomDataFromVectors");
static_assert(sizeof(TWGameplayAbilitySystem_AbilityCustomDataFromVectors) == 0x000030, "Wrong size on TWGameplayAbilitySystem_AbilityCustomDataFromVectors");
static_assert(offsetof(TWGameplayAbilitySystem_AbilityCustomDataFromVectors, InVectors) == 0x000000, "Member 'TWGameplayAbilitySystem_AbilityCustomDataFromVectors::InVectors' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_AbilityCustomDataFromVectors, ReturnValue) == 0x000010, "Member 'TWGameplayAbilitySystem_AbilityCustomDataFromVectors::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.CopyDataToHandle_TargetActors
// 0x0060 (0x0060 - 0x0000)
struct TWGameplayAbilitySystem_CopyDataToHandle_TargetActors final
{
public:
	struct FTWAbilityCustomDataHandle             InDataHandle;                                      // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomDataHandle             OutDataHandle;                                     // 0x0020(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomData_TargetActors      InData;                                            // 0x0040(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayAbilitySystem_CopyDataToHandle_TargetActors) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_CopyDataToHandle_TargetActors");
static_assert(sizeof(TWGameplayAbilitySystem_CopyDataToHandle_TargetActors) == 0x000060, "Wrong size on TWGameplayAbilitySystem_CopyDataToHandle_TargetActors");
static_assert(offsetof(TWGameplayAbilitySystem_CopyDataToHandle_TargetActors, InDataHandle) == 0x000000, "Member 'TWGameplayAbilitySystem_CopyDataToHandle_TargetActors::InDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_CopyDataToHandle_TargetActors, OutDataHandle) == 0x000020, "Member 'TWGameplayAbilitySystem_CopyDataToHandle_TargetActors::OutDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_CopyDataToHandle_TargetActors, InData) == 0x000040, "Member 'TWGameplayAbilitySystem_CopyDataToHandle_TargetActors::InData' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_CopyDataToHandle_TargetActors, ReturnValue) == 0x000058, "Member 'TWGameplayAbilitySystem_CopyDataToHandle_TargetActors::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.CopyDataToHandle_Vectors
// 0x0060 (0x0060 - 0x0000)
struct TWGameplayAbilitySystem_CopyDataToHandle_Vectors final
{
public:
	struct FTWAbilityCustomDataHandle             InDataHandle;                                      // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomDataHandle             OutDataHandle;                                     // 0x0020(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomData_Vectors           InData;                                            // 0x0040(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayAbilitySystem_CopyDataToHandle_Vectors) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_CopyDataToHandle_Vectors");
static_assert(sizeof(TWGameplayAbilitySystem_CopyDataToHandle_Vectors) == 0x000060, "Wrong size on TWGameplayAbilitySystem_CopyDataToHandle_Vectors");
static_assert(offsetof(TWGameplayAbilitySystem_CopyDataToHandle_Vectors, InDataHandle) == 0x000000, "Member 'TWGameplayAbilitySystem_CopyDataToHandle_Vectors::InDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_CopyDataToHandle_Vectors, OutDataHandle) == 0x000020, "Member 'TWGameplayAbilitySystem_CopyDataToHandle_Vectors::OutDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_CopyDataToHandle_Vectors, InData) == 0x000040, "Member 'TWGameplayAbilitySystem_CopyDataToHandle_Vectors::InData' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_CopyDataToHandle_Vectors, ReturnValue) == 0x000058, "Member 'TWGameplayAbilitySystem_CopyDataToHandle_Vectors::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.GetDataCopyFromHandle_TargetActors
// 0x0038 (0x0038 - 0x0000)
struct TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors final
{
public:
	struct FTWAbilityCustomDataHandle             InDataHandle;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTWAbilityCustomData_TargetActors> OutData;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors");
static_assert(sizeof(TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors) == 0x000038, "Wrong size on TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors");
static_assert(offsetof(TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors, InDataHandle) == 0x000000, "Member 'TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors::InDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors, OutData) == 0x000020, "Member 'TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors::OutData' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors, ReturnValue) == 0x000030, "Member 'TWGameplayAbilitySystem_GetDataCopyFromHandle_TargetActors::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.GetDataCopyFromHandle_Vectors
// 0x0038 (0x0038 - 0x0000)
struct TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors final
{
public:
	struct FTWAbilityCustomDataHandle             InDataHandle;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTWAbilityCustomData_Vectors>   OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors");
static_assert(sizeof(TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors) == 0x000038, "Wrong size on TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors");
static_assert(offsetof(TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors, InDataHandle) == 0x000000, "Member 'TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors::InDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors, OutData) == 0x000020, "Member 'TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors::OutData' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors, ReturnValue) == 0x000030, "Member 'TWGameplayAbilitySystem_GetDataCopyFromHandle_Vectors::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.ShouldTriggerLogic
// 0x0038 (0x0038 - 0x0000)
struct TWGameplayAbilitySystem_ShouldTriggerLogic final
{
public:
	class UTWGameplayAbilitySystem*               TWAbilitySystem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATimeWatchCharacter*                    CasterAvatar;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomDataHandle             AbilityDataHandle;                                 // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayAbilitySystem_ShouldTriggerLogic) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_ShouldTriggerLogic");
static_assert(sizeof(TWGameplayAbilitySystem_ShouldTriggerLogic) == 0x000038, "Wrong size on TWGameplayAbilitySystem_ShouldTriggerLogic");
static_assert(offsetof(TWGameplayAbilitySystem_ShouldTriggerLogic, TWAbilitySystem) == 0x000000, "Member 'TWGameplayAbilitySystem_ShouldTriggerLogic::TWAbilitySystem' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_ShouldTriggerLogic, CasterAvatar) == 0x000008, "Member 'TWGameplayAbilitySystem_ShouldTriggerLogic::CasterAvatar' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_ShouldTriggerLogic, AbilityDataHandle) == 0x000010, "Member 'TWGameplayAbilitySystem_ShouldTriggerLogic::AbilityDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_ShouldTriggerLogic, ReturnValue) == 0x000030, "Member 'TWGameplayAbilitySystem_ShouldTriggerLogic::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.GetAbilityExecutionData
// 0x0048 (0x0048 - 0x0000)
struct TWGameplayAbilitySystem_GetAbilityExecutionData final
{
public:
	struct FTWAbilityCustomDataHandle             AbilityDataHandle;                                 // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTWAbilityExecutionData                ReturnValue;                                       // 0x0020(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayAbilitySystem_GetAbilityExecutionData) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_GetAbilityExecutionData");
static_assert(sizeof(TWGameplayAbilitySystem_GetAbilityExecutionData) == 0x000048, "Wrong size on TWGameplayAbilitySystem_GetAbilityExecutionData");
static_assert(offsetof(TWGameplayAbilitySystem_GetAbilityExecutionData, AbilityDataHandle) == 0x000000, "Member 'TWGameplayAbilitySystem_GetAbilityExecutionData::AbilityDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_GetAbilityExecutionData, ReturnValue) == 0x000020, "Member 'TWGameplayAbilitySystem_GetAbilityExecutionData::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilitySystem.GetAbilityTargets
// 0x0030 (0x0030 - 0x0000)
struct TWGameplayAbilitySystem_GetAbilityTargets final
{
public:
	struct FTWAbilityCustomDataHandle             AbilityDataHandle;                                 // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayAbilitySystem_GetAbilityTargets) == 0x000008, "Wrong alignment on TWGameplayAbilitySystem_GetAbilityTargets");
static_assert(sizeof(TWGameplayAbilitySystem_GetAbilityTargets) == 0x000030, "Wrong size on TWGameplayAbilitySystem_GetAbilityTargets");
static_assert(offsetof(TWGameplayAbilitySystem_GetAbilityTargets, AbilityDataHandle) == 0x000000, "Member 'TWGameplayAbilitySystem_GetAbilityTargets::AbilityDataHandle' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilitySystem_GetAbilityTargets, ReturnValue) == 0x000020, "Member 'TWGameplayAbilitySystem_GetAbilityTargets::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.GetCrosshairClass
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_GetCrosshairClass final
{
public:
	TSubclassOf<class UNGDCrosshairWidget>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_GetCrosshairClass) == 0x000008, "Wrong alignment on TimeWatchHUD_GetCrosshairClass");
static_assert(sizeof(TimeWatchHUD_GetCrosshairClass) == 0x000008, "Wrong size on TimeWatchHUD_GetCrosshairClass");
static_assert(offsetof(TimeWatchHUD_GetCrosshairClass, ReturnValue) == 0x000000, "Member 'TimeWatchHUD_GetCrosshairClass::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.GetCrosshairWidget
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_GetCrosshairWidget final
{
public:
	class UNGDCrosshairWidget*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_GetCrosshairWidget) == 0x000008, "Wrong alignment on TimeWatchHUD_GetCrosshairWidget");
static_assert(sizeof(TimeWatchHUD_GetCrosshairWidget) == 0x000008, "Wrong size on TimeWatchHUD_GetCrosshairWidget");
static_assert(offsetof(TimeWatchHUD_GetCrosshairWidget, ReturnValue) == 0x000000, "Member 'TimeWatchHUD_GetCrosshairWidget::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.OnChatMessagePostRequested
// 0x0020 (0x0020 - 0x0000)
struct TimeWatchHUD_OnChatMessagePostRequested final
{
public:
	class FText                                   TextMessage;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EChatChannel                                  Channel;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchHUD_OnChatMessagePostRequested) == 0x000008, "Wrong alignment on TimeWatchHUD_OnChatMessagePostRequested");
static_assert(sizeof(TimeWatchHUD_OnChatMessagePostRequested) == 0x000020, "Wrong size on TimeWatchHUD_OnChatMessagePostRequested");
static_assert(offsetof(TimeWatchHUD_OnChatMessagePostRequested, TextMessage) == 0x000000, "Member 'TimeWatchHUD_OnChatMessagePostRequested::TextMessage' has a wrong offset!");
static_assert(offsetof(TimeWatchHUD_OnChatMessagePostRequested, Channel) == 0x000018, "Member 'TimeWatchHUD_OnChatMessagePostRequested::Channel' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_OnEnemyKilled final
{
public:
	class ATimeWatchCharacter*                    Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_OnEnemyKilled) == 0x000008, "Wrong alignment on TimeWatchHUD_OnEnemyKilled");
static_assert(sizeof(TimeWatchHUD_OnEnemyKilled) == 0x000008, "Wrong size on TimeWatchHUD_OnEnemyKilled");
static_assert(offsetof(TimeWatchHUD_OnEnemyKilled, Victim) == 0x000000, "Member 'TimeWatchHUD_OnEnemyKilled::Victim' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.OnHittingCharacter
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchHUD_OnHittingCharacter final
{
public:
	class AActor*                                 InHittedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InHittedBone;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMeleeHit;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchHUD_OnHittingCharacter) == 0x000008, "Wrong alignment on TimeWatchHUD_OnHittingCharacter");
static_assert(sizeof(TimeWatchHUD_OnHittingCharacter) == 0x000018, "Wrong size on TimeWatchHUD_OnHittingCharacter");
static_assert(offsetof(TimeWatchHUD_OnHittingCharacter, InHittedActor) == 0x000000, "Member 'TimeWatchHUD_OnHittingCharacter::InHittedActor' has a wrong offset!");
static_assert(offsetof(TimeWatchHUD_OnHittingCharacter, InHittedBone) == 0x000008, "Member 'TimeWatchHUD_OnHittingCharacter::InHittedBone' has a wrong offset!");
static_assert(offsetof(TimeWatchHUD_OnHittingCharacter, bIsMeleeHit) == 0x000010, "Member 'TimeWatchHUD_OnHittingCharacter::bIsMeleeHit' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.OnPlayerHit
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchHUD_OnPlayerHit final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCritical;                                        // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchHUD_OnPlayerHit) == 0x000004, "Wrong alignment on TimeWatchHUD_OnPlayerHit");
static_assert(sizeof(TimeWatchHUD_OnPlayerHit) == 0x000010, "Wrong size on TimeWatchHUD_OnPlayerHit");
static_assert(offsetof(TimeWatchHUD_OnPlayerHit, HitDirection) == 0x000000, "Member 'TimeWatchHUD_OnPlayerHit::HitDirection' has a wrong offset!");
static_assert(offsetof(TimeWatchHUD_OnPlayerHit, IsCritical) == 0x00000C, "Member 'TimeWatchHUD_OnPlayerHit::IsCritical' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TimeWatchHUD_OnStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_OnStateChanged) == 0x000001, "Wrong alignment on TimeWatchHUD_OnStateChanged");
static_assert(sizeof(TimeWatchHUD_OnStateChanged) == 0x000002, "Wrong size on TimeWatchHUD_OnStateChanged");
static_assert(offsetof(TimeWatchHUD_OnStateChanged, OldState) == 0x000000, "Member 'TimeWatchHUD_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TimeWatchHUD_OnStateChanged, NewState) == 0x000001, "Member 'TimeWatchHUD_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.OnStatePresented
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_OnStatePresented final
{
public:
	class UNGDHUDState*                           PresentedState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_OnStatePresented) == 0x000008, "Wrong alignment on TimeWatchHUD_OnStatePresented");
static_assert(sizeof(TimeWatchHUD_OnStatePresented) == 0x000008, "Wrong size on TimeWatchHUD_OnStatePresented");
static_assert(offsetof(TimeWatchHUD_OnStatePresented, PresentedState) == 0x000000, "Member 'TimeWatchHUD_OnStatePresented::PresentedState' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.OnTeamScoredPoint
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchHUD_OnTeamScoredPoint final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_OnTeamScoredPoint) == 0x000004, "Wrong alignment on TimeWatchHUD_OnTeamScoredPoint");
static_assert(sizeof(TimeWatchHUD_OnTeamScoredPoint) == 0x000004, "Wrong size on TimeWatchHUD_OnTeamScoredPoint");
static_assert(offsetof(TimeWatchHUD_OnTeamScoredPoint, TeamId) == 0x000000, "Member 'TimeWatchHUD_OnTeamScoredPoint::TeamId' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.OnTWExplosion
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_OnTWExplosion final
{
public:
	class AActor*                                 InOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_OnTWExplosion) == 0x000008, "Wrong alignment on TimeWatchHUD_OnTWExplosion");
static_assert(sizeof(TimeWatchHUD_OnTWExplosion) == 0x000008, "Wrong size on TimeWatchHUD_OnTWExplosion");
static_assert(offsetof(TimeWatchHUD_OnTWExplosion, InOwner) == 0x000000, "Member 'TimeWatchHUD_OnTWExplosion::InOwner' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.RegisterTWADSEvents
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_RegisterTWADSEvents final
{
public:
	class ATimeWatchCharacter*                    TWCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_RegisterTWADSEvents) == 0x000008, "Wrong alignment on TimeWatchHUD_RegisterTWADSEvents");
static_assert(sizeof(TimeWatchHUD_RegisterTWADSEvents) == 0x000008, "Wrong size on TimeWatchHUD_RegisterTWADSEvents");
static_assert(offsetof(TimeWatchHUD_RegisterTWADSEvents, TWCharacter) == 0x000000, "Member 'TimeWatchHUD_RegisterTWADSEvents::TWCharacter' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.SetCrosshair
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_SetCrosshair final
{
public:
	TSubclassOf<class UNGDCrosshairWidget>        WeaponCrosshairClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_SetCrosshair) == 0x000008, "Wrong alignment on TimeWatchHUD_SetCrosshair");
static_assert(sizeof(TimeWatchHUD_SetCrosshair) == 0x000008, "Wrong size on TimeWatchHUD_SetCrosshair");
static_assert(offsetof(TimeWatchHUD_SetCrosshair, WeaponCrosshairClass) == 0x000000, "Member 'TimeWatchHUD_SetCrosshair::WeaponCrosshairClass' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.SetOthersWantsRematch
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchHUD_SetOthersWantsRematch final
{
public:
	bool                                          bOtherWantsRematch;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_SetOthersWantsRematch) == 0x000001, "Wrong alignment on TimeWatchHUD_SetOthersWantsRematch");
static_assert(sizeof(TimeWatchHUD_SetOthersWantsRematch) == 0x000001, "Wrong size on TimeWatchHUD_SetOthersWantsRematch");
static_assert(offsetof(TimeWatchHUD_SetOthersWantsRematch, bOtherWantsRematch) == 0x000000, "Member 'TimeWatchHUD_SetOthersWantsRematch::bOtherWantsRematch' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_GetCurrentWeapon final
{
public:
	class ATemporalWeapon*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_GetCurrentWeapon) == 0x000008, "Wrong alignment on TimeWatchHUD_GetCurrentWeapon");
static_assert(sizeof(TimeWatchHUD_GetCurrentWeapon) == 0x000008, "Wrong size on TimeWatchHUD_GetCurrentWeapon");
static_assert(offsetof(TimeWatchHUD_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'TimeWatchHUD_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.GetTWCharacter
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_GetTWCharacter final
{
public:
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_GetTWCharacter) == 0x000008, "Wrong alignment on TimeWatchHUD_GetTWCharacter");
static_assert(sizeof(TimeWatchHUD_GetTWCharacter) == 0x000008, "Wrong size on TimeWatchHUD_GetTWCharacter");
static_assert(offsetof(TimeWatchHUD_GetTWCharacter, ReturnValue) == 0x000000, "Member 'TimeWatchHUD_GetTWCharacter::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchHUD.GetTWGameState
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchHUD_GetTWGameState final
{
public:
	class ATimeWatchGameState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchHUD_GetTWGameState) == 0x000008, "Wrong alignment on TimeWatchHUD_GetTWGameState");
static_assert(sizeof(TimeWatchHUD_GetTWGameState) == 0x000008, "Wrong size on TimeWatchHUD_GetTWGameState");
static_assert(offsetof(TimeWatchHUD_GetTWGameState, ReturnValue) == 0x000000, "Member 'TimeWatchHUD_GetTWGameState::ReturnValue' has a wrong offset!");

// Function TimeWatch.ChatWidget.OnMessageEntered
// 0x0020 (0x0020 - 0x0000)
struct ChatWidget_OnMessageEntered final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChatWidget_OnMessageEntered) == 0x000008, "Wrong alignment on ChatWidget_OnMessageEntered");
static_assert(sizeof(ChatWidget_OnMessageEntered) == 0x000020, "Wrong size on ChatWidget_OnMessageEntered");
static_assert(offsetof(ChatWidget_OnMessageEntered, Text) == 0x000000, "Member 'ChatWidget_OnMessageEntered::Text' has a wrong offset!");
static_assert(offsetof(ChatWidget_OnMessageEntered, CommitMethod) == 0x000018, "Member 'ChatWidget_OnMessageEntered::CommitMethod' has a wrong offset!");

// Function TimeWatch.DailyBoostItemWidget.SetIsItemCompleted
// 0x0014 (0x0014 - 0x0000)
struct DailyBoostItemWidget_SetIsItemCompleted final
{
public:
	bool                                          IsCompleted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WidgetColor;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyBoostItemWidget_SetIsItemCompleted) == 0x000004, "Wrong alignment on DailyBoostItemWidget_SetIsItemCompleted");
static_assert(sizeof(DailyBoostItemWidget_SetIsItemCompleted) == 0x000014, "Wrong size on DailyBoostItemWidget_SetIsItemCompleted");
static_assert(offsetof(DailyBoostItemWidget_SetIsItemCompleted, IsCompleted) == 0x000000, "Member 'DailyBoostItemWidget_SetIsItemCompleted::IsCompleted' has a wrong offset!");
static_assert(offsetof(DailyBoostItemWidget_SetIsItemCompleted, WidgetColor) == 0x000004, "Member 'DailyBoostItemWidget_SetIsItemCompleted::WidgetColor' has a wrong offset!");

// Function TimeWatch.DailyBoostItemWidget.SetItemInfo
// 0x0010 (0x0010 - 0x0000)
struct DailyBoostItemWidget_SetItemInfo final
{
public:
	class FString                                 ItemInfo;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyBoostItemWidget_SetItemInfo) == 0x000008, "Wrong alignment on DailyBoostItemWidget_SetItemInfo");
static_assert(sizeof(DailyBoostItemWidget_SetItemInfo) == 0x000010, "Wrong size on DailyBoostItemWidget_SetItemInfo");
static_assert(offsetof(DailyBoostItemWidget_SetItemInfo, ItemInfo) == 0x000000, "Member 'DailyBoostItemWidget_SetItemInfo::ItemInfo' has a wrong offset!");

// Function TimeWatch.TWChallengeObserver.LoadChallenges
// 0x0018 (0x0018 - 0x0000)
struct TWChallengeObserver_LoadChallenges final
{
public:
	class UTWChallengeEventData*                  DataAssetChallenge;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTWChallengeEventInfo>          NonDataAssetChallenge;                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWChallengeObserver_LoadChallenges) == 0x000008, "Wrong alignment on TWChallengeObserver_LoadChallenges");
static_assert(sizeof(TWChallengeObserver_LoadChallenges) == 0x000018, "Wrong size on TWChallengeObserver_LoadChallenges");
static_assert(offsetof(TWChallengeObserver_LoadChallenges, DataAssetChallenge) == 0x000000, "Member 'TWChallengeObserver_LoadChallenges::DataAssetChallenge' has a wrong offset!");
static_assert(offsetof(TWChallengeObserver_LoadChallenges, NonDataAssetChallenge) == 0x000008, "Member 'TWChallengeObserver_LoadChallenges::NonDataAssetChallenge' has a wrong offset!");

// Function TimeWatch.TWChallengeObserver.OnChallengeProgress
// 0x0020 (0x0020 - 0x0000)
struct TWChallengeObserver_OnChallengeProgress final
{
public:
	class UTWChallengeEvent*                      ChallengeEvent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTWChallengeRule                       Rule;                                              // 0x0008(0x0014)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWChallengeObserver_OnChallengeProgress) == 0x000008, "Wrong alignment on TWChallengeObserver_OnChallengeProgress");
static_assert(sizeof(TWChallengeObserver_OnChallengeProgress) == 0x000020, "Wrong size on TWChallengeObserver_OnChallengeProgress");
static_assert(offsetof(TWChallengeObserver_OnChallengeProgress, ChallengeEvent) == 0x000000, "Member 'TWChallengeObserver_OnChallengeProgress::ChallengeEvent' has a wrong offset!");
static_assert(offsetof(TWChallengeObserver_OnChallengeProgress, Rule) == 0x000008, "Member 'TWChallengeObserver_OnChallengeProgress::Rule' has a wrong offset!");

// Function TimeWatch.TWChallengeObserver.UnloadChallenges
// 0x0018 (0x0018 - 0x0000)
struct TWChallengeObserver_UnloadChallenges final
{
public:
	class UTWChallengeEventData*                  DataAssetChallenge;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTWChallengeEventInfo>          NonDataAssetChallenge;                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWChallengeObserver_UnloadChallenges) == 0x000008, "Wrong alignment on TWChallengeObserver_UnloadChallenges");
static_assert(sizeof(TWChallengeObserver_UnloadChallenges) == 0x000018, "Wrong size on TWChallengeObserver_UnloadChallenges");
static_assert(offsetof(TWChallengeObserver_UnloadChallenges, DataAssetChallenge) == 0x000000, "Member 'TWChallengeObserver_UnloadChallenges::DataAssetChallenge' has a wrong offset!");
static_assert(offsetof(TWChallengeObserver_UnloadChallenges, NonDataAssetChallenge) == 0x000008, "Member 'TWChallengeObserver_UnloadChallenges::NonDataAssetChallenge' has a wrong offset!");

// Function TimeWatch.TWChallengeObserver.UpdateChallenge
// 0x0010 (0x0010 - 0x0000)
struct TWChallengeObserver_UpdateChallenge final
{
public:
	class FName                                   RuleName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RuleCount;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteOnCompleted;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWChallengeObserver_UpdateChallenge) == 0x000004, "Wrong alignment on TWChallengeObserver_UpdateChallenge");
static_assert(sizeof(TWChallengeObserver_UpdateChallenge) == 0x000010, "Wrong size on TWChallengeObserver_UpdateChallenge");
static_assert(offsetof(TWChallengeObserver_UpdateChallenge, RuleName) == 0x000000, "Member 'TWChallengeObserver_UpdateChallenge::RuleName' has a wrong offset!");
static_assert(offsetof(TWChallengeObserver_UpdateChallenge, RuleCount) == 0x000008, "Member 'TWChallengeObserver_UpdateChallenge::RuleCount' has a wrong offset!");
static_assert(offsetof(TWChallengeObserver_UpdateChallenge, bDeleteOnCompleted) == 0x00000C, "Member 'TWChallengeObserver_UpdateChallenge::bDeleteOnCompleted' has a wrong offset!");

// Function TimeWatch.CaptureCompassWidget.GetCompassName
// 0x0018 (0x0018 - 0x0000)
struct CaptureCompassWidget_GetCompassName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CaptureCompassWidget_GetCompassName) == 0x000008, "Wrong alignment on CaptureCompassWidget_GetCompassName");
static_assert(sizeof(CaptureCompassWidget_GetCompassName) == 0x000018, "Wrong size on CaptureCompassWidget_GetCompassName");
static_assert(offsetof(CaptureCompassWidget_GetCompassName, ReturnValue) == 0x000000, "Member 'CaptureCompassWidget_GetCompassName::ReturnValue' has a wrong offset!");

// Function TimeWatch.CaptureCompassWidget.OnStateChanged
// 0x0014 (0x0014 - 0x0000)
struct CaptureCompassWidget_OnStateChanged final
{
public:
	ECaptureState                                 NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CaptureCompassWidget_OnStateChanged) == 0x000004, "Wrong alignment on CaptureCompassWidget_OnStateChanged");
static_assert(sizeof(CaptureCompassWidget_OnStateChanged) == 0x000014, "Wrong size on CaptureCompassWidget_OnStateChanged");
static_assert(offsetof(CaptureCompassWidget_OnStateChanged, NewState) == 0x000000, "Member 'CaptureCompassWidget_OnStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(CaptureCompassWidget_OnStateChanged, Color) == 0x000004, "Member 'CaptureCompassWidget_OnStateChanged::Color' has a wrong offset!");

// Function TimeWatch.CaptureCompassWidget.ShowCapturePointStroke
// 0x0001 (0x0001 - 0x0000)
struct CaptureCompassWidget_ShowCapturePointStroke final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CaptureCompassWidget_ShowCapturePointStroke) == 0x000001, "Wrong alignment on CaptureCompassWidget_ShowCapturePointStroke");
static_assert(sizeof(CaptureCompassWidget_ShowCapturePointStroke) == 0x000001, "Wrong size on CaptureCompassWidget_ShowCapturePointStroke");
static_assert(offsetof(CaptureCompassWidget_ShowCapturePointStroke, ReturnValue) == 0x000000, "Member 'CaptureCompassWidget_ShowCapturePointStroke::ReturnValue' has a wrong offset!");

// Function TimeWatch.CaptureCompassWidget.ShowCaptureStateText
// 0x0001 (0x0001 - 0x0000)
struct CaptureCompassWidget_ShowCaptureStateText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CaptureCompassWidget_ShowCaptureStateText) == 0x000001, "Wrong alignment on CaptureCompassWidget_ShowCaptureStateText");
static_assert(sizeof(CaptureCompassWidget_ShowCaptureStateText) == 0x000001, "Wrong size on CaptureCompassWidget_ShowCaptureStateText");
static_assert(offsetof(CaptureCompassWidget_ShowCaptureStateText, ReturnValue) == 0x000000, "Member 'CaptureCompassWidget_ShowCaptureStateText::ReturnValue' has a wrong offset!");

// Function TimeWatch.ScoreAreaVolume.HasCharacterInside
// 0x0001 (0x0001 - 0x0000)
struct ScoreAreaVolume_HasCharacterInside final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreAreaVolume_HasCharacterInside) == 0x000001, "Wrong alignment on ScoreAreaVolume_HasCharacterInside");
static_assert(sizeof(ScoreAreaVolume_HasCharacterInside) == 0x000001, "Wrong size on ScoreAreaVolume_HasCharacterInside");
static_assert(offsetof(ScoreAreaVolume_HasCharacterInside, ReturnValue) == 0x000000, "Member 'ScoreAreaVolume_HasCharacterInside::ReturnValue' has a wrong offset!");

// Function TimeWatch.ScoreAreaVolume.IsInside
// 0x0010 (0x0010 - 0x0000)
struct ScoreAreaVolume_IsInside final
{
public:
	class ATimeWatchCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScoreAreaVolume_IsInside) == 0x000008, "Wrong alignment on ScoreAreaVolume_IsInside");
static_assert(sizeof(ScoreAreaVolume_IsInside) == 0x000010, "Wrong size on ScoreAreaVolume_IsInside");
static_assert(offsetof(ScoreAreaVolume_IsInside, Character) == 0x000000, "Member 'ScoreAreaVolume_IsInside::Character' has a wrong offset!");
static_assert(offsetof(ScoreAreaVolume_IsInside, ReturnValue) == 0x000008, "Member 'ScoreAreaVolume_IsInside::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWCharacterButtonWidget.OnCharacterButtonFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct TWCharacterButtonWidget_OnCharacterButtonFocusChanged final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterButtonWidget_OnCharacterButtonFocusChanged) == 0x000001, "Wrong alignment on TWCharacterButtonWidget_OnCharacterButtonFocusChanged");
static_assert(sizeof(TWCharacterButtonWidget_OnCharacterButtonFocusChanged) == 0x000001, "Wrong size on TWCharacterButtonWidget_OnCharacterButtonFocusChanged");
static_assert(offsetof(TWCharacterButtonWidget_OnCharacterButtonFocusChanged, IsFocused) == 0x000000, "Member 'TWCharacterButtonWidget_OnCharacterButtonFocusChanged::IsFocused' has a wrong offset!");

// Function TimeWatch.TWCloneTimelineWidget.SetDeathIcon_BP
// 0x0004 (0x0004 - 0x0000)
struct TWCloneTimelineWidget_SetDeathIcon_BP final
{
public:
	float                                         TimeValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneTimelineWidget_SetDeathIcon_BP) == 0x000004, "Wrong alignment on TWCloneTimelineWidget_SetDeathIcon_BP");
static_assert(sizeof(TWCloneTimelineWidget_SetDeathIcon_BP) == 0x000004, "Wrong size on TWCloneTimelineWidget_SetDeathIcon_BP");
static_assert(offsetof(TWCloneTimelineWidget_SetDeathIcon_BP, TimeValue) == 0x000000, "Member 'TWCloneTimelineWidget_SetDeathIcon_BP::TimeValue' has a wrong offset!");

// Function TimeWatch.TWCloneTimelineWidget.GetCloneIndex
// 0x0004 (0x0004 - 0x0000)
struct TWCloneTimelineWidget_GetCloneIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneTimelineWidget_GetCloneIndex) == 0x000004, "Wrong alignment on TWCloneTimelineWidget_GetCloneIndex");
static_assert(sizeof(TWCloneTimelineWidget_GetCloneIndex) == 0x000004, "Wrong size on TWCloneTimelineWidget_GetCloneIndex");
static_assert(offsetof(TWCloneTimelineWidget_GetCloneIndex, ReturnValue) == 0x000000, "Member 'TWCloneTimelineWidget_GetCloneIndex::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWCloneTimelineWidget.GetOwnerClone
// 0x0008 (0x0008 - 0x0000)
struct TWCloneTimelineWidget_GetOwnerClone final
{
public:
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneTimelineWidget_GetOwnerClone) == 0x000008, "Wrong alignment on TWCloneTimelineWidget_GetOwnerClone");
static_assert(sizeof(TWCloneTimelineWidget_GetOwnerClone) == 0x000008, "Wrong size on TWCloneTimelineWidget_GetOwnerClone");
static_assert(offsetof(TWCloneTimelineWidget_GetOwnerClone, ReturnValue) == 0x000000, "Member 'TWCloneTimelineWidget_GetOwnerClone::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWCloneTimelineWidget.GetTWGameState
// 0x0008 (0x0008 - 0x0000)
struct TWCloneTimelineWidget_GetTWGameState final
{
public:
	class ATimeWatchGameState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneTimelineWidget_GetTWGameState) == 0x000008, "Wrong alignment on TWCloneTimelineWidget_GetTWGameState");
static_assert(sizeof(TWCloneTimelineWidget_GetTWGameState) == 0x000008, "Wrong size on TWCloneTimelineWidget_GetTWGameState");
static_assert(offsetof(TWCloneTimelineWidget_GetTWGameState, ReturnValue) == 0x000000, "Member 'TWCloneTimelineWidget_GetTWGameState::ReturnValue' has a wrong offset!");

// Function TimeWatch.DropdownScrollListWidget.OnDropDownElementSelected
// 0x0028 (0x0028 - 0x0000)
struct DropdownScrollListWidget_OnDropDownElementSelected final
{
public:
	struct FDropdownScrollListElement             NewSelectedElement;                                // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DropdownScrollListWidget_OnDropDownElementSelected) == 0x000008, "Wrong alignment on DropdownScrollListWidget_OnDropDownElementSelected");
static_assert(sizeof(DropdownScrollListWidget_OnDropDownElementSelected) == 0x000028, "Wrong size on DropdownScrollListWidget_OnDropDownElementSelected");
static_assert(offsetof(DropdownScrollListWidget_OnDropDownElementSelected, NewSelectedElement) == 0x000000, "Member 'DropdownScrollListWidget_OnDropDownElementSelected::NewSelectedElement' has a wrong offset!");

// Function TimeWatch.FluxAnimInstance.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct FluxAnimInstance_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxAnimInstance_OnGameStateChanged) == 0x000001, "Wrong alignment on FluxAnimInstance_OnGameStateChanged");
static_assert(sizeof(FluxAnimInstance_OnGameStateChanged) == 0x000002, "Wrong size on FluxAnimInstance_OnGameStateChanged");
static_assert(offsetof(FluxAnimInstance_OnGameStateChanged, OldState) == 0x000000, "Member 'FluxAnimInstance_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(FluxAnimInstance_OnGameStateChanged, NewState) == 0x000001, "Member 'FluxAnimInstance_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.AddScore
// 0x000C (0x000C - 0x0000)
struct TimeWatchGameState_AddScore final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreIncrement;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcast;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchGameState_AddScore) == 0x000004, "Wrong alignment on TimeWatchGameState_AddScore");
static_assert(sizeof(TimeWatchGameState_AddScore) == 0x00000C, "Wrong size on TimeWatchGameState_AddScore");
static_assert(offsetof(TimeWatchGameState_AddScore, TeamId) == 0x000000, "Member 'TimeWatchGameState_AddScore::TeamId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_AddScore, ScoreIncrement) == 0x000004, "Member 'TimeWatchGameState_AddScore::ScoreIncrement' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_AddScore, bBroadcast) == 0x000008, "Member 'TimeWatchGameState_AddScore::bBroadcast' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.AuthorityCyclePlayersClone
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_AuthorityCyclePlayersClone final
{
public:
	int32                                         PlayerPosition;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_AuthorityCyclePlayersClone) == 0x000004, "Wrong alignment on TimeWatchGameState_AuthorityCyclePlayersClone");
static_assert(sizeof(TimeWatchGameState_AuthorityCyclePlayersClone) == 0x000004, "Wrong size on TimeWatchGameState_AuthorityCyclePlayersClone");
static_assert(offsetof(TimeWatchGameState_AuthorityCyclePlayersClone, PlayerPosition) == 0x000000, "Member 'TimeWatchGameState_AuthorityCyclePlayersClone::PlayerPosition' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.AuthoritySetFluxState
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_AuthoritySetFluxState final
{
public:
	EFluxCapacitorStates                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_AuthoritySetFluxState) == 0x000001, "Wrong alignment on TimeWatchGameState_AuthoritySetFluxState");
static_assert(sizeof(TimeWatchGameState_AuthoritySetFluxState) == 0x000001, "Wrong size on TimeWatchGameState_AuthoritySetFluxState");
static_assert(offsetof(TimeWatchGameState_AuthoritySetFluxState, NewState) == 0x000000, "Member 'TimeWatchGameState_AuthoritySetFluxState::NewState' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetCooldownTime
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetCooldownTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetCooldownTime) == 0x000004, "Wrong alignment on TimeWatchGameState_GetCooldownTime");
static_assert(sizeof(TimeWatchGameState_GetCooldownTime) == 0x000004, "Wrong size on TimeWatchGameState_GetCooldownTime");
static_assert(offsetof(TimeWatchGameState_GetCooldownTime, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetCooldownTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetCurrentClone
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchGameState_GetCurrentClone final
{
public:
	const class APlayerController*                PC;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetCurrentClone) == 0x000008, "Wrong alignment on TimeWatchGameState_GetCurrentClone");
static_assert(sizeof(TimeWatchGameState_GetCurrentClone) == 0x000010, "Wrong size on TimeWatchGameState_GetCurrentClone");
static_assert(offsetof(TimeWatchGameState_GetCurrentClone, PC) == 0x000000, "Member 'TimeWatchGameState_GetCurrentClone::PC' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetCurrentClone, ReturnValue) == 0x000008, "Member 'TimeWatchGameState_GetCurrentClone::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetCurrentRelativeTime
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetCurrentRelativeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetCurrentRelativeTime) == 0x000004, "Wrong alignment on TimeWatchGameState_GetCurrentRelativeTime");
static_assert(sizeof(TimeWatchGameState_GetCurrentRelativeTime) == 0x000004, "Wrong size on TimeWatchGameState_GetCurrentRelativeTime");
static_assert(offsetof(TimeWatchGameState_GetCurrentRelativeTime, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetCurrentRelativeTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetCustomGameTimeSynchronized
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetCustomGameTimeSynchronized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetCustomGameTimeSynchronized) == 0x000004, "Wrong alignment on TimeWatchGameState_GetCustomGameTimeSynchronized");
static_assert(sizeof(TimeWatchGameState_GetCustomGameTimeSynchronized) == 0x000004, "Wrong size on TimeWatchGameState_GetCustomGameTimeSynchronized");
static_assert(offsetof(TimeWatchGameState_GetCustomGameTimeSynchronized, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetCustomGameTimeSynchronized::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetGameEventObserver
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameState_GetGameEventObserver final
{
public:
	class UTWGameEventObserver*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetGameEventObserver) == 0x000008, "Wrong alignment on TimeWatchGameState_GetGameEventObserver");
static_assert(sizeof(TimeWatchGameState_GetGameEventObserver) == 0x000008, "Wrong size on TimeWatchGameState_GetGameEventObserver");
static_assert(offsetof(TimeWatchGameState_GetGameEventObserver, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetGameEventObserver::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetLoopCounter
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetLoopCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetLoopCounter) == 0x000004, "Wrong alignment on TimeWatchGameState_GetLoopCounter");
static_assert(sizeof(TimeWatchGameState_GetLoopCounter) == 0x000004, "Wrong size on TimeWatchGameState_GetLoopCounter");
static_assert(offsetof(TimeWatchGameState_GetLoopCounter, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetLoopCounter::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetRoundcounter
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetRoundcounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetRoundcounter) == 0x000004, "Wrong alignment on TimeWatchGameState_GetRoundcounter");
static_assert(sizeof(TimeWatchGameState_GetRoundcounter) == 0x000004, "Wrong size on TimeWatchGameState_GetRoundcounter");
static_assert(offsetof(TimeWatchGameState_GetRoundcounter, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetRoundcounter::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetServerAutoCloseTimer
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetServerAutoCloseTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetServerAutoCloseTimer) == 0x000004, "Wrong alignment on TimeWatchGameState_GetServerAutoCloseTimer");
static_assert(sizeof(TimeWatchGameState_GetServerAutoCloseTimer) == 0x000004, "Wrong size on TimeWatchGameState_GetServerAutoCloseTimer");
static_assert(offsetof(TimeWatchGameState_GetServerAutoCloseTimer, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetServerAutoCloseTimer::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetTeamScore
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameState_GetTeamScore final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetTeamScore) == 0x000004, "Wrong alignment on TimeWatchGameState_GetTeamScore");
static_assert(sizeof(TimeWatchGameState_GetTeamScore) == 0x000008, "Wrong size on TimeWatchGameState_GetTeamScore");
static_assert(offsetof(TimeWatchGameState_GetTeamScore, TeamId) == 0x000000, "Member 'TimeWatchGameState_GetTeamScore::TeamId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetTeamScore, ReturnValue) == 0x000004, "Member 'TimeWatchGameState_GetTeamScore::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetTutorialTooltipManager
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameState_GetTutorialTooltipManager final
{
public:
	class ATWTutorialTooltipManager*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetTutorialTooltipManager) == 0x000008, "Wrong alignment on TimeWatchGameState_GetTutorialTooltipManager");
static_assert(sizeof(TimeWatchGameState_GetTutorialTooltipManager) == 0x000008, "Wrong size on TimeWatchGameState_GetTutorialTooltipManager");
static_assert(offsetof(TimeWatchGameState_GetTutorialTooltipManager, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetTutorialTooltipManager::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetWinningTeam
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetWinningTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetWinningTeam) == 0x000004, "Wrong alignment on TimeWatchGameState_GetWinningTeam");
static_assert(sizeof(TimeWatchGameState_GetWinningTeam) == 0x000004, "Wrong size on TimeWatchGameState_GetWinningTeam");
static_assert(offsetof(TimeWatchGameState_GetWinningTeam, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetWinningTeam::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.IsResetClonesEachLoopActive
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_IsResetClonesEachLoopActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_IsResetClonesEachLoopActive) == 0x000001, "Wrong alignment on TimeWatchGameState_IsResetClonesEachLoopActive");
static_assert(sizeof(TimeWatchGameState_IsResetClonesEachLoopActive) == 0x000001, "Wrong size on TimeWatchGameState_IsResetClonesEachLoopActive");
static_assert(offsetof(TimeWatchGameState_IsResetClonesEachLoopActive, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_IsResetClonesEachLoopActive::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.MultiCast_AddPingMarker
// 0x0040 (0x0040 - 0x0000)
struct TimeWatchGameState_MultiCast_AddPingMarker final
{
public:
	struct FPingMarker                            NewPing;                                           // 0x0000(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_MultiCast_AddPingMarker) == 0x000008, "Wrong alignment on TimeWatchGameState_MultiCast_AddPingMarker");
static_assert(sizeof(TimeWatchGameState_MultiCast_AddPingMarker) == 0x000040, "Wrong size on TimeWatchGameState_MultiCast_AddPingMarker");
static_assert(offsetof(TimeWatchGameState_MultiCast_AddPingMarker, NewPing) == 0x000000, "Member 'TimeWatchGameState_MultiCast_AddPingMarker::NewPing' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.MultiCast_RemovePingMarker
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_MultiCast_RemovePingMarker final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_MultiCast_RemovePingMarker) == 0x000004, "Wrong alignment on TimeWatchGameState_MultiCast_RemovePingMarker");
static_assert(sizeof(TimeWatchGameState_MultiCast_RemovePingMarker) == 0x000004, "Wrong size on TimeWatchGameState_MultiCast_RemovePingMarker");
static_assert(offsetof(TimeWatchGameState_MultiCast_RemovePingMarker, ID) == 0x000000, "Member 'TimeWatchGameState_MultiCast_RemovePingMarker::ID' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.Multicast_SetWeaponSelectionCollapsed
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_Multicast_SetWeaponSelectionCollapsed final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_Multicast_SetWeaponSelectionCollapsed) == 0x000001, "Wrong alignment on TimeWatchGameState_Multicast_SetWeaponSelectionCollapsed");
static_assert(sizeof(TimeWatchGameState_Multicast_SetWeaponSelectionCollapsed) == 0x000001, "Wrong size on TimeWatchGameState_Multicast_SetWeaponSelectionCollapsed");
static_assert(offsetof(TimeWatchGameState_Multicast_SetWeaponSelectionCollapsed, Value) == 0x000000, "Member 'TimeWatchGameState_Multicast_SetWeaponSelectionCollapsed::Value' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.Multicast_TriggerTimeBubble
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_Multicast_TriggerTimeBubble final
{
public:
	uint8                                         UnnecessaryParameter;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_Multicast_TriggerTimeBubble) == 0x000001, "Wrong alignment on TimeWatchGameState_Multicast_TriggerTimeBubble");
static_assert(sizeof(TimeWatchGameState_Multicast_TriggerTimeBubble) == 0x000001, "Wrong size on TimeWatchGameState_Multicast_TriggerTimeBubble");
static_assert(offsetof(TimeWatchGameState_Multicast_TriggerTimeBubble, UnnecessaryParameter) == 0x000000, "Member 'TimeWatchGameState_Multicast_TriggerTimeBubble::UnnecessaryParameter' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.MulticastLoopFinishedWithResult
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_MulticastLoopFinishedWithResult final
{
public:
	EFluxLoopResult                               Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_MulticastLoopFinishedWithResult) == 0x000001, "Wrong alignment on TimeWatchGameState_MulticastLoopFinishedWithResult");
static_assert(sizeof(TimeWatchGameState_MulticastLoopFinishedWithResult) == 0x000001, "Wrong size on TimeWatchGameState_MulticastLoopFinishedWithResult");
static_assert(offsetof(TimeWatchGameState_MulticastLoopFinishedWithResult, Result) == 0x000000, "Member 'TimeWatchGameState_MulticastLoopFinishedWithResult::Result' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.MulticastStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TimeWatchGameState_MulticastStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_MulticastStateChanged) == 0x000001, "Wrong alignment on TimeWatchGameState_MulticastStateChanged");
static_assert(sizeof(TimeWatchGameState_MulticastStateChanged) == 0x000002, "Wrong size on TimeWatchGameState_MulticastStateChanged");
static_assert(offsetof(TimeWatchGameState_MulticastStateChanged, OldState) == 0x000000, "Member 'TimeWatchGameState_MulticastStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_MulticastStateChanged, NewState) == 0x000001, "Member 'TimeWatchGameState_MulticastStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.MulticastTeamScoredPoint
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_MulticastTeamScoredPoint final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_MulticastTeamScoredPoint) == 0x000004, "Wrong alignment on TimeWatchGameState_MulticastTeamScoredPoint");
static_assert(sizeof(TimeWatchGameState_MulticastTeamScoredPoint) == 0x000004, "Wrong size on TimeWatchGameState_MulticastTeamScoredPoint");
static_assert(offsetof(TimeWatchGameState_MulticastTeamScoredPoint, TeamId) == 0x000000, "Member 'TimeWatchGameState_MulticastTeamScoredPoint::TeamId' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.OnRep_CurrentTime_Server
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_OnRep_CurrentTime_Server final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_OnRep_CurrentTime_Server) == 0x000004, "Wrong alignment on TimeWatchGameState_OnRep_CurrentTime_Server");
static_assert(sizeof(TimeWatchGameState_OnRep_CurrentTime_Server) == 0x000004, "Wrong size on TimeWatchGameState_OnRep_CurrentTime_Server");
static_assert(offsetof(TimeWatchGameState_OnRep_CurrentTime_Server, OldValue) == 0x000000, "Member 'TimeWatchGameState_OnRep_CurrentTime_Server::OldValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.OnSoundCallback
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchGameState_OnSoundCallback final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_OnSoundCallback) == 0x000008, "Wrong alignment on TimeWatchGameState_OnSoundCallback");
static_assert(sizeof(TimeWatchGameState_OnSoundCallback) == 0x000010, "Wrong size on TimeWatchGameState_OnSoundCallback");
static_assert(offsetof(TimeWatchGameState_OnSoundCallback, CallbackType) == 0x000000, "Member 'TimeWatchGameState_OnSoundCallback::CallbackType' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_OnSoundCallback, CallbackInfo) == 0x000008, "Member 'TimeWatchGameState_OnSoundCallback::CallbackInfo' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.OnSoundPosted
// 0x00A8 (0x00A8 - 0x0000)
struct TimeWatchGameState_OnSoundPosted final
{
public:
	struct FPostSoundParams                       PostParams;                                        // 0x0000(0x0098)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNGDAkComponent*                        AkComponentInstance;                               // 0x00A0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_OnSoundPosted) == 0x000008, "Wrong alignment on TimeWatchGameState_OnSoundPosted");
static_assert(sizeof(TimeWatchGameState_OnSoundPosted) == 0x0000A8, "Wrong size on TimeWatchGameState_OnSoundPosted");
static_assert(offsetof(TimeWatchGameState_OnSoundPosted, PostParams) == 0x000000, "Member 'TimeWatchGameState_OnSoundPosted::PostParams' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_OnSoundPosted, PlayingID) == 0x000098, "Member 'TimeWatchGameState_OnSoundPosted::PlayingID' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_OnSoundPosted, AkComponentInstance) == 0x0000A0, "Member 'TimeWatchGameState_OnSoundPosted::AkComponentInstance' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.SetCharaterSelectionStatus
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_SetCharaterSelectionStatus final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_SetCharaterSelectionStatus) == 0x000001, "Wrong alignment on TimeWatchGameState_SetCharaterSelectionStatus");
static_assert(sizeof(TimeWatchGameState_SetCharaterSelectionStatus) == 0x000001, "Wrong size on TimeWatchGameState_SetCharaterSelectionStatus");
static_assert(offsetof(TimeWatchGameState_SetCharaterSelectionStatus, bIsActive) == 0x000000, "Member 'TimeWatchGameState_SetCharaterSelectionStatus::bIsActive' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.SetCloneCooldown
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_SetCloneCooldown final
{
public:
	int32                                         NewCloneCooldown;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_SetCloneCooldown) == 0x000004, "Wrong alignment on TimeWatchGameState_SetCloneCooldown");
static_assert(sizeof(TimeWatchGameState_SetCloneCooldown) == 0x000004, "Wrong size on TimeWatchGameState_SetCloneCooldown");
static_assert(offsetof(TimeWatchGameState_SetCloneCooldown, NewCloneCooldown) == 0x000000, "Member 'TimeWatchGameState_SetCloneCooldown::NewCloneCooldown' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.SetGameCooldown
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_SetGameCooldown final
{
public:
	int32                                         NewGameCooldown;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_SetGameCooldown) == 0x000004, "Wrong alignment on TimeWatchGameState_SetGameCooldown");
static_assert(sizeof(TimeWatchGameState_SetGameCooldown) == 0x000004, "Wrong size on TimeWatchGameState_SetGameCooldown");
static_assert(offsetof(TimeWatchGameState_SetGameCooldown, NewGameCooldown) == 0x000000, "Member 'TimeWatchGameState_SetGameCooldown::NewGameCooldown' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.SetLevelGoal
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_SetLevelGoal final
{
public:
	int32                                         NewGoal;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_SetLevelGoal) == 0x000004, "Wrong alignment on TimeWatchGameState_SetLevelGoal");
static_assert(sizeof(TimeWatchGameState_SetLevelGoal) == 0x000004, "Wrong size on TimeWatchGameState_SetLevelGoal");
static_assert(offsetof(TimeWatchGameState_SetLevelGoal, NewGoal) == 0x000000, "Member 'TimeWatchGameState_SetLevelGoal::NewGoal' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.SetLoopCooldown
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_SetLoopCooldown final
{
public:
	int32                                         NewLoopCooldown;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_SetLoopCooldown) == 0x000004, "Wrong alignment on TimeWatchGameState_SetLoopCooldown");
static_assert(sizeof(TimeWatchGameState_SetLoopCooldown) == 0x000004, "Wrong size on TimeWatchGameState_SetLoopCooldown");
static_assert(offsetof(TimeWatchGameState_SetLoopCooldown, NewLoopCooldown) == 0x000000, "Member 'TimeWatchGameState_SetLoopCooldown::NewLoopCooldown' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.SetLoopLength
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_SetLoopLength final
{
public:
	float                                         NewLength;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_SetLoopLength) == 0x000004, "Wrong alignment on TimeWatchGameState_SetLoopLength");
static_assert(sizeof(TimeWatchGameState_SetLoopLength) == 0x000004, "Wrong size on TimeWatchGameState_SetLoopLength");
static_assert(offsetof(TimeWatchGameState_SetLoopLength, NewLength) == 0x000000, "Member 'TimeWatchGameState_SetLoopLength::NewLength' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.SetServerAutoCloseTimer
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_SetServerAutoCloseTimer final
{
public:
	float                                         InSecondsToClose;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_SetServerAutoCloseTimer) == 0x000004, "Wrong alignment on TimeWatchGameState_SetServerAutoCloseTimer");
static_assert(sizeof(TimeWatchGameState_SetServerAutoCloseTimer) == 0x000004, "Wrong size on TimeWatchGameState_SetServerAutoCloseTimer");
static_assert(offsetof(TimeWatchGameState_SetServerAutoCloseTimer, InSecondsToClose) == 0x000000, "Member 'TimeWatchGameState_SetServerAutoCloseTimer::InSecondsToClose' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.SetWinner
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameState_SetWinner final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndGameReason                                Reason;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_SetWinner) == 0x000004, "Wrong alignment on TimeWatchGameState_SetWinner");
static_assert(sizeof(TimeWatchGameState_SetWinner) == 0x000008, "Wrong size on TimeWatchGameState_SetWinner");
static_assert(offsetof(TimeWatchGameState_SetWinner, TeamId) == 0x000000, "Member 'TimeWatchGameState_SetWinner::TeamId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_SetWinner, Reason) == 0x000004, "Member 'TimeWatchGameState_SetWinner::Reason' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.ShowSkipChallengePopup
// 0x0020 (0x0020 - 0x0000)
struct TimeWatchGameState_ShowSkipChallengePopup final
{
public:
	bool                                          PauseOnShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LocTitle;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_ShowSkipChallengePopup) == 0x000008, "Wrong alignment on TimeWatchGameState_ShowSkipChallengePopup");
static_assert(sizeof(TimeWatchGameState_ShowSkipChallengePopup) == 0x000020, "Wrong size on TimeWatchGameState_ShowSkipChallengePopup");
static_assert(offsetof(TimeWatchGameState_ShowSkipChallengePopup, PauseOnShow) == 0x000000, "Member 'TimeWatchGameState_ShowSkipChallengePopup::PauseOnShow' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_ShowSkipChallengePopup, LocTitle) == 0x000008, "Member 'TimeWatchGameState_ShowSkipChallengePopup::LocTitle' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.StartCooldown
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_StartCooldown final
{
public:
	float                                         CooldownTimeToSet;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_StartCooldown) == 0x000004, "Wrong alignment on TimeWatchGameState_StartCooldown");
static_assert(sizeof(TimeWatchGameState_StartCooldown) == 0x000004, "Wrong size on TimeWatchGameState_StartCooldown");
static_assert(offsetof(TimeWatchGameState_StartCooldown, CooldownTimeToSet) == 0x000000, "Member 'TimeWatchGameState_StartCooldown::CooldownTimeToSet' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.TryDestroyTimeBubble
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_TryDestroyTimeBubble final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_TryDestroyTimeBubble) == 0x000001, "Wrong alignment on TimeWatchGameState_TryDestroyTimeBubble");
static_assert(sizeof(TimeWatchGameState_TryDestroyTimeBubble) == 0x000001, "Wrong size on TimeWatchGameState_TryDestroyTimeBubble");
static_assert(offsetof(TimeWatchGameState_TryDestroyTimeBubble, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_TryDestroyTimeBubble::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.UpdateScoringTeam
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameState_UpdateScoringTeam final
{
public:
	int32                                         NewScoringTeam;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchGameState_UpdateScoringTeam) == 0x000004, "Wrong alignment on TimeWatchGameState_UpdateScoringTeam");
static_assert(sizeof(TimeWatchGameState_UpdateScoringTeam) == 0x000008, "Wrong size on TimeWatchGameState_UpdateScoringTeam");
static_assert(offsetof(TimeWatchGameState_UpdateScoringTeam, NewScoringTeam) == 0x000000, "Member 'TimeWatchGameState_UpdateScoringTeam::NewScoringTeam' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_UpdateScoringTeam, ReturnValue) == 0x000004, "Member 'TimeWatchGameState_UpdateScoringTeam::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.AreGameplayFeedbackActive
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_AreGameplayFeedbackActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_AreGameplayFeedbackActive) == 0x000001, "Wrong alignment on TimeWatchGameState_AreGameplayFeedbackActive");
static_assert(sizeof(TimeWatchGameState_AreGameplayFeedbackActive) == 0x000001, "Wrong size on TimeWatchGameState_AreGameplayFeedbackActive");
static_assert(offsetof(TimeWatchGameState_AreGameplayFeedbackActive, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_AreGameplayFeedbackActive::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetAllAlliedClones
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchGameState_GetAllAlliedClones final
{
public:
	int32                                         TeamPlayerID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATimeWatchCharacter*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetAllAlliedClones) == 0x000008, "Wrong alignment on TimeWatchGameState_GetAllAlliedClones");
static_assert(sizeof(TimeWatchGameState_GetAllAlliedClones) == 0x000018, "Wrong size on TimeWatchGameState_GetAllAlliedClones");
static_assert(offsetof(TimeWatchGameState_GetAllAlliedClones, TeamPlayerID) == 0x000000, "Member 'TimeWatchGameState_GetAllAlliedClones::TeamPlayerID' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetAllAlliedClones, TeamId) == 0x000004, "Member 'TimeWatchGameState_GetAllAlliedClones::TeamId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetAllAlliedClones, ReturnValue) == 0x000008, "Member 'TimeWatchGameState_GetAllAlliedClones::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetAllClones
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchGameState_GetAllClones final
{
public:
	TArray<class ATimeWatchCharacter*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetAllClones) == 0x000008, "Wrong alignment on TimeWatchGameState_GetAllClones");
static_assert(sizeof(TimeWatchGameState_GetAllClones) == 0x000010, "Wrong size on TimeWatchGameState_GetAllClones");
static_assert(offsetof(TimeWatchGameState_GetAllClones, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetAllClones::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetAllClonesByLoopIndex
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchGameState_GetAllClonesByLoopIndex final
{
public:
	int32                                         LoopIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATimeWatchCharacter*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetAllClonesByLoopIndex) == 0x000008, "Wrong alignment on TimeWatchGameState_GetAllClonesByLoopIndex");
static_assert(sizeof(TimeWatchGameState_GetAllClonesByLoopIndex) == 0x000018, "Wrong size on TimeWatchGameState_GetAllClonesByLoopIndex");
static_assert(offsetof(TimeWatchGameState_GetAllClonesByLoopIndex, LoopIndex) == 0x000000, "Member 'TimeWatchGameState_GetAllClonesByLoopIndex::LoopIndex' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetAllClonesByLoopIndex, ReturnValue) == 0x000008, "Member 'TimeWatchGameState_GetAllClonesByLoopIndex::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetAllClonesForPlayer
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchGameState_GetAllClonesForPlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATimeWatchCharacter*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetAllClonesForPlayer) == 0x000008, "Wrong alignment on TimeWatchGameState_GetAllClonesForPlayer");
static_assert(sizeof(TimeWatchGameState_GetAllClonesForPlayer) == 0x000018, "Wrong size on TimeWatchGameState_GetAllClonesForPlayer");
static_assert(offsetof(TimeWatchGameState_GetAllClonesForPlayer, PlayerId) == 0x000000, "Member 'TimeWatchGameState_GetAllClonesForPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetAllClonesForPlayer, ReturnValue) == 0x000008, "Member 'TimeWatchGameState_GetAllClonesForPlayer::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetAllClonesForTeam
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchGameState_GetAllClonesForTeam final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATimeWatchCharacter*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetAllClonesForTeam) == 0x000008, "Wrong alignment on TimeWatchGameState_GetAllClonesForTeam");
static_assert(sizeof(TimeWatchGameState_GetAllClonesForTeam) == 0x000018, "Wrong size on TimeWatchGameState_GetAllClonesForTeam");
static_assert(offsetof(TimeWatchGameState_GetAllClonesForTeam, TeamId) == 0x000000, "Member 'TimeWatchGameState_GetAllClonesForTeam::TeamId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetAllClonesForTeam, ReturnValue) == 0x000008, "Member 'TimeWatchGameState_GetAllClonesForTeam::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetChallengeObserver
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameState_GetChallengeObserver final
{
public:
	class UTWChallengeObserver*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetChallengeObserver) == 0x000008, "Wrong alignment on TimeWatchGameState_GetChallengeObserver");
static_assert(sizeof(TimeWatchGameState_GetChallengeObserver) == 0x000008, "Wrong size on TimeWatchGameState_GetChallengeObserver");
static_assert(offsetof(TimeWatchGameState_GetChallengeObserver, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetChallengeObserver::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetClone
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchGameState_GetClone final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CloneId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetClone) == 0x000008, "Wrong alignment on TimeWatchGameState_GetClone");
static_assert(sizeof(TimeWatchGameState_GetClone) == 0x000010, "Wrong size on TimeWatchGameState_GetClone");
static_assert(offsetof(TimeWatchGameState_GetClone, TeamId) == 0x000000, "Member 'TimeWatchGameState_GetClone::TeamId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetClone, CloneId) == 0x000004, "Member 'TimeWatchGameState_GetClone::CloneId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetClone, ReturnValue) == 0x000008, "Member 'TimeWatchGameState_GetClone::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetCloneCount
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetCloneCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetCloneCount) == 0x000004, "Wrong alignment on TimeWatchGameState_GetCloneCount");
static_assert(sizeof(TimeWatchGameState_GetCloneCount) == 0x000004, "Wrong size on TimeWatchGameState_GetCloneCount");
static_assert(offsetof(TimeWatchGameState_GetCloneCount, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetCloneCount::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetCloneForPlayer
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchGameState_GetCloneForPlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CloneId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetCloneForPlayer) == 0x000008, "Wrong alignment on TimeWatchGameState_GetCloneForPlayer");
static_assert(sizeof(TimeWatchGameState_GetCloneForPlayer) == 0x000010, "Wrong size on TimeWatchGameState_GetCloneForPlayer");
static_assert(offsetof(TimeWatchGameState_GetCloneForPlayer, PlayerId) == 0x000000, "Member 'TimeWatchGameState_GetCloneForPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetCloneForPlayer, CloneId) == 0x000004, "Member 'TimeWatchGameState_GetCloneForPlayer::CloneId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetCloneForPlayer, ReturnValue) == 0x000008, "Member 'TimeWatchGameState_GetCloneForPlayer::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetCurrentCloneIndex
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetCurrentCloneIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetCurrentCloneIndex) == 0x000004, "Wrong alignment on TimeWatchGameState_GetCurrentCloneIndex");
static_assert(sizeof(TimeWatchGameState_GetCurrentCloneIndex) == 0x000004, "Wrong size on TimeWatchGameState_GetCurrentCloneIndex");
static_assert(offsetof(TimeWatchGameState_GetCurrentCloneIndex, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetCurrentCloneIndex::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetCurrentTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetCurrentTime) == 0x000004, "Wrong alignment on TimeWatchGameState_GetCurrentTime");
static_assert(sizeof(TimeWatchGameState_GetCurrentTime) == 0x000004, "Wrong size on TimeWatchGameState_GetCurrentTime");
static_assert(offsetof(TimeWatchGameState_GetCurrentTime, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetCurrentTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetEndGameReason
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetEndGameReason final
{
public:
	EEndGameReason                                ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetEndGameReason) == 0x000004, "Wrong alignment on TimeWatchGameState_GetEndGameReason");
static_assert(sizeof(TimeWatchGameState_GetEndGameReason) == 0x000004, "Wrong size on TimeWatchGameState_GetEndGameReason");
static_assert(offsetof(TimeWatchGameState_GetEndGameReason, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetEndGameReason::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetLastLoopResult
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_GetLastLoopResult final
{
public:
	EFluxLoopResult                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetLastLoopResult) == 0x000001, "Wrong alignment on TimeWatchGameState_GetLastLoopResult");
static_assert(sizeof(TimeWatchGameState_GetLastLoopResult) == 0x000001, "Wrong size on TimeWatchGameState_GetLastLoopResult");
static_assert(offsetof(TimeWatchGameState_GetLastLoopResult, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetLastLoopResult::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetLastScoringTeamID
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetLastScoringTeamID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetLastScoringTeamID) == 0x000004, "Wrong alignment on TimeWatchGameState_GetLastScoringTeamID");
static_assert(sizeof(TimeWatchGameState_GetLastScoringTeamID) == 0x000004, "Wrong size on TimeWatchGameState_GetLastScoringTeamID");
static_assert(offsetof(TimeWatchGameState_GetLastScoringTeamID, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetLastScoringTeamID::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetLevelGoal
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetLevelGoal final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetLevelGoal) == 0x000004, "Wrong alignment on TimeWatchGameState_GetLevelGoal");
static_assert(sizeof(TimeWatchGameState_GetLevelGoal) == 0x000004, "Wrong size on TimeWatchGameState_GetLevelGoal");
static_assert(offsetof(TimeWatchGameState_GetLevelGoal, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetLevelGoal::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetLoopLength
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetLoopLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetLoopLength) == 0x000004, "Wrong alignment on TimeWatchGameState_GetLoopLength");
static_assert(sizeof(TimeWatchGameState_GetLoopLength) == 0x000004, "Wrong size on TimeWatchGameState_GetLoopLength");
static_assert(offsetof(TimeWatchGameState_GetLoopLength, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetLoopLength::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetMatchEventLog
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameState_GetMatchEventLog final
{
public:
	class AMatchEventLog*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetMatchEventLog) == 0x000008, "Wrong alignment on TimeWatchGameState_GetMatchEventLog");
static_assert(sizeof(TimeWatchGameState_GetMatchEventLog) == 0x000008, "Wrong size on TimeWatchGameState_GetMatchEventLog");
static_assert(offsetof(TimeWatchGameState_GetMatchEventLog, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetMatchEventLog::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetOverTimeMode
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_GetOverTimeMode final
{
public:
	EOvertimeMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetOverTimeMode) == 0x000001, "Wrong alignment on TimeWatchGameState_GetOverTimeMode");
static_assert(sizeof(TimeWatchGameState_GetOverTimeMode) == 0x000001, "Wrong size on TimeWatchGameState_GetOverTimeMode");
static_assert(offsetof(TimeWatchGameState_GetOverTimeMode, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetOverTimeMode::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetPlayerCount) == 0x000004, "Wrong alignment on TimeWatchGameState_GetPlayerCount");
static_assert(sizeof(TimeWatchGameState_GetPlayerCount) == 0x000004, "Wrong size on TimeWatchGameState_GetPlayerCount");
static_assert(offsetof(TimeWatchGameState_GetPlayerCount, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameState_GetPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetPlayRate) == 0x000004, "Wrong alignment on TimeWatchGameState_GetPlayRate");
static_assert(sizeof(TimeWatchGameState_GetPlayRate) == 0x000004, "Wrong size on TimeWatchGameState_GetPlayRate");
static_assert(offsetof(TimeWatchGameState_GetPlayRate, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_GetPlayRate::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.GetScore
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameState_GetScore final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_GetScore) == 0x000004, "Wrong alignment on TimeWatchGameState_GetScore");
static_assert(sizeof(TimeWatchGameState_GetScore) == 0x000008, "Wrong size on TimeWatchGameState_GetScore");
static_assert(offsetof(TimeWatchGameState_GetScore, TeamId) == 0x000000, "Member 'TimeWatchGameState_GetScore::TeamId' has a wrong offset!");
static_assert(offsetof(TimeWatchGameState_GetScore, ReturnValue) == 0x000004, "Member 'TimeWatchGameState_GetScore::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.HasGameStarted
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_HasGameStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_HasGameStarted) == 0x000001, "Wrong alignment on TimeWatchGameState_HasGameStarted");
static_assert(sizeof(TimeWatchGameState_HasGameStarted) == 0x000001, "Wrong size on TimeWatchGameState_HasGameStarted");
static_assert(offsetof(TimeWatchGameState_HasGameStarted, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_HasGameStarted::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.IsServerUnresponsive
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_IsServerUnresponsive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_IsServerUnresponsive) == 0x000001, "Wrong alignment on TimeWatchGameState_IsServerUnresponsive");
static_assert(sizeof(TimeWatchGameState_IsServerUnresponsive) == 0x000001, "Wrong size on TimeWatchGameState_IsServerUnresponsive");
static_assert(offsetof(TimeWatchGameState_IsServerUnresponsive, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_IsServerUnresponsive::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.IsTimeFreeze
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_IsTimeFreeze final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_IsTimeFreeze) == 0x000001, "Wrong alignment on TimeWatchGameState_IsTimeFreeze");
static_assert(sizeof(TimeWatchGameState_IsTimeFreeze) == 0x000001, "Wrong size on TimeWatchGameState_IsTimeFreeze");
static_assert(offsetof(TimeWatchGameState_IsTimeFreeze, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_IsTimeFreeze::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.IsTimeGoingBackwards
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_IsTimeGoingBackwards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_IsTimeGoingBackwards) == 0x000001, "Wrong alignment on TimeWatchGameState_IsTimeGoingBackwards");
static_assert(sizeof(TimeWatchGameState_IsTimeGoingBackwards) == 0x000001, "Wrong size on TimeWatchGameState_IsTimeGoingBackwards");
static_assert(offsetof(TimeWatchGameState_IsTimeGoingBackwards, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_IsTimeGoingBackwards::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.IsTimeGoingForward
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_IsTimeGoingForward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_IsTimeGoingForward) == 0x000001, "Wrong alignment on TimeWatchGameState_IsTimeGoingForward");
static_assert(sizeof(TimeWatchGameState_IsTimeGoingForward) == 0x000001, "Wrong size on TimeWatchGameState_IsTimeGoingForward");
static_assert(offsetof(TimeWatchGameState_IsTimeGoingForward, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_IsTimeGoingForward::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.IsWaitingForPlayerSync
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_IsWaitingForPlayerSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_IsWaitingForPlayerSync) == 0x000001, "Wrong alignment on TimeWatchGameState_IsWaitingForPlayerSync");
static_assert(sizeof(TimeWatchGameState_IsWaitingForPlayerSync) == 0x000001, "Wrong size on TimeWatchGameState_IsWaitingForPlayerSync");
static_assert(offsetof(TimeWatchGameState_IsWaitingForPlayerSync, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_IsWaitingForPlayerSync::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.ShouldSpawnTimeBubble
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_ShouldSpawnTimeBubble final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_ShouldSpawnTimeBubble) == 0x000001, "Wrong alignment on TimeWatchGameState_ShouldSpawnTimeBubble");
static_assert(sizeof(TimeWatchGameState_ShouldSpawnTimeBubble) == 0x000001, "Wrong size on TimeWatchGameState_ShouldSpawnTimeBubble");
static_assert(offsetof(TimeWatchGameState_ShouldSpawnTimeBubble, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_ShouldSpawnTimeBubble::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameState.UsingQuantumTime
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameState_UsingQuantumTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameState_UsingQuantumTime) == 0x000001, "Wrong alignment on TimeWatchGameState_UsingQuantumTime");
static_assert(sizeof(TimeWatchGameState_UsingQuantumTime) == 0x000001, "Wrong size on TimeWatchGameState_UsingQuantumTime");
static_assert(offsetof(TimeWatchGameState_UsingQuantumTime, ReturnValue) == 0x000000, "Member 'TimeWatchGameState_UsingQuantumTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.ActivateFuse
// 0x0010 (0x0010 - 0x0000)
struct FluxExplodingBarrel_ActivateFuse final
{
public:
	class AActor*                                 ExplosionCauser;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomGameTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxExplodingBarrel_ActivateFuse) == 0x000008, "Wrong alignment on FluxExplodingBarrel_ActivateFuse");
static_assert(sizeof(FluxExplodingBarrel_ActivateFuse) == 0x000010, "Wrong size on FluxExplodingBarrel_ActivateFuse");
static_assert(offsetof(FluxExplodingBarrel_ActivateFuse, ExplosionCauser) == 0x000000, "Member 'FluxExplodingBarrel_ActivateFuse::ExplosionCauser' has a wrong offset!");
static_assert(offsetof(FluxExplodingBarrel_ActivateFuse, CustomGameTime) == 0x000008, "Member 'FluxExplodingBarrel_ActivateFuse::CustomGameTime' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.Cosmetic_OnFuseTimestampChange
// 0x0004 (0x0004 - 0x0000)
struct FluxExplodingBarrel_Cosmetic_OnFuseTimestampChange final
{
public:
	float                                         NewFuseTimestamp;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_Cosmetic_OnFuseTimestampChange) == 0x000004, "Wrong alignment on FluxExplodingBarrel_Cosmetic_OnFuseTimestampChange");
static_assert(sizeof(FluxExplodingBarrel_Cosmetic_OnFuseTimestampChange) == 0x000004, "Wrong size on FluxExplodingBarrel_Cosmetic_OnFuseTimestampChange");
static_assert(offsetof(FluxExplodingBarrel_Cosmetic_OnFuseTimestampChange, NewFuseTimestamp) == 0x000000, "Member 'FluxExplodingBarrel_Cosmetic_OnFuseTimestampChange::NewFuseTimestamp' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.Cosmetic_UpdateBarrelVisibility
// 0x0001 (0x0001 - 0x0000)
struct FluxExplodingBarrel_Cosmetic_UpdateBarrelVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_Cosmetic_UpdateBarrelVisibility) == 0x000001, "Wrong alignment on FluxExplodingBarrel_Cosmetic_UpdateBarrelVisibility");
static_assert(sizeof(FluxExplodingBarrel_Cosmetic_UpdateBarrelVisibility) == 0x000001, "Wrong size on FluxExplodingBarrel_Cosmetic_UpdateBarrelVisibility");
static_assert(offsetof(FluxExplodingBarrel_Cosmetic_UpdateBarrelVisibility, IsVisible) == 0x000000, "Member 'FluxExplodingBarrel_Cosmetic_UpdateBarrelVisibility::IsVisible' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.Cosmetic_UpdateExplosionFX
// 0x0004 (0x0004 - 0x0000)
struct FluxExplodingBarrel_Cosmetic_UpdateExplosionFX final
{
public:
	float                                         VisualExplosionFactor;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_Cosmetic_UpdateExplosionFX) == 0x000004, "Wrong alignment on FluxExplodingBarrel_Cosmetic_UpdateExplosionFX");
static_assert(sizeof(FluxExplodingBarrel_Cosmetic_UpdateExplosionFX) == 0x000004, "Wrong size on FluxExplodingBarrel_Cosmetic_UpdateExplosionFX");
static_assert(offsetof(FluxExplodingBarrel_Cosmetic_UpdateExplosionFX, VisualExplosionFactor) == 0x000000, "Member 'FluxExplodingBarrel_Cosmetic_UpdateExplosionFX::VisualExplosionFactor' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.GetExplosionSimulationRelativeSize
// 0x0008 (0x0008 - 0x0000)
struct FluxExplodingBarrel_GetExplosionSimulationRelativeSize final
{
public:
	float                                         ExplosionFactor;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_GetExplosionSimulationRelativeSize) == 0x000004, "Wrong alignment on FluxExplodingBarrel_GetExplosionSimulationRelativeSize");
static_assert(sizeof(FluxExplodingBarrel_GetExplosionSimulationRelativeSize) == 0x000008, "Wrong size on FluxExplodingBarrel_GetExplosionSimulationRelativeSize");
static_assert(offsetof(FluxExplodingBarrel_GetExplosionSimulationRelativeSize, ExplosionFactor) == 0x000000, "Member 'FluxExplodingBarrel_GetExplosionSimulationRelativeSize::ExplosionFactor' has a wrong offset!");
static_assert(offsetof(FluxExplodingBarrel_GetExplosionSimulationRelativeSize, ReturnValue) == 0x000004, "Member 'FluxExplodingBarrel_GetExplosionSimulationRelativeSize::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.GetExplosionVisualRelativeSize
// 0x0008 (0x0008 - 0x0000)
struct FluxExplodingBarrel_GetExplosionVisualRelativeSize final
{
public:
	float                                         ExplosionFactor;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_GetExplosionVisualRelativeSize) == 0x000004, "Wrong alignment on FluxExplodingBarrel_GetExplosionVisualRelativeSize");
static_assert(sizeof(FluxExplodingBarrel_GetExplosionVisualRelativeSize) == 0x000008, "Wrong size on FluxExplodingBarrel_GetExplosionVisualRelativeSize");
static_assert(offsetof(FluxExplodingBarrel_GetExplosionVisualRelativeSize, ExplosionFactor) == 0x000000, "Member 'FluxExplodingBarrel_GetExplosionVisualRelativeSize::ExplosionFactor' has a wrong offset!");
static_assert(offsetof(FluxExplodingBarrel_GetExplosionVisualRelativeSize, ReturnValue) == 0x000004, "Member 'FluxExplodingBarrel_GetExplosionVisualRelativeSize::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.GetFuseFactorCurvedByVisual
// 0x0008 (0x0008 - 0x0000)
struct FluxExplodingBarrel_GetFuseFactorCurvedByVisual final
{
public:
	float                                         FuseFactor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_GetFuseFactorCurvedByVisual) == 0x000004, "Wrong alignment on FluxExplodingBarrel_GetFuseFactorCurvedByVisual");
static_assert(sizeof(FluxExplodingBarrel_GetFuseFactorCurvedByVisual) == 0x000008, "Wrong size on FluxExplodingBarrel_GetFuseFactorCurvedByVisual");
static_assert(offsetof(FluxExplodingBarrel_GetFuseFactorCurvedByVisual, FuseFactor) == 0x000000, "Member 'FluxExplodingBarrel_GetFuseFactorCurvedByVisual::FuseFactor' has a wrong offset!");
static_assert(offsetof(FluxExplodingBarrel_GetFuseFactorCurvedByVisual, ReturnValue) == 0x000004, "Member 'FluxExplodingBarrel_GetFuseFactorCurvedByVisual::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.IsBarrelMeshVisible
// 0x0001 (0x0001 - 0x0000)
struct FluxExplodingBarrel_IsBarrelMeshVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_IsBarrelMeshVisible) == 0x000001, "Wrong alignment on FluxExplodingBarrel_IsBarrelMeshVisible");
static_assert(sizeof(FluxExplodingBarrel_IsBarrelMeshVisible) == 0x000001, "Wrong size on FluxExplodingBarrel_IsBarrelMeshVisible");
static_assert(offsetof(FluxExplodingBarrel_IsBarrelMeshVisible, ReturnValue) == 0x000000, "Member 'FluxExplodingBarrel_IsBarrelMeshVisible::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.MultiCast_ActivateFuse
// 0x0010 (0x0010 - 0x0000)
struct FluxExplodingBarrel_MultiCast_ActivateFuse final
{
public:
	class AActor*                                 ExplosionCauser;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerTimestamp;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxExplodingBarrel_MultiCast_ActivateFuse) == 0x000008, "Wrong alignment on FluxExplodingBarrel_MultiCast_ActivateFuse");
static_assert(sizeof(FluxExplodingBarrel_MultiCast_ActivateFuse) == 0x000010, "Wrong size on FluxExplodingBarrel_MultiCast_ActivateFuse");
static_assert(offsetof(FluxExplodingBarrel_MultiCast_ActivateFuse, ExplosionCauser) == 0x000000, "Member 'FluxExplodingBarrel_MultiCast_ActivateFuse::ExplosionCauser' has a wrong offset!");
static_assert(offsetof(FluxExplodingBarrel_MultiCast_ActivateFuse, TriggerTimestamp) == 0x000008, "Member 'FluxExplodingBarrel_MultiCast_ActivateFuse::TriggerTimestamp' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct FluxExplodingBarrel_GetCurrentState final
{
public:
	EFluxBarrelState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_GetCurrentState) == 0x000001, "Wrong alignment on FluxExplodingBarrel_GetCurrentState");
static_assert(sizeof(FluxExplodingBarrel_GetCurrentState) == 0x000001, "Wrong size on FluxExplodingBarrel_GetCurrentState");
static_assert(offsetof(FluxExplodingBarrel_GetCurrentState, ReturnValue) == 0x000000, "Member 'FluxExplodingBarrel_GetCurrentState::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.GetExplosionFactor_Simulation
// 0x0004 (0x0004 - 0x0000)
struct FluxExplodingBarrel_GetExplosionFactor_Simulation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_GetExplosionFactor_Simulation) == 0x000004, "Wrong alignment on FluxExplodingBarrel_GetExplosionFactor_Simulation");
static_assert(sizeof(FluxExplodingBarrel_GetExplosionFactor_Simulation) == 0x000004, "Wrong size on FluxExplodingBarrel_GetExplosionFactor_Simulation");
static_assert(offsetof(FluxExplodingBarrel_GetExplosionFactor_Simulation, ReturnValue) == 0x000000, "Member 'FluxExplodingBarrel_GetExplosionFactor_Simulation::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.GetExplosionFactor_Visual
// 0x0004 (0x0004 - 0x0000)
struct FluxExplodingBarrel_GetExplosionFactor_Visual final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_GetExplosionFactor_Visual) == 0x000004, "Wrong alignment on FluxExplodingBarrel_GetExplosionFactor_Visual");
static_assert(sizeof(FluxExplodingBarrel_GetExplosionFactor_Visual) == 0x000004, "Wrong size on FluxExplodingBarrel_GetExplosionFactor_Visual");
static_assert(offsetof(FluxExplodingBarrel_GetExplosionFactor_Visual, ReturnValue) == 0x000000, "Member 'FluxExplodingBarrel_GetExplosionFactor_Visual::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxExplodingBarrel.GetFuseFactor
// 0x0004 (0x0004 - 0x0000)
struct FluxExplodingBarrel_GetFuseFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxExplodingBarrel_GetFuseFactor) == 0x000004, "Wrong alignment on FluxExplodingBarrel_GetFuseFactor");
static_assert(sizeof(FluxExplodingBarrel_GetFuseFactor) == 0x000004, "Wrong size on FluxExplodingBarrel_GetFuseFactor");
static_assert(offsetof(FluxExplodingBarrel_GetFuseFactor, ReturnValue) == 0x000000, "Member 'FluxExplodingBarrel_GetFuseFactor::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.BP_DrawActorSample
// 0x0008 (0x0008 - 0x0000)
struct FluxPlayerController_BP_DrawActorSample final
{
public:
	class AActor*                                 RewindableActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_BP_DrawActorSample) == 0x000008, "Wrong alignment on FluxPlayerController_BP_DrawActorSample");
static_assert(sizeof(FluxPlayerController_BP_DrawActorSample) == 0x000008, "Wrong size on FluxPlayerController_BP_DrawActorSample");
static_assert(offsetof(FluxPlayerController_BP_DrawActorSample, RewindableActor) == 0x000000, "Member 'FluxPlayerController_BP_DrawActorSample::RewindableActor' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.BP_DrawActorSampleAtTime
// 0x0010 (0x0010 - 0x0000)
struct FluxPlayerController_BP_DrawActorSampleAtTime final
{
public:
	class AActor*                                 RewindableActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxPlayerController_BP_DrawActorSampleAtTime) == 0x000008, "Wrong alignment on FluxPlayerController_BP_DrawActorSampleAtTime");
static_assert(sizeof(FluxPlayerController_BP_DrawActorSampleAtTime) == 0x000010, "Wrong size on FluxPlayerController_BP_DrawActorSampleAtTime");
static_assert(offsetof(FluxPlayerController_BP_DrawActorSampleAtTime, RewindableActor) == 0x000000, "Member 'FluxPlayerController_BP_DrawActorSampleAtTime::RewindableActor' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_BP_DrawActorSampleAtTime, GameTime) == 0x000008, "Member 'FluxPlayerController_BP_DrawActorSampleAtTime::GameTime' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.CanDamageClones
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_CanDamageClones final
{
public:
	bool                                          bCanDamageClones;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_CanDamageClones) == 0x000001, "Wrong alignment on FluxPlayerController_CanDamageClones");
static_assert(sizeof(FluxPlayerController_CanDamageClones) == 0x000001, "Wrong size on FluxPlayerController_CanDamageClones");
static_assert(offsetof(FluxPlayerController_CanDamageClones, bCanDamageClones) == 0x000000, "Member 'FluxPlayerController_CanDamageClones::bCanDamageClones' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Client_DrawActorSAmples
// 0x0050 (0x0050 - 0x0000)
struct FluxPlayerController_Client_DrawActorSAmples final
{
public:
	class AActor*                                 RewindableActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActorSample                           ServerSample;                                      // 0x0008(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugColor;                                        // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_Client_DrawActorSAmples) == 0x000008, "Wrong alignment on FluxPlayerController_Client_DrawActorSAmples");
static_assert(sizeof(FluxPlayerController_Client_DrawActorSAmples) == 0x000050, "Wrong size on FluxPlayerController_Client_DrawActorSAmples");
static_assert(offsetof(FluxPlayerController_Client_DrawActorSAmples, RewindableActor) == 0x000000, "Member 'FluxPlayerController_Client_DrawActorSAmples::RewindableActor' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_Client_DrawActorSAmples, ServerSample) == 0x000008, "Member 'FluxPlayerController_Client_DrawActorSAmples::ServerSample' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_Client_DrawActorSAmples, DebugColor) == 0x000040, "Member 'FluxPlayerController_Client_DrawActorSAmples::DebugColor' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Client_OnPostLogin
// 0x000C (0x000C - 0x0000)
struct FluxPlayerController_Client_OnPostLogin final
{
public:
	struct FPlayerInfo                            NewPlayerInfo;                                     // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_Client_OnPostLogin) == 0x000004, "Wrong alignment on FluxPlayerController_Client_OnPostLogin");
static_assert(sizeof(FluxPlayerController_Client_OnPostLogin) == 0x00000C, "Wrong size on FluxPlayerController_Client_OnPostLogin");
static_assert(offsetof(FluxPlayerController_Client_OnPostLogin, NewPlayerInfo) == 0x000000, "Member 'FluxPlayerController_Client_OnPostLogin::NewPlayerInfo' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Client_ReceiveChatMessage
// 0x0020 (0x0020 - 0x0000)
struct FluxPlayerController_Client_ReceiveChatMessage final
{
public:
	class APlayerState*                           Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextMessage;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChatChannel                                  Channel;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxPlayerController_Client_ReceiveChatMessage) == 0x000008, "Wrong alignment on FluxPlayerController_Client_ReceiveChatMessage");
static_assert(sizeof(FluxPlayerController_Client_ReceiveChatMessage) == 0x000020, "Wrong size on FluxPlayerController_Client_ReceiveChatMessage");
static_assert(offsetof(FluxPlayerController_Client_ReceiveChatMessage, Sender) == 0x000000, "Member 'FluxPlayerController_Client_ReceiveChatMessage::Sender' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_Client_ReceiveChatMessage, TextMessage) == 0x000008, "Member 'FluxPlayerController_Client_ReceiveChatMessage::TextMessage' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_Client_ReceiveChatMessage, Channel) == 0x000018, "Member 'FluxPlayerController_Client_ReceiveChatMessage::Channel' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Client_ReceiveQuickChat
// 0x0010 (0x0010 - 0x0000)
struct FluxPlayerController_Client_ReceiveQuickChat final
{
public:
	class APlayerState*                           PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        QuickChatID;                                       // 0x0008(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxPlayerController_Client_ReceiveQuickChat) == 0x000008, "Wrong alignment on FluxPlayerController_Client_ReceiveQuickChat");
static_assert(sizeof(FluxPlayerController_Client_ReceiveQuickChat) == 0x000010, "Wrong size on FluxPlayerController_Client_ReceiveQuickChat");
static_assert(offsetof(FluxPlayerController_Client_ReceiveQuickChat, PS) == 0x000000, "Member 'FluxPlayerController_Client_ReceiveQuickChat::PS' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_Client_ReceiveQuickChat, QuickChatID) == 0x000008, "Member 'FluxPlayerController_Client_ReceiveQuickChat::QuickChatID' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ClientOnMatchResultComplete
// 0x00B8 (0x00B8 - 0x0000)
struct FluxPlayerController_ClientOnMatchResultComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchResultDataResponse               PlayerOldData;                                     // 0x0008(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMatchResultDataResponse               PlayerNewData;                                     // 0x0060(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ClientOnMatchResultComplete) == 0x000008, "Wrong alignment on FluxPlayerController_ClientOnMatchResultComplete");
static_assert(sizeof(FluxPlayerController_ClientOnMatchResultComplete) == 0x0000B8, "Wrong size on FluxPlayerController_ClientOnMatchResultComplete");
static_assert(offsetof(FluxPlayerController_ClientOnMatchResultComplete, bWasSuccessful) == 0x000000, "Member 'FluxPlayerController_ClientOnMatchResultComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_ClientOnMatchResultComplete, PlayerOldData) == 0x000008, "Member 'FluxPlayerController_ClientOnMatchResultComplete::PlayerOldData' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_ClientOnMatchResultComplete, PlayerNewData) == 0x000060, "Member 'FluxPlayerController_ClientOnMatchResultComplete::PlayerNewData' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ClientOnRivalRematchState
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_ClientOnRivalRematchState final
{
public:
	bool                                          bRivalWantsToRematch;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ClientOnRivalRematchState) == 0x000001, "Wrong alignment on FluxPlayerController_ClientOnRivalRematchState");
static_assert(sizeof(FluxPlayerController_ClientOnRivalRematchState) == 0x000001, "Wrong size on FluxPlayerController_ClientOnRivalRematchState");
static_assert(offsetof(FluxPlayerController_ClientOnRivalRematchState, bRivalWantsToRematch) == 0x000000, "Member 'FluxPlayerController_ClientOnRivalRematchState::bRivalWantsToRematch' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ClientSetVelocity
// 0x0010 (0x0010 - 0x0000)
struct FluxPlayerController_ClientSetVelocity final
{
public:
	class UTimeWatchMovementComponent*            TWMovementComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxPlayerController_ClientSetVelocity) == 0x000008, "Wrong alignment on FluxPlayerController_ClientSetVelocity");
static_assert(sizeof(FluxPlayerController_ClientSetVelocity) == 0x000010, "Wrong size on FluxPlayerController_ClientSetVelocity");
static_assert(offsetof(FluxPlayerController_ClientSetVelocity, TWMovementComponent) == 0x000000, "Member 'FluxPlayerController_ClientSetVelocity::TWMovementComponent' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_ClientSetVelocity, Velocity) == 0x000008, "Member 'FluxPlayerController_ClientSetVelocity::Velocity' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ClientShotEnemyEffect
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_ClientShotEnemyEffect final
{
public:
	bool                                          IsHeadShot;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ClientShotEnemyEffect) == 0x000001, "Wrong alignment on FluxPlayerController_ClientShotEnemyEffect");
static_assert(sizeof(FluxPlayerController_ClientShotEnemyEffect) == 0x000001, "Wrong size on FluxPlayerController_ClientShotEnemyEffect");
static_assert(offsetof(FluxPlayerController_ClientShotEnemyEffect, IsHeadShot) == 0x000000, "Member 'FluxPlayerController_ClientShotEnemyEffect::IsHeadShot' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ClientSyncState
// 0x0010 (0x0010 - 0x0000)
struct FluxPlayerController_ClientSyncState final
{
public:
	struct FGameStateSyncData                     InResyncData;                                      // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ClientSyncState) == 0x000004, "Wrong alignment on FluxPlayerController_ClientSyncState");
static_assert(sizeof(FluxPlayerController_ClientSyncState) == 0x000010, "Wrong size on FluxPlayerController_ClientSyncState");
static_assert(offsetof(FluxPlayerController_ClientSyncState, InResyncData) == 0x000000, "Member 'FluxPlayerController_ClientSyncState::InResyncData' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.DetectCurrentInputDevice
// 0x0018 (0x0018 - 0x0000)
struct FluxPlayerController_DetectCurrentInputDevice final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_DetectCurrentInputDevice) == 0x000008, "Wrong alignment on FluxPlayerController_DetectCurrentInputDevice");
static_assert(sizeof(FluxPlayerController_DetectCurrentInputDevice) == 0x000018, "Wrong size on FluxPlayerController_DetectCurrentInputDevice");
static_assert(offsetof(FluxPlayerController_DetectCurrentInputDevice, Key) == 0x000000, "Member 'FluxPlayerController_DetectCurrentInputDevice::Key' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.DetectMouseInput
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_DetectMouseInput final
{
public:
	float                                         ammount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_DetectMouseInput) == 0x000004, "Wrong alignment on FluxPlayerController_DetectMouseInput");
static_assert(sizeof(FluxPlayerController_DetectMouseInput) == 0x000004, "Wrong size on FluxPlayerController_DetectMouseInput");
static_assert(offsetof(FluxPlayerController_DetectMouseInput, ammount) == 0x000000, "Member 'FluxPlayerController_DetectMouseInput::ammount' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.GetTurnMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_GetTurnMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_GetTurnMultiplier) == 0x000004, "Wrong alignment on FluxPlayerController_GetTurnMultiplier");
static_assert(sizeof(FluxPlayerController_GetTurnMultiplier) == 0x000004, "Wrong size on FluxPlayerController_GetTurnMultiplier");
static_assert(offsetof(FluxPlayerController_GetTurnMultiplier, ReturnValue) == 0x000000, "Member 'FluxPlayerController_GetTurnMultiplier::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.LoopLength
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_LoopLength final
{
public:
	float                                         Lenght;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_LoopLength) == 0x000004, "Wrong alignment on FluxPlayerController_LoopLength");
static_assert(sizeof(FluxPlayerController_LoopLength) == 0x000004, "Wrong size on FluxPlayerController_LoopLength");
static_assert(offsetof(FluxPlayerController_LoopLength, Lenght) == 0x000000, "Member 'FluxPlayerController_LoopLength::Lenght' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct FluxPlayerController_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_OnGameStateChanged) == 0x000001, "Wrong alignment on FluxPlayerController_OnGameStateChanged");
static_assert(sizeof(FluxPlayerController_OnGameStateChanged) == 0x000002, "Wrong size on FluxPlayerController_OnGameStateChanged");
static_assert(offsetof(FluxPlayerController_OnGameStateChanged, OldState) == 0x000000, "Member 'FluxPlayerController_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_OnGameStateChanged, NewState) == 0x000001, "Member 'FluxPlayerController_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.OnPlayerControllerInputChanged
// 0x0008 (0x0008 - 0x0000)
struct FluxPlayerController_OnPlayerControllerInputChanged final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_OnPlayerControllerInputChanged) == 0x000008, "Wrong alignment on FluxPlayerController_OnPlayerControllerInputChanged");
static_assert(sizeof(FluxPlayerController_OnPlayerControllerInputChanged) == 0x000008, "Wrong size on FluxPlayerController_OnPlayerControllerInputChanged");
static_assert(offsetof(FluxPlayerController_OnPlayerControllerInputChanged, PlayerController) == 0x000000, "Member 'FluxPlayerController_OnPlayerControllerInputChanged::PlayerController' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.OnShotEnemyEffect
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_OnShotEnemyEffect final
{
public:
	bool                                          IsHeadShot;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_OnShotEnemyEffect) == 0x000001, "Wrong alignment on FluxPlayerController_OnShotEnemyEffect");
static_assert(sizeof(FluxPlayerController_OnShotEnemyEffect) == 0x000001, "Wrong size on FluxPlayerController_OnShotEnemyEffect");
static_assert(offsetof(FluxPlayerController_OnShotEnemyEffect, IsHeadShot) == 0x000000, "Member 'FluxPlayerController_OnShotEnemyEffect::IsHeadShot' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.RefreshGamepadCvarValue
// 0x0018 (0x0018 - 0x0000)
struct FluxPlayerController_RefreshGamepadCvarValue final
{
public:
	class FString                                 CVarName;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxPlayerController_RefreshGamepadCvarValue) == 0x000008, "Wrong alignment on FluxPlayerController_RefreshGamepadCvarValue");
static_assert(sizeof(FluxPlayerController_RefreshGamepadCvarValue) == 0x000018, "Wrong size on FluxPlayerController_RefreshGamepadCvarValue");
static_assert(offsetof(FluxPlayerController_RefreshGamepadCvarValue, CVarName) == 0x000000, "Member 'FluxPlayerController_RefreshGamepadCvarValue::CVarName' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_RefreshGamepadCvarValue, InValue) == 0x000010, "Member 'FluxPlayerController_RefreshGamepadCvarValue::InValue' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.SelectQuickChat
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_SelectQuickChat final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_SelectQuickChat) == 0x000004, "Wrong alignment on FluxPlayerController_SelectQuickChat");
static_assert(sizeof(FluxPlayerController_SelectQuickChat) == 0x000004, "Wrong size on FluxPlayerController_SelectQuickChat");
static_assert(offsetof(FluxPlayerController_SelectQuickChat, Index_0) == 0x000000, "Member 'FluxPlayerController_SelectQuickChat::Index_0' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Server_AddPingMarker
// 0x0040 (0x0040 - 0x0000)
struct FluxPlayerController_Server_AddPingMarker final
{
public:
	struct FPingMarker                            NewPingMarker;                                     // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_Server_AddPingMarker) == 0x000008, "Wrong alignment on FluxPlayerController_Server_AddPingMarker");
static_assert(sizeof(FluxPlayerController_Server_AddPingMarker) == 0x000040, "Wrong size on FluxPlayerController_Server_AddPingMarker");
static_assert(offsetof(FluxPlayerController_Server_AddPingMarker, NewPingMarker) == 0x000000, "Member 'FluxPlayerController_Server_AddPingMarker::NewPingMarker' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Server_PostQuickChat
// 0x0002 (0x0002 - 0x0000)
struct FluxPlayerController_Server_PostQuickChat final
{
public:
	uint16                                        QuickChatID;                                       // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_Server_PostQuickChat) == 0x000002, "Wrong alignment on FluxPlayerController_Server_PostQuickChat");
static_assert(sizeof(FluxPlayerController_Server_PostQuickChat) == 0x000002, "Wrong size on FluxPlayerController_Server_PostQuickChat");
static_assert(offsetof(FluxPlayerController_Server_PostQuickChat, QuickChatID) == 0x000000, "Member 'FluxPlayerController_Server_PostQuickChat::QuickChatID' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Server_PostTextChatMessage
// 0x0028 (0x0028 - 0x0000)
struct FluxPlayerController_Server_PostTextChatMessage final
{
public:
	struct FTextChatMessage                       Message;                                           // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	EChatChannel                                  Channel;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxPlayerController_Server_PostTextChatMessage) == 0x000008, "Wrong alignment on FluxPlayerController_Server_PostTextChatMessage");
static_assert(sizeof(FluxPlayerController_Server_PostTextChatMessage) == 0x000028, "Wrong size on FluxPlayerController_Server_PostTextChatMessage");
static_assert(offsetof(FluxPlayerController_Server_PostTextChatMessage, Message) == 0x000000, "Member 'FluxPlayerController_Server_PostTextChatMessage::Message' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_Server_PostTextChatMessage, Channel) == 0x000020, "Member 'FluxPlayerController_Server_PostTextChatMessage::Channel' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Server_RemovePingMarker
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_Server_RemovePingMarker final
{
public:
	int32                                         PingMarkerID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_Server_RemovePingMarker) == 0x000004, "Wrong alignment on FluxPlayerController_Server_RemovePingMarker");
static_assert(sizeof(FluxPlayerController_Server_RemovePingMarker) == 0x000004, "Wrong size on FluxPlayerController_Server_RemovePingMarker");
static_assert(offsetof(FluxPlayerController_Server_RemovePingMarker, PingMarkerID) == 0x000000, "Member 'FluxPlayerController_Server_RemovePingMarker::PingMarkerID' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.Server_RequestActorSamples
// 0x0010 (0x0010 - 0x0000)
struct FluxPlayerController_Server_RequestActorSamples final
{
public:
	class AActor*                                 RewindableActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SynchronizedGameTime;                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxPlayerController_Server_RequestActorSamples) == 0x000008, "Wrong alignment on FluxPlayerController_Server_RequestActorSamples");
static_assert(sizeof(FluxPlayerController_Server_RequestActorSamples) == 0x000010, "Wrong size on FluxPlayerController_Server_RequestActorSamples");
static_assert(offsetof(FluxPlayerController_Server_RequestActorSamples, RewindableActor) == 0x000000, "Member 'FluxPlayerController_Server_RequestActorSamples::RewindableActor' has a wrong offset!");
static_assert(offsetof(FluxPlayerController_Server_RequestActorSamples, SynchronizedGameTime) == 0x000008, "Member 'FluxPlayerController_Server_RequestActorSamples::SynchronizedGameTime' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ServerLoopLengthFluxTime
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_ServerLoopLengthFluxTime final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ServerLoopLengthFluxTime) == 0x000004, "Wrong alignment on FluxPlayerController_ServerLoopLengthFluxTime");
static_assert(sizeof(FluxPlayerController_ServerLoopLengthFluxTime) == 0x000004, "Wrong size on FluxPlayerController_ServerLoopLengthFluxTime");
static_assert(offsetof(FluxPlayerController_ServerLoopLengthFluxTime, Length) == 0x000000, "Member 'FluxPlayerController_ServerLoopLengthFluxTime::Length' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ServerRequestCustomiztionUpdate
// 0x0068 (0x0068 - 0x0000)
struct FluxPlayerController_ServerRequestCustomiztionUpdate final
{
public:
	struct FCustomizationEntry                    CustomizationEntry;                                // 0x0000(0x0068)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ServerRequestCustomiztionUpdate) == 0x000008, "Wrong alignment on FluxPlayerController_ServerRequestCustomiztionUpdate");
static_assert(sizeof(FluxPlayerController_ServerRequestCustomiztionUpdate) == 0x000068, "Wrong size on FluxPlayerController_ServerRequestCustomiztionUpdate");
static_assert(offsetof(FluxPlayerController_ServerRequestCustomiztionUpdate, CustomizationEntry) == 0x000000, "Member 'FluxPlayerController_ServerRequestCustomiztionUpdate::CustomizationEntry' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ServerSetCanDamageClones
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_ServerSetCanDamageClones final
{
public:
	bool                                          bCanDamageClones;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ServerSetCanDamageClones) == 0x000001, "Wrong alignment on FluxPlayerController_ServerSetCanDamageClones");
static_assert(sizeof(FluxPlayerController_ServerSetCanDamageClones) == 0x000001, "Wrong size on FluxPlayerController_ServerSetCanDamageClones");
static_assert(offsetof(FluxPlayerController_ServerSetCanDamageClones, bCanDamageClones) == 0x000000, "Member 'FluxPlayerController_ServerSetCanDamageClones::bCanDamageClones' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ServerSetRematchState
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_ServerSetRematchState final
{
public:
	bool                                          bWantsToRematch;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ServerSetRematchState) == 0x000001, "Wrong alignment on FluxPlayerController_ServerSetRematchState");
static_assert(sizeof(FluxPlayerController_ServerSetRematchState) == 0x000001, "Wrong size on FluxPlayerController_ServerSetRematchState");
static_assert(offsetof(FluxPlayerController_ServerSetRematchState, bWantsToRematch) == 0x000000, "Member 'FluxPlayerController_ServerSetRematchState::bWantsToRematch' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ServerSetVelocity
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_ServerSetVelocity final
{
public:
	float                                         Velocity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ServerSetVelocity) == 0x000004, "Wrong alignment on FluxPlayerController_ServerSetVelocity");
static_assert(sizeof(FluxPlayerController_ServerSetVelocity) == 0x000004, "Wrong size on FluxPlayerController_ServerSetVelocity");
static_assert(offsetof(FluxPlayerController_ServerSetVelocity, Velocity) == 0x000000, "Member 'FluxPlayerController_ServerSetVelocity::Velocity' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.SetActiveGhostVisibility
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_SetActiveGhostVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_SetActiveGhostVisibility) == 0x000001, "Wrong alignment on FluxPlayerController_SetActiveGhostVisibility");
static_assert(sizeof(FluxPlayerController_SetActiveGhostVisibility) == 0x000001, "Wrong size on FluxPlayerController_SetActiveGhostVisibility");
static_assert(offsetof(FluxPlayerController_SetActiveGhostVisibility, bNewVisibility) == 0x000000, "Member 'FluxPlayerController_SetActiveGhostVisibility::bNewVisibility' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.SetAdsSensitivityMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_SetAdsSensitivityMultiplier final
{
public:
	float                                         NewFocusingTurnMultiplier;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_SetAdsSensitivityMultiplier) == 0x000004, "Wrong alignment on FluxPlayerController_SetAdsSensitivityMultiplier");
static_assert(sizeof(FluxPlayerController_SetAdsSensitivityMultiplier) == 0x000004, "Wrong size on FluxPlayerController_SetAdsSensitivityMultiplier");
static_assert(offsetof(FluxPlayerController_SetAdsSensitivityMultiplier, NewFocusingTurnMultiplier) == 0x000000, "Member 'FluxPlayerController_SetAdsSensitivityMultiplier::NewFocusingTurnMultiplier' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.SetPauseState
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_SetPauseState final
{
public:
	bool                                          bIsPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_SetPauseState) == 0x000001, "Wrong alignment on FluxPlayerController_SetPauseState");
static_assert(sizeof(FluxPlayerController_SetPauseState) == 0x000001, "Wrong size on FluxPlayerController_SetPauseState");
static_assert(offsetof(FluxPlayerController_SetPauseState, bIsPaused) == 0x000000, "Member 'FluxPlayerController_SetPauseState::bIsPaused' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.SetTurnSensitivity
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_SetTurnSensitivity final
{
public:
	float                                         NewTurnMultiplier;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_SetTurnSensitivity) == 0x000004, "Wrong alignment on FluxPlayerController_SetTurnSensitivity");
static_assert(sizeof(FluxPlayerController_SetTurnSensitivity) == 0x000004, "Wrong size on FluxPlayerController_SetTurnSensitivity");
static_assert(offsetof(FluxPlayerController_SetTurnSensitivity, NewTurnMultiplier) == 0x000000, "Member 'FluxPlayerController_SetTurnSensitivity::NewTurnMultiplier' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.SetVelocity
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_SetVelocity final
{
public:
	float                                         Velocity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_SetVelocity) == 0x000004, "Wrong alignment on FluxPlayerController_SetVelocity");
static_assert(sizeof(FluxPlayerController_SetVelocity) == 0x000004, "Wrong size on FluxPlayerController_SetVelocity");
static_assert(offsetof(FluxPlayerController_SetVelocity, Velocity) == 0x000000, "Member 'FluxPlayerController_SetVelocity::Velocity' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.ToggleQuickChatCategory
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_ToggleQuickChatCategory final
{
public:
	EQuickChatCategory                            QuickChatCategory;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_ToggleQuickChatCategory) == 0x000001, "Wrong alignment on FluxPlayerController_ToggleQuickChatCategory");
static_assert(sizeof(FluxPlayerController_ToggleQuickChatCategory) == 0x000001, "Wrong size on FluxPlayerController_ToggleQuickChatCategory");
static_assert(offsetof(FluxPlayerController_ToggleQuickChatCategory, QuickChatCategory) == 0x000000, "Member 'FluxPlayerController_ToggleQuickChatCategory::QuickChatCategory' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.GetAkLocalSounds
// 0x0008 (0x0008 - 0x0000)
struct FluxPlayerController_GetAkLocalSounds final
{
public:
	class UNGDAkComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_GetAkLocalSounds) == 0x000008, "Wrong alignment on FluxPlayerController_GetAkLocalSounds");
static_assert(sizeof(FluxPlayerController_GetAkLocalSounds) == 0x000008, "Wrong size on FluxPlayerController_GetAkLocalSounds");
static_assert(offsetof(FluxPlayerController_GetAkLocalSounds, ReturnValue) == 0x000000, "Member 'FluxPlayerController_GetAkLocalSounds::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct FluxPlayerController_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_GetTeamId) == 0x000004, "Wrong alignment on FluxPlayerController_GetTeamId");
static_assert(sizeof(FluxPlayerController_GetTeamId) == 0x000004, "Wrong size on FluxPlayerController_GetTeamId");
static_assert(offsetof(FluxPlayerController_GetTeamId, ReturnValue) == 0x000000, "Member 'FluxPlayerController_GetTeamId::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxPlayerController.IsSpectator
// 0x0001 (0x0001 - 0x0000)
struct FluxPlayerController_IsSpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerController_IsSpectator) == 0x000001, "Wrong alignment on FluxPlayerController_IsSpectator");
static_assert(sizeof(FluxPlayerController_IsSpectator) == 0x000001, "Wrong size on FluxPlayerController_IsSpectator");
static_assert(offsetof(FluxPlayerController_IsSpectator, ReturnValue) == 0x000000, "Member 'FluxPlayerController_IsSpectator::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWCheatManager.ChangeCulture
// 0x0010 (0x0010 - 0x0000)
struct TWCheatManager_ChangeCulture final
{
public:
	class FString                                 Culture;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCheatManager_ChangeCulture) == 0x000008, "Wrong alignment on TWCheatManager_ChangeCulture");
static_assert(sizeof(TWCheatManager_ChangeCulture) == 0x000010, "Wrong size on TWCheatManager_ChangeCulture");
static_assert(offsetof(TWCheatManager_ChangeCulture, Culture) == 0x000000, "Member 'TWCheatManager_ChangeCulture::Culture' has a wrong offset!");

// Function TimeWatch.FluxPlayerStart.GetCharacterEyeLocation
// 0x000C (0x000C - 0x0000)
struct FluxPlayerStart_GetCharacterEyeLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerStart_GetCharacterEyeLocation) == 0x000004, "Wrong alignment on FluxPlayerStart_GetCharacterEyeLocation");
static_assert(sizeof(FluxPlayerStart_GetCharacterEyeLocation) == 0x00000C, "Wrong size on FluxPlayerStart_GetCharacterEyeLocation");
static_assert(offsetof(FluxPlayerStart_GetCharacterEyeLocation, ReturnValue) == 0x000000, "Member 'FluxPlayerStart_GetCharacterEyeLocation::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxPlayerState.ServerSendLocalData
// 0x0008 (0x0008 - 0x0000)
struct FluxPlayerState_ServerSendLocalData final
{
public:
	struct FPlayerLocalData                       LocalData;                                         // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerState_ServerSendLocalData) == 0x000004, "Wrong alignment on FluxPlayerState_ServerSendLocalData");
static_assert(sizeof(FluxPlayerState_ServerSendLocalData) == 0x000008, "Wrong size on FluxPlayerState_ServerSendLocalData");
static_assert(offsetof(FluxPlayerState_ServerSendLocalData, LocalData) == 0x000000, "Member 'FluxPlayerState_ServerSendLocalData::LocalData' has a wrong offset!");

// Function TimeWatch.FluxPlayerState.ServerValidateCustomization
// 0x0068 (0x0068 - 0x0000)
struct FluxPlayerState_ServerValidateCustomization final
{
public:
	struct FCustomizationEntry                    Customization;                                     // 0x0000(0x0068)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerState_ServerValidateCustomization) == 0x000008, "Wrong alignment on FluxPlayerState_ServerValidateCustomization");
static_assert(sizeof(FluxPlayerState_ServerValidateCustomization) == 0x000068, "Wrong size on FluxPlayerState_ServerValidateCustomization");
static_assert(offsetof(FluxPlayerState_ServerValidateCustomization, Customization) == 0x000000, "Member 'FluxPlayerState_ServerValidateCustomization::Customization' has a wrong offset!");

// Function TimeWatch.FluxPlayerState.GetAbilitiesComponent
// 0x0008 (0x0008 - 0x0000)
struct FluxPlayerState_GetAbilitiesComponent final
{
public:
	class UTWAbilitiesComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerState_GetAbilitiesComponent) == 0x000008, "Wrong alignment on FluxPlayerState_GetAbilitiesComponent");
static_assert(sizeof(FluxPlayerState_GetAbilitiesComponent) == 0x000008, "Wrong size on FluxPlayerState_GetAbilitiesComponent");
static_assert(offsetof(FluxPlayerState_GetAbilitiesComponent, ReturnValue) == 0x000000, "Member 'FluxPlayerState_GetAbilitiesComponent::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxPlayerState.GetCharacterIdentifier
// 0x0010 (0x0010 - 0x0000)
struct FluxPlayerState_GetCharacterIdentifier final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerState_GetCharacterIdentifier) == 0x000008, "Wrong alignment on FluxPlayerState_GetCharacterIdentifier");
static_assert(sizeof(FluxPlayerState_GetCharacterIdentifier) == 0x000010, "Wrong size on FluxPlayerState_GetCharacterIdentifier");
static_assert(offsetof(FluxPlayerState_GetCharacterIdentifier, ReturnValue) == 0x000000, "Member 'FluxPlayerState_GetCharacterIdentifier::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxPlayerState.GetCharacterName
// 0x0010 (0x0010 - 0x0000)
struct FluxPlayerState_GetCharacterName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxPlayerState_GetCharacterName) == 0x000008, "Wrong alignment on FluxPlayerState_GetCharacterName");
static_assert(sizeof(FluxPlayerState_GetCharacterName) == 0x000010, "Wrong size on FluxPlayerState_GetCharacterName");
static_assert(offsetof(FluxPlayerState_GetCharacterName, ReturnValue) == 0x000000, "Member 'FluxPlayerState_GetCharacterName::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxTimelineCharacter.GetLastSaved1PPose
// 0x0038 (0x0038 - 0x0000)
struct FluxTimelineCharacter_GetLastSaved1PPose final
{
public:
	struct FPoseSnapshot                          ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxTimelineCharacter_GetLastSaved1PPose) == 0x000008, "Wrong alignment on FluxTimelineCharacter_GetLastSaved1PPose");
static_assert(sizeof(FluxTimelineCharacter_GetLastSaved1PPose) == 0x000038, "Wrong size on FluxTimelineCharacter_GetLastSaved1PPose");
static_assert(offsetof(FluxTimelineCharacter_GetLastSaved1PPose, ReturnValue) == 0x000000, "Member 'FluxTimelineCharacter_GetLastSaved1PPose::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxTimelineCharacter.GetLastSaved3PPose
// 0x0038 (0x0038 - 0x0000)
struct FluxTimelineCharacter_GetLastSaved3PPose final
{
public:
	struct FPoseSnapshot                          ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxTimelineCharacter_GetLastSaved3PPose) == 0x000008, "Wrong alignment on FluxTimelineCharacter_GetLastSaved3PPose");
static_assert(sizeof(FluxTimelineCharacter_GetLastSaved3PPose) == 0x000038, "Wrong size on FluxTimelineCharacter_GetLastSaved3PPose");
static_assert(offsetof(FluxTimelineCharacter_GetLastSaved3PPose, ReturnValue) == 0x000000, "Member 'FluxTimelineCharacter_GetLastSaved3PPose::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxTimelineCharacter.GetLastSavedActorLocation
// 0x000C (0x000C - 0x0000)
struct FluxTimelineCharacter_GetLastSavedActorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxTimelineCharacter_GetLastSavedActorLocation) == 0x000004, "Wrong alignment on FluxTimelineCharacter_GetLastSavedActorLocation");
static_assert(sizeof(FluxTimelineCharacter_GetLastSavedActorLocation) == 0x00000C, "Wrong size on FluxTimelineCharacter_GetLastSavedActorLocation");
static_assert(offsetof(FluxTimelineCharacter_GetLastSavedActorLocation, ReturnValue) == 0x000000, "Member 'FluxTimelineCharacter_GetLastSavedActorLocation::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxTimelineCharacter.GetLastSavedControllerRotation
// 0x000C (0x000C - 0x0000)
struct FluxTimelineCharacter_GetLastSavedControllerRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxTimelineCharacter_GetLastSavedControllerRotation) == 0x000004, "Wrong alignment on FluxTimelineCharacter_GetLastSavedControllerRotation");
static_assert(sizeof(FluxTimelineCharacter_GetLastSavedControllerRotation) == 0x00000C, "Wrong size on FluxTimelineCharacter_GetLastSavedControllerRotation");
static_assert(offsetof(FluxTimelineCharacter_GetLastSavedControllerRotation, ReturnValue) == 0x000000, "Member 'FluxTimelineCharacter_GetLastSavedControllerRotation::ReturnValue' has a wrong offset!");

// Function TimeWatch.FluxTimelineStaticActor.Multicast_SetLivePhysics
// 0x0001 (0x0001 - 0x0000)
struct FluxTimelineStaticActor_Multicast_SetLivePhysics final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxTimelineStaticActor_Multicast_SetLivePhysics) == 0x000001, "Wrong alignment on FluxTimelineStaticActor_Multicast_SetLivePhysics");
static_assert(sizeof(FluxTimelineStaticActor_Multicast_SetLivePhysics) == 0x000001, "Wrong size on FluxTimelineStaticActor_Multicast_SetLivePhysics");
static_assert(offsetof(FluxTimelineStaticActor_Multicast_SetLivePhysics, NewState) == 0x000000, "Member 'FluxTimelineStaticActor_Multicast_SetLivePhysics::NewState' has a wrong offset!");

// Function TimeWatch.FluxTimelineStaticActor.Multicast_TrimTimeline
// 0x0004 (0x0004 - 0x0000)
struct FluxTimelineStaticActor_Multicast_TrimTimeline final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluxTimelineStaticActor_Multicast_TrimTimeline) == 0x000004, "Wrong alignment on FluxTimelineStaticActor_Multicast_TrimTimeline");
static_assert(sizeof(FluxTimelineStaticActor_Multicast_TrimTimeline) == 0x000004, "Wrong size on FluxTimelineStaticActor_Multicast_TrimTimeline");
static_assert(offsetof(FluxTimelineStaticActor_Multicast_TrimTimeline, InTime) == 0x000000, "Member 'FluxTimelineStaticActor_Multicast_TrimTimeline::InTime' has a wrong offset!");

// Function TimeWatch.FluxTimelineStaticActor.OnProjectileBounce
// 0x00A0 (0x00A0 - 0x0000)
struct FluxTimelineStaticActor_OnProjectileBounce final
{
public:
	class AActor*                                 Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             InImpactResult;                                    // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                InImpactVelocity;                                  // 0x0090(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FluxTimelineStaticActor_OnProjectileBounce) == 0x000008, "Wrong alignment on FluxTimelineStaticActor_OnProjectileBounce");
static_assert(sizeof(FluxTimelineStaticActor_OnProjectileBounce) == 0x0000A0, "Wrong size on FluxTimelineStaticActor_OnProjectileBounce");
static_assert(offsetof(FluxTimelineStaticActor_OnProjectileBounce, Projectile) == 0x000000, "Member 'FluxTimelineStaticActor_OnProjectileBounce::Projectile' has a wrong offset!");
static_assert(offsetof(FluxTimelineStaticActor_OnProjectileBounce, InImpactResult) == 0x000008, "Member 'FluxTimelineStaticActor_OnProjectileBounce::InImpactResult' has a wrong offset!");
static_assert(offsetof(FluxTimelineStaticActor_OnProjectileBounce, InImpactVelocity) == 0x000090, "Member 'FluxTimelineStaticActor_OnProjectileBounce::InImpactVelocity' has a wrong offset!");

// Function TimeWatch.FollowPoseableComponent.CleanBonesAndSetSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct FollowPoseableComponent_CleanBonesAndSetSkeletalMesh final
{
public:
	class USkeletalMesh*                          NewMesh;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitPose;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FollowPoseableComponent_CleanBonesAndSetSkeletalMesh) == 0x000008, "Wrong alignment on FollowPoseableComponent_CleanBonesAndSetSkeletalMesh");
static_assert(sizeof(FollowPoseableComponent_CleanBonesAndSetSkeletalMesh) == 0x000010, "Wrong size on FollowPoseableComponent_CleanBonesAndSetSkeletalMesh");
static_assert(offsetof(FollowPoseableComponent_CleanBonesAndSetSkeletalMesh, NewMesh) == 0x000000, "Member 'FollowPoseableComponent_CleanBonesAndSetSkeletalMesh::NewMesh' has a wrong offset!");
static_assert(offsetof(FollowPoseableComponent_CleanBonesAndSetSkeletalMesh, bReinitPose) == 0x000008, "Member 'FollowPoseableComponent_CleanBonesAndSetSkeletalMesh::bReinitPose' has a wrong offset!");

// Function TimeWatch.FriendsListItemWidget.NativeTick
// 0x003C (0x003C - 0x0000)
struct FriendsListItemWidget_NativeTick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListItemWidget_NativeTick) == 0x000004, "Wrong alignment on FriendsListItemWidget_NativeTick");
static_assert(sizeof(FriendsListItemWidget_NativeTick) == 0x00003C, "Wrong size on FriendsListItemWidget_NativeTick");
static_assert(offsetof(FriendsListItemWidget_NativeTick, MyGeometry) == 0x000000, "Member 'FriendsListItemWidget_NativeTick::MyGeometry' has a wrong offset!");
static_assert(offsetof(FriendsListItemWidget_NativeTick, InDeltaTime) == 0x000038, "Member 'FriendsListItemWidget_NativeTick::InDeltaTime' has a wrong offset!");

// Function TimeWatch.FriendsListItemWidget.SetFriend
// 0x0038 (0x0038 - 0x0000)
struct FriendsListItemWidget_SetFriend final
{
public:
	struct FFriendData                            InFriend;                                          // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListItemWidget_SetFriend) == 0x000008, "Wrong alignment on FriendsListItemWidget_SetFriend");
static_assert(sizeof(FriendsListItemWidget_SetFriend) == 0x000038, "Wrong size on FriendsListItemWidget_SetFriend");
static_assert(offsetof(FriendsListItemWidget_SetFriend, InFriend) == 0x000000, "Member 'FriendsListItemWidget_SetFriend::InFriend' has a wrong offset!");

// Function TimeWatch.FriendsListItemWidget.SetInvited
// 0x0001 (0x0001 - 0x0000)
struct FriendsListItemWidget_SetInvited final
{
public:
	bool                                          bIsInvited;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListItemWidget_SetInvited) == 0x000001, "Wrong alignment on FriendsListItemWidget_SetInvited");
static_assert(sizeof(FriendsListItemWidget_SetInvited) == 0x000001, "Wrong size on FriendsListItemWidget_SetInvited");
static_assert(offsetof(FriendsListItemWidget_SetInvited, bIsInvited) == 0x000000, "Member 'FriendsListItemWidget_SetInvited::bIsInvited' has a wrong offset!");

// Function TimeWatch.FriendsListItemWidget.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct FriendsListItemWidget_SetLocked final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListItemWidget_SetLocked) == 0x000001, "Wrong alignment on FriendsListItemWidget_SetLocked");
static_assert(sizeof(FriendsListItemWidget_SetLocked) == 0x000001, "Wrong size on FriendsListItemWidget_SetLocked");
static_assert(offsetof(FriendsListItemWidget_SetLocked, bLocked) == 0x000000, "Member 'FriendsListItemWidget_SetLocked::bLocked' has a wrong offset!");

// Function TimeWatch.FriendsListSeparatorWidget.SetName
// 0x0018 (0x0018 - 0x0000)
struct FriendsListSeparatorWidget_SetName final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListSeparatorWidget_SetName) == 0x000008, "Wrong alignment on FriendsListSeparatorWidget_SetName");
static_assert(sizeof(FriendsListSeparatorWidget_SetName) == 0x000018, "Wrong size on FriendsListSeparatorWidget_SetName");
static_assert(offsetof(FriendsListSeparatorWidget_SetName, Name_0) == 0x000000, "Member 'FriendsListSeparatorWidget_SetName::Name_0' has a wrong offset!");

// Function TimeWatch.FriendsListWidget.FillList
// 0x0010 (0x0010 - 0x0000)
struct FriendsListWidget_FillList final
{
public:
	TArray<struct FFriendData>                    FriendList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListWidget_FillList) == 0x000008, "Wrong alignment on FriendsListWidget_FillList");
static_assert(sizeof(FriendsListWidget_FillList) == 0x000010, "Wrong size on FriendsListWidget_FillList");
static_assert(offsetof(FriendsListWidget_FillList, FriendList) == 0x000000, "Member 'FriendsListWidget_FillList::FriendList' has a wrong offset!");

// Function TimeWatch.FriendsListWidget.OnPartyStatusUpdate
// 0x0001 (0x0001 - 0x0000)
struct FriendsListWidget_OnPartyStatusUpdate final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListWidget_OnPartyStatusUpdate) == 0x000001, "Wrong alignment on FriendsListWidget_OnPartyStatusUpdate");
static_assert(sizeof(FriendsListWidget_OnPartyStatusUpdate) == 0x000001, "Wrong size on FriendsListWidget_OnPartyStatusUpdate");
static_assert(offsetof(FriendsListWidget_OnPartyStatusUpdate, bPartyStructureChanged) == 0x000000, "Member 'FriendsListWidget_OnPartyStatusUpdate::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.FriendsListWidget.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct FriendsListWidget_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListWidget_IsOpen) == 0x000001, "Wrong alignment on FriendsListWidget_IsOpen");
static_assert(sizeof(FriendsListWidget_IsOpen) == 0x000001, "Wrong size on FriendsListWidget_IsOpen");
static_assert(offsetof(FriendsListWidget_IsOpen, ReturnValue) == 0x000000, "Member 'FriendsListWidget_IsOpen::ReturnValue' has a wrong offset!");

// Function TimeWatch.HUDStateBaseGamePlay.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct HUDStateBaseGamePlay_OnStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStateBaseGamePlay_OnStateChanged) == 0x000001, "Wrong alignment on HUDStateBaseGamePlay_OnStateChanged");
static_assert(sizeof(HUDStateBaseGamePlay_OnStateChanged) == 0x000002, "Wrong size on HUDStateBaseGamePlay_OnStateChanged");
static_assert(offsetof(HUDStateBaseGamePlay_OnStateChanged, OldState) == 0x000000, "Member 'HUDStateBaseGamePlay_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(HUDStateBaseGamePlay_OnStateChanged, NewState) == 0x000001, "Member 'HUDStateBaseGamePlay_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.HUDStateBaseGamePlay.OnTeamScoredPoint
// 0x0004 (0x0004 - 0x0000)
struct HUDStateBaseGamePlay_OnTeamScoredPoint final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStateBaseGamePlay_OnTeamScoredPoint) == 0x000004, "Wrong alignment on HUDStateBaseGamePlay_OnTeamScoredPoint");
static_assert(sizeof(HUDStateBaseGamePlay_OnTeamScoredPoint) == 0x000004, "Wrong size on HUDStateBaseGamePlay_OnTeamScoredPoint");
static_assert(offsetof(HUDStateBaseGamePlay_OnTeamScoredPoint, TeamId) == 0x000000, "Member 'HUDStateBaseGamePlay_OnTeamScoredPoint::TeamId' has a wrong offset!");

// Function TimeWatch.TWExplosionGhost.Cosmetic_Setup
// 0x0008 (0x0008 - 0x0000)
struct TWExplosionGhost_Cosmetic_Setup final
{
public:
	class ATimeWatchCharacter*                    ExplosionOwner;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWExplosionGhost_Cosmetic_Setup) == 0x000008, "Wrong alignment on TWExplosionGhost_Cosmetic_Setup");
static_assert(sizeof(TWExplosionGhost_Cosmetic_Setup) == 0x000008, "Wrong size on TWExplosionGhost_Cosmetic_Setup");
static_assert(offsetof(TWExplosionGhost_Cosmetic_Setup, ExplosionOwner) == 0x000000, "Member 'TWExplosionGhost_Cosmetic_Setup::ExplosionOwner' has a wrong offset!");

// Function TimeWatch.TWExplosionGhost.GetExplosionFactor
// 0x0004 (0x0004 - 0x0000)
struct TWExplosionGhost_GetExplosionFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWExplosionGhost_GetExplosionFactor) == 0x000004, "Wrong alignment on TWExplosionGhost_GetExplosionFactor");
static_assert(sizeof(TWExplosionGhost_GetExplosionFactor) == 0x000004, "Wrong size on TWExplosionGhost_GetExplosionFactor");
static_assert(offsetof(TWExplosionGhost_GetExplosionFactor, ReturnValue) == 0x000000, "Member 'TWExplosionGhost_GetExplosionFactor::ReturnValue' has a wrong offset!");

// Function TimeWatch.HUDStateCaptureGamePlay.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct HUDStateCaptureGamePlay_OnStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStateCaptureGamePlay_OnStateChanged) == 0x000001, "Wrong alignment on HUDStateCaptureGamePlay_OnStateChanged");
static_assert(sizeof(HUDStateCaptureGamePlay_OnStateChanged) == 0x000002, "Wrong size on HUDStateCaptureGamePlay_OnStateChanged");
static_assert(offsetof(HUDStateCaptureGamePlay_OnStateChanged, OldState) == 0x000000, "Member 'HUDStateCaptureGamePlay_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(HUDStateCaptureGamePlay_OnStateChanged, NewState) == 0x000001, "Member 'HUDStateCaptureGamePlay_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.HUDStateDeathMatchGamePlay.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct HUDStateDeathMatchGamePlay_OnStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStateDeathMatchGamePlay_OnStateChanged) == 0x000001, "Wrong alignment on HUDStateDeathMatchGamePlay_OnStateChanged");
static_assert(sizeof(HUDStateDeathMatchGamePlay_OnStateChanged) == 0x000002, "Wrong size on HUDStateDeathMatchGamePlay_OnStateChanged");
static_assert(offsetof(HUDStateDeathMatchGamePlay_OnStateChanged, OldState) == 0x000000, "Member 'HUDStateDeathMatchGamePlay_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(HUDStateDeathMatchGamePlay_OnStateChanged, NewState) == 0x000001, "Member 'HUDStateDeathMatchGamePlay_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.HUDStateDominationGamePlay.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct HUDStateDominationGamePlay_OnStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStateDominationGamePlay_OnStateChanged) == 0x000001, "Wrong alignment on HUDStateDominationGamePlay_OnStateChanged");
static_assert(sizeof(HUDStateDominationGamePlay_OnStateChanged) == 0x000002, "Wrong size on HUDStateDominationGamePlay_OnStateChanged");
static_assert(offsetof(HUDStateDominationGamePlay_OnStateChanged, OldState) == 0x000000, "Member 'HUDStateDominationGamePlay_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(HUDStateDominationGamePlay_OnStateChanged, NewState) == 0x000001, "Member 'HUDStateDominationGamePlay_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWGameEventObserver.Multicast_BroadcastEvent
// 0x0010 (0x0010 - 0x0000)
struct TWGameEventObserver_Multicast_BroadcastEvent final
{
public:
	struct FEventReplicationData                  ReplicationData;                                   // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameEventObserver_Multicast_BroadcastEvent) == 0x000008, "Wrong alignment on TWGameEventObserver_Multicast_BroadcastEvent");
static_assert(sizeof(TWGameEventObserver_Multicast_BroadcastEvent) == 0x000010, "Wrong size on TWGameEventObserver_Multicast_BroadcastEvent");
static_assert(offsetof(TWGameEventObserver_Multicast_BroadcastEvent, ReplicationData) == 0x000000, "Member 'TWGameEventObserver_Multicast_BroadcastEvent::ReplicationData' has a wrong offset!");

// Function TimeWatch.TWGameEventObserver.OnGameStateChange
// 0x0002 (0x0002 - 0x0000)
struct TWGameEventObserver_OnGameStateChange final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameEventObserver_OnGameStateChange) == 0x000001, "Wrong alignment on TWGameEventObserver_OnGameStateChange");
static_assert(sizeof(TWGameEventObserver_OnGameStateChange) == 0x000002, "Wrong size on TWGameEventObserver_OnGameStateChange");
static_assert(offsetof(TWGameEventObserver_OnGameStateChange, OldState) == 0x000000, "Member 'TWGameEventObserver_OnGameStateChange::OldState' has a wrong offset!");
static_assert(offsetof(TWGameEventObserver_OnGameStateChange, NewState) == 0x000001, "Member 'TWGameEventObserver_OnGameStateChange::NewState' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_VisualizeTargeting.WaitTargetData
// 0x0020 (0x0020 - 0x0000)
struct TWGameplayTask_VisualizeTargeting_WaitTargetData final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATWGameplayAbilityTargetActor> Class_0;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTWGameplayTask_VisualizeTargeting*     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_VisualizeTargeting_WaitTargetData) == 0x000008, "Wrong alignment on TWGameplayTask_VisualizeTargeting_WaitTargetData");
static_assert(sizeof(TWGameplayTask_VisualizeTargeting_WaitTargetData) == 0x000020, "Wrong size on TWGameplayTask_VisualizeTargeting_WaitTargetData");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_WaitTargetData, OwningAbility) == 0x000000, "Member 'TWGameplayTask_VisualizeTargeting_WaitTargetData::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_WaitTargetData, TaskInstanceName) == 0x000008, "Member 'TWGameplayTask_VisualizeTargeting_WaitTargetData::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_WaitTargetData, Class_0) == 0x000010, "Member 'TWGameplayTask_VisualizeTargeting_WaitTargetData::Class_0' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_WaitTargetData, ReturnValue) == 0x000018, "Member 'TWGameplayTask_VisualizeTargeting_WaitTargetData::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_VisualizeTargeting.BeginSpawningActor
// 0x0020 (0x0020 - 0x0000)
struct TWGameplayTask_VisualizeTargeting_BeginSpawningActor final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATWGameplayAbilityTargetActor> Class_0;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATWGameplayAbilityTargetActor*          SpawnedActor;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayTask_VisualizeTargeting_BeginSpawningActor) == 0x000008, "Wrong alignment on TWGameplayTask_VisualizeTargeting_BeginSpawningActor");
static_assert(sizeof(TWGameplayTask_VisualizeTargeting_BeginSpawningActor) == 0x000020, "Wrong size on TWGameplayTask_VisualizeTargeting_BeginSpawningActor");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_BeginSpawningActor, OwningAbility) == 0x000000, "Member 'TWGameplayTask_VisualizeTargeting_BeginSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_BeginSpawningActor, Class_0) == 0x000008, "Member 'TWGameplayTask_VisualizeTargeting_BeginSpawningActor::Class_0' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_BeginSpawningActor, SpawnedActor) == 0x000010, "Member 'TWGameplayTask_VisualizeTargeting_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_BeginSpawningActor, ReturnValue) == 0x000018, "Member 'TWGameplayTask_VisualizeTargeting_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_VisualizeTargeting.FinishSpawningActor
// 0x0010 (0x0010 - 0x0000)
struct TWGameplayTask_VisualizeTargeting_FinishSpawningActor final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATWGameplayAbilityTargetActor*          SpawnedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_VisualizeTargeting_FinishSpawningActor) == 0x000008, "Wrong alignment on TWGameplayTask_VisualizeTargeting_FinishSpawningActor");
static_assert(sizeof(TWGameplayTask_VisualizeTargeting_FinishSpawningActor) == 0x000010, "Wrong size on TWGameplayTask_VisualizeTargeting_FinishSpawningActor");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_FinishSpawningActor, OwningAbility) == 0x000000, "Member 'TWGameplayTask_VisualizeTargeting_FinishSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_FinishSpawningActor, SpawnedActor) == 0x000008, "Member 'TWGameplayTask_VisualizeTargeting_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_VisualizeTargeting.OnTargetDataCancelledCallback
// 0x0020 (0x0020 - 0x0000)
struct TWGameplayTask_VisualizeTargeting_OnTargetDataCancelledCallback final
{
public:
	struct FTWAbilityCustomDataHandle             CustomDataHandle;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_VisualizeTargeting_OnTargetDataCancelledCallback) == 0x000008, "Wrong alignment on TWGameplayTask_VisualizeTargeting_OnTargetDataCancelledCallback");
static_assert(sizeof(TWGameplayTask_VisualizeTargeting_OnTargetDataCancelledCallback) == 0x000020, "Wrong size on TWGameplayTask_VisualizeTargeting_OnTargetDataCancelledCallback");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_OnTargetDataCancelledCallback, CustomDataHandle) == 0x000000, "Member 'TWGameplayTask_VisualizeTargeting_OnTargetDataCancelledCallback::CustomDataHandle' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_VisualizeTargeting.OnTargetDataReadyCallback
// 0x0020 (0x0020 - 0x0000)
struct TWGameplayTask_VisualizeTargeting_OnTargetDataReadyCallback final
{
public:
	struct FTWAbilityCustomDataHandle             CustomDataHandle;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_VisualizeTargeting_OnTargetDataReadyCallback) == 0x000008, "Wrong alignment on TWGameplayTask_VisualizeTargeting_OnTargetDataReadyCallback");
static_assert(sizeof(TWGameplayTask_VisualizeTargeting_OnTargetDataReadyCallback) == 0x000020, "Wrong size on TWGameplayTask_VisualizeTargeting_OnTargetDataReadyCallback");
static_assert(offsetof(TWGameplayTask_VisualizeTargeting_OnTargetDataReadyCallback, CustomDataHandle) == 0x000000, "Member 'TWGameplayTask_VisualizeTargeting_OnTargetDataReadyCallback::CustomDataHandle' has a wrong offset!");

// Function TimeWatch.InviteRecievedWidget.Open
// 0x0020 (0x0020 - 0x0000)
struct InviteRecievedWidget_Open final
{
public:
	class FString                                 InInviterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InInviterName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InviteRecievedWidget_Open) == 0x000008, "Wrong alignment on InviteRecievedWidget_Open");
static_assert(sizeof(InviteRecievedWidget_Open) == 0x000020, "Wrong size on InviteRecievedWidget_Open");
static_assert(offsetof(InviteRecievedWidget_Open, InInviterId) == 0x000000, "Member 'InviteRecievedWidget_Open::InInviterId' has a wrong offset!");
static_assert(offsetof(InviteRecievedWidget_Open, InInviterName) == 0x000010, "Member 'InviteRecievedWidget_Open::InInviterName' has a wrong offset!");

// Function TimeWatch.TWInteractable.OnInteraction_Internal
// 0x0010 (0x0010 - 0x0000)
struct TWInteractable_OnInteraction_Internal final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractable_OnInteraction_Internal) == 0x000008, "Wrong alignment on TWInteractable_OnInteraction_Internal");
static_assert(sizeof(TWInteractable_OnInteraction_Internal) == 0x000010, "Wrong size on TWInteractable_OnInteraction_Internal");
static_assert(offsetof(TWInteractable_OnInteraction_Internal, ID) == 0x000000, "Member 'TWInteractable_OnInteraction_Internal::ID' has a wrong offset!");
static_assert(offsetof(TWInteractable_OnInteraction_Internal, Interactor) == 0x000008, "Member 'TWInteractable_OnInteraction_Internal::Interactor' has a wrong offset!");

// Function TimeWatch.TWInteractableRewindable.OnInteractionUndo_Internal
// 0x0010 (0x0010 - 0x0000)
struct TWInteractableRewindable_OnInteractionUndo_Internal final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableRewindable_OnInteractionUndo_Internal) == 0x000008, "Wrong alignment on TWInteractableRewindable_OnInteractionUndo_Internal");
static_assert(sizeof(TWInteractableRewindable_OnInteractionUndo_Internal) == 0x000010, "Wrong size on TWInteractableRewindable_OnInteractionUndo_Internal");
static_assert(offsetof(TWInteractableRewindable_OnInteractionUndo_Internal, ID) == 0x000000, "Member 'TWInteractableRewindable_OnInteractionUndo_Internal::ID' has a wrong offset!");
static_assert(offsetof(TWInteractableRewindable_OnInteractionUndo_Internal, Interactor) == 0x000008, "Member 'TWInteractableRewindable_OnInteractionUndo_Internal::Interactor' has a wrong offset!");

// Function TimeWatch.TWGlobals.GetChromaColorScheme
// 0x0008 (0x0008 - 0x0000)
struct TWGlobals_GetChromaColorScheme final
{
public:
	class UTWChromaColorSchemeDataAsset*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGlobals_GetChromaColorScheme) == 0x000008, "Wrong alignment on TWGlobals_GetChromaColorScheme");
static_assert(sizeof(TWGlobals_GetChromaColorScheme) == 0x000008, "Wrong size on TWGlobals_GetChromaColorScheme");
static_assert(offsetof(TWGlobals_GetChromaColorScheme, ReturnValue) == 0x000000, "Member 'TWGlobals_GetChromaColorScheme::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGlobals.GetColorScheme
// 0x0008 (0x0008 - 0x0000)
struct TWGlobals_GetColorScheme final
{
public:
	class UTWColorSchemeDataAsset*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGlobals_GetColorScheme) == 0x000008, "Wrong alignment on TWGlobals_GetColorScheme");
static_assert(sizeof(TWGlobals_GetColorScheme) == 0x000008, "Wrong size on TWGlobals_GetColorScheme");
static_assert(offsetof(TWGlobals_GetColorScheme, ReturnValue) == 0x000000, "Member 'TWGlobals_GetColorScheme::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGlobals.GetGameGlobals
// 0x0008 (0x0008 - 0x0000)
struct TWGlobals_GetGameGlobals final
{
public:
	class UTWGameGlobals*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGlobals_GetGameGlobals) == 0x000008, "Wrong alignment on TWGlobals_GetGameGlobals");
static_assert(sizeof(TWGlobals_GetGameGlobals) == 0x000008, "Wrong size on TWGlobals_GetGameGlobals");
static_assert(offsetof(TWGlobals_GetGameGlobals, ReturnValue) == 0x000000, "Member 'TWGlobals_GetGameGlobals::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGlobals.GetStoreGlobals
// 0x0008 (0x0008 - 0x0000)
struct TWGlobals_GetStoreGlobals final
{
public:
	class UTWStoreGlobals*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGlobals_GetStoreGlobals) == 0x000008, "Wrong alignment on TWGlobals_GetStoreGlobals");
static_assert(sizeof(TWGlobals_GetStoreGlobals) == 0x000008, "Wrong size on TWGlobals_GetStoreGlobals");
static_assert(offsetof(TWGlobals_GetStoreGlobals, ReturnValue) == 0x000000, "Member 'TWGlobals_GetStoreGlobals::ReturnValue' has a wrong offset!");

// Function TimeWatch.LobbyHUD.OnStatePresented
// 0x0008 (0x0008 - 0x0000)
struct LobbyHUD_OnStatePresented final
{
public:
	class UNGDHUDState*                           PresentedState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHUD_OnStatePresented) == 0x000008, "Wrong alignment on LobbyHUD_OnStatePresented");
static_assert(sizeof(LobbyHUD_OnStatePresented) == 0x000008, "Wrong size on LobbyHUD_OnStatePresented");
static_assert(offsetof(LobbyHUD_OnStatePresented, PresentedState) == 0x000000, "Member 'LobbyHUD_OnStatePresented::PresentedState' has a wrong offset!");

// Function TimeWatch.LobbyPlayerController.ClientOnMatchStarted
// 0x0001 (0x0001 - 0x0000)
struct LobbyPlayerController_ClientOnMatchStarted final
{
public:
	ETWMatchType                                  MatchType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerController_ClientOnMatchStarted) == 0x000001, "Wrong alignment on LobbyPlayerController_ClientOnMatchStarted");
static_assert(sizeof(LobbyPlayerController_ClientOnMatchStarted) == 0x000001, "Wrong size on LobbyPlayerController_ClientOnMatchStarted");
static_assert(offsetof(LobbyPlayerController_ClientOnMatchStarted, MatchType) == 0x000000, "Member 'LobbyPlayerController_ClientOnMatchStarted::MatchType' has a wrong offset!");

// Function TimeWatch.LobbyPlayerController.ServerExpoSetDoublesState
// 0x0001 (0x0001 - 0x0000)
struct LobbyPlayerController_ServerExpoSetDoublesState final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerController_ServerExpoSetDoublesState) == 0x000001, "Wrong alignment on LobbyPlayerController_ServerExpoSetDoublesState");
static_assert(sizeof(LobbyPlayerController_ServerExpoSetDoublesState) == 0x000001, "Wrong size on LobbyPlayerController_ServerExpoSetDoublesState");
static_assert(offsetof(LobbyPlayerController_ServerExpoSetDoublesState, NewState) == 0x000000, "Member 'LobbyPlayerController_ServerExpoSetDoublesState::NewState' has a wrong offset!");

// Function TimeWatch.LobbyPlayerController.ServerSendMatchInfo
// 0x000C (0x000C - 0x0000)
struct LobbyPlayerController_ServerSendMatchInfo final
{
public:
	bool                                          IsCustomMatch;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpoTeamIdOverride;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExpoSpectator;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyPlayerController_ServerSendMatchInfo) == 0x000004, "Wrong alignment on LobbyPlayerController_ServerSendMatchInfo");
static_assert(sizeof(LobbyPlayerController_ServerSendMatchInfo) == 0x00000C, "Wrong size on LobbyPlayerController_ServerSendMatchInfo");
static_assert(offsetof(LobbyPlayerController_ServerSendMatchInfo, IsCustomMatch) == 0x000000, "Member 'LobbyPlayerController_ServerSendMatchInfo::IsCustomMatch' has a wrong offset!");
static_assert(offsetof(LobbyPlayerController_ServerSendMatchInfo, ExpoTeamIdOverride) == 0x000004, "Member 'LobbyPlayerController_ServerSendMatchInfo::ExpoTeamIdOverride' has a wrong offset!");
static_assert(offsetof(LobbyPlayerController_ServerSendMatchInfo, IsExpoSpectator) == 0x000008, "Member 'LobbyPlayerController_ServerSendMatchInfo::IsExpoSpectator' has a wrong offset!");

// Function TimeWatch.LobbyPlayerController.ServerStartCustomMatch
// 0x0050 (0x0050 - 0x0000)
struct LobbyPlayerController_ServerStartCustomMatch final
{
public:
	struct FMatchDescriptor                       CustomMatchDescriptor;                             // 0x0000(0x0050)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerController_ServerStartCustomMatch) == 0x000008, "Wrong alignment on LobbyPlayerController_ServerStartCustomMatch");
static_assert(sizeof(LobbyPlayerController_ServerStartCustomMatch) == 0x000050, "Wrong size on LobbyPlayerController_ServerStartCustomMatch");
static_assert(offsetof(LobbyPlayerController_ServerStartCustomMatch, CustomMatchDescriptor) == 0x000000, "Member 'LobbyPlayerController_ServerStartCustomMatch::CustomMatchDescriptor' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_SpawnActor.SpawnActor
// 0x0020 (0x0020 - 0x0000)
struct TWGameplayTask_SpawnActor_SpawnActor final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATWGameplayActorHandle>     Class_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTWGameplayTask_SpawnActor*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_SpawnActor_SpawnActor) == 0x000008, "Wrong alignment on TWGameplayTask_SpawnActor_SpawnActor");
static_assert(sizeof(TWGameplayTask_SpawnActor_SpawnActor) == 0x000020, "Wrong size on TWGameplayTask_SpawnActor_SpawnActor");
static_assert(offsetof(TWGameplayTask_SpawnActor_SpawnActor, OwningAbility) == 0x000000, "Member 'TWGameplayTask_SpawnActor_SpawnActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnActor_SpawnActor, TaskInstanceName) == 0x000008, "Member 'TWGameplayTask_SpawnActor_SpawnActor::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnActor_SpawnActor, Class_0) == 0x000010, "Member 'TWGameplayTask_SpawnActor_SpawnActor::Class_0' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnActor_SpawnActor, ReturnValue) == 0x000018, "Member 'TWGameplayTask_SpawnActor_SpawnActor::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_SpawnActor.BeginSpawningActor
// 0x0020 (0x0020 - 0x0000)
struct TWGameplayTask_SpawnActor_BeginSpawningActor final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATWGameplayActorHandle>     Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATWGameplayActorHandle*                 SpawnedActor;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayTask_SpawnActor_BeginSpawningActor) == 0x000008, "Wrong alignment on TWGameplayTask_SpawnActor_BeginSpawningActor");
static_assert(sizeof(TWGameplayTask_SpawnActor_BeginSpawningActor) == 0x000020, "Wrong size on TWGameplayTask_SpawnActor_BeginSpawningActor");
static_assert(offsetof(TWGameplayTask_SpawnActor_BeginSpawningActor, OwningAbility) == 0x000000, "Member 'TWGameplayTask_SpawnActor_BeginSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnActor_BeginSpawningActor, Class_0) == 0x000008, "Member 'TWGameplayTask_SpawnActor_BeginSpawningActor::Class_0' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnActor_BeginSpawningActor, SpawnedActor) == 0x000010, "Member 'TWGameplayTask_SpawnActor_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnActor_BeginSpawningActor, ReturnValue) == 0x000018, "Member 'TWGameplayTask_SpawnActor_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_SpawnActor.FinishSpawningActor
// 0x0010 (0x0010 - 0x0000)
struct TWGameplayTask_SpawnActor_FinishSpawningActor final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATWGameplayActorHandle*                 SpawnedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_SpawnActor_FinishSpawningActor) == 0x000008, "Wrong alignment on TWGameplayTask_SpawnActor_FinishSpawningActor");
static_assert(sizeof(TWGameplayTask_SpawnActor_FinishSpawningActor) == 0x000010, "Wrong size on TWGameplayTask_SpawnActor_FinishSpawningActor");
static_assert(offsetof(TWGameplayTask_SpawnActor_FinishSpawningActor, OwningAbility) == 0x000000, "Member 'TWGameplayTask_SpawnActor_FinishSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnActor_FinishSpawningActor, SpawnedActor) == 0x000008, "Member 'TWGameplayTask_SpawnActor_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.Host_StartCustomMatch
// 0x0050 (0x0050 - 0x0000)
struct MainMenuHUD_Host_StartCustomMatch final
{
public:
	struct FMatchDescriptor                       HostCustomMatchDescriptor;                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_Host_StartCustomMatch) == 0x000008, "Wrong alignment on MainMenuHUD_Host_StartCustomMatch");
static_assert(sizeof(MainMenuHUD_Host_StartCustomMatch) == 0x000050, "Wrong size on MainMenuHUD_Host_StartCustomMatch");
static_assert(offsetof(MainMenuHUD_Host_StartCustomMatch, HostCustomMatchDescriptor) == 0x000000, "Member 'MainMenuHUD_Host_StartCustomMatch::HostCustomMatchDescriptor' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.IsOnParty
// 0x0001 (0x0001 - 0x0000)
struct MainMenuHUD_IsOnParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_IsOnParty) == 0x000001, "Wrong alignment on MainMenuHUD_IsOnParty");
static_assert(sizeof(MainMenuHUD_IsOnParty) == 0x000001, "Wrong size on MainMenuHUD_IsOnParty");
static_assert(offsetof(MainMenuHUD_IsOnParty, ReturnValue) == 0x000000, "Member 'MainMenuHUD_IsOnParty::ReturnValue' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnFlexmatchMatchmakingStartComplete
// 0x0020 (0x0020 - 0x0000)
struct MainMenuHUD_OnFlexmatchMatchmakingStartComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETWMatchmakingType                            MatchmakingType;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuHUD_OnFlexmatchMatchmakingStartComplete) == 0x000008, "Wrong alignment on MainMenuHUD_OnFlexmatchMatchmakingStartComplete");
static_assert(sizeof(MainMenuHUD_OnFlexmatchMatchmakingStartComplete) == 0x000020, "Wrong size on MainMenuHUD_OnFlexmatchMatchmakingStartComplete");
static_assert(offsetof(MainMenuHUD_OnFlexmatchMatchmakingStartComplete, bWasSuccessful) == 0x000000, "Member 'MainMenuHUD_OnFlexmatchMatchmakingStartComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnFlexmatchMatchmakingStartComplete, ErrorString) == 0x000008, "Member 'MainMenuHUD_OnFlexmatchMatchmakingStartComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnFlexmatchMatchmakingStartComplete, MatchmakingType) == 0x000018, "Member 'MainMenuHUD_OnFlexmatchMatchmakingStartComplete::MatchmakingType' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnFriendInviteAccepted
// 0x00B8 (0x00B8 - 0x0000)
struct MainMenuHUD_OnFriendInviteAccepted final
{
public:
	struct FOnlineSessionSearchResultContainer    InviteResult;                                      // 0x0000(0x00B8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnFriendInviteAccepted) == 0x000008, "Wrong alignment on MainMenuHUD_OnFriendInviteAccepted");
static_assert(sizeof(MainMenuHUD_OnFriendInviteAccepted) == 0x0000B8, "Wrong size on MainMenuHUD_OnFriendInviteAccepted");
static_assert(offsetof(MainMenuHUD_OnFriendInviteAccepted, InviteResult) == 0x000000, "Member 'MainMenuHUD_OnFriendInviteAccepted::InviteResult' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnFriendInviteReceived
// 0x00C8 (0x00C8 - 0x0000)
struct MainMenuHUD_OnFriendInviteReceived final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOnlineSessionSearchResultContainer    InviteResult;                                      // 0x0010(0x00B8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnFriendInviteReceived) == 0x000008, "Wrong alignment on MainMenuHUD_OnFriendInviteReceived");
static_assert(sizeof(MainMenuHUD_OnFriendInviteReceived) == 0x0000C8, "Wrong size on MainMenuHUD_OnFriendInviteReceived");
static_assert(offsetof(MainMenuHUD_OnFriendInviteReceived, UserId) == 0x000000, "Member 'MainMenuHUD_OnFriendInviteReceived::UserId' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnFriendInviteReceived, InviteResult) == 0x000010, "Member 'MainMenuHUD_OnFriendInviteReceived::InviteResult' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnLobbyMatchmakingComplete
// 0x0018 (0x0018 - 0x0000)
struct MainMenuHUD_OnLobbyMatchmakingComplete final
{
public:
	class FString                                 Ticket;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETWMatchmakingType                            MatchmakingType;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuHUD_OnLobbyMatchmakingComplete) == 0x000008, "Wrong alignment on MainMenuHUD_OnLobbyMatchmakingComplete");
static_assert(sizeof(MainMenuHUD_OnLobbyMatchmakingComplete) == 0x000018, "Wrong size on MainMenuHUD_OnLobbyMatchmakingComplete");
static_assert(offsetof(MainMenuHUD_OnLobbyMatchmakingComplete, Ticket) == 0x000000, "Member 'MainMenuHUD_OnLobbyMatchmakingComplete::Ticket' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnLobbyMatchmakingComplete, MatchmakingType) == 0x000010, "Member 'MainMenuHUD_OnLobbyMatchmakingComplete::MatchmakingType' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnLobbyMatchmakingFailed
// 0x0018 (0x0018 - 0x0000)
struct MainMenuHUD_OnLobbyMatchmakingFailed final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETWMatchmakingType                            MatchmakingType;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuHUD_OnLobbyMatchmakingFailed) == 0x000008, "Wrong alignment on MainMenuHUD_OnLobbyMatchmakingFailed");
static_assert(sizeof(MainMenuHUD_OnLobbyMatchmakingFailed) == 0x000018, "Wrong size on MainMenuHUD_OnLobbyMatchmakingFailed");
static_assert(offsetof(MainMenuHUD_OnLobbyMatchmakingFailed, Reason) == 0x000000, "Member 'MainMenuHUD_OnLobbyMatchmakingFailed::Reason' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnLobbyMatchmakingFailed, MatchmakingType) == 0x000010, "Member 'MainMenuHUD_OnLobbyMatchmakingFailed::MatchmakingType' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnLoginComplete
// 0x0018 (0x0018 - 0x0000)
struct MainMenuHUD_OnLoginComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnLoginComplete) == 0x000008, "Wrong alignment on MainMenuHUD_OnLoginComplete");
static_assert(sizeof(MainMenuHUD_OnLoginComplete) == 0x000018, "Wrong size on MainMenuHUD_OnLoginComplete");
static_assert(offsetof(MainMenuHUD_OnLoginComplete, bWasSuccessful) == 0x000000, "Member 'MainMenuHUD_OnLoginComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnLoginComplete, ErrorString) == 0x000008, "Member 'MainMenuHUD_OnLoginComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnMatchmakingPollComplete
// 0x0050 (0x0050 - 0x0000)
struct MainMenuHUD_OnMatchmakingPollComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSessionId;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IpAddress;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnMatchmakingPollComplete) == 0x000008, "Wrong alignment on MainMenuHUD_OnMatchmakingPollComplete");
static_assert(sizeof(MainMenuHUD_OnMatchmakingPollComplete) == 0x000050, "Wrong size on MainMenuHUD_OnMatchmakingPollComplete");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollComplete, bWasSuccessful) == 0x000000, "Member 'MainMenuHUD_OnMatchmakingPollComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollComplete, Status) == 0x000008, "Member 'MainMenuHUD_OnMatchmakingPollComplete::Status' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollComplete, PlayerSessionId) == 0x000018, "Member 'MainMenuHUD_OnMatchmakingPollComplete::PlayerSessionId' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollComplete, IpAddress) == 0x000028, "Member 'MainMenuHUD_OnMatchmakingPollComplete::IpAddress' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollComplete, Port) == 0x000038, "Member 'MainMenuHUD_OnMatchmakingPollComplete::Port' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollComplete, ErrorString) == 0x000040, "Member 'MainMenuHUD_OnMatchmakingPollComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnMatchmakingPollTimeOut
// 0x0050 (0x0050 - 0x0000)
struct MainMenuHUD_OnMatchmakingPollTimeOut final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSessionId;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IpAddress;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnMatchmakingPollTimeOut) == 0x000008, "Wrong alignment on MainMenuHUD_OnMatchmakingPollTimeOut");
static_assert(sizeof(MainMenuHUD_OnMatchmakingPollTimeOut) == 0x000050, "Wrong size on MainMenuHUD_OnMatchmakingPollTimeOut");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollTimeOut, bWasSuccessful) == 0x000000, "Member 'MainMenuHUD_OnMatchmakingPollTimeOut::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollTimeOut, Status) == 0x000008, "Member 'MainMenuHUD_OnMatchmakingPollTimeOut::Status' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollTimeOut, PlayerSessionId) == 0x000018, "Member 'MainMenuHUD_OnMatchmakingPollTimeOut::PlayerSessionId' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollTimeOut, IpAddress) == 0x000028, "Member 'MainMenuHUD_OnMatchmakingPollTimeOut::IpAddress' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollTimeOut, Port) == 0x000038, "Member 'MainMenuHUD_OnMatchmakingPollTimeOut::Port' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnMatchmakingPollTimeOut, ErrorString) == 0x000040, "Member 'MainMenuHUD_OnMatchmakingPollTimeOut::ErrorString' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnNewsComplete
// 0x0028 (0x0028 - 0x0000)
struct MainMenuHUD_OnNewsComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNGDBackendNewsEntry>           NewsEntries;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnNewsComplete) == 0x000008, "Wrong alignment on MainMenuHUD_OnNewsComplete");
static_assert(sizeof(MainMenuHUD_OnNewsComplete) == 0x000028, "Wrong size on MainMenuHUD_OnNewsComplete");
static_assert(offsetof(MainMenuHUD_OnNewsComplete, bWasSuccessful) == 0x000000, "Member 'MainMenuHUD_OnNewsComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnNewsComplete, ErrorString) == 0x000008, "Member 'MainMenuHUD_OnNewsComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnNewsComplete, NewsEntries) == 0x000018, "Member 'MainMenuHUD_OnNewsComplete::NewsEntries' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnPlayerDataUpdateComplete
// 0x0018 (0x0018 - 0x0000)
struct MainMenuHUD_OnPlayerDataUpdateComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnPlayerDataUpdateComplete) == 0x000008, "Wrong alignment on MainMenuHUD_OnPlayerDataUpdateComplete");
static_assert(sizeof(MainMenuHUD_OnPlayerDataUpdateComplete) == 0x000018, "Wrong size on MainMenuHUD_OnPlayerDataUpdateComplete");
static_assert(offsetof(MainMenuHUD_OnPlayerDataUpdateComplete, bWasSuccessful) == 0x000000, "Member 'MainMenuHUD_OnPlayerDataUpdateComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnPlayerDataUpdateComplete, ErrorString) == 0x000008, "Member 'MainMenuHUD_OnPlayerDataUpdateComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnPlayerInventoryRequestComplete
// 0x0018 (0x0018 - 0x0000)
struct MainMenuHUD_OnPlayerInventoryRequestComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnPlayerInventoryRequestComplete) == 0x000008, "Wrong alignment on MainMenuHUD_OnPlayerInventoryRequestComplete");
static_assert(sizeof(MainMenuHUD_OnPlayerInventoryRequestComplete) == 0x000018, "Wrong size on MainMenuHUD_OnPlayerInventoryRequestComplete");
static_assert(offsetof(MainMenuHUD_OnPlayerInventoryRequestComplete, bWasSuccessful) == 0x000000, "Member 'MainMenuHUD_OnPlayerInventoryRequestComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnPlayerInventoryRequestComplete, ErrorString) == 0x000008, "Member 'MainMenuHUD_OnPlayerInventoryRequestComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnServerErrorResponse
// 0x0018 (0x0018 - 0x0000)
struct MainMenuHUD_OnServerErrorResponse final
{
public:
	ENGDBackendServerErrorResponse                ErrorResponse;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnServerErrorResponse) == 0x000008, "Wrong alignment on MainMenuHUD_OnServerErrorResponse");
static_assert(sizeof(MainMenuHUD_OnServerErrorResponse) == 0x000018, "Wrong size on MainMenuHUD_OnServerErrorResponse");
static_assert(offsetof(MainMenuHUD_OnServerErrorResponse, ErrorResponse) == 0x000000, "Member 'MainMenuHUD_OnServerErrorResponse::ErrorResponse' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnServerErrorResponse, ErrorCode) == 0x000008, "Member 'MainMenuHUD_OnServerErrorResponse::ErrorCode' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnStatePresented
// 0x0008 (0x0008 - 0x0000)
struct MainMenuHUD_OnStatePresented final
{
public:
	class UNGDHUDState*                           PresentedState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnStatePresented) == 0x000008, "Wrong alignment on MainMenuHUD_OnStatePresented");
static_assert(sizeof(MainMenuHUD_OnStatePresented) == 0x000008, "Wrong size on MainMenuHUD_OnStatePresented");
static_assert(offsetof(MainMenuHUD_OnStatePresented, PresentedState) == 0x000000, "Member 'MainMenuHUD_OnStatePresented::PresentedState' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.OnTournamentLeaderboardComplete
// 0x0030 (0x0030 - 0x0000)
struct MainMenuHUD_OnTournamentLeaderboardComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderboardFound;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNGDBackendTournamentBoardEntry> NewTournamentEntries;                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_OnTournamentLeaderboardComplete) == 0x000008, "Wrong alignment on MainMenuHUD_OnTournamentLeaderboardComplete");
static_assert(sizeof(MainMenuHUD_OnTournamentLeaderboardComplete) == 0x000030, "Wrong size on MainMenuHUD_OnTournamentLeaderboardComplete");
static_assert(offsetof(MainMenuHUD_OnTournamentLeaderboardComplete, bWasSuccessful) == 0x000000, "Member 'MainMenuHUD_OnTournamentLeaderboardComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnTournamentLeaderboardComplete, ErrorString) == 0x000008, "Member 'MainMenuHUD_OnTournamentLeaderboardComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnTournamentLeaderboardComplete, bLeaderboardFound) == 0x000018, "Member 'MainMenuHUD_OnTournamentLeaderboardComplete::bLeaderboardFound' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_OnTournamentLeaderboardComplete, NewTournamentEntries) == 0x000020, "Member 'MainMenuHUD_OnTournamentLeaderboardComplete::NewTournamentEntries' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.PartyMatchmakingStart
// 0x0018 (0x0018 - 0x0000)
struct MainMenuHUD_PartyMatchmakingStart final
{
public:
	ETWMatchQueueType                             MatchQueueType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LobbyID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_PartyMatchmakingStart) == 0x000008, "Wrong alignment on MainMenuHUD_PartyMatchmakingStart");
static_assert(sizeof(MainMenuHUD_PartyMatchmakingStart) == 0x000018, "Wrong size on MainMenuHUD_PartyMatchmakingStart");
static_assert(offsetof(MainMenuHUD_PartyMatchmakingStart, MatchQueueType) == 0x000000, "Member 'MainMenuHUD_PartyMatchmakingStart::MatchQueueType' has a wrong offset!");
static_assert(offsetof(MainMenuHUD_PartyMatchmakingStart, LobbyID) == 0x000008, "Member 'MainMenuHUD_PartyMatchmakingStart::LobbyID' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.PlayTransitionSequence_ArrowsToNames
// 0x0001 (0x0001 - 0x0000)
struct MainMenuHUD_PlayTransitionSequence_ArrowsToNames final
{
public:
	bool                                          bInReverse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_PlayTransitionSequence_ArrowsToNames) == 0x000001, "Wrong alignment on MainMenuHUD_PlayTransitionSequence_ArrowsToNames");
static_assert(sizeof(MainMenuHUD_PlayTransitionSequence_ArrowsToNames) == 0x000001, "Wrong size on MainMenuHUD_PlayTransitionSequence_ArrowsToNames");
static_assert(offsetof(MainMenuHUD_PlayTransitionSequence_ArrowsToNames, bInReverse) == 0x000000, "Member 'MainMenuHUD_PlayTransitionSequence_ArrowsToNames::bInReverse' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.PlayTransitionSequence_CustomizationToStyleSelection
// 0x0001 (0x0001 - 0x0000)
struct MainMenuHUD_PlayTransitionSequence_CustomizationToStyleSelection final
{
public:
	bool                                          bInReverse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_PlayTransitionSequence_CustomizationToStyleSelection) == 0x000001, "Wrong alignment on MainMenuHUD_PlayTransitionSequence_CustomizationToStyleSelection");
static_assert(sizeof(MainMenuHUD_PlayTransitionSequence_CustomizationToStyleSelection) == 0x000001, "Wrong size on MainMenuHUD_PlayTransitionSequence_CustomizationToStyleSelection");
static_assert(offsetof(MainMenuHUD_PlayTransitionSequence_CustomizationToStyleSelection, bInReverse) == 0x000000, "Member 'MainMenuHUD_PlayTransitionSequence_CustomizationToStyleSelection::bInReverse' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.PlayTransitionSequence_MenuToCustomization
// 0x0001 (0x0001 - 0x0000)
struct MainMenuHUD_PlayTransitionSequence_MenuToCustomization final
{
public:
	bool                                          bInReverse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_PlayTransitionSequence_MenuToCustomization) == 0x000001, "Wrong alignment on MainMenuHUD_PlayTransitionSequence_MenuToCustomization");
static_assert(sizeof(MainMenuHUD_PlayTransitionSequence_MenuToCustomization) == 0x000001, "Wrong size on MainMenuHUD_PlayTransitionSequence_MenuToCustomization");
static_assert(offsetof(MainMenuHUD_PlayTransitionSequence_MenuToCustomization, bInReverse) == 0x000000, "Member 'MainMenuHUD_PlayTransitionSequence_MenuToCustomization::bInReverse' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.ToggleCustomMatchLobby
// 0x0001 (0x0001 - 0x0000)
struct MainMenuHUD_ToggleCustomMatchLobby final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_ToggleCustomMatchLobby) == 0x000001, "Wrong alignment on MainMenuHUD_ToggleCustomMatchLobby");
static_assert(sizeof(MainMenuHUD_ToggleCustomMatchLobby) == 0x000001, "Wrong size on MainMenuHUD_ToggleCustomMatchLobby");
static_assert(offsetof(MainMenuHUD_ToggleCustomMatchLobby, bEnable) == 0x000000, "Member 'MainMenuHUD_ToggleCustomMatchLobby::bEnable' has a wrong offset!");

// Function TimeWatch.MainMenuHUD.UpdatePartyData
// 0x0001 (0x0001 - 0x0000)
struct MainMenuHUD_UpdatePartyData final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuHUD_UpdatePartyData) == 0x000001, "Wrong alignment on MainMenuHUD_UpdatePartyData");
static_assert(sizeof(MainMenuHUD_UpdatePartyData) == 0x000001, "Wrong size on MainMenuHUD_UpdatePartyData");
static_assert(offsetof(MainMenuHUD_UpdatePartyData, bPartyStructureChanged) == 0x000000, "Member 'MainMenuHUD_UpdatePartyData::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.MainMenuPlayerController.ChangeCulture
// 0x0010 (0x0010 - 0x0000)
struct MainMenuPlayerController_ChangeCulture final
{
public:
	class FString                                 Culture;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPlayerController_ChangeCulture) == 0x000008, "Wrong alignment on MainMenuPlayerController_ChangeCulture");
static_assert(sizeof(MainMenuPlayerController_ChangeCulture) == 0x000010, "Wrong size on MainMenuPlayerController_ChangeCulture");
static_assert(offsetof(MainMenuPlayerController_ChangeCulture, Culture) == 0x000000, "Member 'MainMenuPlayerController_ChangeCulture::Culture' has a wrong offset!");

// Function TimeWatch.MainMenuPlayerController.OnVideoStarted
// 0x0010 (0x0010 - 0x0000)
struct MainMenuPlayerController_OnVideoStarted final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPlayerController_OnVideoStarted) == 0x000008, "Wrong alignment on MainMenuPlayerController_OnVideoStarted");
static_assert(sizeof(MainMenuPlayerController_OnVideoStarted) == 0x000010, "Wrong size on MainMenuPlayerController_OnVideoStarted");
static_assert(offsetof(MainMenuPlayerController_OnVideoStarted, OpenedUrl) == 0x000000, "Member 'MainMenuPlayerController_OnVideoStarted::OpenedUrl' has a wrong offset!");

// Function TimeWatch.MainMenuPlayerController.Scroll
// 0x0004 (0x0004 - 0x0000)
struct MainMenuPlayerController_Scroll final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPlayerController_Scroll) == 0x000004, "Wrong alignment on MainMenuPlayerController_Scroll");
static_assert(sizeof(MainMenuPlayerController_Scroll) == 0x000004, "Wrong size on MainMenuPlayerController_Scroll");
static_assert(offsetof(MainMenuPlayerController_Scroll, Value) == 0x000000, "Member 'MainMenuPlayerController_Scroll::Value' has a wrong offset!");

// Function TimeWatch.MatchEventLog.MulticastAddMatchLog
// 0x0028 (0x0028 - 0x0000)
struct MatchEventLog_MulticastAddMatchLog final
{
public:
	struct FMatchEvent                            MatcthEvent;                                       // 0x0000(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchEventLog_MulticastAddMatchLog) == 0x000008, "Wrong alignment on MatchEventLog_MulticastAddMatchLog");
static_assert(sizeof(MatchEventLog_MulticastAddMatchLog) == 0x000028, "Wrong size on MatchEventLog_MulticastAddMatchLog");
static_assert(offsetof(MatchEventLog_MulticastAddMatchLog, MatcthEvent) == 0x000000, "Member 'MatchEventLog_MulticastAddMatchLog::MatcthEvent' has a wrong offset!");

// Function TimeWatch.MatchEventLog.MulticastConfirmMatchLog
// 0x0004 (0x0004 - 0x0000)
struct MatchEventLog_MulticastConfirmMatchLog final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchEventLog_MulticastConfirmMatchLog) == 0x000004, "Wrong alignment on MatchEventLog_MulticastConfirmMatchLog");
static_assert(sizeof(MatchEventLog_MulticastConfirmMatchLog) == 0x000004, "Wrong size on MatchEventLog_MulticastConfirmMatchLog");
static_assert(offsetof(MatchEventLog_MulticastConfirmMatchLog, Index_0) == 0x000000, "Member 'MatchEventLog_MulticastConfirmMatchLog::Index_0' has a wrong offset!");

// Function TimeWatch.MatchEventLog.MulticastDiscardMatchLog
// 0x0004 (0x0004 - 0x0000)
struct MatchEventLog_MulticastDiscardMatchLog final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchEventLog_MulticastDiscardMatchLog) == 0x000004, "Wrong alignment on MatchEventLog_MulticastDiscardMatchLog");
static_assert(sizeof(MatchEventLog_MulticastDiscardMatchLog) == 0x000004, "Wrong size on MatchEventLog_MulticastDiscardMatchLog");
static_assert(offsetof(MatchEventLog_MulticastDiscardMatchLog, Index_0) == 0x000000, "Member 'MatchEventLog_MulticastDiscardMatchLog::Index_0' has a wrong offset!");

// Function TimeWatch.TWBaseMatchIntroActor.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWBaseMatchIntroActor_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWBaseMatchIntroActor_OnGameStateChanged) == 0x000001, "Wrong alignment on TWBaseMatchIntroActor_OnGameStateChanged");
static_assert(sizeof(TWBaseMatchIntroActor_OnGameStateChanged) == 0x000002, "Wrong size on TWBaseMatchIntroActor_OnGameStateChanged");
static_assert(offsetof(TWBaseMatchIntroActor_OnGameStateChanged, OldState) == 0x000000, "Member 'TWBaseMatchIntroActor_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWBaseMatchIntroActor_OnGameStateChanged, NewState) == 0x000001, "Member 'TWBaseMatchIntroActor_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWBaseMatchIntroActor.GetPlayerCameraManager
// 0x0008 (0x0008 - 0x0000)
struct TWBaseMatchIntroActor_GetPlayerCameraManager final
{
public:
	class ATWPlayerCameraManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWBaseMatchIntroActor_GetPlayerCameraManager) == 0x000008, "Wrong alignment on TWBaseMatchIntroActor_GetPlayerCameraManager");
static_assert(sizeof(TWBaseMatchIntroActor_GetPlayerCameraManager) == 0x000008, "Wrong size on TWBaseMatchIntroActor_GetPlayerCameraManager");
static_assert(offsetof(TWBaseMatchIntroActor_GetPlayerCameraManager, ReturnValue) == 0x000000, "Member 'TWBaseMatchIntroActor_GetPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.CosmeticOnCharacterHitted
// 0x0010 (0x0010 - 0x0000)
struct TemporalWeapon_CosmeticOnCharacterHitted final
{
public:
	class AActor*                                 CharacterHitted;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneHitted;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_CosmeticOnCharacterHitted) == 0x000008, "Wrong alignment on TemporalWeapon_CosmeticOnCharacterHitted");
static_assert(sizeof(TemporalWeapon_CosmeticOnCharacterHitted) == 0x000010, "Wrong size on TemporalWeapon_CosmeticOnCharacterHitted");
static_assert(offsetof(TemporalWeapon_CosmeticOnCharacterHitted, CharacterHitted) == 0x000000, "Member 'TemporalWeapon_CosmeticOnCharacterHitted::CharacterHitted' has a wrong offset!");
static_assert(offsetof(TemporalWeapon_CosmeticOnCharacterHitted, BoneHitted) == 0x000008, "Member 'TemporalWeapon_CosmeticOnCharacterHitted::BoneHitted' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.FillMuzzleFlashPool
// 0x0028 (0x0028 - 0x0000)
struct TemporalWeapon_FillMuzzleFlashPool final
{
public:
	struct FMuzzleFlashPool                       PoolToFill;                                        // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	TSubclassOf<class ATemporalParticle>          TemporalParticleClass;                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_FillMuzzleFlashPool) == 0x000008, "Wrong alignment on TemporalWeapon_FillMuzzleFlashPool");
static_assert(sizeof(TemporalWeapon_FillMuzzleFlashPool) == 0x000028, "Wrong size on TemporalWeapon_FillMuzzleFlashPool");
static_assert(offsetof(TemporalWeapon_FillMuzzleFlashPool, PoolToFill) == 0x000000, "Member 'TemporalWeapon_FillMuzzleFlashPool::PoolToFill' has a wrong offset!");
static_assert(offsetof(TemporalWeapon_FillMuzzleFlashPool, TemporalParticleClass) == 0x000020, "Member 'TemporalWeapon_FillMuzzleFlashPool::TemporalParticleClass' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.Multicast_ForceSnapshot
// 0x0024 (0x0024 - 0x0000)
struct TemporalWeapon_Multicast_ForceSnapshot final
{
public:
	struct FTemporalWeaponSnapshot                AuthorativeSnapshot;                               // 0x0000(0x0024)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_Multicast_ForceSnapshot) == 0x000004, "Wrong alignment on TemporalWeapon_Multicast_ForceSnapshot");
static_assert(sizeof(TemporalWeapon_Multicast_ForceSnapshot) == 0x000024, "Wrong size on TemporalWeapon_Multicast_ForceSnapshot");
static_assert(offsetof(TemporalWeapon_Multicast_ForceSnapshot, AuthorativeSnapshot) == 0x000000, "Member 'TemporalWeapon_Multicast_ForceSnapshot::AuthorativeSnapshot' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.Native_CosmeticsOnProjectileImpact
// 0x0088 (0x0088 - 0x0000)
struct TemporalWeapon_Native_CosmeticsOnProjectileImpact final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_Native_CosmeticsOnProjectileImpact) == 0x000004, "Wrong alignment on TemporalWeapon_Native_CosmeticsOnProjectileImpact");
static_assert(sizeof(TemporalWeapon_Native_CosmeticsOnProjectileImpact) == 0x000088, "Wrong size on TemporalWeapon_Native_CosmeticsOnProjectileImpact");
static_assert(offsetof(TemporalWeapon_Native_CosmeticsOnProjectileImpact, Hit) == 0x000000, "Member 'TemporalWeapon_Native_CosmeticsOnProjectileImpact::Hit' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.SetDrawDuration
// 0x0004 (0x0004 - 0x0000)
struct TemporalWeapon_SetDrawDuration final
{
public:
	float                                         InDrawDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_SetDrawDuration) == 0x000004, "Wrong alignment on TemporalWeapon_SetDrawDuration");
static_assert(sizeof(TemporalWeapon_SetDrawDuration) == 0x000004, "Wrong size on TemporalWeapon_SetDrawDuration");
static_assert(offsetof(TemporalWeapon_SetDrawDuration, InDrawDuration) == 0x000000, "Member 'TemporalWeapon_SetDrawDuration::InDrawDuration' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.SetFireRate
// 0x0004 (0x0004 - 0x0000)
struct TemporalWeapon_SetFireRate final
{
public:
	float                                         InFireRate;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_SetFireRate) == 0x000004, "Wrong alignment on TemporalWeapon_SetFireRate");
static_assert(sizeof(TemporalWeapon_SetFireRate) == 0x000004, "Wrong size on TemporalWeapon_SetFireRate");
static_assert(offsetof(TemporalWeapon_SetFireRate, InFireRate) == 0x000000, "Member 'TemporalWeapon_SetFireRate::InFireRate' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.SetHolsterDuration
// 0x0004 (0x0004 - 0x0000)
struct TemporalWeapon_SetHolsterDuration final
{
public:
	float                                         InHolsterDuration;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_SetHolsterDuration) == 0x000004, "Wrong alignment on TemporalWeapon_SetHolsterDuration");
static_assert(sizeof(TemporalWeapon_SetHolsterDuration) == 0x000004, "Wrong size on TemporalWeapon_SetHolsterDuration");
static_assert(offsetof(TemporalWeapon_SetHolsterDuration, InHolsterDuration) == 0x000000, "Member 'TemporalWeapon_SetHolsterDuration::InHolsterDuration' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.SetMuzzleSpeed
// 0x0004 (0x0004 - 0x0000)
struct TemporalWeapon_SetMuzzleSpeed final
{
public:
	float                                         InMuzzleSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_SetMuzzleSpeed) == 0x000004, "Wrong alignment on TemporalWeapon_SetMuzzleSpeed");
static_assert(sizeof(TemporalWeapon_SetMuzzleSpeed) == 0x000004, "Wrong size on TemporalWeapon_SetMuzzleSpeed");
static_assert(offsetof(TemporalWeapon_SetMuzzleSpeed, InMuzzleSpeed) == 0x000000, "Member 'TemporalWeapon_SetMuzzleSpeed::InMuzzleSpeed' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.SetReloadTime
// 0x0004 (0x0004 - 0x0000)
struct TemporalWeapon_SetReloadTime final
{
public:
	float                                         InReloadTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_SetReloadTime) == 0x000004, "Wrong alignment on TemporalWeapon_SetReloadTime");
static_assert(sizeof(TemporalWeapon_SetReloadTime) == 0x000004, "Wrong size on TemporalWeapon_SetReloadTime");
static_assert(offsetof(TemporalWeapon_SetReloadTime, InReloadTime) == 0x000000, "Member 'TemporalWeapon_SetReloadTime::InReloadTime' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.SpawnMuzzleFlash
// 0x0004 (0x0004 - 0x0000)
struct TemporalWeapon_SpawnMuzzleFlash final
{
public:
	float                                         NewCreationTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_SpawnMuzzleFlash) == 0x000004, "Wrong alignment on TemporalWeapon_SpawnMuzzleFlash");
static_assert(sizeof(TemporalWeapon_SpawnMuzzleFlash) == 0x000004, "Wrong size on TemporalWeapon_SpawnMuzzleFlash");
static_assert(offsetof(TemporalWeapon_SpawnMuzzleFlash, NewCreationTime) == 0x000000, "Member 'TemporalWeapon_SpawnMuzzleFlash::NewCreationTime' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.GetCurrentMuzzleFlashParticleClass
// 0x0008 (0x0008 - 0x0000)
struct TemporalWeapon_GetCurrentMuzzleFlashParticleClass final
{
public:
	TSubclassOf<class ATemporalParticle>          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_GetCurrentMuzzleFlashParticleClass) == 0x000008, "Wrong alignment on TemporalWeapon_GetCurrentMuzzleFlashParticleClass");
static_assert(sizeof(TemporalWeapon_GetCurrentMuzzleFlashParticleClass) == 0x000008, "Wrong size on TemporalWeapon_GetCurrentMuzzleFlashParticleClass");
static_assert(offsetof(TemporalWeapon_GetCurrentMuzzleFlashParticleClass, ReturnValue) == 0x000000, "Member 'TemporalWeapon_GetCurrentMuzzleFlashParticleClass::ReturnValue' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.GetCurrentMuzzleFlashPool
// 0x0020 (0x0020 - 0x0000)
struct TemporalWeapon_GetCurrentMuzzleFlashPool final
{
public:
	struct FMuzzleFlashPool                       ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_GetCurrentMuzzleFlashPool) == 0x000008, "Wrong alignment on TemporalWeapon_GetCurrentMuzzleFlashPool");
static_assert(sizeof(TemporalWeapon_GetCurrentMuzzleFlashPool) == 0x000020, "Wrong size on TemporalWeapon_GetCurrentMuzzleFlashPool");
static_assert(offsetof(TemporalWeapon_GetCurrentMuzzleFlashPool, ReturnValue) == 0x000000, "Member 'TemporalWeapon_GetCurrentMuzzleFlashPool::ReturnValue' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.GetHolder
// 0x0008 (0x0008 - 0x0000)
struct TemporalWeapon_GetHolder final
{
public:
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_GetHolder) == 0x000008, "Wrong alignment on TemporalWeapon_GetHolder");
static_assert(sizeof(TemporalWeapon_GetHolder) == 0x000008, "Wrong size on TemporalWeapon_GetHolder");
static_assert(offsetof(TemporalWeapon_GetHolder, ReturnValue) == 0x000000, "Member 'TemporalWeapon_GetHolder::ReturnValue' has a wrong offset!");

// Function TimeWatch.TemporalWeapon.GetHUD
// 0x0008 (0x0008 - 0x0000)
struct TemporalWeapon_GetHUD final
{
public:
	class ATimeWatchHUD*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeapon_GetHUD) == 0x000008, "Wrong alignment on TemporalWeapon_GetHUD");
static_assert(sizeof(TemporalWeapon_GetHUD) == 0x000008, "Wrong size on TemporalWeapon_GetHUD");
static_assert(offsetof(TemporalWeapon_GetHUD, ReturnValue) == 0x000000, "Member 'TemporalWeapon_GetHUD::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLaserWeapon.OnImpactStateChange
// 0x0001 (0x0001 - 0x0000)
struct TWLaserWeapon_OnImpactStateChange final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLaserWeapon_OnImpactStateChange) == 0x000001, "Wrong alignment on TWLaserWeapon_OnImpactStateChange");
static_assert(sizeof(TWLaserWeapon_OnImpactStateChange) == 0x000001, "Wrong size on TWLaserWeapon_OnImpactStateChange");
static_assert(offsetof(TWLaserWeapon_OnImpactStateChange, NewState) == 0x000000, "Member 'TWLaserWeapon_OnImpactStateChange::NewState' has a wrong offset!");

// Function TimeWatch.TWLaserWeapon.OnSoundEvent
// 0x0002 (0x0002 - 0x0000)
struct TWLaserWeapon_OnSoundEvent final
{
public:
	ELaserSoundEventType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTimeGoingForward;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLaserWeapon_OnSoundEvent) == 0x000001, "Wrong alignment on TWLaserWeapon_OnSoundEvent");
static_assert(sizeof(TWLaserWeapon_OnSoundEvent) == 0x000002, "Wrong size on TWLaserWeapon_OnSoundEvent");
static_assert(offsetof(TWLaserWeapon_OnSoundEvent, Type) == 0x000000, "Member 'TWLaserWeapon_OnSoundEvent::Type' has a wrong offset!");
static_assert(offsetof(TWLaserWeapon_OnSoundEvent, IsTimeGoingForward) == 0x000001, "Member 'TWLaserWeapon_OnSoundEvent::IsTimeGoingForward' has a wrong offset!");

// Function TimeWatch.TWLaserWeapon.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWLaserWeapon_OnStateChanged final
{
public:
	bool                                          bIsFirstPerson;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLaserWeapon_OnStateChanged) == 0x000001, "Wrong alignment on TWLaserWeapon_OnStateChanged");
static_assert(sizeof(TWLaserWeapon_OnStateChanged) == 0x000002, "Wrong size on TWLaserWeapon_OnStateChanged");
static_assert(offsetof(TWLaserWeapon_OnStateChanged, bIsFirstPerson) == 0x000000, "Member 'TWLaserWeapon_OnStateChanged::bIsFirstPerson' has a wrong offset!");
static_assert(offsetof(TWLaserWeapon_OnStateChanged, NewState) == 0x000001, "Member 'TWLaserWeapon_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWLaserWeapon.GetLaserLength
// 0x0004 (0x0004 - 0x0000)
struct TWLaserWeapon_GetLaserLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLaserWeapon_GetLaserLength) == 0x000004, "Wrong alignment on TWLaserWeapon_GetLaserLength");
static_assert(sizeof(TWLaserWeapon_GetLaserLength) == 0x000004, "Wrong size on TWLaserWeapon_GetLaserLength");
static_assert(offsetof(TWLaserWeapon_GetLaserLength, ReturnValue) == 0x000000, "Member 'TWLaserWeapon_GetLaserLength::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLaserWeapon.IsActiveWeapon
// 0x0002 (0x0002 - 0x0000)
struct TWLaserWeapon_IsActiveWeapon final
{
public:
	bool                                          bCosmeticOnly;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLaserWeapon_IsActiveWeapon) == 0x000001, "Wrong alignment on TWLaserWeapon_IsActiveWeapon");
static_assert(sizeof(TWLaserWeapon_IsActiveWeapon) == 0x000002, "Wrong size on TWLaserWeapon_IsActiveWeapon");
static_assert(offsetof(TWLaserWeapon_IsActiveWeapon, bCosmeticOnly) == 0x000000, "Member 'TWLaserWeapon_IsActiveWeapon::bCosmeticOnly' has a wrong offset!");
static_assert(offsetof(TWLaserWeapon_IsActiveWeapon, ReturnValue) == 0x000001, "Member 'TWLaserWeapon_IsActiveWeapon::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLaserWeapon.IsBeingUsed
// 0x0001 (0x0001 - 0x0000)
struct TWLaserWeapon_IsBeingUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLaserWeapon_IsBeingUsed) == 0x000001, "Wrong alignment on TWLaserWeapon_IsBeingUsed");
static_assert(sizeof(TWLaserWeapon_IsBeingUsed) == 0x000001, "Wrong size on TWLaserWeapon_IsBeingUsed");
static_assert(offsetof(TWLaserWeapon_IsBeingUsed, ReturnValue) == 0x000000, "Member 'TWLaserWeapon_IsBeingUsed::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLaserWeapon.IsWarmingUp
// 0x0002 (0x0002 - 0x0000)
struct TWLaserWeapon_IsWarmingUp final
{
public:
	bool                                          bSkipWarmUpTimeCheck;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLaserWeapon_IsWarmingUp) == 0x000001, "Wrong alignment on TWLaserWeapon_IsWarmingUp");
static_assert(sizeof(TWLaserWeapon_IsWarmingUp) == 0x000002, "Wrong size on TWLaserWeapon_IsWarmingUp");
static_assert(offsetof(TWLaserWeapon_IsWarmingUp, bSkipWarmUpTimeCheck) == 0x000000, "Member 'TWLaserWeapon_IsWarmingUp::bSkipWarmUpTimeCheck' has a wrong offset!");
static_assert(offsetof(TWLaserWeapon_IsWarmingUp, ReturnValue) == 0x000001, "Member 'TWLaserWeapon_IsWarmingUp::ReturnValue' has a wrong offset!");

// Function TimeWatch.MatchIntroActor.BP_CosmeticPlayAnimation
// 0x0008 (0x0008 - 0x0000)
struct MatchIntroActor_BP_CosmeticPlayAnimation final
{
public:
	int32                                         CloneIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchIntroActor_BP_CosmeticPlayAnimation) == 0x000004, "Wrong alignment on MatchIntroActor_BP_CosmeticPlayAnimation");
static_assert(sizeof(MatchIntroActor_BP_CosmeticPlayAnimation) == 0x000008, "Wrong size on MatchIntroActor_BP_CosmeticPlayAnimation");
static_assert(offsetof(MatchIntroActor_BP_CosmeticPlayAnimation, CloneIndex) == 0x000000, "Member 'MatchIntroActor_BP_CosmeticPlayAnimation::CloneIndex' has a wrong offset!");
static_assert(offsetof(MatchIntroActor_BP_CosmeticPlayAnimation, TeamIndex) == 0x000004, "Member 'MatchIntroActor_BP_CosmeticPlayAnimation::TeamIndex' has a wrong offset!");

// Function TimeWatch.MatchIntroActor.BP_CosmeticSetDynamicMaterialScalarParameter
// 0x0014 (0x0014 - 0x0000)
struct MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter final
{
public:
	int32                                         CloneIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMaterialParameterName;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter) == 0x000004, "Wrong alignment on MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter");
static_assert(sizeof(MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter) == 0x000014, "Wrong size on MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter");
static_assert(offsetof(MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter, CloneIndex) == 0x000000, "Member 'MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter::CloneIndex' has a wrong offset!");
static_assert(offsetof(MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter, TeamIndex) == 0x000004, "Member 'MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter::TeamIndex' has a wrong offset!");
static_assert(offsetof(MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter, InMaterialParameterName) == 0x000008, "Member 'MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter::InMaterialParameterName' has a wrong offset!");
static_assert(offsetof(MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter, InValue) == 0x000010, "Member 'MatchIntroActor_BP_CosmeticSetDynamicMaterialScalarParameter::InValue' has a wrong offset!");

// Function TimeWatch.MatchIntroActor.GetSkeletalMeshMesh
// 0x0010 (0x0010 - 0x0000)
struct MatchIntroActor_GetSkeletalMeshMesh final
{
public:
	int32                                         CloneIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchIntroActor_GetSkeletalMeshMesh) == 0x000008, "Wrong alignment on MatchIntroActor_GetSkeletalMeshMesh");
static_assert(sizeof(MatchIntroActor_GetSkeletalMeshMesh) == 0x000010, "Wrong size on MatchIntroActor_GetSkeletalMeshMesh");
static_assert(offsetof(MatchIntroActor_GetSkeletalMeshMesh, CloneIndex) == 0x000000, "Member 'MatchIntroActor_GetSkeletalMeshMesh::CloneIndex' has a wrong offset!");
static_assert(offsetof(MatchIntroActor_GetSkeletalMeshMesh, TeamIndex) == 0x000004, "Member 'MatchIntroActor_GetSkeletalMeshMesh::TeamIndex' has a wrong offset!");
static_assert(offsetof(MatchIntroActor_GetSkeletalMeshMesh, ReturnValue) == 0x000008, "Member 'MatchIntroActor_GetSkeletalMeshMesh::ReturnValue' has a wrong offset!");

// Function TimeWatch.MatchLobbyPlayerSlotWidget.BP_FillPlayer
// 0x0008 (0x0008 - 0x0000)
struct MatchLobbyPlayerSlotWidget_BP_FillPlayer final
{
public:
	class UTWPartyMember*                         PartyMember;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchLobbyPlayerSlotWidget_BP_FillPlayer) == 0x000008, "Wrong alignment on MatchLobbyPlayerSlotWidget_BP_FillPlayer");
static_assert(sizeof(MatchLobbyPlayerSlotWidget_BP_FillPlayer) == 0x000008, "Wrong size on MatchLobbyPlayerSlotWidget_BP_FillPlayer");
static_assert(offsetof(MatchLobbyPlayerSlotWidget_BP_FillPlayer, PartyMember) == 0x000000, "Member 'MatchLobbyPlayerSlotWidget_BP_FillPlayer::PartyMember' has a wrong offset!");

// Function TimeWatch.TWInteractableComponent.CanInteract
// 0x0001 (0x0001 - 0x0000)
struct TWInteractableComponent_CanInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableComponent_CanInteract) == 0x000001, "Wrong alignment on TWInteractableComponent_CanInteract");
static_assert(sizeof(TWInteractableComponent_CanInteract) == 0x000001, "Wrong size on TWInteractableComponent_CanInteract");
static_assert(offsetof(TWInteractableComponent_CanInteract, ReturnValue) == 0x000000, "Member 'TWInteractableComponent_CanInteract::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWInteractableComponent.IsOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct TWInteractableComponent_IsOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableComponent_IsOnCooldown) == 0x000001, "Wrong alignment on TWInteractableComponent_IsOnCooldown");
static_assert(sizeof(TWInteractableComponent_IsOnCooldown) == 0x000001, "Wrong size on TWInteractableComponent_IsOnCooldown");
static_assert(offsetof(TWInteractableComponent_IsOnCooldown, ReturnValue) == 0x000000, "Member 'TWInteractableComponent_IsOnCooldown::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWInteractableComponent.GetElapsedCooldownPercent
// 0x0004 (0x0004 - 0x0000)
struct TWInteractableComponent_GetElapsedCooldownPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableComponent_GetElapsedCooldownPercent) == 0x000004, "Wrong alignment on TWInteractableComponent_GetElapsedCooldownPercent");
static_assert(sizeof(TWInteractableComponent_GetElapsedCooldownPercent) == 0x000004, "Wrong size on TWInteractableComponent_GetElapsedCooldownPercent");
static_assert(offsetof(TWInteractableComponent_GetElapsedCooldownPercent, ReturnValue) == 0x000000, "Member 'TWInteractableComponent_GetElapsedCooldownPercent::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWInteractableActor.BP_Authority_OnInteraction
// 0x0010 (0x0010 - 0x0000)
struct TWInteractableActor_BP_Authority_OnInteraction final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableActor_BP_Authority_OnInteraction) == 0x000008, "Wrong alignment on TWInteractableActor_BP_Authority_OnInteraction");
static_assert(sizeof(TWInteractableActor_BP_Authority_OnInteraction) == 0x000010, "Wrong size on TWInteractableActor_BP_Authority_OnInteraction");
static_assert(offsetof(TWInteractableActor_BP_Authority_OnInteraction, ID) == 0x000000, "Member 'TWInteractableActor_BP_Authority_OnInteraction::ID' has a wrong offset!");
static_assert(offsetof(TWInteractableActor_BP_Authority_OnInteraction, Interactor) == 0x000008, "Member 'TWInteractableActor_BP_Authority_OnInteraction::Interactor' has a wrong offset!");

// Function TimeWatch.TWInteractableActor.BP_Authority_OnUndoInteraction
// 0x0010 (0x0010 - 0x0000)
struct TWInteractableActor_BP_Authority_OnUndoInteraction final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableActor_BP_Authority_OnUndoInteraction) == 0x000008, "Wrong alignment on TWInteractableActor_BP_Authority_OnUndoInteraction");
static_assert(sizeof(TWInteractableActor_BP_Authority_OnUndoInteraction) == 0x000010, "Wrong size on TWInteractableActor_BP_Authority_OnUndoInteraction");
static_assert(offsetof(TWInteractableActor_BP_Authority_OnUndoInteraction, ID) == 0x000000, "Member 'TWInteractableActor_BP_Authority_OnUndoInteraction::ID' has a wrong offset!");
static_assert(offsetof(TWInteractableActor_BP_Authority_OnUndoInteraction, Interactor) == 0x000008, "Member 'TWInteractableActor_BP_Authority_OnUndoInteraction::Interactor' has a wrong offset!");

// Function TimeWatch.TWInteractableActor.BP_Cosmetic_OnInteraction
// 0x0010 (0x0010 - 0x0000)
struct TWInteractableActor_BP_Cosmetic_OnInteraction final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableActor_BP_Cosmetic_OnInteraction) == 0x000008, "Wrong alignment on TWInteractableActor_BP_Cosmetic_OnInteraction");
static_assert(sizeof(TWInteractableActor_BP_Cosmetic_OnInteraction) == 0x000010, "Wrong size on TWInteractableActor_BP_Cosmetic_OnInteraction");
static_assert(offsetof(TWInteractableActor_BP_Cosmetic_OnInteraction, ID) == 0x000000, "Member 'TWInteractableActor_BP_Cosmetic_OnInteraction::ID' has a wrong offset!");
static_assert(offsetof(TWInteractableActor_BP_Cosmetic_OnInteraction, Interactor) == 0x000008, "Member 'TWInteractableActor_BP_Cosmetic_OnInteraction::Interactor' has a wrong offset!");

// Function TimeWatch.TWInteractableActor.BP_Cosmetic_OnUndoInteraction
// 0x0010 (0x0010 - 0x0000)
struct TWInteractableActor_BP_Cosmetic_OnUndoInteraction final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableActor_BP_Cosmetic_OnUndoInteraction) == 0x000008, "Wrong alignment on TWInteractableActor_BP_Cosmetic_OnUndoInteraction");
static_assert(sizeof(TWInteractableActor_BP_Cosmetic_OnUndoInteraction) == 0x000010, "Wrong size on TWInteractableActor_BP_Cosmetic_OnUndoInteraction");
static_assert(offsetof(TWInteractableActor_BP_Cosmetic_OnUndoInteraction, ID) == 0x000000, "Member 'TWInteractableActor_BP_Cosmetic_OnUndoInteraction::ID' has a wrong offset!");
static_assert(offsetof(TWInteractableActor_BP_Cosmetic_OnUndoInteraction, Interactor) == 0x000008, "Member 'TWInteractableActor_BP_Cosmetic_OnUndoInteraction::Interactor' has a wrong offset!");

// Function TimeWatch.TWInteractableActor.OnInteraction_Internal
// 0x0010 (0x0010 - 0x0000)
struct TWInteractableActor_OnInteraction_Internal final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableActor_OnInteraction_Internal) == 0x000008, "Wrong alignment on TWInteractableActor_OnInteraction_Internal");
static_assert(sizeof(TWInteractableActor_OnInteraction_Internal) == 0x000010, "Wrong size on TWInteractableActor_OnInteraction_Internal");
static_assert(offsetof(TWInteractableActor_OnInteraction_Internal, ID) == 0x000000, "Member 'TWInteractableActor_OnInteraction_Internal::ID' has a wrong offset!");
static_assert(offsetof(TWInteractableActor_OnInteraction_Internal, Interactor) == 0x000008, "Member 'TWInteractableActor_OnInteraction_Internal::Interactor' has a wrong offset!");

// Function TimeWatch.TWInteractableActor.OnInteractionUndo_Internal
// 0x0010 (0x0010 - 0x0000)
struct TWInteractableActor_OnInteractionUndo_Internal final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractableActor_OnInteractionUndo_Internal) == 0x000008, "Wrong alignment on TWInteractableActor_OnInteractionUndo_Internal");
static_assert(sizeof(TWInteractableActor_OnInteractionUndo_Internal) == 0x000010, "Wrong size on TWInteractableActor_OnInteractionUndo_Internal");
static_assert(offsetof(TWInteractableActor_OnInteractionUndo_Internal, ID) == 0x000000, "Member 'TWInteractableActor_OnInteractionUndo_Internal::ID' has a wrong offset!");
static_assert(offsetof(TWInteractableActor_OnInteractionUndo_Internal, Interactor) == 0x000008, "Member 'TWInteractableActor_OnInteractionUndo_Internal::Interactor' has a wrong offset!");

// Function TimeWatch.TWHealthPackActor.BP_TriggerHealOverTime
// 0x0010 (0x0010 - 0x0000)
struct TWHealthPackActor_BP_TriggerHealOverTime final
{
public:
	class ATimeWatchCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasReSynced;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWHealthPackActor_BP_TriggerHealOverTime) == 0x000008, "Wrong alignment on TWHealthPackActor_BP_TriggerHealOverTime");
static_assert(sizeof(TWHealthPackActor_BP_TriggerHealOverTime) == 0x000010, "Wrong size on TWHealthPackActor_BP_TriggerHealOverTime");
static_assert(offsetof(TWHealthPackActor_BP_TriggerHealOverTime, Character) == 0x000000, "Member 'TWHealthPackActor_BP_TriggerHealOverTime::Character' has a wrong offset!");
static_assert(offsetof(TWHealthPackActor_BP_TriggerHealOverTime, bWasReSynced) == 0x000008, "Member 'TWHealthPackActor_BP_TriggerHealOverTime::bWasReSynced' has a wrong offset!");

// Function TimeWatch.TWHealthPackActor.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWHealthPackActor_OnStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWHealthPackActor_OnStateChanged) == 0x000001, "Wrong alignment on TWHealthPackActor_OnStateChanged");
static_assert(sizeof(TWHealthPackActor_OnStateChanged) == 0x000002, "Wrong size on TWHealthPackActor_OnStateChanged");
static_assert(offsetof(TWHealthPackActor_OnStateChanged, OldState) == 0x000000, "Member 'TWHealthPackActor_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWHealthPackActor_OnStateChanged, NewState) == 0x000001, "Member 'TWHealthPackActor_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWHealthPackActor.OnVolumeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct TWHealthPackActor_OnVolumeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWHealthPackActor_OnVolumeBeginOverlap) == 0x000008, "Wrong alignment on TWHealthPackActor_OnVolumeBeginOverlap");
static_assert(sizeof(TWHealthPackActor_OnVolumeBeginOverlap) == 0x0000A8, "Wrong size on TWHealthPackActor_OnVolumeBeginOverlap");
static_assert(offsetof(TWHealthPackActor_OnVolumeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'TWHealthPackActor_OnVolumeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TWHealthPackActor_OnVolumeBeginOverlap, OtherActor) == 0x000008, "Member 'TWHealthPackActor_OnVolumeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TWHealthPackActor_OnVolumeBeginOverlap, OtherComp) == 0x000010, "Member 'TWHealthPackActor_OnVolumeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TWHealthPackActor_OnVolumeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'TWHealthPackActor_OnVolumeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TWHealthPackActor_OnVolumeBeginOverlap, bFromSweep) == 0x00001C, "Member 'TWHealthPackActor_OnVolumeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TWHealthPackActor_OnVolumeBeginOverlap, SweepResult) == 0x000020, "Member 'TWHealthPackActor_OnVolumeBeginOverlap::SweepResult' has a wrong offset!");

// Function TimeWatch.TWHealthPackActor.TriggerHealOverTime
// 0x0010 (0x0010 - 0x0000)
struct TWHealthPackActor_TriggerHealOverTime final
{
public:
	class ATimeWatchCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasReSynced;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWHealthPackActor_TriggerHealOverTime) == 0x000008, "Wrong alignment on TWHealthPackActor_TriggerHealOverTime");
static_assert(sizeof(TWHealthPackActor_TriggerHealOverTime) == 0x000010, "Wrong size on TWHealthPackActor_TriggerHealOverTime");
static_assert(offsetof(TWHealthPackActor_TriggerHealOverTime, Character) == 0x000000, "Member 'TWHealthPackActor_TriggerHealOverTime::Character' has a wrong offset!");
static_assert(offsetof(TWHealthPackActor_TriggerHealOverTime, bWasReSynced) == 0x000008, "Member 'TWHealthPackActor_TriggerHealOverTime::bWasReSynced' has a wrong offset!");

// Function TimeWatch.PartyMemberItemWidget.SetPartyMemberAvatar
// 0x0008 (0x0008 - 0x0000)
struct PartyMemberItemWidget_SetPartyMemberAvatar final
{
public:
	class UTexture2D*                             avatar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyMemberItemWidget_SetPartyMemberAvatar) == 0x000008, "Wrong alignment on PartyMemberItemWidget_SetPartyMemberAvatar");
static_assert(sizeof(PartyMemberItemWidget_SetPartyMemberAvatar) == 0x000008, "Wrong size on PartyMemberItemWidget_SetPartyMemberAvatar");
static_assert(offsetof(PartyMemberItemWidget_SetPartyMemberAvatar, avatar) == 0x000000, "Member 'PartyMemberItemWidget_SetPartyMemberAvatar::avatar' has a wrong offset!");

// Function TimeWatch.TWActivableActor.BP_Update_Behavior
// 0x0001 (0x0001 - 0x0000)
struct TWActivableActor_BP_Update_Behavior final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWActivableActor_BP_Update_Behavior) == 0x000001, "Wrong alignment on TWActivableActor_BP_Update_Behavior");
static_assert(sizeof(TWActivableActor_BP_Update_Behavior) == 0x000001, "Wrong size on TWActivableActor_BP_Update_Behavior");
static_assert(offsetof(TWActivableActor_BP_Update_Behavior, bNewValue) == 0x000000, "Member 'TWActivableActor_BP_Update_Behavior::bNewValue' has a wrong offset!");

// Function TimeWatch.TWActivableActor.BP_Update_Cosmetic
// 0x0001 (0x0001 - 0x0000)
struct TWActivableActor_BP_Update_Cosmetic final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWActivableActor_BP_Update_Cosmetic) == 0x000001, "Wrong alignment on TWActivableActor_BP_Update_Cosmetic");
static_assert(sizeof(TWActivableActor_BP_Update_Cosmetic) == 0x000001, "Wrong size on TWActivableActor_BP_Update_Cosmetic");
static_assert(offsetof(TWActivableActor_BP_Update_Cosmetic, bNewValue) == 0x000000, "Member 'TWActivableActor_BP_Update_Cosmetic::bNewValue' has a wrong offset!");

// Function TimeWatch.TWActivableActor.SetActiveStatus
// 0x0001 (0x0001 - 0x0000)
struct TWActivableActor_SetActiveStatus final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWActivableActor_SetActiveStatus) == 0x000001, "Wrong alignment on TWActivableActor_SetActiveStatus");
static_assert(sizeof(TWActivableActor_SetActiveStatus) == 0x000001, "Wrong size on TWActivableActor_SetActiveStatus");
static_assert(offsetof(TWActivableActor_SetActiveStatus, bNewValue) == 0x000000, "Member 'TWActivableActor_SetActiveStatus::bNewValue' has a wrong offset!");

// Function TimeWatch.TWActivableActor.GetActiveStatus
// 0x0001 (0x0001 - 0x0000)
struct TWActivableActor_GetActiveStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWActivableActor_GetActiveStatus) == 0x000001, "Wrong alignment on TWActivableActor_GetActiveStatus");
static_assert(sizeof(TWActivableActor_GetActiveStatus) == 0x000001, "Wrong size on TWActivableActor_GetActiveStatus");
static_assert(offsetof(TWActivableActor_GetActiveStatus, ReturnValue) == 0x000000, "Member 'TWActivableActor_GetActiveStatus::ReturnValue' has a wrong offset!");

// Function TimeWatch.PartyWidget.UpdatePartyData
// 0x0001 (0x0001 - 0x0000)
struct PartyWidget_UpdatePartyData final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyWidget_UpdatePartyData) == 0x000001, "Wrong alignment on PartyWidget_UpdatePartyData");
static_assert(sizeof(PartyWidget_UpdatePartyData) == 0x000001, "Wrong size on PartyWidget_UpdatePartyData");
static_assert(offsetof(PartyWidget_UpdatePartyData, bPartyStructureChanged) == 0x000000, "Member 'PartyWidget_UpdatePartyData::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.TWLobbyChallengeWidget.AddNewLobbyPlayerRow
// 0x0048 (0x0048 - 0x0000)
struct TWLobbyChallengeWidget_AddNewLobbyPlayerRow final
{
public:
	struct FLobbyPlayerInfo                       InLobbyPlayerInfo;                                 // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	class UTWLobbyPlayerRowWidget*                ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLobbyChallengeWidget_AddNewLobbyPlayerRow) == 0x000008, "Wrong alignment on TWLobbyChallengeWidget_AddNewLobbyPlayerRow");
static_assert(sizeof(TWLobbyChallengeWidget_AddNewLobbyPlayerRow) == 0x000048, "Wrong size on TWLobbyChallengeWidget_AddNewLobbyPlayerRow");
static_assert(offsetof(TWLobbyChallengeWidget_AddNewLobbyPlayerRow, InLobbyPlayerInfo) == 0x000000, "Member 'TWLobbyChallengeWidget_AddNewLobbyPlayerRow::InLobbyPlayerInfo' has a wrong offset!");
static_assert(offsetof(TWLobbyChallengeWidget_AddNewLobbyPlayerRow, ReturnValue) == 0x000040, "Member 'TWLobbyChallengeWidget_AddNewLobbyPlayerRow::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLobbyChallengeWidget.ChangeGridPanel
// 0x0008 (0x0008 - 0x0000)
struct TWLobbyChallengeWidget_ChangeGridPanel final
{
public:
	int32                                         PanelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLobbyChallengeWidget_ChangeGridPanel) == 0x000004, "Wrong alignment on TWLobbyChallengeWidget_ChangeGridPanel");
static_assert(sizeof(TWLobbyChallengeWidget_ChangeGridPanel) == 0x000008, "Wrong size on TWLobbyChallengeWidget_ChangeGridPanel");
static_assert(offsetof(TWLobbyChallengeWidget_ChangeGridPanel, PanelIndex) == 0x000000, "Member 'TWLobbyChallengeWidget_ChangeGridPanel::PanelIndex' has a wrong offset!");
static_assert(offsetof(TWLobbyChallengeWidget_ChangeGridPanel, ReturnValue) == 0x000004, "Member 'TWLobbyChallengeWidget_ChangeGridPanel::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLobbyChallengeWidget.SelectServer
// 0x0010 (0x0010 - 0x0000)
struct TWLobbyChallengeWidget_SelectServer final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLobbyChallengeWidget_SelectServer) == 0x000008, "Wrong alignment on TWLobbyChallengeWidget_SelectServer");
static_assert(sizeof(TWLobbyChallengeWidget_SelectServer) == 0x000010, "Wrong size on TWLobbyChallengeWidget_SelectServer");
static_assert(offsetof(TWLobbyChallengeWidget_SelectServer, ServerName) == 0x000000, "Member 'TWLobbyChallengeWidget_SelectServer::ServerName' has a wrong offset!");

// Function TimeWatch.TWLobbyChallengeWidget.SetPlayerStats_BP
// 0x0068 (0x0068 - 0x0000)
struct TWLobbyChallengeWidget_SetPlayerStats_BP final
{
public:
	struct FNGDBackendAccountPlayerStats          PlayerStats;                                       // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLobbyChallengeWidget_SetPlayerStats_BP) == 0x000008, "Wrong alignment on TWLobbyChallengeWidget_SetPlayerStats_BP");
static_assert(sizeof(TWLobbyChallengeWidget_SetPlayerStats_BP) == 0x000068, "Wrong size on TWLobbyChallengeWidget_SetPlayerStats_BP");
static_assert(offsetof(TWLobbyChallengeWidget_SetPlayerStats_BP, PlayerStats) == 0x000000, "Member 'TWLobbyChallengeWidget_SetPlayerStats_BP::PlayerStats' has a wrong offset!");

// Function TimeWatch.PhysicsRewindableActor.GetHitRegistrationCollider
// 0x0008 (0x0008 - 0x0000)
struct PhysicsRewindableActor_GetHitRegistrationCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsRewindableActor_GetHitRegistrationCollider) == 0x000008, "Wrong alignment on PhysicsRewindableActor_GetHitRegistrationCollider");
static_assert(sizeof(PhysicsRewindableActor_GetHitRegistrationCollider) == 0x000008, "Wrong size on PhysicsRewindableActor_GetHitRegistrationCollider");
static_assert(offsetof(PhysicsRewindableActor_GetHitRegistrationCollider, ReturnValue) == 0x000000, "Member 'PhysicsRewindableActor_GetHitRegistrationCollider::ReturnValue' has a wrong offset!");

// Function TimeWatch.PhysicsRewindableActor.GetRewindableMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct PhysicsRewindableActor_GetRewindableMeshComponent final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsRewindableActor_GetRewindableMeshComponent) == 0x000008, "Wrong alignment on PhysicsRewindableActor_GetRewindableMeshComponent");
static_assert(sizeof(PhysicsRewindableActor_GetRewindableMeshComponent) == 0x000008, "Wrong size on PhysicsRewindableActor_GetRewindableMeshComponent");
static_assert(offsetof(PhysicsRewindableActor_GetRewindableMeshComponent, ReturnValue) == 0x000000, "Member 'PhysicsRewindableActor_GetRewindableMeshComponent::ReturnValue' has a wrong offset!");

// Function TimeWatch.PhysicsRewindableActor.GetRewindCollider
// 0x0008 (0x0008 - 0x0000)
struct PhysicsRewindableActor_GetRewindCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsRewindableActor_GetRewindCollider) == 0x000008, "Wrong alignment on PhysicsRewindableActor_GetRewindCollider");
static_assert(sizeof(PhysicsRewindableActor_GetRewindCollider) == 0x000008, "Wrong size on PhysicsRewindableActor_GetRewindCollider");
static_assert(offsetof(PhysicsRewindableActor_GetRewindCollider, ReturnValue) == 0x000000, "Member 'PhysicsRewindableActor_GetRewindCollider::ReturnValue' has a wrong offset!");

// Function TimeWatch.PhysicsRewindableActor.GetRewindComponent
// 0x0008 (0x0008 - 0x0000)
struct PhysicsRewindableActor_GetRewindComponent final
{
public:
	class UNGDRewindComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsRewindableActor_GetRewindComponent) == 0x000008, "Wrong alignment on PhysicsRewindableActor_GetRewindComponent");
static_assert(sizeof(PhysicsRewindableActor_GetRewindComponent) == 0x000008, "Wrong size on PhysicsRewindableActor_GetRewindComponent");
static_assert(offsetof(PhysicsRewindableActor_GetRewindComponent, ReturnValue) == 0x000000, "Member 'PhysicsRewindableActor_GetRewindComponent::ReturnValue' has a wrong offset!");

// Function TimeWatch.PhysicsRewindableActor.IsRewindRelevant
// 0x0001 (0x0001 - 0x0000)
struct PhysicsRewindableActor_IsRewindRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhysicsRewindableActor_IsRewindRelevant) == 0x000001, "Wrong alignment on PhysicsRewindableActor_IsRewindRelevant");
static_assert(sizeof(PhysicsRewindableActor_IsRewindRelevant) == 0x000001, "Wrong size on PhysicsRewindableActor_IsRewindRelevant");
static_assert(offsetof(PhysicsRewindableActor_IsRewindRelevant, ReturnValue) == 0x000000, "Member 'PhysicsRewindableActor_IsRewindRelevant::ReturnValue' has a wrong offset!");

// Function TimeWatch.ServerIdleGameMode.OnImpostorData
// 0x0010 (0x0010 - 0x0000)
struct ServerIdleGameMode_OnImpostorData final
{
public:
	class FString                                 ImpostorData;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerIdleGameMode_OnImpostorData) == 0x000008, "Wrong alignment on ServerIdleGameMode_OnImpostorData");
static_assert(sizeof(ServerIdleGameMode_OnImpostorData) == 0x000010, "Wrong size on ServerIdleGameMode_OnImpostorData");
static_assert(offsetof(ServerIdleGameMode_OnImpostorData, ImpostorData) == 0x000000, "Member 'ServerIdleGameMode_OnImpostorData::ImpostorData' has a wrong offset!");

// Function TimeWatch.ShootTarget.OnTookDamage
// 0x0004 (0x0004 - 0x0000)
struct ShootTarget_OnTookDamage final
{
public:
	float                                         RelativeDamage;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShootTarget_OnTookDamage) == 0x000004, "Wrong alignment on ShootTarget_OnTookDamage");
static_assert(sizeof(ShootTarget_OnTookDamage) == 0x000004, "Wrong size on ShootTarget_OnTookDamage");
static_assert(offsetof(ShootTarget_OnTookDamage, RelativeDamage) == 0x000000, "Member 'ShootTarget_OnTookDamage::RelativeDamage' has a wrong offset!");

// Function TimeWatch.ShootTarget.TakeBulletDamage
// 0x0004 (0x0004 - 0x0000)
struct ShootTarget_TakeBulletDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShootTarget_TakeBulletDamage) == 0x000004, "Wrong alignment on ShootTarget_TakeBulletDamage");
static_assert(sizeof(ShootTarget_TakeBulletDamage) == 0x000004, "Wrong size on ShootTarget_TakeBulletDamage");
static_assert(offsetof(ShootTarget_TakeBulletDamage, Damage) == 0x000000, "Member 'ShootTarget_TakeBulletDamage::Damage' has a wrong offset!");

// Function TimeWatch.ShootTarget.GetNormalizedHitPoint
// 0x0004 (0x0004 - 0x0000)
struct ShootTarget_GetNormalizedHitPoint final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShootTarget_GetNormalizedHitPoint) == 0x000004, "Wrong alignment on ShootTarget_GetNormalizedHitPoint");
static_assert(sizeof(ShootTarget_GetNormalizedHitPoint) == 0x000004, "Wrong size on ShootTarget_GetNormalizedHitPoint");
static_assert(offsetof(ShootTarget_GetNormalizedHitPoint, ReturnValue) == 0x000000, "Member 'ShootTarget_GetNormalizedHitPoint::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWMatchIntroActor.GetPlayerIntroActor
// 0x0010 (0x0010 - 0x0000)
struct TWMatchIntroActor_GetPlayerIntroActor final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATWPlayerIntroActor*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWMatchIntroActor_GetPlayerIntroActor) == 0x000008, "Wrong alignment on TWMatchIntroActor_GetPlayerIntroActor");
static_assert(sizeof(TWMatchIntroActor_GetPlayerIntroActor) == 0x000010, "Wrong size on TWMatchIntroActor_GetPlayerIntroActor");
static_assert(offsetof(TWMatchIntroActor_GetPlayerIntroActor, PlayerId) == 0x000000, "Member 'TWMatchIntroActor_GetPlayerIntroActor::PlayerId' has a wrong offset!");
static_assert(offsetof(TWMatchIntroActor_GetPlayerIntroActor, ReturnValue) == 0x000008, "Member 'TWMatchIntroActor_GetPlayerIntroActor::ReturnValue' has a wrong offset!");

// Function TimeWatch.TemporalParticle.OnParticleEnabled
// 0x0001 (0x0001 - 0x0000)
struct TemporalParticle_OnParticleEnabled final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalParticle_OnParticleEnabled) == 0x000001, "Wrong alignment on TemporalParticle_OnParticleEnabled");
static_assert(sizeof(TemporalParticle_OnParticleEnabled) == 0x000001, "Wrong size on TemporalParticle_OnParticleEnabled");
static_assert(offsetof(TemporalParticle_OnParticleEnabled, NewState) == 0x000000, "Member 'TemporalParticle_OnParticleEnabled::NewState' has a wrong offset!");

// Function TimeWatch.TemporalParticle.ParticleTick
// 0x0004 (0x0004 - 0x0000)
struct TemporalParticle_ParticleTick final
{
public:
	float                                         LifeCylcle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalParticle_ParticleTick) == 0x000004, "Wrong alignment on TemporalParticle_ParticleTick");
static_assert(sizeof(TemporalParticle_ParticleTick) == 0x000004, "Wrong size on TemporalParticle_ParticleTick");
static_assert(offsetof(TemporalParticle_ParticleTick, LifeCylcle) == 0x000000, "Member 'TemporalParticle_ParticleTick::LifeCylcle' has a wrong offset!");

// Function TimeWatch.TemporalParticle.SetOnlyOwnerSee
// 0x0001 (0x0001 - 0x0000)
struct TemporalParticle_SetOnlyOwnerSee final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalParticle_SetOnlyOwnerSee) == 0x000001, "Wrong alignment on TemporalParticle_SetOnlyOwnerSee");
static_assert(sizeof(TemporalParticle_SetOnlyOwnerSee) == 0x000001, "Wrong size on TemporalParticle_SetOnlyOwnerSee");
static_assert(offsetof(TemporalParticle_SetOnlyOwnerSee, NewState) == 0x000000, "Member 'TemporalParticle_SetOnlyOwnerSee::NewState' has a wrong offset!");

// Function TimeWatch.TemporalParticle.SetOwnerSee
// 0x0001 (0x0001 - 0x0000)
struct TemporalParticle_SetOwnerSee final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalParticle_SetOwnerSee) == 0x000001, "Wrong alignment on TemporalParticle_SetOwnerSee");
static_assert(sizeof(TemporalParticle_SetOwnerSee) == 0x000001, "Wrong size on TemporalParticle_SetOwnerSee");
static_assert(offsetof(TemporalParticle_SetOwnerSee, NewState) == 0x000000, "Member 'TemporalParticle_SetOwnerSee::NewState' has a wrong offset!");

// Function TimeWatch.TemporalParticle.Setup
// 0x0010 (0x0010 - 0x0000)
struct TemporalParticle_Setup final
{
public:
	class AActor*                                 InSpawnerActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewCreationTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TemporalParticle_Setup) == 0x000008, "Wrong alignment on TemporalParticle_Setup");
static_assert(sizeof(TemporalParticle_Setup) == 0x000010, "Wrong size on TemporalParticle_Setup");
static_assert(offsetof(TemporalParticle_Setup, InSpawnerActor) == 0x000000, "Member 'TemporalParticle_Setup::InSpawnerActor' has a wrong offset!");
static_assert(offsetof(TemporalParticle_Setup, NewCreationTime) == 0x000008, "Member 'TemporalParticle_Setup::NewCreationTime' has a wrong offset!");

// Function TimeWatch.TemporalWeaponSwitcher.MakeAllVisible
// 0x0010 (0x0010 - 0x0000)
struct TemporalWeaponSwitcher_MakeAllVisible final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TemporalWeaponSwitcher_MakeAllVisible) == 0x000008, "Wrong alignment on TemporalWeaponSwitcher_MakeAllVisible");
static_assert(sizeof(TemporalWeaponSwitcher_MakeAllVisible) == 0x000010, "Wrong size on TemporalWeaponSwitcher_MakeAllVisible");
static_assert(offsetof(TemporalWeaponSwitcher_MakeAllVisible, Context) == 0x000000, "Member 'TemporalWeaponSwitcher_MakeAllVisible::Context' has a wrong offset!");
static_assert(offsetof(TemporalWeaponSwitcher_MakeAllVisible, bVisible) == 0x000008, "Member 'TemporalWeaponSwitcher_MakeAllVisible::bVisible' has a wrong offset!");

// Function TimeWatch.TemporalWeaponSwitcher.MakeVisible
// 0x0001 (0x0001 - 0x0000)
struct TemporalWeaponSwitcher_MakeVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeaponSwitcher_MakeVisible) == 0x000001, "Wrong alignment on TemporalWeaponSwitcher_MakeVisible");
static_assert(sizeof(TemporalWeaponSwitcher_MakeVisible) == 0x000001, "Wrong size on TemporalWeaponSwitcher_MakeVisible");
static_assert(offsetof(TemporalWeaponSwitcher_MakeVisible, bVisible) == 0x000000, "Member 'TemporalWeaponSwitcher_MakeVisible::bVisible' has a wrong offset!");

// Function TimeWatch.TemporalWeaponSwitcher.OnPickUpOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct TemporalWeaponSwitcher_OnPickUpOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeaponSwitcher_OnPickUpOverlapBegin) == 0x000008, "Wrong alignment on TemporalWeaponSwitcher_OnPickUpOverlapBegin");
static_assert(sizeof(TemporalWeaponSwitcher_OnPickUpOverlapBegin) == 0x0000A8, "Wrong size on TemporalWeaponSwitcher_OnPickUpOverlapBegin");
static_assert(offsetof(TemporalWeaponSwitcher_OnPickUpOverlapBegin, OverlappedComp) == 0x000000, "Member 'TemporalWeaponSwitcher_OnPickUpOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(TemporalWeaponSwitcher_OnPickUpOverlapBegin, OtherActor) == 0x000008, "Member 'TemporalWeaponSwitcher_OnPickUpOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(TemporalWeaponSwitcher_OnPickUpOverlapBegin, OtherComp) == 0x000010, "Member 'TemporalWeaponSwitcher_OnPickUpOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(TemporalWeaponSwitcher_OnPickUpOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'TemporalWeaponSwitcher_OnPickUpOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TemporalWeaponSwitcher_OnPickUpOverlapBegin, bFromSweep) == 0x00001C, "Member 'TemporalWeaponSwitcher_OnPickUpOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(TemporalWeaponSwitcher_OnPickUpOverlapBegin, SweepResult) == 0x000020, "Member 'TemporalWeaponSwitcher_OnPickUpOverlapBegin::SweepResult' has a wrong offset!");

// Function TimeWatch.TemporalWeaponSwitcher.GetWeaponMesh
// 0x0008 (0x0008 - 0x0000)
struct TemporalWeaponSwitcher_GetWeaponMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporalWeaponSwitcher_GetWeaponMesh) == 0x000008, "Wrong alignment on TemporalWeaponSwitcher_GetWeaponMesh");
static_assert(sizeof(TemporalWeaponSwitcher_GetWeaponMesh) == 0x000008, "Wrong size on TemporalWeaponSwitcher_GetWeaponMesh");
static_assert(offsetof(TemporalWeaponSwitcher_GetWeaponMesh, ReturnValue) == 0x000000, "Member 'TemporalWeaponSwitcher_GetWeaponMesh::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWMatchClockWidget.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWMatchClockWidget_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWMatchClockWidget_OnGameStateChanged) == 0x000001, "Wrong alignment on TWMatchClockWidget_OnGameStateChanged");
static_assert(sizeof(TWMatchClockWidget_OnGameStateChanged) == 0x000002, "Wrong size on TWMatchClockWidget_OnGameStateChanged");
static_assert(offsetof(TWMatchClockWidget_OnGameStateChanged, OldState) == 0x000000, "Member 'TWMatchClockWidget_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWMatchClockWidget_OnGameStateChanged, NewState) == 0x000001, "Member 'TWMatchClockWidget_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWOverheadHealthBarWidget.InitializeWidget
// 0x00C0 (0x00C0 - 0x0000)
struct TWOverheadHealthBarWidget_InitializeWidget final
{
public:
	struct FWidgetColorStructure                  NewHealthBarColors;                                // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadHealthBarWidget_InitializeWidget) == 0x000004, "Wrong alignment on TWOverheadHealthBarWidget_InitializeWidget");
static_assert(sizeof(TWOverheadHealthBarWidget_InitializeWidget) == 0x0000C0, "Wrong size on TWOverheadHealthBarWidget_InitializeWidget");
static_assert(offsetof(TWOverheadHealthBarWidget_InitializeWidget, NewHealthBarColors) == 0x000000, "Member 'TWOverheadHealthBarWidget_InitializeWidget::NewHealthBarColors' has a wrong offset!");

// Function TimeWatch.TWOverheadHealthBarWidget.SetActiveHealthBar
// 0x0001 (0x0001 - 0x0000)
struct TWOverheadHealthBarWidget_SetActiveHealthBar final
{
public:
	bool                                          bIsPlayer;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadHealthBarWidget_SetActiveHealthBar) == 0x000001, "Wrong alignment on TWOverheadHealthBarWidget_SetActiveHealthBar");
static_assert(sizeof(TWOverheadHealthBarWidget_SetActiveHealthBar) == 0x000001, "Wrong size on TWOverheadHealthBarWidget_SetActiveHealthBar");
static_assert(offsetof(TWOverheadHealthBarWidget_SetActiveHealthBar, bIsPlayer) == 0x000000, "Member 'TWOverheadHealthBarWidget_SetActiveHealthBar::bIsPlayer' has a wrong offset!");

// Function TimeWatch.TWOverheadHealthBarWidget.SetHealthBarPercentValue
// 0x0004 (0x0004 - 0x0000)
struct TWOverheadHealthBarWidget_SetHealthBarPercentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadHealthBarWidget_SetHealthBarPercentValue) == 0x000004, "Wrong alignment on TWOverheadHealthBarWidget_SetHealthBarPercentValue");
static_assert(sizeof(TWOverheadHealthBarWidget_SetHealthBarPercentValue) == 0x000004, "Wrong size on TWOverheadHealthBarWidget_SetHealthBarPercentValue");
static_assert(offsetof(TWOverheadHealthBarWidget_SetHealthBarPercentValue, Value) == 0x000000, "Member 'TWOverheadHealthBarWidget_SetHealthBarPercentValue::Value' has a wrong offset!");

// Function TimeWatch.TWOverheadHealthBarWidget.SetHitFeedbackPercentValue
// 0x0004 (0x0004 - 0x0000)
struct TWOverheadHealthBarWidget_SetHitFeedbackPercentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadHealthBarWidget_SetHitFeedbackPercentValue) == 0x000004, "Wrong alignment on TWOverheadHealthBarWidget_SetHitFeedbackPercentValue");
static_assert(sizeof(TWOverheadHealthBarWidget_SetHitFeedbackPercentValue) == 0x000004, "Wrong size on TWOverheadHealthBarWidget_SetHitFeedbackPercentValue");
static_assert(offsetof(TWOverheadHealthBarWidget_SetHitFeedbackPercentValue, Value) == 0x000000, "Member 'TWOverheadHealthBarWidget_SetHitFeedbackPercentValue::Value' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.ToPointer
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchCharacter_ToPointer final
{
public:
	class ATimeWatchCharacter*                    This;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_ToPointer) == 0x000008, "Wrong alignment on TimeWatchCharacter_ToPointer");
static_assert(sizeof(TimeWatchCharacter_ToPointer) == 0x000018, "Wrong size on TimeWatchCharacter_ToPointer");
static_assert(offsetof(TimeWatchCharacter_ToPointer, This) == 0x000000, "Member 'TimeWatchCharacter_ToPointer::This' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_ToPointer, ReturnValue) == 0x000008, "Member 'TimeWatchCharacter_ToPointer::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.ActivateAbility
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_ActivateAbility final
{
public:
	TSubclassOf<class UTWAbility>                 Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_ActivateAbility) == 0x000008, "Wrong alignment on TimeWatchCharacter_ActivateAbility");
static_assert(sizeof(TimeWatchCharacter_ActivateAbility) == 0x000008, "Wrong size on TimeWatchCharacter_ActivateAbility");
static_assert(offsetof(TimeWatchCharacter_ActivateAbility, Ability) == 0x000000, "Member 'TimeWatchCharacter_ActivateAbility::Ability' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.BP_ModifyHealth
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchCharacter_BP_ModifyHealth final
{
public:
	class AActor*                                 InteractedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSet;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchCharacter_BP_ModifyHealth) == 0x000008, "Wrong alignment on TimeWatchCharacter_BP_ModifyHealth");
static_assert(sizeof(TimeWatchCharacter_BP_ModifyHealth) == 0x000010, "Wrong size on TimeWatchCharacter_BP_ModifyHealth");
static_assert(offsetof(TimeWatchCharacter_BP_ModifyHealth, InteractedActor) == 0x000000, "Member 'TimeWatchCharacter_BP_ModifyHealth::InteractedActor' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_BP_ModifyHealth, Value) == 0x000008, "Member 'TimeWatchCharacter_BP_ModifyHealth::Value' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_BP_ModifyHealth, bSet) == 0x00000C, "Member 'TimeWatchCharacter_BP_ModifyHealth::bSet' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.BP_SetFiring
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_BP_SetFiring final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_BP_SetFiring) == 0x000001, "Wrong alignment on TimeWatchCharacter_BP_SetFiring");
static_assert(sizeof(TimeWatchCharacter_BP_SetFiring) == 0x000001, "Wrong size on TimeWatchCharacter_BP_SetFiring");
static_assert(offsetof(TimeWatchCharacter_BP_SetFiring, bNewState) == 0x000000, "Member 'TimeWatchCharacter_BP_SetFiring::bNewState' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.CheckADSEvents
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchCharacter_CheckADSEvents final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_CheckADSEvents) == 0x000004, "Wrong alignment on TimeWatchCharacter_CheckADSEvents");
static_assert(sizeof(TimeWatchCharacter_CheckADSEvents) == 0x000004, "Wrong size on TimeWatchCharacter_CheckADSEvents");
static_assert(offsetof(TimeWatchCharacter_CheckADSEvents, DeltaTime) == 0x000000, "Member 'TimeWatchCharacter_CheckADSEvents::DeltaTime' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetLastDeathTime
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchCharacter_GetLastDeathTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetLastDeathTime) == 0x000004, "Wrong alignment on TimeWatchCharacter_GetLastDeathTime");
static_assert(sizeof(TimeWatchCharacter_GetLastDeathTime) == 0x000004, "Wrong size on TimeWatchCharacter_GetLastDeathTime");
static_assert(offsetof(TimeWatchCharacter_GetLastDeathTime, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetLastDeathTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetNextClone
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetNextClone final
{
public:
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetNextClone) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetNextClone");
static_assert(sizeof(TimeWatchCharacter_GetNextClone) == 0x000008, "Wrong size on TimeWatchCharacter_GetNextClone");
static_assert(offsetof(TimeWatchCharacter_GetNextClone, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetNextClone::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.Multicast_OnTakeDamage
// 0x0050 (0x0050 - 0x0000)
struct TimeWatchCharacter_Multicast_OnTakeDamage final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class ANGDCharacter*                          EventInstigator;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_Multicast_OnTakeDamage) == 0x000008, "Wrong alignment on TimeWatchCharacter_Multicast_OnTakeDamage");
static_assert(sizeof(TimeWatchCharacter_Multicast_OnTakeDamage) == 0x000050, "Wrong size on TimeWatchCharacter_Multicast_OnTakeDamage");
static_assert(offsetof(TimeWatchCharacter_Multicast_OnTakeDamage, DamageEvent) == 0x000000, "Member 'TimeWatchCharacter_Multicast_OnTakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_Multicast_OnTakeDamage, EventInstigator) == 0x000040, "Member 'TimeWatchCharacter_Multicast_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_Multicast_OnTakeDamage, DamageCauser) == 0x000048, "Member 'TimeWatchCharacter_Multicast_OnTakeDamage::DamageCauser' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.Multicast_SetWeaponChangeData
// 0x001C (0x001C - 0x0000)
struct TimeWatchCharacter_Multicast_SetWeaponChangeData final
{
public:
	struct FWeaponChangeData                      NewWeaponChangeData;                               // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForceChangeData;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchCharacter_Multicast_SetWeaponChangeData) == 0x000004, "Wrong alignment on TimeWatchCharacter_Multicast_SetWeaponChangeData");
static_assert(sizeof(TimeWatchCharacter_Multicast_SetWeaponChangeData) == 0x00001C, "Wrong size on TimeWatchCharacter_Multicast_SetWeaponChangeData");
static_assert(offsetof(TimeWatchCharacter_Multicast_SetWeaponChangeData, NewWeaponChangeData) == 0x000000, "Member 'TimeWatchCharacter_Multicast_SetWeaponChangeData::NewWeaponChangeData' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_Multicast_SetWeaponChangeData, bForceChangeData) == 0x000018, "Member 'TimeWatchCharacter_Multicast_SetWeaponChangeData::bForceChangeData' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.Multicast_WeaponChangeForwardEndSnapshot
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchCharacter_Multicast_WeaponChangeForwardEndSnapshot final
{
public:
	TArray<uint8>                                 WeaponChangeSnapshot;                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_Multicast_WeaponChangeForwardEndSnapshot) == 0x000008, "Wrong alignment on TimeWatchCharacter_Multicast_WeaponChangeForwardEndSnapshot");
static_assert(sizeof(TimeWatchCharacter_Multicast_WeaponChangeForwardEndSnapshot) == 0x000010, "Wrong size on TimeWatchCharacter_Multicast_WeaponChangeForwardEndSnapshot");
static_assert(offsetof(TimeWatchCharacter_Multicast_WeaponChangeForwardEndSnapshot, WeaponChangeSnapshot) == 0x000000, "Member 'TimeWatchCharacter_Multicast_WeaponChangeForwardEndSnapshot::WeaponChangeSnapshot' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.OnCharacterGrounded
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchCharacter_OnCharacterGrounded final
{
public:
	float                                         VerticalSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_OnCharacterGrounded) == 0x000004, "Wrong alignment on TimeWatchCharacter_OnCharacterGrounded");
static_assert(sizeof(TimeWatchCharacter_OnCharacterGrounded) == 0x000004, "Wrong size on TimeWatchCharacter_OnCharacterGrounded");
static_assert(offsetof(TimeWatchCharacter_OnCharacterGrounded, VerticalSpeed) == 0x000000, "Member 'TimeWatchCharacter_OnCharacterGrounded::VerticalSpeed' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TimeWatchCharacter_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_OnGameStateChanged) == 0x000001, "Wrong alignment on TimeWatchCharacter_OnGameStateChanged");
static_assert(sizeof(TimeWatchCharacter_OnGameStateChanged) == 0x000002, "Wrong size on TimeWatchCharacter_OnGameStateChanged");
static_assert(offsetof(TimeWatchCharacter_OnGameStateChanged, OldState) == 0x000000, "Member 'TimeWatchCharacter_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_OnGameStateChanged, NewState) == 0x000001, "Member 'TimeWatchCharacter_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.OnSavedFromPastDead
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_OnSavedFromPastDead final
{
public:
	class UTimeWatchEvent*                        Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_OnSavedFromPastDead) == 0x000008, "Wrong alignment on TimeWatchCharacter_OnSavedFromPastDead");
static_assert(sizeof(TimeWatchCharacter_OnSavedFromPastDead) == 0x000008, "Wrong size on TimeWatchCharacter_OnSavedFromPastDead");
static_assert(offsetof(TimeWatchCharacter_OnSavedFromPastDead, Event) == 0x000000, "Member 'TimeWatchCharacter_OnSavedFromPastDead::Event' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.OnSprintEnabled
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_OnSprintEnabled final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_OnSprintEnabled) == 0x000001, "Wrong alignment on TimeWatchCharacter_OnSprintEnabled");
static_assert(sizeof(TimeWatchCharacter_OnSprintEnabled) == 0x000001, "Wrong size on TimeWatchCharacter_OnSprintEnabled");
static_assert(offsetof(TimeWatchCharacter_OnSprintEnabled, NewState) == 0x000000, "Member 'TimeWatchCharacter_OnSprintEnabled::NewState' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.OnTeamAssigned
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchCharacter_OnTeamAssigned final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_OnTeamAssigned) == 0x000004, "Wrong alignment on TimeWatchCharacter_OnTeamAssigned");
static_assert(sizeof(TimeWatchCharacter_OnTeamAssigned) == 0x000004, "Wrong size on TimeWatchCharacter_OnTeamAssigned");
static_assert(offsetof(TimeWatchCharacter_OnTeamAssigned, TeamId) == 0x000000, "Member 'TimeWatchCharacter_OnTeamAssigned::TeamId' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.OnWeaponChanged
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_OnWeaponChanged final
{
public:
	class ATemporalWeapon*                        NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_OnWeaponChanged) == 0x000008, "Wrong alignment on TimeWatchCharacter_OnWeaponChanged");
static_assert(sizeof(TimeWatchCharacter_OnWeaponChanged) == 0x000008, "Wrong size on TimeWatchCharacter_OnWeaponChanged");
static_assert(offsetof(TimeWatchCharacter_OnWeaponChanged, NewWeapon) == 0x000000, "Member 'TimeWatchCharacter_OnWeaponChanged::NewWeapon' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.OnWeaponDrawedCosmetics
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_OnWeaponDrawedCosmetics final
{
public:
	class AWeapon*                                WeaponDrawed;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_OnWeaponDrawedCosmetics) == 0x000008, "Wrong alignment on TimeWatchCharacter_OnWeaponDrawedCosmetics");
static_assert(sizeof(TimeWatchCharacter_OnWeaponDrawedCosmetics) == 0x000008, "Wrong size on TimeWatchCharacter_OnWeaponDrawedCosmetics");
static_assert(offsetof(TimeWatchCharacter_OnWeaponDrawedCosmetics, WeaponDrawed) == 0x000000, "Member 'TimeWatchCharacter_OnWeaponDrawedCosmetics::WeaponDrawed' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.OnWeaponHolsteredCosmetics
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_OnWeaponHolsteredCosmetics final
{
public:
	class AWeapon*                                WeaponHolstered;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_OnWeaponHolsteredCosmetics) == 0x000008, "Wrong alignment on TimeWatchCharacter_OnWeaponHolsteredCosmetics");
static_assert(sizeof(TimeWatchCharacter_OnWeaponHolsteredCosmetics) == 0x000008, "Wrong size on TimeWatchCharacter_OnWeaponHolsteredCosmetics");
static_assert(offsetof(TimeWatchCharacter_OnWeaponHolsteredCosmetics, WeaponHolstered) == 0x000000, "Member 'TimeWatchCharacter_OnWeaponHolsteredCosmetics::WeaponHolstered' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.RagdollAttachment
// 0x0002 (0x0002 - 0x0000)
struct TimeWatchCharacter_RagdollAttachment final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulatePhysics;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_RagdollAttachment) == 0x000001, "Wrong alignment on TimeWatchCharacter_RagdollAttachment");
static_assert(sizeof(TimeWatchCharacter_RagdollAttachment) == 0x000002, "Wrong size on TimeWatchCharacter_RagdollAttachment");
static_assert(offsetof(TimeWatchCharacter_RagdollAttachment, bNewState) == 0x000000, "Member 'TimeWatchCharacter_RagdollAttachment::bNewState' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_RagdollAttachment, bSimulatePhysics) == 0x000001, "Member 'TimeWatchCharacter_RagdollAttachment::bSimulatePhysics' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.ResetADS
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_ResetADS final
{
public:
	bool                                          bResetMesh;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_ResetADS) == 0x000001, "Wrong alignment on TimeWatchCharacter_ResetADS");
static_assert(sizeof(TimeWatchCharacter_ResetADS) == 0x000001, "Wrong size on TimeWatchCharacter_ResetADS");
static_assert(offsetof(TimeWatchCharacter_ResetADS, bResetMesh) == 0x000000, "Member 'TimeWatchCharacter_ResetADS::bResetMesh' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.SelectWeaponSlot
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_SelectWeaponSlot final
{
public:
	int32                                         WeaponSlotIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchCharacter_SelectWeaponSlot) == 0x000004, "Wrong alignment on TimeWatchCharacter_SelectWeaponSlot");
static_assert(sizeof(TimeWatchCharacter_SelectWeaponSlot) == 0x000008, "Wrong size on TimeWatchCharacter_SelectWeaponSlot");
static_assert(offsetof(TimeWatchCharacter_SelectWeaponSlot, WeaponSlotIndex) == 0x000000, "Member 'TimeWatchCharacter_SelectWeaponSlot::WeaponSlotIndex' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_SelectWeaponSlot, bForce) == 0x000004, "Member 'TimeWatchCharacter_SelectWeaponSlot::bForce' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.Server_SetupWeaponChange
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchCharacter_Server_SetupWeaponChange final
{
public:
	int32                                         PreviousWeaponSlotIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_Server_SetupWeaponChange) == 0x000004, "Wrong alignment on TimeWatchCharacter_Server_SetupWeaponChange");
static_assert(sizeof(TimeWatchCharacter_Server_SetupWeaponChange) == 0x000004, "Wrong size on TimeWatchCharacter_Server_SetupWeaponChange");
static_assert(offsetof(TimeWatchCharacter_Server_SetupWeaponChange, PreviousWeaponSlotIndex) == 0x000000, "Member 'TimeWatchCharacter_Server_SetupWeaponChange::PreviousWeaponSlotIndex' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.SetCollisionResponseOnDeath
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_SetCollisionResponseOnDeath final
{
public:
	bool                                          IsDead;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_SetCollisionResponseOnDeath) == 0x000001, "Wrong alignment on TimeWatchCharacter_SetCollisionResponseOnDeath");
static_assert(sizeof(TimeWatchCharacter_SetCollisionResponseOnDeath) == 0x000001, "Wrong size on TimeWatchCharacter_SetCollisionResponseOnDeath");
static_assert(offsetof(TimeWatchCharacter_SetCollisionResponseOnDeath, IsDead) == 0x000000, "Member 'TimeWatchCharacter_SetCollisionResponseOnDeath::IsDead' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.SetCrosshairClass
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_SetCrosshairClass final
{
public:
	TSubclassOf<class UNGDCrosshairWidget>        CrosshairWidgetClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_SetCrosshairClass) == 0x000008, "Wrong alignment on TimeWatchCharacter_SetCrosshairClass");
static_assert(sizeof(TimeWatchCharacter_SetCrosshairClass) == 0x000008, "Wrong size on TimeWatchCharacter_SetCrosshairClass");
static_assert(offsetof(TimeWatchCharacter_SetCrosshairClass, CrosshairWidgetClass) == 0x000000, "Member 'TimeWatchCharacter_SetCrosshairClass::CrosshairWidgetClass' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.SetHitDeathData
// 0x0014 (0x0014 - 0x0000)
struct TimeWatchCharacter_SetHitDeathData final
{
public:
	struct FVector                                Impuse;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_SetHitDeathData) == 0x000004, "Wrong alignment on TimeWatchCharacter_SetHitDeathData");
static_assert(sizeof(TimeWatchCharacter_SetHitDeathData) == 0x000014, "Wrong size on TimeWatchCharacter_SetHitDeathData");
static_assert(offsetof(TimeWatchCharacter_SetHitDeathData, Impuse) == 0x000000, "Member 'TimeWatchCharacter_SetHitDeathData::Impuse' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_SetHitDeathData, BoneName) == 0x00000C, "Member 'TimeWatchCharacter_SetHitDeathData::BoneName' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.SetIsResyncing
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_SetIsResyncing final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_SetIsResyncing) == 0x000001, "Wrong alignment on TimeWatchCharacter_SetIsResyncing");
static_assert(sizeof(TimeWatchCharacter_SetIsResyncing) == 0x000001, "Wrong size on TimeWatchCharacter_SetIsResyncing");
static_assert(offsetof(TimeWatchCharacter_SetIsResyncing, Val) == 0x000000, "Member 'TimeWatchCharacter_SetIsResyncing::Val' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.SetOverheadHUDOcclusion
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_SetOverheadHUDOcclusion final
{
public:
	bool                                          bShouldBeOccluded;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_SetOverheadHUDOcclusion) == 0x000001, "Wrong alignment on TimeWatchCharacter_SetOverheadHUDOcclusion");
static_assert(sizeof(TimeWatchCharacter_SetOverheadHUDOcclusion) == 0x000001, "Wrong size on TimeWatchCharacter_SetOverheadHUDOcclusion");
static_assert(offsetof(TimeWatchCharacter_SetOverheadHUDOcclusion, bShouldBeOccluded) == 0x000000, "Member 'TimeWatchCharacter_SetOverheadHUDOcclusion::bShouldBeOccluded' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.SetOverheadVisibilityWhileDead
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_SetOverheadVisibilityWhileDead final
{
public:
	bool                                          shouldBeVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_SetOverheadVisibilityWhileDead) == 0x000001, "Wrong alignment on TimeWatchCharacter_SetOverheadVisibilityWhileDead");
static_assert(sizeof(TimeWatchCharacter_SetOverheadVisibilityWhileDead) == 0x000001, "Wrong size on TimeWatchCharacter_SetOverheadVisibilityWhileDead");
static_assert(offsetof(TimeWatchCharacter_SetOverheadVisibilityWhileDead, shouldBeVisible) == 0x000000, "Member 'TimeWatchCharacter_SetOverheadVisibilityWhileDead::shouldBeVisible' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.ShouldShowCloneInfo
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_ShouldShowCloneInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_ShouldShowCloneInfo) == 0x000001, "Wrong alignment on TimeWatchCharacter_ShouldShowCloneInfo");
static_assert(sizeof(TimeWatchCharacter_ShouldShowCloneInfo) == 0x000001, "Wrong size on TimeWatchCharacter_ShouldShowCloneInfo");
static_assert(offsetof(TimeWatchCharacter_ShouldShowCloneInfo, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_ShouldShowCloneInfo::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.BP_GetHealth
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchCharacter_BP_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_BP_GetHealth) == 0x000004, "Wrong alignment on TimeWatchCharacter_BP_GetHealth");
static_assert(sizeof(TimeWatchCharacter_BP_GetHealth) == 0x000004, "Wrong size on TimeWatchCharacter_BP_GetHealth");
static_assert(offsetof(TimeWatchCharacter_BP_GetHealth, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_BP_GetHealth::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetActorPositionAtTime
// 0x0014 (0x0014 - 0x0000)
struct TimeWatchCharacter_GetActorPositionAtTime final
{
public:
	float                                         DesiredTimestamp;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseServerSamples;                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetActorPositionAtTime) == 0x000004, "Wrong alignment on TimeWatchCharacter_GetActorPositionAtTime");
static_assert(sizeof(TimeWatchCharacter_GetActorPositionAtTime) == 0x000014, "Wrong size on TimeWatchCharacter_GetActorPositionAtTime");
static_assert(offsetof(TimeWatchCharacter_GetActorPositionAtTime, DesiredTimestamp) == 0x000000, "Member 'TimeWatchCharacter_GetActorPositionAtTime::DesiredTimestamp' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_GetActorPositionAtTime, bShouldUseServerSamples) == 0x000004, "Member 'TimeWatchCharacter_GetActorPositionAtTime::bShouldUseServerSamples' has a wrong offset!");
static_assert(offsetof(TimeWatchCharacter_GetActorPositionAtTime, ReturnValue) == 0x000008, "Member 'TimeWatchCharacter_GetActorPositionAtTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetAimOffsets
// 0x000C (0x000C - 0x0000)
struct TimeWatchCharacter_GetAimOffsets final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetAimOffsets) == 0x000004, "Wrong alignment on TimeWatchCharacter_GetAimOffsets");
static_assert(sizeof(TimeWatchCharacter_GetAimOffsets) == 0x00000C, "Wrong size on TimeWatchCharacter_GetAimOffsets");
static_assert(offsetof(TimeWatchCharacter_GetAimOffsets, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetAimOffsets::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetAkPlayerMotion
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetAkPlayerMotion final
{
public:
	class UNGDAkComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetAkPlayerMotion) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetAkPlayerMotion");
static_assert(sizeof(TimeWatchCharacter_GetAkPlayerMotion) == 0x000008, "Wrong size on TimeWatchCharacter_GetAkPlayerMotion");
static_assert(offsetof(TimeWatchCharacter_GetAkPlayerMotion, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetAkPlayerMotion::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetCameraComponent
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetCameraComponent final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetCameraComponent) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetCameraComponent");
static_assert(sizeof(TimeWatchCharacter_GetCameraComponent) == 0x000008, "Wrong size on TimeWatchCharacter_GetCameraComponent");
static_assert(offsetof(TimeWatchCharacter_GetCameraComponent, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetCameraComponent::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetCameraLocation
// 0x000C (0x000C - 0x0000)
struct TimeWatchCharacter_GetCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetCameraLocation) == 0x000004, "Wrong alignment on TimeWatchCharacter_GetCameraLocation");
static_assert(sizeof(TimeWatchCharacter_GetCameraLocation) == 0x00000C, "Wrong size on TimeWatchCharacter_GetCameraLocation");
static_assert(offsetof(TimeWatchCharacter_GetCameraLocation, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetCameraLocation::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetCameraOffset
// 0x000C (0x000C - 0x0000)
struct TimeWatchCharacter_GetCameraOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetCameraOffset) == 0x000004, "Wrong alignment on TimeWatchCharacter_GetCameraOffset");
static_assert(sizeof(TimeWatchCharacter_GetCameraOffset) == 0x00000C, "Wrong size on TimeWatchCharacter_GetCameraOffset");
static_assert(offsetof(TimeWatchCharacter_GetCameraOffset, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetCameraOffset::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetCharacterSKU
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchCharacter_GetCharacterSKU final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetCharacterSKU) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetCharacterSKU");
static_assert(sizeof(TimeWatchCharacter_GetCharacterSKU) == 0x000010, "Wrong size on TimeWatchCharacter_GetCharacterSKU");
static_assert(offsetof(TimeWatchCharacter_GetCharacterSKU, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetCharacterSKU::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetCloneIndex
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchCharacter_GetCloneIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetCloneIndex) == 0x000004, "Wrong alignment on TimeWatchCharacter_GetCloneIndex");
static_assert(sizeof(TimeWatchCharacter_GetCloneIndex) == 0x000004, "Wrong size on TimeWatchCharacter_GetCloneIndex");
static_assert(offsetof(TimeWatchCharacter_GetCloneIndex, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetCloneIndex::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetCosmeticWeaponMesh
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetCosmeticWeaponMesh final
{
public:
	class UFollowPoseableComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetCosmeticWeaponMesh) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetCosmeticWeaponMesh");
static_assert(sizeof(TimeWatchCharacter_GetCosmeticWeaponMesh) == 0x000008, "Wrong size on TimeWatchCharacter_GetCosmeticWeaponMesh");
static_assert(offsetof(TimeWatchCharacter_GetCosmeticWeaponMesh, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetCosmeticWeaponMesh::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetCurrentlyVisibleCosmeticWeapon
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetCurrentlyVisibleCosmeticWeapon final
{
public:
	class ATemporalWeapon*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetCurrentlyVisibleCosmeticWeapon) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetCurrentlyVisibleCosmeticWeapon");
static_assert(sizeof(TimeWatchCharacter_GetCurrentlyVisibleCosmeticWeapon) == 0x000008, "Wrong size on TimeWatchCharacter_GetCurrentlyVisibleCosmeticWeapon");
static_assert(offsetof(TimeWatchCharacter_GetCurrentlyVisibleCosmeticWeapon, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetCurrentlyVisibleCosmeticWeapon::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetCurrentWeapon final
{
public:
	class ATemporalWeapon*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetCurrentWeapon) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetCurrentWeapon");
static_assert(sizeof(TimeWatchCharacter_GetCurrentWeapon) == 0x000008, "Wrong size on TimeWatchCharacter_GetCurrentWeapon");
static_assert(offsetof(TimeWatchCharacter_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetLastActiveWeapon
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetLastActiveWeapon final
{
public:
	class ATemporalWeapon*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetLastActiveWeapon) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetLastActiveWeapon");
static_assert(sizeof(TimeWatchCharacter_GetLastActiveWeapon) == 0x000008, "Wrong size on TimeWatchCharacter_GetLastActiveWeapon");
static_assert(offsetof(TimeWatchCharacter_GetLastActiveWeapon, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetLastActiveWeapon::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetMesh1P
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetMesh1P final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetMesh1P) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetMesh1P");
static_assert(sizeof(TimeWatchCharacter_GetMesh1P) == 0x000008, "Wrong size on TimeWatchCharacter_GetMesh1P");
static_assert(offsetof(TimeWatchCharacter_GetMesh1P, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetMesh1P::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetMeshRagdoll
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetMeshRagdoll final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetMeshRagdoll) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetMeshRagdoll");
static_assert(sizeof(TimeWatchCharacter_GetMeshRagdoll) == 0x000008, "Wrong size on TimeWatchCharacter_GetMeshRagdoll");
static_assert(offsetof(TimeWatchCharacter_GetMeshRagdoll, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetMeshRagdoll::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetSavedVelocity
// 0x000C (0x000C - 0x0000)
struct TimeWatchCharacter_GetSavedVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetSavedVelocity) == 0x000004, "Wrong alignment on TimeWatchCharacter_GetSavedVelocity");
static_assert(sizeof(TimeWatchCharacter_GetSavedVelocity) == 0x00000C, "Wrong size on TimeWatchCharacter_GetSavedVelocity");
static_assert(offsetof(TimeWatchCharacter_GetSavedVelocity, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetSavedVelocity::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchCharacter_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetTeamId) == 0x000004, "Wrong alignment on TimeWatchCharacter_GetTeamId");
static_assert(sizeof(TimeWatchCharacter_GetTeamId) == 0x000004, "Wrong size on TimeWatchCharacter_GetTeamId");
static_assert(offsetof(TimeWatchCharacter_GetTeamId, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetTeamId::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetTPMeshOccluder
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetTPMeshOccluder final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetTPMeshOccluder) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetTPMeshOccluder");
static_assert(sizeof(TimeWatchCharacter_GetTPMeshOccluder) == 0x000008, "Wrong size on TimeWatchCharacter_GetTPMeshOccluder");
static_assert(offsetof(TimeWatchCharacter_GetTPMeshOccluder, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetTPMeshOccluder::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.GetWeaponMeshRagdoll
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchCharacter_GetWeaponMeshRagdoll final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_GetWeaponMeshRagdoll) == 0x000008, "Wrong alignment on TimeWatchCharacter_GetWeaponMeshRagdoll");
static_assert(sizeof(TimeWatchCharacter_GetWeaponMeshRagdoll) == 0x000008, "Wrong size on TimeWatchCharacter_GetWeaponMeshRagdoll");
static_assert(offsetof(TimeWatchCharacter_GetWeaponMeshRagdoll, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_GetWeaponMeshRagdoll::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.HasSpawnProtection
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_HasSpawnProtection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_HasSpawnProtection) == 0x000001, "Wrong alignment on TimeWatchCharacter_HasSpawnProtection");
static_assert(sizeof(TimeWatchCharacter_HasSpawnProtection) == 0x000001, "Wrong size on TimeWatchCharacter_HasSpawnProtection");
static_assert(offsetof(TimeWatchCharacter_HasSpawnProtection, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_HasSpawnProtection::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsAlly
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsAlly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsAlly) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsAlly");
static_assert(sizeof(TimeWatchCharacter_IsAlly) == 0x000001, "Wrong size on TimeWatchCharacter_IsAlly");
static_assert(offsetof(TimeWatchCharacter_IsAlly, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsAlly::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsBlue
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsBlue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsBlue) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsBlue");
static_assert(sizeof(TimeWatchCharacter_IsBlue) == 0x000001, "Wrong size on TimeWatchCharacter_IsBlue");
static_assert(offsetof(TimeWatchCharacter_IsBlue, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsBlue::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsClone
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsClone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsClone) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsClone");
static_assert(sizeof(TimeWatchCharacter_IsClone) == 0x000001, "Wrong size on TimeWatchCharacter_IsClone");
static_assert(offsetof(TimeWatchCharacter_IsClone, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsClone::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsDead
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsDead) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsDead");
static_assert(sizeof(TimeWatchCharacter_IsDead) == 0x000001, "Wrong size on TimeWatchCharacter_IsDead");
static_assert(offsetof(TimeWatchCharacter_IsDead, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsDead::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsLocalTeam
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsLocalTeam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsLocalTeam) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsLocalTeam");
static_assert(sizeof(TimeWatchCharacter_IsLocalTeam) == 0x000001, "Wrong size on TimeWatchCharacter_IsLocalTeam");
static_assert(offsetof(TimeWatchCharacter_IsLocalTeam, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsLocalTeam::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsPlayer
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsPlayer) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsPlayer");
static_assert(sizeof(TimeWatchCharacter_IsPlayer) == 0x000001, "Wrong size on TimeWatchCharacter_IsPlayer");
static_assert(offsetof(TimeWatchCharacter_IsPlayer, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsPlayer::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsRespawning
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsRespawning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsRespawning) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsRespawning");
static_assert(sizeof(TimeWatchCharacter_IsRespawning) == 0x000001, "Wrong size on TimeWatchCharacter_IsRespawning");
static_assert(offsetof(TimeWatchCharacter_IsRespawning, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsRespawning::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsResyncing
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsResyncing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsResyncing) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsResyncing");
static_assert(sizeof(TimeWatchCharacter_IsResyncing) == 0x000001, "Wrong size on TimeWatchCharacter_IsResyncing");
static_assert(offsetof(TimeWatchCharacter_IsResyncing, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsResyncing::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.IsUnderResetConditions
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_IsUnderResetConditions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_IsUnderResetConditions) == 0x000001, "Wrong alignment on TimeWatchCharacter_IsUnderResetConditions");
static_assert(sizeof(TimeWatchCharacter_IsUnderResetConditions) == 0x000001, "Wrong size on TimeWatchCharacter_IsUnderResetConditions");
static_assert(offsetof(TimeWatchCharacter_IsUnderResetConditions, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_IsUnderResetConditions::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchCharacter.UsedInLoop
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchCharacter_UsedInLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchCharacter_UsedInLoop) == 0x000001, "Wrong alignment on TimeWatchCharacter_UsedInLoop");
static_assert(sizeof(TimeWatchCharacter_UsedInLoop) == 0x000001, "Wrong size on TimeWatchCharacter_UsedInLoop");
static_assert(offsetof(TimeWatchCharacter_UsedInLoop, ReturnValue) == 0x000000, "Member 'TimeWatchCharacter_UsedInLoop::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWModeSelectionSlot.BP_AdjustItemTileImage
// 0x0002 (0x0002 - 0x0000)
struct TWModeSelectionSlot_BP_AdjustItemTileImage final
{
public:
	bool                                          bIsSmall;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWeapon;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWModeSelectionSlot_BP_AdjustItemTileImage) == 0x000001, "Wrong alignment on TWModeSelectionSlot_BP_AdjustItemTileImage");
static_assert(sizeof(TWModeSelectionSlot_BP_AdjustItemTileImage) == 0x000002, "Wrong size on TWModeSelectionSlot_BP_AdjustItemTileImage");
static_assert(offsetof(TWModeSelectionSlot_BP_AdjustItemTileImage, bIsSmall) == 0x000000, "Member 'TWModeSelectionSlot_BP_AdjustItemTileImage::bIsSmall' has a wrong offset!");
static_assert(offsetof(TWModeSelectionSlot_BP_AdjustItemTileImage, bIsWeapon) == 0x000001, "Member 'TWModeSelectionSlot_BP_AdjustItemTileImage::bIsWeapon' has a wrong offset!");

// Function TimeWatch.TWModeSelectionSlot.GetButtonID
// 0x0010 (0x0010 - 0x0000)
struct TWModeSelectionSlot_GetButtonID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWModeSelectionSlot_GetButtonID) == 0x000008, "Wrong alignment on TWModeSelectionSlot_GetButtonID");
static_assert(sizeof(TWModeSelectionSlot_GetButtonID) == 0x000010, "Wrong size on TWModeSelectionSlot_GetButtonID");
static_assert(offsetof(TWModeSelectionSlot_GetButtonID, ReturnValue) == 0x000000, "Member 'TWModeSelectionSlot_GetButtonID::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWModeSelectionSlot.GetButton
// 0x0008 (0x0008 - 0x0000)
struct TWModeSelectionSlot_GetButton final
{
public:
	class UButton*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWModeSelectionSlot_GetButton) == 0x000008, "Wrong alignment on TWModeSelectionSlot_GetButton");
static_assert(sizeof(TWModeSelectionSlot_GetButton) == 0x000008, "Wrong size on TWModeSelectionSlot_GetButton");
static_assert(offsetof(TWModeSelectionSlot_GetButton, ReturnValue) == 0x000000, "Member 'TWModeSelectionSlot_GetButton::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWModeSelectionSlot.GetStandardButton
// 0x0008 (0x0008 - 0x0000)
struct TWModeSelectionSlot_GetStandardButton final
{
public:
	class UTWStandardButtonWidget*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWModeSelectionSlot_GetStandardButton) == 0x000008, "Wrong alignment on TWModeSelectionSlot_GetStandardButton");
static_assert(sizeof(TWModeSelectionSlot_GetStandardButton) == 0x000008, "Wrong size on TWModeSelectionSlot_GetStandardButton");
static_assert(offsetof(TWModeSelectionSlot_GetStandardButton, ReturnValue) == 0x000000, "Member 'TWModeSelectionSlot_GetStandardButton::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.BP_RerunConstructionScripts
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchFunctionLibrary_BP_RerunConstructionScripts final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_BP_RerunConstructionScripts) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_BP_RerunConstructionScripts");
static_assert(sizeof(TimeWatchFunctionLibrary_BP_RerunConstructionScripts) == 0x000008, "Wrong size on TimeWatchFunctionLibrary_BP_RerunConstructionScripts");
static_assert(offsetof(TimeWatchFunctionLibrary_BP_RerunConstructionScripts, InActor) == 0x000000, "Member 'TimeWatchFunctionLibrary_BP_RerunConstructionScripts::InActor' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.BP_TakeDamage
// 0x0060 (0x0060 - 0x0000)
struct TimeWatchFunctionLibrary_BP_TakeDamage final
{
public:
	class AActor*                                 ActorToDamage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_BP_TakeDamage) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_BP_TakeDamage");
static_assert(sizeof(TimeWatchFunctionLibrary_BP_TakeDamage) == 0x000060, "Wrong size on TimeWatchFunctionLibrary_BP_TakeDamage");
static_assert(offsetof(TimeWatchFunctionLibrary_BP_TakeDamage, ActorToDamage) == 0x000000, "Member 'TimeWatchFunctionLibrary_BP_TakeDamage::ActorToDamage' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_BP_TakeDamage, Damage) == 0x000008, "Member 'TimeWatchFunctionLibrary_BP_TakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_BP_TakeDamage, DamageEvent) == 0x000010, "Member 'TimeWatchFunctionLibrary_BP_TakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_BP_TakeDamage, EventInstigator) == 0x000050, "Member 'TimeWatchFunctionLibrary_BP_TakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_BP_TakeDamage, DamageCauser) == 0x000058, "Member 'TimeWatchFunctionLibrary_BP_TakeDamage::DamageCauser' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetActionKeyFriendlyName
// 0x0038 (0x0038 - 0x0000)
struct TimeWatchFunctionLibrary_GetActionKeyFriendlyName final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x0014(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerKeyGroup;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetActionKeyFriendlyName) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetActionKeyFriendlyName");
static_assert(sizeof(TimeWatchFunctionLibrary_GetActionKeyFriendlyName) == 0x000038, "Wrong size on TimeWatchFunctionLibrary_GetActionKeyFriendlyName");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActionKeyFriendlyName, Player) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetActionKeyFriendlyName::Player' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActionKeyFriendlyName, ActionName) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetActionKeyFriendlyName::ActionName' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActionKeyFriendlyName, MappingGroup) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetActionKeyFriendlyName::MappingGroup' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActionKeyFriendlyName, KeyGroup) == 0x000014, "Member 'TimeWatchFunctionLibrary_GetActionKeyFriendlyName::KeyGroup' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActionKeyFriendlyName, bUsePlayerKeyGroup) == 0x00001C, "Member 'TimeWatchFunctionLibrary_GetActionKeyFriendlyName::bUsePlayerKeyGroup' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActionKeyFriendlyName, ReturnValue) == 0x000020, "Member 'TimeWatchFunctionLibrary_GetActionKeyFriendlyName::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetActorClass
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetActorClass final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetActorClass) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetActorClass");
static_assert(sizeof(TimeWatchFunctionLibrary_GetActorClass) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetActorClass");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActorClass, Class_0) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetActorClass::Class_0' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActorClass, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetActorClass::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetActorTransformFromHitResult
// 0x00D0 (0x00D0 - 0x0000)
struct TimeWatchFunctionLibrary_GetActorTransformFromHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaYaw;                                          // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x00A0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetActorTransformFromHitResult) == 0x000010, "Wrong alignment on TimeWatchFunctionLibrary_GetActorTransformFromHitResult");
static_assert(sizeof(TimeWatchFunctionLibrary_GetActorTransformFromHitResult) == 0x0000D0, "Wrong size on TimeWatchFunctionLibrary_GetActorTransformFromHitResult");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActorTransformFromHitResult, HitResult) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetActorTransformFromHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActorTransformFromHitResult, Offset) == 0x000088, "Member 'TimeWatchFunctionLibrary_GetActorTransformFromHitResult::Offset' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActorTransformFromHitResult, DeltaYaw) == 0x000094, "Member 'TimeWatchFunctionLibrary_GetActorTransformFromHitResult::DeltaYaw' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetActorTransformFromHitResult, ReturnValue) == 0x0000A0, "Member 'TimeWatchFunctionLibrary_GetActorTransformFromHitResult::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetAnimMontageLength
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchFunctionLibrary_GetAnimMontageLength final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetAnimMontageLength) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetAnimMontageLength");
static_assert(sizeof(TimeWatchFunctionLibrary_GetAnimMontageLength) == 0x000018, "Wrong size on TimeWatchFunctionLibrary_GetAnimMontageLength");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAnimMontageLength, AnimMontage) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetAnimMontageLength::AnimMontage' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAnimMontageLength, SectionName) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetAnimMontageLength::SectionName' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAnimMontageLength, ReturnValue) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetAnimMontageLength::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetAnimMontagePosition
// 0x0020 (0x0020 - 0x0000)
struct TimeWatchFunctionLibrary_GetAnimMontagePosition final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetAnimMontagePosition) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetAnimMontagePosition");
static_assert(sizeof(TimeWatchFunctionLibrary_GetAnimMontagePosition) == 0x000020, "Wrong size on TimeWatchFunctionLibrary_GetAnimMontagePosition");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAnimMontagePosition, AnimInstance) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetAnimMontagePosition::AnimInstance' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAnimMontagePosition, AnimMontage) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetAnimMontagePosition::AnimMontage' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAnimMontagePosition, SectionName) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetAnimMontagePosition::SectionName' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAnimMontagePosition, ReturnValue) == 0x000018, "Member 'TimeWatchFunctionLibrary_GetAnimMontagePosition::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetAxisKeyFriendlyName
// 0x0040 (0x0040 - 0x0000)
struct TimeWatchFunctionLibrary_GetAxisKeyFriendlyName final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingGroup;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KeyGroup;                                          // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerKeyGroup;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetAxisKeyFriendlyName");
static_assert(sizeof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName) == 0x000040, "Wrong size on TimeWatchFunctionLibrary_GetAxisKeyFriendlyName");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName, Player) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetAxisKeyFriendlyName::Player' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName, AxisName) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetAxisKeyFriendlyName::AxisName' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName, Scale) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetAxisKeyFriendlyName::Scale' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName, MappingGroup) == 0x000014, "Member 'TimeWatchFunctionLibrary_GetAxisKeyFriendlyName::MappingGroup' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName, KeyGroup) == 0x000018, "Member 'TimeWatchFunctionLibrary_GetAxisKeyFriendlyName::KeyGroup' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName, bUsePlayerKeyGroup) == 0x000020, "Member 'TimeWatchFunctionLibrary_GetAxisKeyFriendlyName::bUsePlayerKeyGroup' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetAxisKeyFriendlyName, ReturnValue) == 0x000028, "Member 'TimeWatchFunctionLibrary_GetAxisKeyFriendlyName::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetColorForClone
// 0x0040 (0x0040 - 0x0000)
struct TimeWatchFunctionLibrary_GetColorForClone final
{
public:
	struct FTeamColorConfig                       TeamColorRef;                                      // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class ATimeWatchCharacter*                    TWCharAsContext;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetColorForClone) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetColorForClone");
static_assert(sizeof(TimeWatchFunctionLibrary_GetColorForClone) == 0x000040, "Wrong size on TimeWatchFunctionLibrary_GetColorForClone");
static_assert(offsetof(TimeWatchFunctionLibrary_GetColorForClone, TeamColorRef) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetColorForClone::TeamColorRef' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetColorForClone, TWCharAsContext) == 0x000028, "Member 'TimeWatchFunctionLibrary_GetColorForClone::TWCharAsContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetColorForClone, ReturnValue) == 0x000030, "Member 'TimeWatchFunctionLibrary_GetColorForClone::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetColorForTeam
// 0x0048 (0x0048 - 0x0000)
struct TimeWatchFunctionLibrary_GetColorForTeam final
{
public:
	struct FTeamColorConfig                       TeamColorRef;                                      // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0034(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetColorForTeam) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetColorForTeam");
static_assert(sizeof(TimeWatchFunctionLibrary_GetColorForTeam) == 0x000048, "Wrong size on TimeWatchFunctionLibrary_GetColorForTeam");
static_assert(offsetof(TimeWatchFunctionLibrary_GetColorForTeam, TeamColorRef) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetColorForTeam::TeamColorRef' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetColorForTeam, Context) == 0x000028, "Member 'TimeWatchFunctionLibrary_GetColorForTeam::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetColorForTeam, TeamIndex) == 0x000030, "Member 'TimeWatchFunctionLibrary_GetColorForTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetColorForTeam, ReturnValue) == 0x000034, "Member 'TimeWatchFunctionLibrary_GetColorForTeam::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetControllerTypeName
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchFunctionLibrary_GetControllerTypeName final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetControllerTypeName) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetControllerTypeName");
static_assert(sizeof(TimeWatchFunctionLibrary_GetControllerTypeName) == 0x000018, "Wrong size on TimeWatchFunctionLibrary_GetControllerTypeName");
static_assert(offsetof(TimeWatchFunctionLibrary_GetControllerTypeName, Character) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetControllerTypeName::Character' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetControllerTypeName, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetControllerTypeName::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetCosmeticLoopRemainingTime
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime");
static_assert(sizeof(TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime, InContext) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime::InContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetCosmeticLoopRemainingTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetCosmeticRemainingRelativeTime
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime");
static_assert(sizeof(TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime, InContext) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime::InContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetCosmeticRemainingRelativeTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentColorSchemeFromCharacter
// 0x00D0 (0x00D0 - 0x0000)
struct TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter final
{
public:
	class ATimeWatchCharacter*                    InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetColorStructure                  ReturnValue;                                       // 0x0010(0x00C0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter");
static_assert(sizeof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter) == 0x0000D0, "Wrong size on TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter, InCharacter) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter::InCharacter' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter, Context) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter, ReturnValue) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromCharacter::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentColorSchemeFromController
// 0x00D0 (0x00D0 - 0x0000)
struct TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController final
{
public:
	class AFluxPlayerController*                  InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetColorStructure                  ReturnValue;                                       // 0x0010(0x00C0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController");
static_assert(sizeof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController) == 0x0000D0, "Wrong size on TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController, InPlayerController) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController::InPlayerController' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController, Context) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController, ReturnValue) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromController::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentColorSchemeFromID
// 0x00D0 (0x00D0 - 0x0000)
struct TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetColorStructure                  ReturnValue;                                       // 0x0010(0x00C0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID");
static_assert(sizeof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID) == 0x0000D0, "Wrong size on TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID, TeamId) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID::TeamId' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID, Context) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID, ReturnValue) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetCurrentColorSchemeFromID::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentGameModeData
// 0x0028 (0x0028 - 0x0000)
struct TimeWatchFunctionLibrary_GetCurrentGameModeData final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameModeData                          ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetCurrentGameModeData) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetCurrentGameModeData");
static_assert(sizeof(TimeWatchFunctionLibrary_GetCurrentGameModeData) == 0x000028, "Wrong size on TimeWatchFunctionLibrary_GetCurrentGameModeData");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentGameModeData, Context) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetCurrentGameModeData::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentGameModeData, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetCurrentGameModeData::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentGameModeType
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetCurrentGameModeType final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameModeType                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetCurrentGameModeType) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetCurrentGameModeType");
static_assert(sizeof(TimeWatchFunctionLibrary_GetCurrentGameModeType) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetCurrentGameModeType");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentGameModeType, Context) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetCurrentGameModeType::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentGameModeType, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetCurrentGameModeType::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetCurrentViewTargetAsCharacter
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter");
static_assert(sizeof(TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter, InContext) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter::InContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetCurrentViewTargetAsCharacter::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetDebugPlayerIntros
// 0x0028 (0x0028 - 0x0000)
struct TimeWatchFunctionLibrary_GetDebugPlayerIntros final
{
public:
	class UObject*                                C;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Soft_IntroClasses;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 CharIndexes;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetDebugPlayerIntros) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetDebugPlayerIntros");
static_assert(sizeof(TimeWatchFunctionLibrary_GetDebugPlayerIntros) == 0x000028, "Wrong size on TimeWatchFunctionLibrary_GetDebugPlayerIntros");
static_assert(offsetof(TimeWatchFunctionLibrary_GetDebugPlayerIntros, C) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetDebugPlayerIntros::C' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetDebugPlayerIntros, Soft_IntroClasses) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetDebugPlayerIntros::Soft_IntroClasses' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetDebugPlayerIntros, CharIndexes) == 0x000018, "Member 'TimeWatchFunctionLibrary_GetDebugPlayerIntros::CharIndexes' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetDesiredColorIndexByIDs
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs");
static_assert(sizeof(TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs) == 0x000018, "Wrong size on TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs");
static_assert(offsetof(TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs, Context) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs, TeamIndex) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs::TeamIndex' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs, PlayerIndex) == 0x00000C, "Member 'TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs, ReturnValue) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetDesiredColorIndexByIDs::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetFloatAsTextWithPrecision
// 0x0028 (0x0028 - 0x0000)
struct TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision final
{
public:
	float                                         FloatValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Precision;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeLeadingZero;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision");
static_assert(sizeof(TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision) == 0x000028, "Wrong size on TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision");
static_assert(offsetof(TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision, FloatValue) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision::FloatValue' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision, Precision) == 0x000004, "Member 'TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision::Precision' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision, IncludeLeadingZero) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision::IncludeLeadingZero' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision, ReturnValue) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetFloatAsTextWithPrecision::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetGameInstance
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetGameInstance final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimeWatchGameInstance*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetGameInstance) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetGameInstance");
static_assert(sizeof(TimeWatchFunctionLibrary_GetGameInstance) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetGameInstance");
static_assert(offsetof(TimeWatchFunctionLibrary_GetGameInstance, InContext) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetGameInstance::InContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetGameInstance, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetGameInstance::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetGameMaps
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetGameMaps final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetGameMaps) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetGameMaps");
static_assert(sizeof(TimeWatchFunctionLibrary_GetGameMaps) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetGameMaps");
static_assert(offsetof(TimeWatchFunctionLibrary_GetGameMaps, ReturnValue) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetGameMaps::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetGameVersionString
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetGameVersionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetGameVersionString) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetGameVersionString");
static_assert(sizeof(TimeWatchFunctionLibrary_GetGameVersionString) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetGameVersionString");
static_assert(offsetof(TimeWatchFunctionLibrary_GetGameVersionString, ReturnValue) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetGameVersionString::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetLocalColor
// 0x0040 (0x0040 - 0x0000)
struct TimeWatchFunctionLibrary_GetLocalColor final
{
public:
	struct FTeamColorConfig                       TeamColorRef;                                      // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetLocalColor) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetLocalColor");
static_assert(sizeof(TimeWatchFunctionLibrary_GetLocalColor) == 0x000040, "Wrong size on TimeWatchFunctionLibrary_GetLocalColor");
static_assert(offsetof(TimeWatchFunctionLibrary_GetLocalColor, TeamColorRef) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetLocalColor::TeamColorRef' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetLocalColor, Context) == 0x000028, "Member 'TimeWatchFunctionLibrary_GetLocalColor::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetLocalColor, ReturnValue) == 0x000030, "Member 'TimeWatchFunctionLibrary_GetLocalColor::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetLocalPlayerId
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetLocalPlayerId final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetLocalPlayerId) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetLocalPlayerId");
static_assert(sizeof(TimeWatchFunctionLibrary_GetLocalPlayerId) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetLocalPlayerId");
static_assert(offsetof(TimeWatchFunctionLibrary_GetLocalPlayerId, Context) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetLocalPlayerId::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetLocalPlayerId, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetLocalPlayerId::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetLocalTeamId
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetLocalTeamId final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_GetLocalTeamId) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetLocalTeamId");
static_assert(sizeof(TimeWatchFunctionLibrary_GetLocalTeamId) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetLocalTeamId");
static_assert(offsetof(TimeWatchFunctionLibrary_GetLocalTeamId, Context) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetLocalTeamId::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetLocalTeamId, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetLocalTeamId::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetMapsFromFolder
// 0x0020 (0x0020 - 0x0000)
struct TimeWatchFunctionLibrary_GetMapsFromFolder final
{
public:
	class FString                                 FolderName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetMapsFromFolder) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetMapsFromFolder");
static_assert(sizeof(TimeWatchFunctionLibrary_GetMapsFromFolder) == 0x000020, "Wrong size on TimeWatchFunctionLibrary_GetMapsFromFolder");
static_assert(offsetof(TimeWatchFunctionLibrary_GetMapsFromFolder, FolderName) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetMapsFromFolder::FolderName' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetMapsFromFolder, ReturnValue) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetMapsFromFolder::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetPlayerIntroBindings
// 0x0028 (0x0028 - 0x0000)
struct TimeWatchFunctionLibrary_GetPlayerIntroBindings final
{
public:
	class ULevelSequencePlayer*                   InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TrackSubString;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     OutBinding;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetPlayerIntroBindings) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetPlayerIntroBindings");
static_assert(sizeof(TimeWatchFunctionLibrary_GetPlayerIntroBindings) == 0x000028, "Wrong size on TimeWatchFunctionLibrary_GetPlayerIntroBindings");
static_assert(offsetof(TimeWatchFunctionLibrary_GetPlayerIntroBindings, InPlayer) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetPlayerIntroBindings::InPlayer' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetPlayerIntroBindings, TrackSubString) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetPlayerIntroBindings::TrackSubString' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetPlayerIntroBindings, OutBinding) == 0x000018, "Member 'TimeWatchFunctionLibrary_GetPlayerIntroBindings::OutBinding' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetRandomValue
// 0x0014 (0x0014 - 0x0000)
struct TimeWatchFunctionLibrary_GetRandomValue final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetRandomValue) == 0x000004, "Wrong alignment on TimeWatchFunctionLibrary_GetRandomValue");
static_assert(sizeof(TimeWatchFunctionLibrary_GetRandomValue) == 0x000014, "Wrong size on TimeWatchFunctionLibrary_GetRandomValue");
static_assert(offsetof(TimeWatchFunctionLibrary_GetRandomValue, Seed) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetRandomValue::Seed' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetRandomValue, X) == 0x000004, "Member 'TimeWatchFunctionLibrary_GetRandomValue::X' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetRandomValue, Y) == 0x000008, "Member 'TimeWatchFunctionLibrary_GetRandomValue::Y' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetRandomValue, Z) == 0x00000C, "Member 'TimeWatchFunctionLibrary_GetRandomValue::Z' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetRandomValue, ReturnValue) == 0x000010, "Member 'TimeWatchFunctionLibrary_GetRandomValue::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetRemoteColor
// 0x0040 (0x0040 - 0x0000)
struct TimeWatchFunctionLibrary_GetRemoteColor final
{
public:
	struct FTeamColorConfig                       TeamColorRef;                                      // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetRemoteColor) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetRemoteColor");
static_assert(sizeof(TimeWatchFunctionLibrary_GetRemoteColor) == 0x000040, "Wrong size on TimeWatchFunctionLibrary_GetRemoteColor");
static_assert(offsetof(TimeWatchFunctionLibrary_GetRemoteColor, TeamColorRef) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetRemoteColor::TeamColorRef' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetRemoteColor, Context) == 0x000028, "Member 'TimeWatchFunctionLibrary_GetRemoteColor::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetRemoteColor, ReturnValue) == 0x000030, "Member 'TimeWatchFunctionLibrary_GetRemoteColor::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetSnapRotationFromNormal
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchFunctionLibrary_GetSnapRotationFromNormal final
{
public:
	struct FVector                                Normal;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetSnapRotationFromNormal) == 0x000004, "Wrong alignment on TimeWatchFunctionLibrary_GetSnapRotationFromNormal");
static_assert(sizeof(TimeWatchFunctionLibrary_GetSnapRotationFromNormal) == 0x000018, "Wrong size on TimeWatchFunctionLibrary_GetSnapRotationFromNormal");
static_assert(offsetof(TimeWatchFunctionLibrary_GetSnapRotationFromNormal, Normal) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetSnapRotationFromNormal::Normal' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_GetSnapRotationFromNormal, ReturnValue) == 0x00000C, "Member 'TimeWatchFunctionLibrary_GetSnapRotationFromNormal::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.GetTutorialMaps
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_GetTutorialMaps final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_GetTutorialMaps) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_GetTutorialMaps");
static_assert(sizeof(TimeWatchFunctionLibrary_GetTutorialMaps) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_GetTutorialMaps");
static_assert(offsetof(TimeWatchFunctionLibrary_GetTutorialMaps, ReturnValue) == 0x000000, "Member 'TimeWatchFunctionLibrary_GetTutorialMaps::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.HasAbility
// 0x0030 (0x0030 - 0x0000)
struct TimeWatchFunctionLibrary_HasAbility final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterSKU;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbilityIdentifier;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_HasAbility) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_HasAbility");
static_assert(sizeof(TimeWatchFunctionLibrary_HasAbility) == 0x000030, "Wrong size on TimeWatchFunctionLibrary_HasAbility");
static_assert(offsetof(TimeWatchFunctionLibrary_HasAbility, InContext) == 0x000000, "Member 'TimeWatchFunctionLibrary_HasAbility::InContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_HasAbility, CharacterSKU) == 0x000008, "Member 'TimeWatchFunctionLibrary_HasAbility::CharacterSKU' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_HasAbility, AbilityIdentifier) == 0x000018, "Member 'TimeWatchFunctionLibrary_HasAbility::AbilityIdentifier' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_HasAbility, ReturnValue) == 0x000028, "Member 'TimeWatchFunctionLibrary_HasAbility::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.HasPassiveAbility
// 0x0030 (0x0030 - 0x0000)
struct TimeWatchFunctionLibrary_HasPassiveAbility final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterSKU;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbilityIdentifier;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_HasPassiveAbility) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_HasPassiveAbility");
static_assert(sizeof(TimeWatchFunctionLibrary_HasPassiveAbility) == 0x000030, "Wrong size on TimeWatchFunctionLibrary_HasPassiveAbility");
static_assert(offsetof(TimeWatchFunctionLibrary_HasPassiveAbility, InContext) == 0x000000, "Member 'TimeWatchFunctionLibrary_HasPassiveAbility::InContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_HasPassiveAbility, CharacterSKU) == 0x000008, "Member 'TimeWatchFunctionLibrary_HasPassiveAbility::CharacterSKU' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_HasPassiveAbility, AbilityIdentifier) == 0x000018, "Member 'TimeWatchFunctionLibrary_HasPassiveAbility::AbilityIdentifier' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_HasPassiveAbility, ReturnValue) == 0x000028, "Member 'TimeWatchFunctionLibrary_HasPassiveAbility::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.IsExpoMode
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_IsExpoMode final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_IsExpoMode) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_IsExpoMode");
static_assert(sizeof(TimeWatchFunctionLibrary_IsExpoMode) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_IsExpoMode");
static_assert(offsetof(TimeWatchFunctionLibrary_IsExpoMode, InContext) == 0x000000, "Member 'TimeWatchFunctionLibrary_IsExpoMode::InContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_IsExpoMode, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_IsExpoMode::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.IsPrimitiveOccluded
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_IsPrimitiveOccluded final
{
public:
	class UPrimitiveComponent*                    Prim;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_IsPrimitiveOccluded) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_IsPrimitiveOccluded");
static_assert(sizeof(TimeWatchFunctionLibrary_IsPrimitiveOccluded) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_IsPrimitiveOccluded");
static_assert(offsetof(TimeWatchFunctionLibrary_IsPrimitiveOccluded, Prim) == 0x000000, "Member 'TimeWatchFunctionLibrary_IsPrimitiveOccluded::Prim' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_IsPrimitiveOccluded, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_IsPrimitiveOccluded::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.IsUsingFixedTeamColors
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_IsUsingFixedTeamColors final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_IsUsingFixedTeamColors) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_IsUsingFixedTeamColors");
static_assert(sizeof(TimeWatchFunctionLibrary_IsUsingFixedTeamColors) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_IsUsingFixedTeamColors");
static_assert(offsetof(TimeWatchFunctionLibrary_IsUsingFixedTeamColors, InContext) == 0x000000, "Member 'TimeWatchFunctionLibrary_IsUsingFixedTeamColors::InContext' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_IsUsingFixedTeamColors, ReturnValue) == 0x000008, "Member 'TimeWatchFunctionLibrary_IsUsingFixedTeamColors::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.MakeFilterHandle
// 0x0040 (0x0040 - 0x0000)
struct TimeWatchFunctionLibrary_MakeFilterHandle final
{
public:
	struct FTWGameplayTargetDataFilter            Filter;                                            // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 FilterActor;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTWGameplayTargetDataFilterHandle      ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_MakeFilterHandle) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_MakeFilterHandle");
static_assert(sizeof(TimeWatchFunctionLibrary_MakeFilterHandle) == 0x000040, "Wrong size on TimeWatchFunctionLibrary_MakeFilterHandle");
static_assert(offsetof(TimeWatchFunctionLibrary_MakeFilterHandle, Filter) == 0x000000, "Member 'TimeWatchFunctionLibrary_MakeFilterHandle::Filter' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_MakeFilterHandle, FilterActor) == 0x000028, "Member 'TimeWatchFunctionLibrary_MakeFilterHandle::FilterActor' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_MakeFilterHandle, ReturnValue) == 0x000030, "Member 'TimeWatchFunctionLibrary_MakeFilterHandle::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.SetAnimMontagePosition
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchFunctionLibrary_SetAnimMontagePosition final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewPosition;                                       // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_SetAnimMontagePosition) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_SetAnimMontagePosition");
static_assert(sizeof(TimeWatchFunctionLibrary_SetAnimMontagePosition) == 0x000018, "Wrong size on TimeWatchFunctionLibrary_SetAnimMontagePosition");
static_assert(offsetof(TimeWatchFunctionLibrary_SetAnimMontagePosition, AnimInstance) == 0x000000, "Member 'TimeWatchFunctionLibrary_SetAnimMontagePosition::AnimInstance' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_SetAnimMontagePosition, AnimMontage) == 0x000008, "Member 'TimeWatchFunctionLibrary_SetAnimMontagePosition::AnimMontage' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_SetAnimMontagePosition, NewPosition) == 0x000010, "Member 'TimeWatchFunctionLibrary_SetAnimMontagePosition::NewPosition' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.SetLightingChannels
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchFunctionLibrary_SetLightingChannels final
{
public:
	class UPrimitiveComponent*                    Prim;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      NewLigthChannels;                                  // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchFunctionLibrary_SetLightingChannels) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_SetLightingChannels");
static_assert(sizeof(TimeWatchFunctionLibrary_SetLightingChannels) == 0x000010, "Wrong size on TimeWatchFunctionLibrary_SetLightingChannels");
static_assert(offsetof(TimeWatchFunctionLibrary_SetLightingChannels, Prim) == 0x000000, "Member 'TimeWatchFunctionLibrary_SetLightingChannels::Prim' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_SetLightingChannels, NewLigthChannels) == 0x000008, "Member 'TimeWatchFunctionLibrary_SetLightingChannels::NewLigthChannels' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.SpawnActor
// 0x0030 (0x0030 - 0x0000)
struct TimeWatchFunctionLibrary_SpawnActor final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Class_0;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_SpawnActor) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_SpawnActor");
static_assert(sizeof(TimeWatchFunctionLibrary_SpawnActor) == 0x000030, "Wrong size on TimeWatchFunctionLibrary_SpawnActor");
static_assert(offsetof(TimeWatchFunctionLibrary_SpawnActor, Owner) == 0x000000, "Member 'TimeWatchFunctionLibrary_SpawnActor::Owner' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_SpawnActor, SpawnLocation) == 0x000008, "Member 'TimeWatchFunctionLibrary_SpawnActor::SpawnLocation' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_SpawnActor, SpawnRotation) == 0x000014, "Member 'TimeWatchFunctionLibrary_SpawnActor::SpawnRotation' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_SpawnActor, Class_0) == 0x000020, "Member 'TimeWatchFunctionLibrary_SpawnActor::Class_0' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_SpawnActor, ReturnValue) == 0x000028, "Member 'TimeWatchFunctionLibrary_SpawnActor::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.TraceToLog
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchFunctionLibrary_TraceToLog final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_TraceToLog) == 0x000008, "Wrong alignment on TimeWatchFunctionLibrary_TraceToLog");
static_assert(sizeof(TimeWatchFunctionLibrary_TraceToLog) == 0x000018, "Wrong size on TimeWatchFunctionLibrary_TraceToLog");
static_assert(offsetof(TimeWatchFunctionLibrary_TraceToLog, Context) == 0x000000, "Member 'TimeWatchFunctionLibrary_TraceToLog::Context' has a wrong offset!");
static_assert(offsetof(TimeWatchFunctionLibrary_TraceToLog, Text) == 0x000008, "Member 'TimeWatchFunctionLibrary_TraceToLog::Text' has a wrong offset!");

// Function TimeWatch.TimeWatchFunctionLibrary.UpdateUE4GlobalSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchFunctionLibrary_UpdateUE4GlobalSoundVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchFunctionLibrary_UpdateUE4GlobalSoundVolume) == 0x000004, "Wrong alignment on TimeWatchFunctionLibrary_UpdateUE4GlobalSoundVolume");
static_assert(sizeof(TimeWatchFunctionLibrary_UpdateUE4GlobalSoundVolume) == 0x000004, "Wrong size on TimeWatchFunctionLibrary_UpdateUE4GlobalSoundVolume");
static_assert(offsetof(TimeWatchFunctionLibrary_UpdateUE4GlobalSoundVolume, NewValue) == 0x000000, "Member 'TimeWatchFunctionLibrary_UpdateUE4GlobalSoundVolume::NewValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.DiscordStatus_PlayingGame
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchGameInstance_DiscordStatus_PlayingGame final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_DiscordStatus_PlayingGame) == 0x000008, "Wrong alignment on TimeWatchGameInstance_DiscordStatus_PlayingGame");
static_assert(sizeof(TimeWatchGameInstance_DiscordStatus_PlayingGame) == 0x000010, "Wrong size on TimeWatchGameInstance_DiscordStatus_PlayingGame");
static_assert(offsetof(TimeWatchGameInstance_DiscordStatus_PlayingGame, MapName) == 0x000000, "Member 'TimeWatchGameInstance_DiscordStatus_PlayingGame::MapName' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GameSessionPlacementTest
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchGameInstance_GameSessionPlacementTest final
{
public:
	class FString                                 PlacementId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GameSessionPlacementTest) == 0x000008, "Wrong alignment on TimeWatchGameInstance_GameSessionPlacementTest");
static_assert(sizeof(TimeWatchGameInstance_GameSessionPlacementTest) == 0x000010, "Wrong size on TimeWatchGameInstance_GameSessionPlacementTest");
static_assert(offsetof(TimeWatchGameInstance_GameSessionPlacementTest, PlacementId) == 0x000000, "Member 'TimeWatchGameInstance_GameSessionPlacementTest::PlacementId' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GetTWBeaconClient
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameInstance_GetTWBeaconClient final
{
public:
	class ATWOnlineBeaconClient*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GetTWBeaconClient) == 0x000008, "Wrong alignment on TimeWatchGameInstance_GetTWBeaconClient");
static_assert(sizeof(TimeWatchGameInstance_GetTWBeaconClient) == 0x000008, "Wrong size on TimeWatchGameInstance_GetTWBeaconClient");
static_assert(offsetof(TimeWatchGameInstance_GetTWBeaconClient, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_GetTWBeaconClient::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.OnChallengeCompletedBackendResponse
// 0x0028 (0x0028 - 0x0000)
struct TimeWatchGameInstance_OnChallengeCompletedBackendResponse final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Error;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDBackendReceivedRewards             RewardData;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_OnChallengeCompletedBackendResponse) == 0x000008, "Wrong alignment on TimeWatchGameInstance_OnChallengeCompletedBackendResponse");
static_assert(sizeof(TimeWatchGameInstance_OnChallengeCompletedBackendResponse) == 0x000028, "Wrong size on TimeWatchGameInstance_OnChallengeCompletedBackendResponse");
static_assert(offsetof(TimeWatchGameInstance_OnChallengeCompletedBackendResponse, bWasSuccessful) == 0x000000, "Member 'TimeWatchGameInstance_OnChallengeCompletedBackendResponse::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(TimeWatchGameInstance_OnChallengeCompletedBackendResponse, Error) == 0x000008, "Member 'TimeWatchGameInstance_OnChallengeCompletedBackendResponse::Error' has a wrong offset!");
static_assert(offsetof(TimeWatchGameInstance_OnChallengeCompletedBackendResponse, RewardData) == 0x000018, "Member 'TimeWatchGameInstance_OnChallengeCompletedBackendResponse::RewardData' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.OnReplayStarted
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameInstance_OnReplayStarted final
{
public:
	class UDemoNetDriver*                         DemoNetDriver;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_OnReplayStarted) == 0x000008, "Wrong alignment on TimeWatchGameInstance_OnReplayStarted");
static_assert(sizeof(TimeWatchGameInstance_OnReplayStarted) == 0x000008, "Wrong size on TimeWatchGameInstance_OnReplayStarted");
static_assert(offsetof(TimeWatchGameInstance_OnReplayStarted, DemoNetDriver) == 0x000000, "Member 'TimeWatchGameInstance_OnReplayStarted::DemoNetDriver' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.PlayLevel
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameInstance_PlayLevel final
{
public:
	TSubclassOf<class UTWLevelEntry>              LevelEntry;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_PlayLevel) == 0x000008, "Wrong alignment on TimeWatchGameInstance_PlayLevel");
static_assert(sizeof(TimeWatchGameInstance_PlayLevel) == 0x000008, "Wrong size on TimeWatchGameInstance_PlayLevel");
static_assert(offsetof(TimeWatchGameInstance_PlayLevel, LevelEntry) == 0x000000, "Member 'TimeWatchGameInstance_PlayLevel::LevelEntry' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.PushExpoDoublesCheatKey
// 0x0018 (0x0018 - 0x0000)
struct TimeWatchGameInstance_PushExpoDoublesCheatKey final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_PushExpoDoublesCheatKey) == 0x000008, "Wrong alignment on TimeWatchGameInstance_PushExpoDoublesCheatKey");
static_assert(sizeof(TimeWatchGameInstance_PushExpoDoublesCheatKey) == 0x000018, "Wrong size on TimeWatchGameInstance_PushExpoDoublesCheatKey");
static_assert(offsetof(TimeWatchGameInstance_PushExpoDoublesCheatKey, KeyPressed) == 0x000000, "Member 'TimeWatchGameInstance_PushExpoDoublesCheatKey::KeyPressed' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.UpdateDiscordStatus
// 0x0028 (0x0028 - 0x0000)
struct TimeWatchGameInstance_UpdateDiscordStatus final
{
public:
	class FString                                 State;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 details;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimer;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeWatchGameInstance_UpdateDiscordStatus) == 0x000008, "Wrong alignment on TimeWatchGameInstance_UpdateDiscordStatus");
static_assert(sizeof(TimeWatchGameInstance_UpdateDiscordStatus) == 0x000028, "Wrong size on TimeWatchGameInstance_UpdateDiscordStatus");
static_assert(offsetof(TimeWatchGameInstance_UpdateDiscordStatus, State) == 0x000000, "Member 'TimeWatchGameInstance_UpdateDiscordStatus::State' has a wrong offset!");
static_assert(offsetof(TimeWatchGameInstance_UpdateDiscordStatus, details) == 0x000010, "Member 'TimeWatchGameInstance_UpdateDiscordStatus::details' has a wrong offset!");
static_assert(offsetof(TimeWatchGameInstance_UpdateDiscordStatus, StartTimer) == 0x000020, "Member 'TimeWatchGameInstance_UpdateDiscordStatus::StartTimer' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.ArePlayerTitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameInstance_ArePlayerTitlesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_ArePlayerTitlesEnabled) == 0x000001, "Wrong alignment on TimeWatchGameInstance_ArePlayerTitlesEnabled");
static_assert(sizeof(TimeWatchGameInstance_ArePlayerTitlesEnabled) == 0x000001, "Wrong size on TimeWatchGameInstance_ArePlayerTitlesEnabled");
static_assert(offsetof(TimeWatchGameInstance_ArePlayerTitlesEnabled, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_ArePlayerTitlesEnabled::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GetExpoExpectedSpectators
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameInstance_GetExpoExpectedSpectators final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GetExpoExpectedSpectators) == 0x000004, "Wrong alignment on TimeWatchGameInstance_GetExpoExpectedSpectators");
static_assert(sizeof(TimeWatchGameInstance_GetExpoExpectedSpectators) == 0x000004, "Wrong size on TimeWatchGameInstance_GetExpoExpectedSpectators");
static_assert(offsetof(TimeWatchGameInstance_GetExpoExpectedSpectators, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_GetExpoExpectedSpectators::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GetExpoGraphicOptionsLocked
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameInstance_GetExpoGraphicOptionsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GetExpoGraphicOptionsLocked) == 0x000001, "Wrong alignment on TimeWatchGameInstance_GetExpoGraphicOptionsLocked");
static_assert(sizeof(TimeWatchGameInstance_GetExpoGraphicOptionsLocked) == 0x000001, "Wrong size on TimeWatchGameInstance_GetExpoGraphicOptionsLocked");
static_assert(offsetof(TimeWatchGameInstance_GetExpoGraphicOptionsLocked, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_GetExpoGraphicOptionsLocked::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GetExpoTitle
// 0x0010 (0x0010 - 0x0000)
struct TimeWatchGameInstance_GetExpoTitle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GetExpoTitle) == 0x000008, "Wrong alignment on TimeWatchGameInstance_GetExpoTitle");
static_assert(sizeof(TimeWatchGameInstance_GetExpoTitle) == 0x000010, "Wrong size on TimeWatchGameInstance_GetExpoTitle");
static_assert(offsetof(TimeWatchGameInstance_GetExpoTitle, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_GetExpoTitle::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GetExpoVideoVolume
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchGameInstance_GetExpoVideoVolume final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GetExpoVideoVolume) == 0x000004, "Wrong alignment on TimeWatchGameInstance_GetExpoVideoVolume");
static_assert(sizeof(TimeWatchGameInstance_GetExpoVideoVolume) == 0x000004, "Wrong size on TimeWatchGameInstance_GetExpoVideoVolume");
static_assert(offsetof(TimeWatchGameInstance_GetExpoVideoVolume, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_GetExpoVideoVolume::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GetGameGlobals
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameInstance_GetGameGlobals final
{
public:
	class UTWGameGlobals*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GetGameGlobals) == 0x000008, "Wrong alignment on TimeWatchGameInstance_GetGameGlobals");
static_assert(sizeof(TimeWatchGameInstance_GetGameGlobals) == 0x000008, "Wrong size on TimeWatchGameInstance_GetGameGlobals");
static_assert(offsetof(TimeWatchGameInstance_GetGameGlobals, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_GetGameGlobals::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GetGlobals
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameInstance_GetGlobals final
{
public:
	class UTWGlobals*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GetGlobals) == 0x000008, "Wrong alignment on TimeWatchGameInstance_GetGlobals");
static_assert(sizeof(TimeWatchGameInstance_GetGlobals) == 0x000008, "Wrong size on TimeWatchGameInstance_GetGlobals");
static_assert(offsetof(TimeWatchGameInstance_GetGlobals, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_GetGlobals::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.GetStoreGlobals
// 0x0008 (0x0008 - 0x0000)
struct TimeWatchGameInstance_GetStoreGlobals final
{
public:
	class UTWStoreGlobals*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_GetStoreGlobals) == 0x000008, "Wrong alignment on TimeWatchGameInstance_GetStoreGlobals");
static_assert(sizeof(TimeWatchGameInstance_GetStoreGlobals) == 0x000008, "Wrong size on TimeWatchGameInstance_GetStoreGlobals");
static_assert(offsetof(TimeWatchGameInstance_GetStoreGlobals, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_GetStoreGlobals::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.IsCurrentLevelChallenge
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameInstance_IsCurrentLevelChallenge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_IsCurrentLevelChallenge) == 0x000001, "Wrong alignment on TimeWatchGameInstance_IsCurrentLevelChallenge");
static_assert(sizeof(TimeWatchGameInstance_IsCurrentLevelChallenge) == 0x000001, "Wrong size on TimeWatchGameInstance_IsCurrentLevelChallenge");
static_assert(offsetof(TimeWatchGameInstance_IsCurrentLevelChallenge, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_IsCurrentLevelChallenge::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.IsExpoDoubles
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameInstance_IsExpoDoubles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_IsExpoDoubles) == 0x000001, "Wrong alignment on TimeWatchGameInstance_IsExpoDoubles");
static_assert(sizeof(TimeWatchGameInstance_IsExpoDoubles) == 0x000001, "Wrong size on TimeWatchGameInstance_IsExpoDoubles");
static_assert(offsetof(TimeWatchGameInstance_IsExpoDoubles, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_IsExpoDoubles::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.IsExpoMode
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameInstance_IsExpoMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_IsExpoMode) == 0x000001, "Wrong alignment on TimeWatchGameInstance_IsExpoMode");
static_assert(sizeof(TimeWatchGameInstance_IsExpoMode) == 0x000001, "Wrong size on TimeWatchGameInstance_IsExpoMode");
static_assert(offsetof(TimeWatchGameInstance_IsExpoMode, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_IsExpoMode::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.IsExpoSpectator
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameInstance_IsExpoSpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_IsExpoSpectator) == 0x000001, "Wrong alignment on TimeWatchGameInstance_IsExpoSpectator");
static_assert(sizeof(TimeWatchGameInstance_IsExpoSpectator) == 0x000001, "Wrong size on TimeWatchGameInstance_IsExpoSpectator");
static_assert(offsetof(TimeWatchGameInstance_IsExpoSpectator, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_IsExpoSpectator::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchGameInstance.IsGameHUDStarted
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchGameInstance_IsGameHUDStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchGameInstance_IsGameHUDStarted) == 0x000001, "Wrong alignment on TimeWatchGameInstance_IsGameHUDStarted");
static_assert(sizeof(TimeWatchGameInstance_IsGameHUDStarted) == 0x000001, "Wrong size on TimeWatchGameInstance_IsGameHUDStarted");
static_assert(offsetof(TimeWatchGameInstance_IsGameHUDStarted, ReturnValue) == 0x000000, "Member 'TimeWatchGameInstance_IsGameHUDStarted::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPlayerInfoWidgetComponent.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWPlayerInfoWidgetComponent_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerInfoWidgetComponent_OnGameStateChanged) == 0x000001, "Wrong alignment on TWPlayerInfoWidgetComponent_OnGameStateChanged");
static_assert(sizeof(TWPlayerInfoWidgetComponent_OnGameStateChanged) == 0x000002, "Wrong size on TWPlayerInfoWidgetComponent_OnGameStateChanged");
static_assert(offsetof(TWPlayerInfoWidgetComponent_OnGameStateChanged, OldState) == 0x000000, "Member 'TWPlayerInfoWidgetComponent_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWPlayerInfoWidgetComponent_OnGameStateChanged, NewState) == 0x000001, "Member 'TWPlayerInfoWidgetComponent_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWPlayerInfoWidgetComponent.UpdateWidgetHealthBar
// 0x0004 (0x0004 - 0x0000)
struct TWPlayerInfoWidgetComponent_UpdateWidgetHealthBar final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerInfoWidgetComponent_UpdateWidgetHealthBar) == 0x000004, "Wrong alignment on TWPlayerInfoWidgetComponent_UpdateWidgetHealthBar");
static_assert(sizeof(TWPlayerInfoWidgetComponent_UpdateWidgetHealthBar) == 0x000004, "Wrong size on TWPlayerInfoWidgetComponent_UpdateWidgetHealthBar");
static_assert(offsetof(TWPlayerInfoWidgetComponent_UpdateWidgetHealthBar, DeltaTime) == 0x000000, "Member 'TWPlayerInfoWidgetComponent_UpdateWidgetHealthBar::DeltaTime' has a wrong offset!");

// Function TimeWatch.TWPlayerInfoWidgetComponent.GetCloneOverHeadWidget
// 0x0008 (0x0008 - 0x0000)
struct TWPlayerInfoWidgetComponent_GetCloneOverHeadWidget final
{
public:
	class UTWCloneOverheadWidget*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerInfoWidgetComponent_GetCloneOverHeadWidget) == 0x000008, "Wrong alignment on TWPlayerInfoWidgetComponent_GetCloneOverHeadWidget");
static_assert(sizeof(TWPlayerInfoWidgetComponent_GetCloneOverHeadWidget) == 0x000008, "Wrong size on TWPlayerInfoWidgetComponent_GetCloneOverHeadWidget");
static_assert(offsetof(TWPlayerInfoWidgetComponent_GetCloneOverHeadWidget, ReturnValue) == 0x000000, "Member 'TWPlayerInfoWidgetComponent_GetCloneOverHeadWidget::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchProjectile.BP_IsReadyToBeDestroyed
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchProjectile_BP_IsReadyToBeDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchProjectile_BP_IsReadyToBeDestroyed) == 0x000001, "Wrong alignment on TimeWatchProjectile_BP_IsReadyToBeDestroyed");
static_assert(sizeof(TimeWatchProjectile_BP_IsReadyToBeDestroyed) == 0x000001, "Wrong size on TimeWatchProjectile_BP_IsReadyToBeDestroyed");
static_assert(offsetof(TimeWatchProjectile_BP_IsReadyToBeDestroyed, ReturnValue) == 0x000000, "Member 'TimeWatchProjectile_BP_IsReadyToBeDestroyed::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchProjectile.BP_OnSetEnabled
// 0x0001 (0x0001 - 0x0000)
struct TimeWatchProjectile_BP_OnSetEnabled final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchProjectile_BP_OnSetEnabled) == 0x000001, "Wrong alignment on TimeWatchProjectile_BP_OnSetEnabled");
static_assert(sizeof(TimeWatchProjectile_BP_OnSetEnabled) == 0x000001, "Wrong size on TimeWatchProjectile_BP_OnSetEnabled");
static_assert(offsetof(TimeWatchProjectile_BP_OnSetEnabled, NewState) == 0x000000, "Member 'TimeWatchProjectile_BP_OnSetEnabled::NewState' has a wrong offset!");

// Function TimeWatch.TimeWatchProjectile.GetCosmeticCreationLocation
// 0x000C (0x000C - 0x0000)
struct TimeWatchProjectile_GetCosmeticCreationLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchProjectile_GetCosmeticCreationLocation) == 0x000004, "Wrong alignment on TimeWatchProjectile_GetCosmeticCreationLocation");
static_assert(sizeof(TimeWatchProjectile_GetCosmeticCreationLocation) == 0x00000C, "Wrong size on TimeWatchProjectile_GetCosmeticCreationLocation");
static_assert(offsetof(TimeWatchProjectile_GetCosmeticCreationLocation, ReturnValue) == 0x000000, "Member 'TimeWatchProjectile_GetCosmeticCreationLocation::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchProjectile.GetCosmeticCreationTime
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchProjectile_GetCosmeticCreationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchProjectile_GetCosmeticCreationTime) == 0x000004, "Wrong alignment on TimeWatchProjectile_GetCosmeticCreationTime");
static_assert(sizeof(TimeWatchProjectile_GetCosmeticCreationTime) == 0x000004, "Wrong size on TimeWatchProjectile_GetCosmeticCreationTime");
static_assert(offsetof(TimeWatchProjectile_GetCosmeticCreationTime, ReturnValue) == 0x000000, "Member 'TimeWatchProjectile_GetCosmeticCreationTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchProjectile.GetCosmeticImpactLocation
// 0x000C (0x000C - 0x0000)
struct TimeWatchProjectile_GetCosmeticImpactLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchProjectile_GetCosmeticImpactLocation) == 0x000004, "Wrong alignment on TimeWatchProjectile_GetCosmeticImpactLocation");
static_assert(sizeof(TimeWatchProjectile_GetCosmeticImpactLocation) == 0x00000C, "Wrong size on TimeWatchProjectile_GetCosmeticImpactLocation");
static_assert(offsetof(TimeWatchProjectile_GetCosmeticImpactLocation, ReturnValue) == 0x000000, "Member 'TimeWatchProjectile_GetCosmeticImpactLocation::ReturnValue' has a wrong offset!");

// Function TimeWatch.TimeWatchProjectile.GetCosmeticImpactTime
// 0x0004 (0x0004 - 0x0000)
struct TimeWatchProjectile_GetCosmeticImpactTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWatchProjectile_GetCosmeticImpactTime) == 0x000004, "Wrong alignment on TimeWatchProjectile_GetCosmeticImpactTime");
static_assert(sizeof(TimeWatchProjectile_GetCosmeticImpactTime) == 0x000004, "Wrong size on TimeWatchProjectile_GetCosmeticImpactTime");
static_assert(offsetof(TimeWatchProjectile_GetCosmeticImpactTime, ReturnValue) == 0x000000, "Member 'TimeWatchProjectile_GetCosmeticImpactTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalProjectile.ForceOnProjectileOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct TWPhysicalProjectile_ForceOnProjectileOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalProjectile_ForceOnProjectileOverlap) == 0x000008, "Wrong alignment on TWPhysicalProjectile_ForceOnProjectileOverlap");
static_assert(sizeof(TWPhysicalProjectile_ForceOnProjectileOverlap) == 0x0000A8, "Wrong size on TWPhysicalProjectile_ForceOnProjectileOverlap");
static_assert(offsetof(TWPhysicalProjectile_ForceOnProjectileOverlap, OverlappedComponent) == 0x000000, "Member 'TWPhysicalProjectile_ForceOnProjectileOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_ForceOnProjectileOverlap, OtherActor) == 0x000008, "Member 'TWPhysicalProjectile_ForceOnProjectileOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_ForceOnProjectileOverlap, OtherComp) == 0x000010, "Member 'TWPhysicalProjectile_ForceOnProjectileOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_ForceOnProjectileOverlap, OtherBodyIndex) == 0x000018, "Member 'TWPhysicalProjectile_ForceOnProjectileOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_ForceOnProjectileOverlap, bFromSweep) == 0x00001C, "Member 'TWPhysicalProjectile_ForceOnProjectileOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_ForceOnProjectileOverlap, SweepResult) == 0x000020, "Member 'TWPhysicalProjectile_ForceOnProjectileOverlap::SweepResult' has a wrong offset!");

// Function TimeWatch.TWPhysicalProjectile.OnProjectileHit
// 0x00B0 (0x00B0 - 0x0000)
struct TWPhysicalProjectile_OnProjectileHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWPhysicalProjectile_OnProjectileHit) == 0x000008, "Wrong alignment on TWPhysicalProjectile_OnProjectileHit");
static_assert(sizeof(TWPhysicalProjectile_OnProjectileHit) == 0x0000B0, "Wrong size on TWPhysicalProjectile_OnProjectileHit");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileHit, HitComp) == 0x000000, "Member 'TWPhysicalProjectile_OnProjectileHit::HitComp' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileHit, OtherActor) == 0x000008, "Member 'TWPhysicalProjectile_OnProjectileHit::OtherActor' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileHit, OtherComp) == 0x000010, "Member 'TWPhysicalProjectile_OnProjectileHit::OtherComp' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileHit, NormalImpulse) == 0x000018, "Member 'TWPhysicalProjectile_OnProjectileHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileHit, Hit) == 0x000024, "Member 'TWPhysicalProjectile_OnProjectileHit::Hit' has a wrong offset!");

// Function TimeWatch.TWPhysicalProjectile.OnProjectileOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct TWPhysicalProjectile_OnProjectileOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalProjectile_OnProjectileOverlap) == 0x000008, "Wrong alignment on TWPhysicalProjectile_OnProjectileOverlap");
static_assert(sizeof(TWPhysicalProjectile_OnProjectileOverlap) == 0x0000A8, "Wrong size on TWPhysicalProjectile_OnProjectileOverlap");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileOverlap, OverlappedComponent) == 0x000000, "Member 'TWPhysicalProjectile_OnProjectileOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileOverlap, OtherActor) == 0x000008, "Member 'TWPhysicalProjectile_OnProjectileOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileOverlap, OtherComp) == 0x000010, "Member 'TWPhysicalProjectile_OnProjectileOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileOverlap, OtherBodyIndex) == 0x000018, "Member 'TWPhysicalProjectile_OnProjectileOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileOverlap, bFromSweep) == 0x00001C, "Member 'TWPhysicalProjectile_OnProjectileOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TWPhysicalProjectile_OnProjectileOverlap, SweepResult) == 0x000020, "Member 'TWPhysicalProjectile_OnProjectileOverlap::SweepResult' has a wrong offset!");

// Function TimeWatch.TWPhysicalProjectile.GetRemainingTravelTime
// 0x0004 (0x0004 - 0x0000)
struct TWPhysicalProjectile_GetRemainingTravelTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalProjectile_GetRemainingTravelTime) == 0x000004, "Wrong alignment on TWPhysicalProjectile_GetRemainingTravelTime");
static_assert(sizeof(TWPhysicalProjectile_GetRemainingTravelTime) == 0x000004, "Wrong size on TWPhysicalProjectile_GetRemainingTravelTime");
static_assert(offsetof(TWPhysicalProjectile_GetRemainingTravelTime, ReturnValue) == 0x000000, "Member 'TWPhysicalProjectile_GetRemainingTravelTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalProjectile.HasHitCharacter
// 0x0001 (0x0001 - 0x0000)
struct TWPhysicalProjectile_HasHitCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalProjectile_HasHitCharacter) == 0x000001, "Wrong alignment on TWPhysicalProjectile_HasHitCharacter");
static_assert(sizeof(TWPhysicalProjectile_HasHitCharacter) == 0x000001, "Wrong size on TWPhysicalProjectile_HasHitCharacter");
static_assert(offsetof(TWPhysicalProjectile_HasHitCharacter, ReturnValue) == 0x000000, "Member 'TWPhysicalProjectile_HasHitCharacter::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalProjectile.ShouldUpdateMovement
// 0x0001 (0x0001 - 0x0000)
struct TWPhysicalProjectile_ShouldUpdateMovement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalProjectile_ShouldUpdateMovement) == 0x000001, "Wrong alignment on TWPhysicalProjectile_ShouldUpdateMovement");
static_assert(sizeof(TWPhysicalProjectile_ShouldUpdateMovement) == 0x000001, "Wrong size on TWPhysicalProjectile_ShouldUpdateMovement");
static_assert(offsetof(TWPhysicalProjectile_ShouldUpdateMovement, ReturnValue) == 0x000000, "Member 'TWPhysicalProjectile_ShouldUpdateMovement::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.DrawDebugExplosion
// 0x0010 (0x0010 - 0x0000)
struct TWPhysicalExplodingProjectile_DrawDebugExplosion final
{
public:
	struct FVector                                ExplosionLocation;                                 // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionRadius;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalExplodingProjectile_DrawDebugExplosion) == 0x000004, "Wrong alignment on TWPhysicalExplodingProjectile_DrawDebugExplosion");
static_assert(sizeof(TWPhysicalExplodingProjectile_DrawDebugExplosion) == 0x000010, "Wrong size on TWPhysicalExplodingProjectile_DrawDebugExplosion");
static_assert(offsetof(TWPhysicalExplodingProjectile_DrawDebugExplosion, ExplosionLocation) == 0x000000, "Member 'TWPhysicalExplodingProjectile_DrawDebugExplosion::ExplosionLocation' has a wrong offset!");
static_assert(offsetof(TWPhysicalExplodingProjectile_DrawDebugExplosion, ExplosionRadius) == 0x00000C, "Member 'TWPhysicalExplodingProjectile_DrawDebugExplosion::ExplosionRadius' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.DrawDebugExplosionHit
// 0x0014 (0x0014 - 0x0000)
struct TWPhysicalExplodingProjectile_DrawDebugExplosionHit final
{
public:
	struct FVector                                VictimLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusIntersection;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnteringExplosion;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWPhysicalExplodingProjectile_DrawDebugExplosionHit) == 0x000004, "Wrong alignment on TWPhysicalExplodingProjectile_DrawDebugExplosionHit");
static_assert(sizeof(TWPhysicalExplodingProjectile_DrawDebugExplosionHit) == 0x000014, "Wrong size on TWPhysicalExplodingProjectile_DrawDebugExplosionHit");
static_assert(offsetof(TWPhysicalExplodingProjectile_DrawDebugExplosionHit, VictimLocation) == 0x000000, "Member 'TWPhysicalExplodingProjectile_DrawDebugExplosionHit::VictimLocation' has a wrong offset!");
static_assert(offsetof(TWPhysicalExplodingProjectile_DrawDebugExplosionHit, RadiusIntersection) == 0x00000C, "Member 'TWPhysicalExplodingProjectile_DrawDebugExplosionHit::RadiusIntersection' has a wrong offset!");
static_assert(offsetof(TWPhysicalExplodingProjectile_DrawDebugExplosionHit, bEnteringExplosion) == 0x000010, "Member 'TWPhysicalExplodingProjectile_DrawDebugExplosionHit::bEnteringExplosion' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.GetExplosionTime
// 0x0004 (0x0004 - 0x0000)
struct TWPhysicalExplodingProjectile_GetExplosionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalExplodingProjectile_GetExplosionTime) == 0x000004, "Wrong alignment on TWPhysicalExplodingProjectile_GetExplosionTime");
static_assert(sizeof(TWPhysicalExplodingProjectile_GetExplosionTime) == 0x000004, "Wrong size on TWPhysicalExplodingProjectile_GetExplosionTime");
static_assert(offsetof(TWPhysicalExplodingProjectile_GetExplosionTime, ReturnValue) == 0x000000, "Member 'TWPhysicalExplodingProjectile_GetExplosionTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.GetCosmeticExplosionRequiredTime
// 0x0004 (0x0004 - 0x0000)
struct TWPhysicalExplodingProjectile_GetCosmeticExplosionRequiredTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalExplodingProjectile_GetCosmeticExplosionRequiredTime) == 0x000004, "Wrong alignment on TWPhysicalExplodingProjectile_GetCosmeticExplosionRequiredTime");
static_assert(sizeof(TWPhysicalExplodingProjectile_GetCosmeticExplosionRequiredTime) == 0x000004, "Wrong size on TWPhysicalExplodingProjectile_GetCosmeticExplosionRequiredTime");
static_assert(offsetof(TWPhysicalExplodingProjectile_GetCosmeticExplosionRequiredTime, ReturnValue) == 0x000000, "Member 'TWPhysicalExplodingProjectile_GetCosmeticExplosionRequiredTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.GetExplosionMaxSize
// 0x0004 (0x0004 - 0x0000)
struct TWPhysicalExplodingProjectile_GetExplosionMaxSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalExplodingProjectile_GetExplosionMaxSize) == 0x000004, "Wrong alignment on TWPhysicalExplodingProjectile_GetExplosionMaxSize");
static_assert(sizeof(TWPhysicalExplodingProjectile_GetExplosionMaxSize) == 0x000004, "Wrong size on TWPhysicalExplodingProjectile_GetExplosionMaxSize");
static_assert(offsetof(TWPhysicalExplodingProjectile_GetExplosionMaxSize, ReturnValue) == 0x000000, "Member 'TWPhysicalExplodingProjectile_GetExplosionMaxSize::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.GetExplosionSize
// 0x0004 (0x0004 - 0x0000)
struct TWPhysicalExplodingProjectile_GetExplosionSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalExplodingProjectile_GetExplosionSize) == 0x000004, "Wrong alignment on TWPhysicalExplodingProjectile_GetExplosionSize");
static_assert(sizeof(TWPhysicalExplodingProjectile_GetExplosionSize) == 0x000004, "Wrong size on TWPhysicalExplodingProjectile_GetExplosionSize");
static_assert(offsetof(TWPhysicalExplodingProjectile_GetExplosionSize, ReturnValue) == 0x000000, "Member 'TWPhysicalExplodingProjectile_GetExplosionSize::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.GetExplosionTimestamp
// 0x0004 (0x0004 - 0x0000)
struct TWPhysicalExplodingProjectile_GetExplosionTimestamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalExplodingProjectile_GetExplosionTimestamp) == 0x000004, "Wrong alignment on TWPhysicalExplodingProjectile_GetExplosionTimestamp");
static_assert(sizeof(TWPhysicalExplodingProjectile_GetExplosionTimestamp) == 0x000004, "Wrong size on TWPhysicalExplodingProjectile_GetExplosionTimestamp");
static_assert(offsetof(TWPhysicalExplodingProjectile_GetExplosionTimestamp, ReturnValue) == 0x000000, "Member 'TWPhysicalExplodingProjectile_GetExplosionTimestamp::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.GetRelativeExplosionTime
// 0x0004 (0x0004 - 0x0000)
struct TWPhysicalExplodingProjectile_GetRelativeExplosionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalExplodingProjectile_GetRelativeExplosionTime) == 0x000004, "Wrong alignment on TWPhysicalExplodingProjectile_GetRelativeExplosionTime");
static_assert(sizeof(TWPhysicalExplodingProjectile_GetRelativeExplosionTime) == 0x000004, "Wrong size on TWPhysicalExplodingProjectile_GetRelativeExplosionTime");
static_assert(offsetof(TWPhysicalExplodingProjectile_GetRelativeExplosionTime, ReturnValue) == 0x000000, "Member 'TWPhysicalExplodingProjectile_GetRelativeExplosionTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPhysicalExplodingProjectile.IsExploding
// 0x0001 (0x0001 - 0x0000)
struct TWPhysicalExplodingProjectile_IsExploding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPhysicalExplodingProjectile_IsExploding) == 0x000001, "Wrong alignment on TWPhysicalExplodingProjectile_IsExploding");
static_assert(sizeof(TWPhysicalExplodingProjectile_IsExploding) == 0x000001, "Wrong size on TWPhysicalExplodingProjectile_IsExploding");
static_assert(offsetof(TWPhysicalExplodingProjectile_IsExploding, ReturnValue) == 0x000000, "Member 'TWPhysicalExplodingProjectile_IsExploding::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbilitiesComponent.GetGameplayTasksComponent
// 0x0008 (0x0008 - 0x0000)
struct TWAbilitiesComponent_GetGameplayTasksComponent final
{
public:
	class UGameplayTasksComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilitiesComponent_GetGameplayTasksComponent) == 0x000008, "Wrong alignment on TWAbilitiesComponent_GetGameplayTasksComponent");
static_assert(sizeof(TWAbilitiesComponent_GetGameplayTasksComponent) == 0x000008, "Wrong size on TWAbilitiesComponent_GetGameplayTasksComponent");
static_assert(offsetof(TWAbilitiesComponent_GetGameplayTasksComponent, ReturnValue) == 0x000000, "Member 'TWAbilitiesComponent_GetGameplayTasksComponent::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbilitiesComponent.Multicast_ActivateAbility
// 0x0020 (0x0020 - 0x0000)
struct TWAbilitiesComponent_Multicast_ActivateAbility final
{
public:
	struct FTWAbilityCustomDataHandle             AbilityDataHandle;                                 // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilitiesComponent_Multicast_ActivateAbility) == 0x000008, "Wrong alignment on TWAbilitiesComponent_Multicast_ActivateAbility");
static_assert(sizeof(TWAbilitiesComponent_Multicast_ActivateAbility) == 0x000020, "Wrong size on TWAbilitiesComponent_Multicast_ActivateAbility");
static_assert(offsetof(TWAbilitiesComponent_Multicast_ActivateAbility, AbilityDataHandle) == 0x000000, "Member 'TWAbilitiesComponent_Multicast_ActivateAbility::AbilityDataHandle' has a wrong offset!");

// Function TimeWatch.TWAbilitiesComponent.OnRep_Energy
// 0x0004 (0x0004 - 0x0000)
struct TWAbilitiesComponent_OnRep_Energy final
{
public:
	float                                         OldEnergy;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilitiesComponent_OnRep_Energy) == 0x000004, "Wrong alignment on TWAbilitiesComponent_OnRep_Energy");
static_assert(sizeof(TWAbilitiesComponent_OnRep_Energy) == 0x000004, "Wrong size on TWAbilitiesComponent_OnRep_Energy");
static_assert(offsetof(TWAbilitiesComponent_OnRep_Energy, OldEnergy) == 0x000000, "Member 'TWAbilitiesComponent_OnRep_Energy::OldEnergy' has a wrong offset!");

// Function TimeWatch.TWAbilitiesComponent.Server_ActivateAbility
// 0x0020 (0x0020 - 0x0000)
struct TWAbilitiesComponent_Server_ActivateAbility final
{
public:
	struct FTWAbilityCustomDataHandle             AbilityDataHandle;                                 // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilitiesComponent_Server_ActivateAbility) == 0x000008, "Wrong alignment on TWAbilitiesComponent_Server_ActivateAbility");
static_assert(sizeof(TWAbilitiesComponent_Server_ActivateAbility) == 0x000020, "Wrong size on TWAbilitiesComponent_Server_ActivateAbility");
static_assert(offsetof(TWAbilitiesComponent_Server_ActivateAbility, AbilityDataHandle) == 0x000000, "Member 'TWAbilitiesComponent_Server_ActivateAbility::AbilityDataHandle' has a wrong offset!");

// Function TimeWatch.TWAbilitiesComponent.TryActivateAbility
// 0x0008 (0x0008 - 0x0000)
struct TWAbilitiesComponent_TryActivateAbility final
{
public:
	TSubclassOf<class UTWAbility>                 Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilitiesComponent_TryActivateAbility) == 0x000008, "Wrong alignment on TWAbilitiesComponent_TryActivateAbility");
static_assert(sizeof(TWAbilitiesComponent_TryActivateAbility) == 0x000008, "Wrong size on TWAbilitiesComponent_TryActivateAbility");
static_assert(offsetof(TWAbilitiesComponent_TryActivateAbility, Ability) == 0x000000, "Member 'TWAbilitiesComponent_TryActivateAbility::Ability' has a wrong offset!");

// Function TimeWatch.TWAbilitiesComponent.GetAbilityCost
// 0x0008 (0x0008 - 0x0000)
struct TWAbilitiesComponent_GetAbilityCost final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilitiesComponent_GetAbilityCost) == 0x000004, "Wrong alignment on TWAbilitiesComponent_GetAbilityCost");
static_assert(sizeof(TWAbilitiesComponent_GetAbilityCost) == 0x000008, "Wrong size on TWAbilitiesComponent_GetAbilityCost");
static_assert(offsetof(TWAbilitiesComponent_GetAbilityCost, AbilityIndex) == 0x000000, "Member 'TWAbilitiesComponent_GetAbilityCost::AbilityIndex' has a wrong offset!");
static_assert(offsetof(TWAbilitiesComponent_GetAbilityCost, ReturnValue) == 0x000004, "Member 'TWAbilitiesComponent_GetAbilityCost::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbilitiesComponent.GetGameState
// 0x0008 (0x0008 - 0x0000)
struct TWAbilitiesComponent_GetGameState final
{
public:
	class ATimeWatchGameState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilitiesComponent_GetGameState) == 0x000008, "Wrong alignment on TWAbilitiesComponent_GetGameState");
static_assert(sizeof(TWAbilitiesComponent_GetGameState) == 0x000008, "Wrong size on TWAbilitiesComponent_GetGameState");
static_assert(offsetof(TWAbilitiesComponent_GetGameState, ReturnValue) == 0x000000, "Member 'TWAbilitiesComponent_GetGameState::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbilitiesComponent.GetOwningCharacter
// 0x0008 (0x0008 - 0x0000)
struct TWAbilitiesComponent_GetOwningCharacter final
{
public:
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilitiesComponent_GetOwningCharacter) == 0x000008, "Wrong alignment on TWAbilitiesComponent_GetOwningCharacter");
static_assert(sizeof(TWAbilitiesComponent_GetOwningCharacter) == 0x000008, "Wrong size on TWAbilitiesComponent_GetOwningCharacter");
static_assert(offsetof(TWAbilitiesComponent_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'TWAbilitiesComponent_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWOnlineBeaconClient.Client_ReplicateLobbySetting
// 0x0018 (0x0018 - 0x0000)
struct TWOnlineBeaconClient_Client_ReplicateLobbySetting final
{
public:
	ELobbyReplicableField                         Field;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOnlineBeaconClient_Client_ReplicateLobbySetting) == 0x000008, "Wrong alignment on TWOnlineBeaconClient_Client_ReplicateLobbySetting");
static_assert(sizeof(TWOnlineBeaconClient_Client_ReplicateLobbySetting) == 0x000018, "Wrong size on TWOnlineBeaconClient_Client_ReplicateLobbySetting");
static_assert(offsetof(TWOnlineBeaconClient_Client_ReplicateLobbySetting, Field) == 0x000000, "Member 'TWOnlineBeaconClient_Client_ReplicateLobbySetting::Field' has a wrong offset!");
static_assert(offsetof(TWOnlineBeaconClient_Client_ReplicateLobbySetting, Value) == 0x000008, "Member 'TWOnlineBeaconClient_Client_ReplicateLobbySetting::Value' has a wrong offset!");

// Function TimeWatch.TWOnlineBeaconClient.Client_StartMatchmaking
// 0x0018 (0x0018 - 0x0000)
struct TWOnlineBeaconClient_Client_StartMatchmaking final
{
public:
	ETWMatchQueueType                             MatchQueueType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LobbyID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOnlineBeaconClient_Client_StartMatchmaking) == 0x000008, "Wrong alignment on TWOnlineBeaconClient_Client_StartMatchmaking");
static_assert(sizeof(TWOnlineBeaconClient_Client_StartMatchmaking) == 0x000018, "Wrong size on TWOnlineBeaconClient_Client_StartMatchmaking");
static_assert(offsetof(TWOnlineBeaconClient_Client_StartMatchmaking, MatchQueueType) == 0x000000, "Member 'TWOnlineBeaconClient_Client_StartMatchmaking::MatchQueueType' has a wrong offset!");
static_assert(offsetof(TWOnlineBeaconClient_Client_StartMatchmaking, LobbyID) == 0x000008, "Member 'TWOnlineBeaconClient_Client_StartMatchmaking::LobbyID' has a wrong offset!");

// Function TimeWatch.TWOnlineBeaconClient.OnCustomLobbySettingChange
// 0x0018 (0x0018 - 0x0000)
struct TWOnlineBeaconClient_OnCustomLobbySettingChange final
{
public:
	ELobbyReplicableField                         Field;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOnlineBeaconClient_OnCustomLobbySettingChange) == 0x000008, "Wrong alignment on TWOnlineBeaconClient_OnCustomLobbySettingChange");
static_assert(sizeof(TWOnlineBeaconClient_OnCustomLobbySettingChange) == 0x000018, "Wrong size on TWOnlineBeaconClient_OnCustomLobbySettingChange");
static_assert(offsetof(TWOnlineBeaconClient_OnCustomLobbySettingChange, Field) == 0x000000, "Member 'TWOnlineBeaconClient_OnCustomLobbySettingChange::Field' has a wrong offset!");
static_assert(offsetof(TWOnlineBeaconClient_OnCustomLobbySettingChange, Value) == 0x000008, "Member 'TWOnlineBeaconClient_OnCustomLobbySettingChange::Value' has a wrong offset!");

// Function TimeWatch.TWOnlineBeaconClient.Server_SetUserId
// 0x0010 (0x0010 - 0x0000)
struct TWOnlineBeaconClient_Server_SetUserId final
{
public:
	class FString                                 InUserID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOnlineBeaconClient_Server_SetUserId) == 0x000008, "Wrong alignment on TWOnlineBeaconClient_Server_SetUserId");
static_assert(sizeof(TWOnlineBeaconClient_Server_SetUserId) == 0x000010, "Wrong size on TWOnlineBeaconClient_Server_SetUserId");
static_assert(offsetof(TWOnlineBeaconClient_Server_SetUserId, InUserID) == 0x000000, "Member 'TWOnlineBeaconClient_Server_SetUserId::InUserID' has a wrong offset!");

// Function TimeWatch.TWOnlineBeaconClient.Server_SetUserUnlockedCasual
// 0x0001 (0x0001 - 0x0000)
struct TWOnlineBeaconClient_Server_SetUserUnlockedCasual final
{
public:
	bool                                          bUnlockedCasual;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOnlineBeaconClient_Server_SetUserUnlockedCasual) == 0x000001, "Wrong alignment on TWOnlineBeaconClient_Server_SetUserUnlockedCasual");
static_assert(sizeof(TWOnlineBeaconClient_Server_SetUserUnlockedCasual) == 0x000001, "Wrong size on TWOnlineBeaconClient_Server_SetUserUnlockedCasual");
static_assert(offsetof(TWOnlineBeaconClient_Server_SetUserUnlockedCasual, bUnlockedCasual) == 0x000000, "Member 'TWOnlineBeaconClient_Server_SetUserUnlockedCasual::bUnlockedCasual' has a wrong offset!");

// Function TimeWatch.TWOnlineBeaconClient.Server_SetUserUnlockedRanked
// 0x0001 (0x0001 - 0x0000)
struct TWOnlineBeaconClient_Server_SetUserUnlockedRanked final
{
public:
	bool                                          bUnlockedRanked;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOnlineBeaconClient_Server_SetUserUnlockedRanked) == 0x000001, "Wrong alignment on TWOnlineBeaconClient_Server_SetUserUnlockedRanked");
static_assert(sizeof(TWOnlineBeaconClient_Server_SetUserUnlockedRanked) == 0x000001, "Wrong size on TWOnlineBeaconClient_Server_SetUserUnlockedRanked");
static_assert(offsetof(TWOnlineBeaconClient_Server_SetUserUnlockedRanked, bUnlockedRanked) == 0x000000, "Member 'TWOnlineBeaconClient_Server_SetUserUnlockedRanked::bUnlockedRanked' has a wrong offset!");

// Function TimeWatch.TWOnlineBeaconClient.Server_StartMatchmaking
// 0x0001 (0x0001 - 0x0000)
struct TWOnlineBeaconClient_Server_StartMatchmaking final
{
public:
	ETWMatchQueueType                             MatchQueueType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOnlineBeaconClient_Server_StartMatchmaking) == 0x000001, "Wrong alignment on TWOnlineBeaconClient_Server_StartMatchmaking");
static_assert(sizeof(TWOnlineBeaconClient_Server_StartMatchmaking) == 0x000001, "Wrong size on TWOnlineBeaconClient_Server_StartMatchmaking");
static_assert(offsetof(TWOnlineBeaconClient_Server_StartMatchmaking, MatchQueueType) == 0x000000, "Member 'TWOnlineBeaconClient_Server_StartMatchmaking::MatchQueueType' has a wrong offset!");

// Function TimeWatch.TWAbility.BP_Cancel
// 0x0008 (0x0008 - 0x0000)
struct TWAbility_BP_Cancel final
{
public:
	class UTWGameplayAbilitySystem*               InTWAbilitySystem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbility_BP_Cancel) == 0x000008, "Wrong alignment on TWAbility_BP_Cancel");
static_assert(sizeof(TWAbility_BP_Cancel) == 0x000008, "Wrong size on TWAbility_BP_Cancel");
static_assert(offsetof(TWAbility_BP_Cancel, InTWAbilitySystem) == 0x000000, "Member 'TWAbility_BP_Cancel::InTWAbilitySystem' has a wrong offset!");

// Function TimeWatch.TWAbility.BP_Commit
// 0x0008 (0x0008 - 0x0000)
struct TWAbility_BP_Commit final
{
public:
	class UTWGameplayAbilitySystem*               InTWAbilitySystem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbility_BP_Commit) == 0x000008, "Wrong alignment on TWAbility_BP_Commit");
static_assert(sizeof(TWAbility_BP_Commit) == 0x000008, "Wrong size on TWAbility_BP_Commit");
static_assert(offsetof(TWAbility_BP_Commit, InTWAbilitySystem) == 0x000000, "Member 'TWAbility_BP_Commit::InTWAbilitySystem' has a wrong offset!");

// Function TimeWatch.TWAbility.BP_OnActivated
// 0x0030 (0x0030 - 0x0000)
struct TWAbility_BP_OnActivated final
{
public:
	class UTWGameplayAbilitySystem*               InTWAbilitySystem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomDataHandle             AbilityDataHandle;                                 // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShouldTriggerLogic;                               // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWAbility_BP_OnActivated) == 0x000008, "Wrong alignment on TWAbility_BP_OnActivated");
static_assert(sizeof(TWAbility_BP_OnActivated) == 0x000030, "Wrong size on TWAbility_BP_OnActivated");
static_assert(offsetof(TWAbility_BP_OnActivated, InTWAbilitySystem) == 0x000000, "Member 'TWAbility_BP_OnActivated::InTWAbilitySystem' has a wrong offset!");
static_assert(offsetof(TWAbility_BP_OnActivated, AbilityDataHandle) == 0x000008, "Member 'TWAbility_BP_OnActivated::AbilityDataHandle' has a wrong offset!");
static_assert(offsetof(TWAbility_BP_OnActivated, bShouldTriggerLogic) == 0x000028, "Member 'TWAbility_BP_OnActivated::bShouldTriggerLogic' has a wrong offset!");

// Function TimeWatch.TWAbility.BP_OnPreActivated
// 0x0010 (0x0010 - 0x0000)
struct TWAbility_BP_OnPreActivated final
{
public:
	class UTWGameplayAbilitySystem*               InTWAbilitySystem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTWAbilitiesComponent*                  Caster_AbilityComp;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbility_BP_OnPreActivated) == 0x000008, "Wrong alignment on TWAbility_BP_OnPreActivated");
static_assert(sizeof(TWAbility_BP_OnPreActivated) == 0x000010, "Wrong size on TWAbility_BP_OnPreActivated");
static_assert(offsetof(TWAbility_BP_OnPreActivated, InTWAbilitySystem) == 0x000000, "Member 'TWAbility_BP_OnPreActivated::InTWAbilitySystem' has a wrong offset!");
static_assert(offsetof(TWAbility_BP_OnPreActivated, Caster_AbilityComp) == 0x000008, "Member 'TWAbility_BP_OnPreActivated::Caster_AbilityComp' has a wrong offset!");

// Function TimeWatch.TWAbility.BP_OnReExecuted
// 0x0030 (0x0030 - 0x0000)
struct TWAbility_BP_OnReExecuted final
{
public:
	class UTWGameplayAbilitySystem*               InTWAbilitySystem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomDataHandle             AbilityDataHandle;                                 // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShouldTriggerLogic;                               // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWAbility_BP_OnReExecuted) == 0x000008, "Wrong alignment on TWAbility_BP_OnReExecuted");
static_assert(sizeof(TWAbility_BP_OnReExecuted) == 0x000030, "Wrong size on TWAbility_BP_OnReExecuted");
static_assert(offsetof(TWAbility_BP_OnReExecuted, InTWAbilitySystem) == 0x000000, "Member 'TWAbility_BP_OnReExecuted::InTWAbilitySystem' has a wrong offset!");
static_assert(offsetof(TWAbility_BP_OnReExecuted, AbilityDataHandle) == 0x000008, "Member 'TWAbility_BP_OnReExecuted::AbilityDataHandle' has a wrong offset!");
static_assert(offsetof(TWAbility_BP_OnReExecuted, bShouldTriggerLogic) == 0x000028, "Member 'TWAbility_BP_OnReExecuted::bShouldTriggerLogic' has a wrong offset!");

// Function TimeWatch.TWAbility.BP_Update
// 0x0004 (0x0004 - 0x0000)
struct TWAbility_BP_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbility_BP_Update) == 0x000004, "Wrong alignment on TWAbility_BP_Update");
static_assert(sizeof(TWAbility_BP_Update) == 0x000004, "Wrong size on TWAbility_BP_Update");
static_assert(offsetof(TWAbility_BP_Update, DeltaSeconds) == 0x000000, "Member 'TWAbility_BP_Update::DeltaSeconds' has a wrong offset!");

// Function TimeWatch.TWAbility.MakeAbilityCustomDataHandle
// 0x0028 (0x0028 - 0x0000)
struct TWAbility_MakeAbilityCustomDataHandle final
{
public:
	class UTWAbilitiesComponent*                  Caster_AbilityComp;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTWAbilityCustomDataHandle             ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbility_MakeAbilityCustomDataHandle) == 0x000008, "Wrong alignment on TWAbility_MakeAbilityCustomDataHandle");
static_assert(sizeof(TWAbility_MakeAbilityCustomDataHandle) == 0x000028, "Wrong size on TWAbility_MakeAbilityCustomDataHandle");
static_assert(offsetof(TWAbility_MakeAbilityCustomDataHandle, Caster_AbilityComp) == 0x000000, "Member 'TWAbility_MakeAbilityCustomDataHandle::Caster_AbilityComp' has a wrong offset!");
static_assert(offsetof(TWAbility_MakeAbilityCustomDataHandle, ReturnValue) == 0x000008, "Member 'TWAbility_MakeAbilityCustomDataHandle::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbility.GetAbilityData
// 0x0014 (0x0014 - 0x0000)
struct TWAbility_GetAbilityData final
{
public:
	struct FTWAbilityData                         ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbility_GetAbilityData) == 0x000004, "Wrong alignment on TWAbility_GetAbilityData");
static_assert(sizeof(TWAbility_GetAbilityData) == 0x000014, "Wrong size on TWAbility_GetAbilityData");
static_assert(offsetof(TWAbility_GetAbilityData, ReturnValue) == 0x000000, "Member 'TWAbility_GetAbilityData::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbility.GetInstanceData
// 0x0018 (0x0018 - 0x0000)
struct TWAbility_GetInstanceData final
{
public:
	struct FTWAbilityInstanceData                 ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbility_GetInstanceData) == 0x000008, "Wrong alignment on TWAbility_GetInstanceData");
static_assert(sizeof(TWAbility_GetInstanceData) == 0x000018, "Wrong size on TWAbility_GetInstanceData");
static_assert(offsetof(TWAbility_GetInstanceData, ReturnValue) == 0x000000, "Member 'TWAbility_GetInstanceData::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.BP_PlayMeleeImpactParticles
// 0x0088 (0x0088 - 0x0000)
struct TWAbilityMelee_BP_PlayMeleeImpactParticles final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_BP_PlayMeleeImpactParticles) == 0x000004, "Wrong alignment on TWAbilityMelee_BP_PlayMeleeImpactParticles");
static_assert(sizeof(TWAbilityMelee_BP_PlayMeleeImpactParticles) == 0x000088, "Wrong size on TWAbilityMelee_BP_PlayMeleeImpactParticles");
static_assert(offsetof(TWAbilityMelee_BP_PlayMeleeImpactParticles, Hit) == 0x000000, "Member 'TWAbilityMelee_BP_PlayMeleeImpactParticles::Hit' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.InitAbility
// 0x0028 (0x0028 - 0x0000)
struct TWAbilityMelee_InitAbility final
{
public:
	struct FTWAbilityExecutionData                inCastData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_InitAbility) == 0x000008, "Wrong alignment on TWAbilityMelee_InitAbility");
static_assert(sizeof(TWAbilityMelee_InitAbility) == 0x000028, "Wrong size on TWAbilityMelee_InitAbility");
static_assert(offsetof(TWAbilityMelee_InitAbility, inCastData) == 0x000000, "Member 'TWAbilityMelee_InitAbility::inCastData' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.PlayBarrelHitFX
// 0x0088 (0x0088 - 0x0000)
struct TWAbilityMelee_PlayBarrelHitFX final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_PlayBarrelHitFX) == 0x000004, "Wrong alignment on TWAbilityMelee_PlayBarrelHitFX");
static_assert(sizeof(TWAbilityMelee_PlayBarrelHitFX) == 0x000088, "Wrong size on TWAbilityMelee_PlayBarrelHitFX");
static_assert(offsetof(TWAbilityMelee_PlayBarrelHitFX, Hit) == 0x000000, "Member 'TWAbilityMelee_PlayBarrelHitFX::Hit' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.PlayDamageFX
// 0x0088 (0x0088 - 0x0000)
struct TWAbilityMelee_PlayDamageFX final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_PlayDamageFX) == 0x000004, "Wrong alignment on TWAbilityMelee_PlayDamageFX");
static_assert(sizeof(TWAbilityMelee_PlayDamageFX) == 0x000088, "Wrong size on TWAbilityMelee_PlayDamageFX");
static_assert(offsetof(TWAbilityMelee_PlayDamageFX, Hit) == 0x000000, "Member 'TWAbilityMelee_PlayDamageFX::Hit' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.PlayOtherActorHitFX
// 0x0088 (0x0088 - 0x0000)
struct TWAbilityMelee_PlayOtherActorHitFX final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_PlayOtherActorHitFX) == 0x000004, "Wrong alignment on TWAbilityMelee_PlayOtherActorHitFX");
static_assert(sizeof(TWAbilityMelee_PlayOtherActorHitFX) == 0x000088, "Wrong size on TWAbilityMelee_PlayOtherActorHitFX");
static_assert(offsetof(TWAbilityMelee_PlayOtherActorHitFX, Hit) == 0x000000, "Member 'TWAbilityMelee_PlayOtherActorHitFX::Hit' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.PlayPhysicsHitFX
// 0x0088 (0x0088 - 0x0000)
struct TWAbilityMelee_PlayPhysicsHitFX final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_PlayPhysicsHitFX) == 0x000004, "Wrong alignment on TWAbilityMelee_PlayPhysicsHitFX");
static_assert(sizeof(TWAbilityMelee_PlayPhysicsHitFX) == 0x000088, "Wrong size on TWAbilityMelee_PlayPhysicsHitFX");
static_assert(offsetof(TWAbilityMelee_PlayPhysicsHitFX, Hit) == 0x000000, "Member 'TWAbilityMelee_PlayPhysicsHitFX::Hit' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.CalcHitSweep
// 0x0018 (0x0018 - 0x0000)
struct TWAbilityMelee_CalcHitSweep final
{
public:
	struct FVector                                outStartPos;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outEndPos;                                         // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_CalcHitSweep) == 0x000004, "Wrong alignment on TWAbilityMelee_CalcHitSweep");
static_assert(sizeof(TWAbilityMelee_CalcHitSweep) == 0x000018, "Wrong size on TWAbilityMelee_CalcHitSweep");
static_assert(offsetof(TWAbilityMelee_CalcHitSweep, outStartPos) == 0x000000, "Member 'TWAbilityMelee_CalcHitSweep::outStartPos' has a wrong offset!");
static_assert(offsetof(TWAbilityMelee_CalcHitSweep, outEndPos) == 0x00000C, "Member 'TWAbilityMelee_CalcHitSweep::outEndPos' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.GetDamageTime
// 0x0004 (0x0004 - 0x0000)
struct TWAbilityMelee_GetDamageTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_GetDamageTime) == 0x000004, "Wrong alignment on TWAbilityMelee_GetDamageTime");
static_assert(sizeof(TWAbilityMelee_GetDamageTime) == 0x000004, "Wrong size on TWAbilityMelee_GetDamageTime");
static_assert(offsetof(TWAbilityMelee_GetDamageTime, ReturnValue) == 0x000000, "Member 'TWAbilityMelee_GetDamageTime::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.GetDamageTimeOffset
// 0x0004 (0x0004 - 0x0000)
struct TWAbilityMelee_GetDamageTimeOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAbilityMelee_GetDamageTimeOffset) == 0x000004, "Wrong alignment on TWAbilityMelee_GetDamageTimeOffset");
static_assert(sizeof(TWAbilityMelee_GetDamageTimeOffset) == 0x000004, "Wrong size on TWAbilityMelee_GetDamageTimeOffset");
static_assert(offsetof(TWAbilityMelee_GetDamageTimeOffset, ReturnValue) == 0x000000, "Member 'TWAbilityMelee_GetDamageTimeOffset::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAbilityMelee.GetHit
// 0x008C (0x008C - 0x0000)
struct TWAbilityMelee_GetHit final
{
public:
	struct FHitResult                             outFoundHit;                                       // 0x0000(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWAbilityMelee_GetHit) == 0x000004, "Wrong alignment on TWAbilityMelee_GetHit");
static_assert(sizeof(TWAbilityMelee_GetHit) == 0x00008C, "Wrong size on TWAbilityMelee_GetHit");
static_assert(offsetof(TWAbilityMelee_GetHit, outFoundHit) == 0x000000, "Member 'TWAbilityMelee_GetHit::outFoundHit' has a wrong offset!");
static_assert(offsetof(TWAbilityMelee_GetHit, ReturnValue) == 0x000088, "Member 'TWAbilityMelee_GetHit::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWActorCompass.OnReset
// 0x0008 (0x0008 - 0x0000)
struct TWActorCompass_OnReset final
{
public:
	const class AActor*                           OwnerActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWActorCompass_OnReset) == 0x000008, "Wrong alignment on TWActorCompass_OnReset");
static_assert(sizeof(TWActorCompass_OnReset) == 0x000008, "Wrong size on TWActorCompass_OnReset");
static_assert(offsetof(TWActorCompass_OnReset, OwnerActor) == 0x000000, "Member 'TWActorCompass_OnReset::OwnerActor' has a wrong offset!");

// Function TimeWatch.TWActorCompass.OnUpdated
// 0x0004 (0x0004 - 0x0000)
struct TWActorCompass_OnUpdated final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWActorCompass_OnUpdated) == 0x000004, "Wrong alignment on TWActorCompass_OnUpdated");
static_assert(sizeof(TWActorCompass_OnUpdated) == 0x000004, "Wrong size on TWActorCompass_OnUpdated");
static_assert(offsetof(TWActorCompass_OnUpdated, Distance) == 0x000000, "Member 'TWActorCompass_OnUpdated::Distance' has a wrong offset!");

// Function TimeWatch.TWActorCompass.IsCompassVisible
// 0x0001 (0x0001 - 0x0000)
struct TWActorCompass_IsCompassVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWActorCompass_IsCompassVisible) == 0x000001, "Wrong alignment on TWActorCompass_IsCompassVisible");
static_assert(sizeof(TWActorCompass_IsCompassVisible) == 0x000001, "Wrong size on TWActorCompass_IsCompassVisible");
static_assert(offsetof(TWActorCompass_IsCompassVisible, ReturnValue) == 0x000000, "Member 'TWActorCompass_IsCompassVisible::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAnnouncer.DispatchCustomEvent
// 0x0010 (0x0010 - 0x0000)
struct TWAnnouncer_DispatchCustomEvent final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAnnouncer_DispatchCustomEvent) == 0x000008, "Wrong alignment on TWAnnouncer_DispatchCustomEvent");
static_assert(sizeof(TWAnnouncer_DispatchCustomEvent) == 0x000010, "Wrong size on TWAnnouncer_DispatchCustomEvent");
static_assert(offsetof(TWAnnouncer_DispatchCustomEvent, EventId) == 0x000000, "Member 'TWAnnouncer_DispatchCustomEvent::EventId' has a wrong offset!");

// Function TimeWatch.TWAnnouncer.DispatchEvent
// 0x0008 (0x0008 - 0x0000)
struct TWAnnouncer_DispatchEvent final
{
public:
	class UTimeWatchEvent*                        Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAnnouncer_DispatchEvent) == 0x000008, "Wrong alignment on TWAnnouncer_DispatchEvent");
static_assert(sizeof(TWAnnouncer_DispatchEvent) == 0x000008, "Wrong size on TWAnnouncer_DispatchEvent");
static_assert(offsetof(TWAnnouncer_DispatchEvent, Event) == 0x000000, "Member 'TWAnnouncer_DispatchEvent::Event' has a wrong offset!");

// Function TimeWatch.TWAnnouncer.IsCurrentEventOfClass
// 0x0010 (0x0010 - 0x0000)
struct TWAnnouncer_IsCurrentEventOfClass final
{
public:
	TSubclassOf<class UTimeWatchEvent>            EventClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWAnnouncer_IsCurrentEventOfClass) == 0x000008, "Wrong alignment on TWAnnouncer_IsCurrentEventOfClass");
static_assert(sizeof(TWAnnouncer_IsCurrentEventOfClass) == 0x000010, "Wrong size on TWAnnouncer_IsCurrentEventOfClass");
static_assert(offsetof(TWAnnouncer_IsCurrentEventOfClass, EventClass) == 0x000000, "Member 'TWAnnouncer_IsCurrentEventOfClass::EventClass' has a wrong offset!");
static_assert(offsetof(TWAnnouncer_IsCurrentEventOfClass, ReturnValue) == 0x000008, "Member 'TWAnnouncer_IsCurrentEventOfClass::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWAutoSpectateComponent.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWAutoSpectateComponent_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAutoSpectateComponent_OnGameStateChanged) == 0x000001, "Wrong alignment on TWAutoSpectateComponent_OnGameStateChanged");
static_assert(sizeof(TWAutoSpectateComponent_OnGameStateChanged) == 0x000002, "Wrong size on TWAutoSpectateComponent_OnGameStateChanged");
static_assert(offsetof(TWAutoSpectateComponent_OnGameStateChanged, OldState) == 0x000000, "Member 'TWAutoSpectateComponent_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWAutoSpectateComponent_OnGameStateChanged, NewState) == 0x000001, "Member 'TWAutoSpectateComponent_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWAutoSpectateComponent.OnTeamScored
// 0x0004 (0x0004 - 0x0000)
struct TWAutoSpectateComponent_OnTeamScored final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWAutoSpectateComponent_OnTeamScored) == 0x000004, "Wrong alignment on TWAutoSpectateComponent_OnTeamScored");
static_assert(sizeof(TWAutoSpectateComponent_OnTeamScored) == 0x000004, "Wrong size on TWAutoSpectateComponent_OnTeamScored");
static_assert(offsetof(TWAutoSpectateComponent_OnTeamScored, TeamId) == 0x000000, "Member 'TWAutoSpectateComponent_OnTeamScored::TeamId' has a wrong offset!");

// Function TimeWatch.TWPlaybook.AddPingOnPlaybook
// 0x0018 (0x0018 - 0x0000)
struct TWPlaybook_AddPingOnPlaybook final
{
public:
	struct FVector                                PingPlaybookPosition;                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PingNormal;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlaybook_AddPingOnPlaybook) == 0x000004, "Wrong alignment on TWPlaybook_AddPingOnPlaybook");
static_assert(sizeof(TWPlaybook_AddPingOnPlaybook) == 0x000018, "Wrong size on TWPlaybook_AddPingOnPlaybook");
static_assert(offsetof(TWPlaybook_AddPingOnPlaybook, PingPlaybookPosition) == 0x000000, "Member 'TWPlaybook_AddPingOnPlaybook::PingPlaybookPosition' has a wrong offset!");
static_assert(offsetof(TWPlaybook_AddPingOnPlaybook, PingNormal) == 0x00000C, "Member 'TWPlaybook_AddPingOnPlaybook::PingNormal' has a wrong offset!");

// Function TimeWatch.TWPlaybook.GetKillData
// 0x0018 (0x0018 - 0x0000)
struct TWPlaybook_GetKillData final
{
public:
	class ATimeWatchCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDeathData>                     OutDeathData;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlaybook_GetKillData) == 0x000008, "Wrong alignment on TWPlaybook_GetKillData");
static_assert(sizeof(TWPlaybook_GetKillData) == 0x000018, "Wrong size on TWPlaybook_GetKillData");
static_assert(offsetof(TWPlaybook_GetKillData, Character) == 0x000000, "Member 'TWPlaybook_GetKillData::Character' has a wrong offset!");
static_assert(offsetof(TWPlaybook_GetKillData, OutDeathData) == 0x000008, "Member 'TWPlaybook_GetKillData::OutDeathData' has a wrong offset!");

// Function TimeWatch.TWPlaybook.GetTrailData
// 0x0018 (0x0018 - 0x0000)
struct TWPlaybook_GetTrailData final
{
public:
	class ATimeWatchCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPointData>                     OutTrailData;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlaybook_GetTrailData) == 0x000008, "Wrong alignment on TWPlaybook_GetTrailData");
static_assert(sizeof(TWPlaybook_GetTrailData) == 0x000018, "Wrong size on TWPlaybook_GetTrailData");
static_assert(offsetof(TWPlaybook_GetTrailData, Character) == 0x000000, "Member 'TWPlaybook_GetTrailData::Character' has a wrong offset!");
static_assert(offsetof(TWPlaybook_GetTrailData, OutTrailData) == 0x000008, "Member 'TWPlaybook_GetTrailData::OutTrailData' has a wrong offset!");

// Function TimeWatch.TWPlaybook.OnPingAdded
// 0x0040 (0x0040 - 0x0000)
struct TWPlaybook_OnPingAdded final
{
public:
	struct FPingMarker                            NewPing;                                           // 0x0000(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlaybook_OnPingAdded) == 0x000008, "Wrong alignment on TWPlaybook_OnPingAdded");
static_assert(sizeof(TWPlaybook_OnPingAdded) == 0x000040, "Wrong size on TWPlaybook_OnPingAdded");
static_assert(offsetof(TWPlaybook_OnPingAdded, NewPing) == 0x000000, "Member 'TWPlaybook_OnPingAdded::NewPing' has a wrong offset!");

// Function TimeWatch.TWPlaybook.OnPingRemoved
// 0x0004 (0x0004 - 0x0000)
struct TWPlaybook_OnPingRemoved final
{
public:
	int32                                         PingID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlaybook_OnPingRemoved) == 0x000004, "Wrong alignment on TWPlaybook_OnPingRemoved");
static_assert(sizeof(TWPlaybook_OnPingRemoved) == 0x000004, "Wrong size on TWPlaybook_OnPingRemoved");
static_assert(offsetof(TWPlaybook_OnPingRemoved, PingID) == 0x000000, "Member 'TWPlaybook_OnPingRemoved::PingID' has a wrong offset!");

// Function TimeWatch.TWPlaybook.OnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWPlaybook_OnStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlaybook_OnStateChanged) == 0x000001, "Wrong alignment on TWPlaybook_OnStateChanged");
static_assert(sizeof(TWPlaybook_OnStateChanged) == 0x000002, "Wrong size on TWPlaybook_OnStateChanged");
static_assert(offsetof(TWPlaybook_OnStateChanged, OldState) == 0x000000, "Member 'TWPlaybook_OnStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWPlaybook_OnStateChanged, NewState) == 0x000001, "Member 'TWPlaybook_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWPlaybook.ToggleCursorPlaybook
// 0x0001 (0x0001 - 0x0000)
struct TWPlaybook_ToggleCursorPlaybook final
{
public:
	bool                                          bToggleValue;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlaybook_ToggleCursorPlaybook) == 0x000001, "Wrong alignment on TWPlaybook_ToggleCursorPlaybook");
static_assert(sizeof(TWPlaybook_ToggleCursorPlaybook) == 0x000001, "Wrong size on TWPlaybook_ToggleCursorPlaybook");
static_assert(offsetof(TWPlaybook_ToggleCursorPlaybook, bToggleValue) == 0x000000, "Member 'TWPlaybook_ToggleCursorPlaybook::bToggleValue' has a wrong offset!");

// Function TimeWatch.TWChallengeClock.SetTimer
// 0x0014 (0x0014 - 0x0000)
struct TWChallengeClock_SetTimer final
{
public:
	TDelegate<void()>                             TimerDynamicDelegate;                              // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWChallengeClock_SetTimer) == 0x000004, "Wrong alignment on TWChallengeClock_SetTimer");
static_assert(sizeof(TWChallengeClock_SetTimer) == 0x000014, "Wrong size on TWChallengeClock_SetTimer");
static_assert(offsetof(TWChallengeClock_SetTimer, TimerDynamicDelegate) == 0x000000, "Member 'TWChallengeClock_SetTimer::TimerDynamicDelegate' has a wrong offset!");
static_assert(offsetof(TWChallengeClock_SetTimer, Duration) == 0x000010, "Member 'TWChallengeClock_SetTimer::Duration' has a wrong offset!");

// Function TimeWatch.TWCharacterCustomizationComponent.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWCharacterCustomizationComponent_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterCustomizationComponent_OnGameStateChanged) == 0x000001, "Wrong alignment on TWCharacterCustomizationComponent_OnGameStateChanged");
static_assert(sizeof(TWCharacterCustomizationComponent_OnGameStateChanged) == 0x000002, "Wrong size on TWCharacterCustomizationComponent_OnGameStateChanged");
static_assert(offsetof(TWCharacterCustomizationComponent_OnGameStateChanged, OldState) == 0x000000, "Member 'TWCharacterCustomizationComponent_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWCharacterCustomizationComponent_OnGameStateChanged, NewState) == 0x000001, "Member 'TWCharacterCustomizationComponent_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWCharacterCustomizationComponent.SetScalarParameterValueOnMeshFP
// 0x000C (0x000C - 0x0000)
struct TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP) == 0x000004, "Wrong alignment on TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP");
static_assert(sizeof(TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP) == 0x00000C, "Wrong size on TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP");
static_assert(offsetof(TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP, InParameterName) == 0x000000, "Member 'TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP::InParameterName' has a wrong offset!");
static_assert(offsetof(TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP, InValue) == 0x000008, "Member 'TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshFP::InValue' has a wrong offset!");

// Function TimeWatch.TWCharacterCustomizationComponent.SetScalarParameterValueOnMeshTP
// 0x000C (0x000C - 0x0000)
struct TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP) == 0x000004, "Wrong alignment on TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP");
static_assert(sizeof(TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP) == 0x00000C, "Wrong size on TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP");
static_assert(offsetof(TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP, InParameterName) == 0x000000, "Member 'TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP::InParameterName' has a wrong offset!");
static_assert(offsetof(TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP, InValue) == 0x000008, "Member 'TWCharacterCustomizationComponent_SetScalarParameterValueOnMeshTP::InValue' has a wrong offset!");

// Function TimeWatch.TWCharacterCustomizationComponent.SetVectorParameterValueOnMeshFP
// 0x0018 (0x0018 - 0x0000)
struct TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP) == 0x000004, "Wrong alignment on TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP");
static_assert(sizeof(TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP) == 0x000018, "Wrong size on TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP");
static_assert(offsetof(TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP, InParameterName) == 0x000000, "Member 'TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP::InParameterName' has a wrong offset!");
static_assert(offsetof(TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP, InValue) == 0x000008, "Member 'TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshFP::InValue' has a wrong offset!");

// Function TimeWatch.TWCharacterCustomizationComponent.SetVectorParameterValueOnMeshTP
// 0x0018 (0x0018 - 0x0000)
struct TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP) == 0x000004, "Wrong alignment on TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP");
static_assert(sizeof(TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP) == 0x000018, "Wrong size on TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP");
static_assert(offsetof(TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP, InParameterName) == 0x000000, "Member 'TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP::InParameterName' has a wrong offset!");
static_assert(offsetof(TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP, InValue) == 0x000008, "Member 'TWCharacterCustomizationComponent_SetVectorParameterValueOnMeshTP::InValue' has a wrong offset!");

// Function TimeWatch.TWCharacterCustomizationComponent.UpdateCharacterMaterial
// 0x0001 (0x0001 - 0x0000)
struct TWCharacterCustomizationComponent_UpdateCharacterMaterial final
{
public:
	bool                                          bIsTimeGhost;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterCustomizationComponent_UpdateCharacterMaterial) == 0x000001, "Wrong alignment on TWCharacterCustomizationComponent_UpdateCharacterMaterial");
static_assert(sizeof(TWCharacterCustomizationComponent_UpdateCharacterMaterial) == 0x000001, "Wrong size on TWCharacterCustomizationComponent_UpdateCharacterMaterial");
static_assert(offsetof(TWCharacterCustomizationComponent_UpdateCharacterMaterial, bIsTimeGhost) == 0x000000, "Member 'TWCharacterCustomizationComponent_UpdateCharacterMaterial::bIsTimeGhost' has a wrong offset!");

// Function TimeWatch.TWCharacterCustomizationComponent.UpdateRagdollMaterial
// 0x0001 (0x0001 - 0x0000)
struct TWCharacterCustomizationComponent_UpdateRagdollMaterial final
{
public:
	bool                                          bIsTimeGhost;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterCustomizationComponent_UpdateRagdollMaterial) == 0x000001, "Wrong alignment on TWCharacterCustomizationComponent_UpdateRagdollMaterial");
static_assert(sizeof(TWCharacterCustomizationComponent_UpdateRagdollMaterial) == 0x000001, "Wrong size on TWCharacterCustomizationComponent_UpdateRagdollMaterial");
static_assert(offsetof(TWCharacterCustomizationComponent_UpdateRagdollMaterial, bIsTimeGhost) == 0x000000, "Member 'TWCharacterCustomizationComponent_UpdateRagdollMaterial::bIsTimeGhost' has a wrong offset!");

// Function TimeWatch.TWCharacterCustomizationComponent.GetGhostMaterial
// 0x0008 (0x0008 - 0x0000)
struct TWCharacterCustomizationComponent_GetGhostMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterCustomizationComponent_GetGhostMaterial) == 0x000008, "Wrong alignment on TWCharacterCustomizationComponent_GetGhostMaterial");
static_assert(sizeof(TWCharacterCustomizationComponent_GetGhostMaterial) == 0x000008, "Wrong size on TWCharacterCustomizationComponent_GetGhostMaterial");
static_assert(offsetof(TWCharacterCustomizationComponent_GetGhostMaterial, ReturnValue) == 0x000000, "Member 'TWCharacterCustomizationComponent_GetGhostMaterial::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWCharacterGhost.Cosmetic_MimicCharacter
// 0x0008 (0x0008 - 0x0000)
struct TWCharacterGhost_Cosmetic_MimicCharacter final
{
public:
	class ATimeWatchCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterGhost_Cosmetic_MimicCharacter) == 0x000008, "Wrong alignment on TWCharacterGhost_Cosmetic_MimicCharacter");
static_assert(sizeof(TWCharacterGhost_Cosmetic_MimicCharacter) == 0x000008, "Wrong size on TWCharacterGhost_Cosmetic_MimicCharacter");
static_assert(offsetof(TWCharacterGhost_Cosmetic_MimicCharacter, Character) == 0x000000, "Member 'TWCharacterGhost_Cosmetic_MimicCharacter::Character' has a wrong offset!");

// Function TimeWatch.TWCharacterGhost.DestroyParadox
// 0x0001 (0x0001 - 0x0000)
struct TWCharacterGhost_DestroyParadox final
{
public:
	bool                                          bShouldDoAnimation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterGhost_DestroyParadox) == 0x000001, "Wrong alignment on TWCharacterGhost_DestroyParadox");
static_assert(sizeof(TWCharacterGhost_DestroyParadox) == 0x000001, "Wrong size on TWCharacterGhost_DestroyParadox");
static_assert(offsetof(TWCharacterGhost_DestroyParadox, bShouldDoAnimation) == 0x000000, "Member 'TWCharacterGhost_DestroyParadox::bShouldDoAnimation' has a wrong offset!");

// Function TimeWatch.TWCharacterGhost.MimicCharacter
// 0x0010 (0x0010 - 0x0000)
struct TWCharacterGhost_MimicCharacter final
{
public:
	class ATimeWatchCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipDestruction;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealTime;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWCharacterGhost_MimicCharacter) == 0x000008, "Wrong alignment on TWCharacterGhost_MimicCharacter");
static_assert(sizeof(TWCharacterGhost_MimicCharacter) == 0x000010, "Wrong size on TWCharacterGhost_MimicCharacter");
static_assert(offsetof(TWCharacterGhost_MimicCharacter, Character) == 0x000000, "Member 'TWCharacterGhost_MimicCharacter::Character' has a wrong offset!");
static_assert(offsetof(TWCharacterGhost_MimicCharacter, SkipDestruction) == 0x000008, "Member 'TWCharacterGhost_MimicCharacter::SkipDestruction' has a wrong offset!");
static_assert(offsetof(TWCharacterGhost_MimicCharacter, bRealTime) == 0x000009, "Member 'TWCharacterGhost_MimicCharacter::bRealTime' has a wrong offset!");

// Function TimeWatch.TWCharacterGhost.PerformDestroy
// 0x0001 (0x0001 - 0x0000)
struct TWCharacterGhost_PerformDestroy final
{
public:
	bool                                          bShouldDoAnimation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterGhost_PerformDestroy) == 0x000001, "Wrong alignment on TWCharacterGhost_PerformDestroy");
static_assert(sizeof(TWCharacterGhost_PerformDestroy) == 0x000001, "Wrong size on TWCharacterGhost_PerformDestroy");
static_assert(offsetof(TWCharacterGhost_PerformDestroy, bShouldDoAnimation) == 0x000000, "Member 'TWCharacterGhost_PerformDestroy::bShouldDoAnimation' has a wrong offset!");

// Function TimeWatch.TWCharacterGhost.SetGhostLifespan
// 0x0004 (0x0004 - 0x0000)
struct TWCharacterGhost_SetGhostLifespan final
{
public:
	float                                         DesiredLifespan;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCharacterGhost_SetGhostLifespan) == 0x000004, "Wrong alignment on TWCharacterGhost_SetGhostLifespan");
static_assert(sizeof(TWCharacterGhost_SetGhostLifespan) == 0x000004, "Wrong size on TWCharacterGhost_SetGhostLifespan");
static_assert(offsetof(TWCharacterGhost_SetGhostLifespan, DesiredLifespan) == 0x000000, "Member 'TWCharacterGhost_SetGhostLifespan::DesiredLifespan' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.SetCloneIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct TWCloneOverheadWidget_SetCloneIconVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_SetCloneIconVisibility) == 0x000001, "Wrong alignment on TWCloneOverheadWidget_SetCloneIconVisibility");
static_assert(sizeof(TWCloneOverheadWidget_SetCloneIconVisibility) == 0x000001, "Wrong size on TWCloneOverheadWidget_SetCloneIconVisibility");
static_assert(offsetof(TWCloneOverheadWidget_SetCloneIconVisibility, NewVisibility) == 0x000000, "Member 'TWCloneOverheadWidget_SetCloneIconVisibility::NewVisibility' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.SetCloneInfoScale
// 0x0008 (0x0008 - 0x0000)
struct TWCloneOverheadWidget_SetCloneInfoScale final
{
public:
	struct FVector2D                              NewScale;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_SetCloneInfoScale) == 0x000004, "Wrong alignment on TWCloneOverheadWidget_SetCloneInfoScale");
static_assert(sizeof(TWCloneOverheadWidget_SetCloneInfoScale) == 0x000008, "Wrong size on TWCloneOverheadWidget_SetCloneInfoScale");
static_assert(offsetof(TWCloneOverheadWidget_SetCloneInfoScale, NewScale) == 0x000000, "Member 'TWCloneOverheadWidget_SetCloneInfoScale::NewScale' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.SetCloneInfoText
// 0x0004 (0x0004 - 0x0000)
struct TWCloneOverheadWidget_SetCloneInfoText final
{
public:
	int32                                         CloneIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_SetCloneInfoText) == 0x000004, "Wrong alignment on TWCloneOverheadWidget_SetCloneInfoText");
static_assert(sizeof(TWCloneOverheadWidget_SetCloneInfoText) == 0x000004, "Wrong size on TWCloneOverheadWidget_SetCloneInfoText");
static_assert(offsetof(TWCloneOverheadWidget_SetCloneInfoText, CloneIndex) == 0x000000, "Member 'TWCloneOverheadWidget_SetCloneInfoText::CloneIndex' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.SetDisruptionVisionIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct TWCloneOverheadWidget_SetDisruptionVisionIconVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_SetDisruptionVisionIconVisibility) == 0x000001, "Wrong alignment on TWCloneOverheadWidget_SetDisruptionVisionIconVisibility");
static_assert(sizeof(TWCloneOverheadWidget_SetDisruptionVisionIconVisibility) == 0x000001, "Wrong size on TWCloneOverheadWidget_SetDisruptionVisionIconVisibility");
static_assert(offsetof(TWCloneOverheadWidget_SetDisruptionVisionIconVisibility, NewVisibility) == 0x000000, "Member 'TWCloneOverheadWidget_SetDisruptionVisionIconVisibility::NewVisibility' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.SetHealthBarProgress
// 0x0004 (0x0004 - 0x0000)
struct TWCloneOverheadWidget_SetHealthBarProgress final
{
public:
	float                                         ProgressValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_SetHealthBarProgress) == 0x000004, "Wrong alignment on TWCloneOverheadWidget_SetHealthBarProgress");
static_assert(sizeof(TWCloneOverheadWidget_SetHealthBarProgress) == 0x000004, "Wrong size on TWCloneOverheadWidget_SetHealthBarProgress");
static_assert(offsetof(TWCloneOverheadWidget_SetHealthBarProgress, ProgressValue) == 0x000000, "Member 'TWCloneOverheadWidget_SetHealthBarProgress::ProgressValue' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.SetHealthBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct TWCloneOverheadWidget_SetHealthBarVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_SetHealthBarVisibility) == 0x000001, "Wrong alignment on TWCloneOverheadWidget_SetHealthBarVisibility");
static_assert(sizeof(TWCloneOverheadWidget_SetHealthBarVisibility) == 0x000001, "Wrong size on TWCloneOverheadWidget_SetHealthBarVisibility");
static_assert(offsetof(TWCloneOverheadWidget_SetHealthBarVisibility, NewVisibility) == 0x000000, "Member 'TWCloneOverheadWidget_SetHealthBarVisibility::NewVisibility' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.SetHitFeedbackProgress
// 0x0004 (0x0004 - 0x0000)
struct TWCloneOverheadWidget_SetHitFeedbackProgress final
{
public:
	float                                         ProgressValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_SetHitFeedbackProgress) == 0x000004, "Wrong alignment on TWCloneOverheadWidget_SetHitFeedbackProgress");
static_assert(sizeof(TWCloneOverheadWidget_SetHitFeedbackProgress) == 0x000004, "Wrong size on TWCloneOverheadWidget_SetHitFeedbackProgress");
static_assert(offsetof(TWCloneOverheadWidget_SetHitFeedbackProgress, ProgressValue) == 0x000000, "Member 'TWCloneOverheadWidget_SetHitFeedbackProgress::ProgressValue' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.SetOwner
// 0x0008 (0x0008 - 0x0000)
struct TWCloneOverheadWidget_SetOwner final
{
public:
	class ATimeWatchCharacter*                    NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_SetOwner) == 0x000008, "Wrong alignment on TWCloneOverheadWidget_SetOwner");
static_assert(sizeof(TWCloneOverheadWidget_SetOwner) == 0x000008, "Wrong size on TWCloneOverheadWidget_SetOwner");
static_assert(offsetof(TWCloneOverheadWidget_SetOwner, NewOwner) == 0x000000, "Member 'TWCloneOverheadWidget_SetOwner::NewOwner' has a wrong offset!");

// Function TimeWatch.TWCloneOverheadWidget.UpdateWidgetStyle
// 0x0001 (0x0001 - 0x0000)
struct TWCloneOverheadWidget_UpdateWidgetStyle final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWCloneOverheadWidget_UpdateWidgetStyle) == 0x000001, "Wrong alignment on TWCloneOverheadWidget_UpdateWidgetStyle");
static_assert(sizeof(TWCloneOverheadWidget_UpdateWidgetStyle) == 0x000001, "Wrong size on TWCloneOverheadWidget_UpdateWidgetStyle");
static_assert(offsetof(TWCloneOverheadWidget_UpdateWidgetStyle, IsPlayer) == 0x000000, "Member 'TWCloneOverheadWidget_UpdateWidgetStyle::IsPlayer' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.BP_OnDeath
// 0x0050 (0x0050 - 0x0000)
struct TWDamageableActor_BP_OnDeath final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_BP_OnDeath) == 0x000008, "Wrong alignment on TWDamageableActor_BP_OnDeath");
static_assert(sizeof(TWDamageableActor_BP_OnDeath) == 0x000050, "Wrong size on TWDamageableActor_BP_OnDeath");
static_assert(offsetof(TWDamageableActor_BP_OnDeath, DamageEvent) == 0x000000, "Member 'TWDamageableActor_BP_OnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_BP_OnDeath, InstigatorController) == 0x000040, "Member 'TWDamageableActor_BP_OnDeath::InstigatorController' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_BP_OnDeath, DamageCauser) == 0x000048, "Member 'TWDamageableActor_BP_OnDeath::DamageCauser' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.BP_OnTakeDamage
// 0x0060 (0x0060 - 0x0000)
struct TWDamageableActor_BP_OnTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWDamageableActor_BP_OnTakeDamage) == 0x000008, "Wrong alignment on TWDamageableActor_BP_OnTakeDamage");
static_assert(sizeof(TWDamageableActor_BP_OnTakeDamage) == 0x000060, "Wrong size on TWDamageableActor_BP_OnTakeDamage");
static_assert(offsetof(TWDamageableActor_BP_OnTakeDamage, Damage) == 0x000000, "Member 'TWDamageableActor_BP_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_BP_OnTakeDamage, DamageEvent) == 0x000008, "Member 'TWDamageableActor_BP_OnTakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_BP_OnTakeDamage, EventInstigator) == 0x000048, "Member 'TWDamageableActor_BP_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_BP_OnTakeDamage, DamageCauser) == 0x000050, "Member 'TWDamageableActor_BP_OnTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_BP_OnTakeDamage, ReturnValue) == 0x000058, "Member 'TWDamageableActor_BP_OnTakeDamage::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.MulticastOnDeath
// 0x0050 (0x0050 - 0x0000)
struct TWDamageableActor_MulticastOnDeath final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class ANGDCharacter*                          EventInstigator;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_MulticastOnDeath) == 0x000008, "Wrong alignment on TWDamageableActor_MulticastOnDeath");
static_assert(sizeof(TWDamageableActor_MulticastOnDeath) == 0x000050, "Wrong size on TWDamageableActor_MulticastOnDeath");
static_assert(offsetof(TWDamageableActor_MulticastOnDeath, DamageEvent) == 0x000000, "Member 'TWDamageableActor_MulticastOnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_MulticastOnDeath, EventInstigator) == 0x000040, "Member 'TWDamageableActor_MulticastOnDeath::EventInstigator' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_MulticastOnDeath, DamageCauser) == 0x000048, "Member 'TWDamageableActor_MulticastOnDeath::DamageCauser' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.OnDeath
// 0x0050 (0x0050 - 0x0000)
struct TWDamageableActor_OnDeath final
{
public:
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_OnDeath) == 0x000008, "Wrong alignment on TWDamageableActor_OnDeath");
static_assert(sizeof(TWDamageableActor_OnDeath) == 0x000050, "Wrong size on TWDamageableActor_OnDeath");
static_assert(offsetof(TWDamageableActor_OnDeath, DamageEvent) == 0x000000, "Member 'TWDamageableActor_OnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_OnDeath, InstigatorController) == 0x000040, "Member 'TWDamageableActor_OnDeath::InstigatorController' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_OnDeath, DamageCauser) == 0x000048, "Member 'TWDamageableActor_OnDeath::DamageCauser' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.OnTakeDamage
// 0x0060 (0x0060 - 0x0000)
struct TWDamageableActor_OnTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNGDDamageEvent                        DamageEvent;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWDamageableActor_OnTakeDamage) == 0x000008, "Wrong alignment on TWDamageableActor_OnTakeDamage");
static_assert(sizeof(TWDamageableActor_OnTakeDamage) == 0x000060, "Wrong size on TWDamageableActor_OnTakeDamage");
static_assert(offsetof(TWDamageableActor_OnTakeDamage, Damage) == 0x000000, "Member 'TWDamageableActor_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_OnTakeDamage, DamageEvent) == 0x000008, "Member 'TWDamageableActor_OnTakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_OnTakeDamage, EventInstigator) == 0x000048, "Member 'TWDamageableActor_OnTakeDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_OnTakeDamage, DamageCauser) == 0x000050, "Member 'TWDamageableActor_OnTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(TWDamageableActor_OnTakeDamage, ReturnValue) == 0x000058, "Member 'TWDamageableActor_OnTakeDamage::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct TWDamageableActor_SetHealth final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_SetHealth) == 0x000004, "Wrong alignment on TWDamageableActor_SetHealth");
static_assert(sizeof(TWDamageableActor_SetHealth) == 0x000004, "Wrong size on TWDamageableActor_SetHealth");
static_assert(offsetof(TWDamageableActor_SetHealth, NewHealth) == 0x000000, "Member 'TWDamageableActor_SetHealth::NewHealth' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.GetHitRegistrationCollider
// 0x0008 (0x0008 - 0x0000)
struct TWDamageableActor_GetHitRegistrationCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_GetHitRegistrationCollider) == 0x000008, "Wrong alignment on TWDamageableActor_GetHitRegistrationCollider");
static_assert(sizeof(TWDamageableActor_GetHitRegistrationCollider) == 0x000008, "Wrong size on TWDamageableActor_GetHitRegistrationCollider");
static_assert(offsetof(TWDamageableActor_GetHitRegistrationCollider, ReturnValue) == 0x000000, "Member 'TWDamageableActor_GetHitRegistrationCollider::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.GetMortalityComponent
// 0x0008 (0x0008 - 0x0000)
struct TWDamageableActor_GetMortalityComponent final
{
public:
	class UNGDMortalityComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_GetMortalityComponent) == 0x000008, "Wrong alignment on TWDamageableActor_GetMortalityComponent");
static_assert(sizeof(TWDamageableActor_GetMortalityComponent) == 0x000008, "Wrong size on TWDamageableActor_GetMortalityComponent");
static_assert(offsetof(TWDamageableActor_GetMortalityComponent, ReturnValue) == 0x000000, "Member 'TWDamageableActor_GetMortalityComponent::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.GetRewindableMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct TWDamageableActor_GetRewindableMeshComponent final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_GetRewindableMeshComponent) == 0x000008, "Wrong alignment on TWDamageableActor_GetRewindableMeshComponent");
static_assert(sizeof(TWDamageableActor_GetRewindableMeshComponent) == 0x000008, "Wrong size on TWDamageableActor_GetRewindableMeshComponent");
static_assert(offsetof(TWDamageableActor_GetRewindableMeshComponent, ReturnValue) == 0x000000, "Member 'TWDamageableActor_GetRewindableMeshComponent::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.GetRewindCollider
// 0x0008 (0x0008 - 0x0000)
struct TWDamageableActor_GetRewindCollider final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_GetRewindCollider) == 0x000008, "Wrong alignment on TWDamageableActor_GetRewindCollider");
static_assert(sizeof(TWDamageableActor_GetRewindCollider) == 0x000008, "Wrong size on TWDamageableActor_GetRewindCollider");
static_assert(offsetof(TWDamageableActor_GetRewindCollider, ReturnValue) == 0x000000, "Member 'TWDamageableActor_GetRewindCollider::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.GetRewindComponent
// 0x0008 (0x0008 - 0x0000)
struct TWDamageableActor_GetRewindComponent final
{
public:
	class UNGDRewindComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_GetRewindComponent) == 0x000008, "Wrong alignment on TWDamageableActor_GetRewindComponent");
static_assert(sizeof(TWDamageableActor_GetRewindComponent) == 0x000008, "Wrong size on TWDamageableActor_GetRewindComponent");
static_assert(offsetof(TWDamageableActor_GetRewindComponent, ReturnValue) == 0x000000, "Member 'TWDamageableActor_GetRewindComponent::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDamageableActor.IsRewindRelevant
// 0x0001 (0x0001 - 0x0000)
struct TWDamageableActor_IsRewindRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDamageableActor_IsRewindRelevant) == 0x000001, "Wrong alignment on TWDamageableActor_IsRewindRelevant");
static_assert(sizeof(TWDamageableActor_IsRewindRelevant) == 0x000001, "Wrong size on TWDamageableActor_IsRewindRelevant");
static_assert(offsetof(TWDamageableActor_IsRewindRelevant, ReturnValue) == 0x000000, "Member 'TWDamageableActor_IsRewindRelevant::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDeathMatchGameState.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWDeathMatchGameState_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDeathMatchGameState_OnGameStateChanged) == 0x000001, "Wrong alignment on TWDeathMatchGameState_OnGameStateChanged");
static_assert(sizeof(TWDeathMatchGameState_OnGameStateChanged) == 0x000002, "Wrong size on TWDeathMatchGameState_OnGameStateChanged");
static_assert(offsetof(TWDeathMatchGameState_OnGameStateChanged, OldState) == 0x000000, "Member 'TWDeathMatchGameState_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWDeathMatchGameState_OnGameStateChanged, NewState) == 0x000001, "Member 'TWDeathMatchGameState_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWDeathMatchGameState.GetDeathClonesCount
// 0x0004 (0x0004 - 0x0000)
struct TWDeathMatchGameState_GetDeathClonesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDeathMatchGameState_GetDeathClonesCount) == 0x000004, "Wrong alignment on TWDeathMatchGameState_GetDeathClonesCount");
static_assert(sizeof(TWDeathMatchGameState_GetDeathClonesCount) == 0x000004, "Wrong size on TWDeathMatchGameState_GetDeathClonesCount");
static_assert(offsetof(TWDeathMatchGameState_GetDeathClonesCount, ReturnValue) == 0x000000, "Member 'TWDeathMatchGameState_GetDeathClonesCount::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDeathMatchGameState.GetLeadingTeamID
// 0x0004 (0x0004 - 0x0000)
struct TWDeathMatchGameState_GetLeadingTeamID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDeathMatchGameState_GetLeadingTeamID) == 0x000004, "Wrong alignment on TWDeathMatchGameState_GetLeadingTeamID");
static_assert(sizeof(TWDeathMatchGameState_GetLeadingTeamID) == 0x000004, "Wrong size on TWDeathMatchGameState_GetLeadingTeamID");
static_assert(offsetof(TWDeathMatchGameState_GetLeadingTeamID, ReturnValue) == 0x000000, "Member 'TWDeathMatchGameState_GetLeadingTeamID::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWDeathMatchGameState.GetTeamDeathClonesCount
// 0x0008 (0x0008 - 0x0000)
struct TWDeathMatchGameState_GetTeamDeathClonesCount final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWDeathMatchGameState_GetTeamDeathClonesCount) == 0x000004, "Wrong alignment on TWDeathMatchGameState_GetTeamDeathClonesCount");
static_assert(sizeof(TWDeathMatchGameState_GetTeamDeathClonesCount) == 0x000008, "Wrong size on TWDeathMatchGameState_GetTeamDeathClonesCount");
static_assert(offsetof(TWDeathMatchGameState_GetTeamDeathClonesCount, TeamId) == 0x000000, "Member 'TWDeathMatchGameState_GetTeamDeathClonesCount::TeamId' has a wrong offset!");
static_assert(offsetof(TWDeathMatchGameState_GetTeamDeathClonesCount, ReturnValue) == 0x000004, "Member 'TWDeathMatchGameState_GetTeamDeathClonesCount::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWFriendRowWidget.SetPlayer
// 0x0020 (0x0020 - 0x0000)
struct TWFriendRowWidget_SetPlayer final
{
public:
	class FString                                 InUserID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InUserName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWFriendRowWidget_SetPlayer) == 0x000008, "Wrong alignment on TWFriendRowWidget_SetPlayer");
static_assert(sizeof(TWFriendRowWidget_SetPlayer) == 0x000020, "Wrong size on TWFriendRowWidget_SetPlayer");
static_assert(offsetof(TWFriendRowWidget_SetPlayer, InUserID) == 0x000000, "Member 'TWFriendRowWidget_SetPlayer::InUserID' has a wrong offset!");
static_assert(offsetof(TWFriendRowWidget_SetPlayer, InUserName) == 0x000010, "Member 'TWFriendRowWidget_SetPlayer::InUserName' has a wrong offset!");

// Function TimeWatch.TWFriendRowWidget.GetUserName
// 0x0010 (0x0010 - 0x0000)
struct TWFriendRowWidget_GetUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWFriendRowWidget_GetUserName) == 0x000008, "Wrong alignment on TWFriendRowWidget_GetUserName");
static_assert(sizeof(TWFriendRowWidget_GetUserName) == 0x000010, "Wrong size on TWFriendRowWidget_GetUserName");
static_assert(offsetof(TWFriendRowWidget_GetUserName, ReturnValue) == 0x000000, "Member 'TWFriendRowWidget_GetUserName::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameGlobals.GetAllLevelEntries
// 0x0010 (0x0010 - 0x0000)
struct TWGameGlobals_GetAllLevelEntries final
{
public:
	TArray<class UTWLevelEntry*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameGlobals_GetAllLevelEntries) == 0x000008, "Wrong alignment on TWGameGlobals_GetAllLevelEntries");
static_assert(sizeof(TWGameGlobals_GetAllLevelEntries) == 0x000010, "Wrong size on TWGameGlobals_GetAllLevelEntries");
static_assert(offsetof(TWGameGlobals_GetAllLevelEntries, ReturnValue) == 0x000000, "Member 'TWGameGlobals_GetAllLevelEntries::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameGlobals.GetAllPlayableChallengeLevels
// 0x0018 (0x0018 - 0x0000)
struct TWGameGlobals_GetAllPlayableChallengeLevels final
{
public:
	bool                                          IncludeDevelopment;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTWLevelEntry*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameGlobals_GetAllPlayableChallengeLevels) == 0x000008, "Wrong alignment on TWGameGlobals_GetAllPlayableChallengeLevels");
static_assert(sizeof(TWGameGlobals_GetAllPlayableChallengeLevels) == 0x000018, "Wrong size on TWGameGlobals_GetAllPlayableChallengeLevels");
static_assert(offsetof(TWGameGlobals_GetAllPlayableChallengeLevels, IncludeDevelopment) == 0x000000, "Member 'TWGameGlobals_GetAllPlayableChallengeLevels::IncludeDevelopment' has a wrong offset!");
static_assert(offsetof(TWGameGlobals_GetAllPlayableChallengeLevels, ReturnValue) == 0x000008, "Member 'TWGameGlobals_GetAllPlayableChallengeLevels::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameGlobals.GetAllPlayableLevelEntries
// 0x0018 (0x0018 - 0x0000)
struct TWGameGlobals_GetAllPlayableLevelEntries final
{
public:
	ETWMatchType                                  MatchType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeDevelopmentLevels;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTWLevelEntry*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameGlobals_GetAllPlayableLevelEntries) == 0x000008, "Wrong alignment on TWGameGlobals_GetAllPlayableLevelEntries");
static_assert(sizeof(TWGameGlobals_GetAllPlayableLevelEntries) == 0x000018, "Wrong size on TWGameGlobals_GetAllPlayableLevelEntries");
static_assert(offsetof(TWGameGlobals_GetAllPlayableLevelEntries, MatchType) == 0x000000, "Member 'TWGameGlobals_GetAllPlayableLevelEntries::MatchType' has a wrong offset!");
static_assert(offsetof(TWGameGlobals_GetAllPlayableLevelEntries, IncludeDevelopmentLevels) == 0x000001, "Member 'TWGameGlobals_GetAllPlayableLevelEntries::IncludeDevelopmentLevels' has a wrong offset!");
static_assert(offsetof(TWGameGlobals_GetAllPlayableLevelEntries, ReturnValue) == 0x000008, "Member 'TWGameGlobals_GetAllPlayableLevelEntries::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameGlobals.GetTipsList
// 0x0010 (0x0010 - 0x0000)
struct TWGameGlobals_GetTipsList final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameGlobals_GetTipsList) == 0x000008, "Wrong alignment on TWGameGlobals_GetTipsList");
static_assert(sizeof(TWGameGlobals_GetTipsList) == 0x000010, "Wrong size on TWGameGlobals_GetTipsList");
static_assert(offsetof(TWGameGlobals_GetTipsList, ReturnValue) == 0x000000, "Member 'TWGameGlobals_GetTipsList::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayAbilityTargetActor_Trace.AimWithPlayerController
// 0x008C (0x008C - 0x0000)
struct TWGameplayAbilityTargetActor_Trace_AimWithPlayerController final
{
public:
	struct FHitResult                             OutHitResult;                                      // 0x0000(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnorePitch;                                      // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayAbilityTargetActor_Trace_AimWithPlayerController) == 0x000004, "Wrong alignment on TWGameplayAbilityTargetActor_Trace_AimWithPlayerController");
static_assert(sizeof(TWGameplayAbilityTargetActor_Trace_AimWithPlayerController) == 0x00008C, "Wrong size on TWGameplayAbilityTargetActor_Trace_AimWithPlayerController");
static_assert(offsetof(TWGameplayAbilityTargetActor_Trace_AimWithPlayerController, OutHitResult) == 0x000000, "Member 'TWGameplayAbilityTargetActor_Trace_AimWithPlayerController::OutHitResult' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilityTargetActor_Trace_AimWithPlayerController, bIgnorePitch) == 0x000088, "Member 'TWGameplayAbilityTargetActor_Trace_AimWithPlayerController::bIgnorePitch' has a wrong offset!");
static_assert(offsetof(TWGameplayAbilityTargetActor_Trace_AimWithPlayerController, bTraceComplex) == 0x000089, "Member 'TWGameplayAbilityTargetActor_Trace_AimWithPlayerController::bTraceComplex' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_SpawnProjectile.SpawnProjectile
// 0x0060 (0x0060 - 0x0000)
struct TWGameplayTask_SpawnProjectile_SpawnProjectile final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATWPhysicalProjectile>      Class_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InSpawnTransform;                                  // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LaunchSpeed;                                       // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskID;                                            // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTWGameplayTask_SpawnProjectile*        ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_SpawnProjectile_SpawnProjectile) == 0x000010, "Wrong alignment on TWGameplayTask_SpawnProjectile_SpawnProjectile");
static_assert(sizeof(TWGameplayTask_SpawnProjectile_SpawnProjectile) == 0x000060, "Wrong size on TWGameplayTask_SpawnProjectile_SpawnProjectile");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_SpawnProjectile, OwningAbility) == 0x000000, "Member 'TWGameplayTask_SpawnProjectile_SpawnProjectile::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_SpawnProjectile, TaskInstanceName) == 0x000008, "Member 'TWGameplayTask_SpawnProjectile_SpawnProjectile::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_SpawnProjectile, Class_0) == 0x000010, "Member 'TWGameplayTask_SpawnProjectile_SpawnProjectile::Class_0' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_SpawnProjectile, InSpawnTransform) == 0x000020, "Member 'TWGameplayTask_SpawnProjectile_SpawnProjectile::InSpawnTransform' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_SpawnProjectile, LaunchSpeed) == 0x000050, "Member 'TWGameplayTask_SpawnProjectile_SpawnProjectile::LaunchSpeed' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_SpawnProjectile, TaskID) == 0x000054, "Member 'TWGameplayTask_SpawnProjectile_SpawnProjectile::TaskID' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_SpawnProjectile, ReturnValue) == 0x000058, "Member 'TWGameplayTask_SpawnProjectile_SpawnProjectile::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_SpawnProjectile.BeginSpawningActor
// 0x0020 (0x0020 - 0x0000)
struct TWGameplayTask_SpawnProjectile_BeginSpawningActor final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATWPhysicalProjectile>      Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATWPhysicalProjectile*                  SpawnedActor;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWGameplayTask_SpawnProjectile_BeginSpawningActor) == 0x000008, "Wrong alignment on TWGameplayTask_SpawnProjectile_BeginSpawningActor");
static_assert(sizeof(TWGameplayTask_SpawnProjectile_BeginSpawningActor) == 0x000020, "Wrong size on TWGameplayTask_SpawnProjectile_BeginSpawningActor");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_BeginSpawningActor, OwningAbility) == 0x000000, "Member 'TWGameplayTask_SpawnProjectile_BeginSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_BeginSpawningActor, Class_0) == 0x000008, "Member 'TWGameplayTask_SpawnProjectile_BeginSpawningActor::Class_0' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_BeginSpawningActor, SpawnedActor) == 0x000010, "Member 'TWGameplayTask_SpawnProjectile_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_BeginSpawningActor, ReturnValue) == 0x000018, "Member 'TWGameplayTask_SpawnProjectile_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_SpawnProjectile.FinishSpawningActor
// 0x0010 (0x0010 - 0x0000)
struct TWGameplayTask_SpawnProjectile_FinishSpawningActor final
{
public:
	class UTWAbility*                             OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATWPhysicalProjectile*                  SpawnedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_SpawnProjectile_FinishSpawningActor) == 0x000008, "Wrong alignment on TWGameplayTask_SpawnProjectile_FinishSpawningActor");
static_assert(sizeof(TWGameplayTask_SpawnProjectile_FinishSpawningActor) == 0x000010, "Wrong size on TWGameplayTask_SpawnProjectile_FinishSpawningActor");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_FinishSpawningActor, OwningAbility) == 0x000000, "Member 'TWGameplayTask_SpawnProjectile_FinishSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_FinishSpawningActor, SpawnedActor) == 0x000008, "Member 'TWGameplayTask_SpawnProjectile_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function TimeWatch.TWGameplayTask_SpawnProjectile.OnProjectileHit
// 0x0088 (0x0088 - 0x0000)
struct TWGameplayTask_SpawnProjectile_OnProjectileHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWGameplayTask_SpawnProjectile_OnProjectileHit) == 0x000004, "Wrong alignment on TWGameplayTask_SpawnProjectile_OnProjectileHit");
static_assert(sizeof(TWGameplayTask_SpawnProjectile_OnProjectileHit) == 0x000088, "Wrong size on TWGameplayTask_SpawnProjectile_OnProjectileHit");
static_assert(offsetof(TWGameplayTask_SpawnProjectile_OnProjectileHit, HitResult) == 0x000000, "Member 'TWGameplayTask_SpawnProjectile_OnProjectileHit::HitResult' has a wrong offset!");

// Function TimeWatch.TWHUDFunctionLibrary.ConvertLvlToXP
// 0x0008 (0x0008 - 0x0000)
struct TWHUDFunctionLibrary_ConvertLvlToXP final
{
public:
	float                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWHUDFunctionLibrary_ConvertLvlToXP) == 0x000004, "Wrong alignment on TWHUDFunctionLibrary_ConvertLvlToXP");
static_assert(sizeof(TWHUDFunctionLibrary_ConvertLvlToXP) == 0x000008, "Wrong size on TWHUDFunctionLibrary_ConvertLvlToXP");
static_assert(offsetof(TWHUDFunctionLibrary_ConvertLvlToXP, InLevel) == 0x000000, "Member 'TWHUDFunctionLibrary_ConvertLvlToXP::InLevel' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_ConvertLvlToXP, ReturnValue) == 0x000004, "Member 'TWHUDFunctionLibrary_ConvertLvlToXP::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWHUDFunctionLibrary.ConvertXPToLevel
// 0x0008 (0x0008 - 0x0000)
struct TWHUDFunctionLibrary_ConvertXPToLevel final
{
public:
	float                                         InXP;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWHUDFunctionLibrary_ConvertXPToLevel) == 0x000004, "Wrong alignment on TWHUDFunctionLibrary_ConvertXPToLevel");
static_assert(sizeof(TWHUDFunctionLibrary_ConvertXPToLevel) == 0x000008, "Wrong size on TWHUDFunctionLibrary_ConvertXPToLevel");
static_assert(offsetof(TWHUDFunctionLibrary_ConvertXPToLevel, InXP) == 0x000000, "Member 'TWHUDFunctionLibrary_ConvertXPToLevel::InXP' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_ConvertXPToLevel, ReturnValue) == 0x000004, "Member 'TWHUDFunctionLibrary_ConvertXPToLevel::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWHUDFunctionLibrary.FindScreenEdgeLocationForWorldLocation
// 0x0040 (0x0040 - 0x0000)
struct TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Padding;                                           // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSize;                                        // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotator;                                     // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              OutScreenPosition;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRotationAngleDegrees;                           // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnScreen;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation) == 0x000008, "Wrong alignment on TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation");
static_assert(sizeof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation) == 0x000040, "Wrong size on TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation");
static_assert(offsetof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation, WorldContextObject) == 0x000000, "Member 'TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation, WorldLocation) == 0x000008, "Member 'TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation, Padding) == 0x000014, "Member 'TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation::Padding' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation, WidgetSize) == 0x00001C, "Member 'TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation::WidgetSize' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation, CameraRotator) == 0x000024, "Member 'TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation::CameraRotator' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation, OutScreenPosition) == 0x000030, "Member 'TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation::OutScreenPosition' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation, OutRotationAngleDegrees) == 0x000038, "Member 'TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation::OutRotationAngleDegrees' has a wrong offset!");
static_assert(offsetof(TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation, bIsOnScreen) == 0x00003C, "Member 'TWHUDFunctionLibrary_FindScreenEdgeLocationForWorldLocation::bIsOnScreen' has a wrong offset!");

// Function TimeWatch.TWInteractionComponent.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct TWInteractionComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWInteractionComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on TWInteractionComponent_OnBeginOverlap");
static_assert(sizeof(TWInteractionComponent_OnBeginOverlap) == 0x0000A8, "Wrong size on TWInteractionComponent_OnBeginOverlap");
static_assert(offsetof(TWInteractionComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'TWInteractionComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TWInteractionComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'TWInteractionComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(TWInteractionComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'TWInteractionComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TWInteractionComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'TWInteractionComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TWInteractionComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'TWInteractionComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TWInteractionComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'TWInteractionComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function TimeWatch.TWJumpModifierActor.OnTriggered
// 0x0008 (0x0008 - 0x0000)
struct TWJumpModifierActor_OnTriggered final
{
public:
	const class AActor*                           TriggeredBy;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWJumpModifierActor_OnTriggered) == 0x000008, "Wrong alignment on TWJumpModifierActor_OnTriggered");
static_assert(sizeof(TWJumpModifierActor_OnTriggered) == 0x000008, "Wrong size on TWJumpModifierActor_OnTriggered");
static_assert(offsetof(TWJumpModifierActor_OnTriggered, TriggeredBy) == 0x000000, "Member 'TWJumpModifierActor_OnTriggered::TriggeredBy' has a wrong offset!");

// Function TimeWatch.TWJumpModifierActor.GetJumpModifier
// 0x0010 (0x0010 - 0x0000)
struct TWJumpModifierActor_GetJumpModifier final
{
public:
	struct FJumpModifier                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWJumpModifierActor_GetJumpModifier) == 0x000004, "Wrong alignment on TWJumpModifierActor_GetJumpModifier");
static_assert(sizeof(TWJumpModifierActor_GetJumpModifier) == 0x000010, "Wrong size on TWJumpModifierActor_GetJumpModifier");
static_assert(offsetof(TWJumpModifierActor_GetJumpModifier, ReturnValue) == 0x000000, "Member 'TWJumpModifierActor_GetJumpModifier::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLinearCrosshairWidget.IsCrosshairDynamic
// 0x0001 (0x0001 - 0x0000)
struct TWLinearCrosshairWidget_IsCrosshairDynamic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLinearCrosshairWidget_IsCrosshairDynamic) == 0x000001, "Wrong alignment on TWLinearCrosshairWidget_IsCrosshairDynamic");
static_assert(sizeof(TWLinearCrosshairWidget_IsCrosshairDynamic) == 0x000001, "Wrong size on TWLinearCrosshairWidget_IsCrosshairDynamic");
static_assert(offsetof(TWLinearCrosshairWidget_IsCrosshairDynamic, ReturnValue) == 0x000000, "Member 'TWLinearCrosshairWidget_IsCrosshairDynamic::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLinearCrosshairWidget.ShowHitFeedback
// 0x0010 (0x0010 - 0x0000)
struct TWLinearCrosshairWidget_ShowHitFeedback final
{
public:
	struct FLinearColor                           HitColor;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLinearCrosshairWidget_ShowHitFeedback) == 0x000004, "Wrong alignment on TWLinearCrosshairWidget_ShowHitFeedback");
static_assert(sizeof(TWLinearCrosshairWidget_ShowHitFeedback) == 0x000010, "Wrong size on TWLinearCrosshairWidget_ShowHitFeedback");
static_assert(offsetof(TWLinearCrosshairWidget_ShowHitFeedback, HitColor) == 0x000000, "Member 'TWLinearCrosshairWidget_ShowHitFeedback::HitColor' has a wrong offset!");

// Function TimeWatch.TWLinearHealthBar.InitializeWidget
// 0x00C0 (0x00C0 - 0x0000)
struct TWLinearHealthBar_InitializeWidget final
{
public:
	struct FWidgetColorStructure                  NewHealthBarColors;                                // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLinearHealthBar_InitializeWidget) == 0x000004, "Wrong alignment on TWLinearHealthBar_InitializeWidget");
static_assert(sizeof(TWLinearHealthBar_InitializeWidget) == 0x0000C0, "Wrong size on TWLinearHealthBar_InitializeWidget");
static_assert(offsetof(TWLinearHealthBar_InitializeWidget, NewHealthBarColors) == 0x000000, "Member 'TWLinearHealthBar_InitializeWidget::NewHealthBarColors' has a wrong offset!");

// Function TimeWatch.TWLinearHealthBar.SetActiveHealthBar
// 0x0001 (0x0001 - 0x0000)
struct TWLinearHealthBar_SetActiveHealthBar final
{
public:
	bool                                          bIsPlayer;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLinearHealthBar_SetActiveHealthBar) == 0x000001, "Wrong alignment on TWLinearHealthBar_SetActiveHealthBar");
static_assert(sizeof(TWLinearHealthBar_SetActiveHealthBar) == 0x000001, "Wrong size on TWLinearHealthBar_SetActiveHealthBar");
static_assert(offsetof(TWLinearHealthBar_SetActiveHealthBar, bIsPlayer) == 0x000000, "Member 'TWLinearHealthBar_SetActiveHealthBar::bIsPlayer' has a wrong offset!");

// Function TimeWatch.TWLinearHealthBar.SetHealthBarPercentValue
// 0x0004 (0x0004 - 0x0000)
struct TWLinearHealthBar_SetHealthBarPercentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLinearHealthBar_SetHealthBarPercentValue) == 0x000004, "Wrong alignment on TWLinearHealthBar_SetHealthBarPercentValue");
static_assert(sizeof(TWLinearHealthBar_SetHealthBarPercentValue) == 0x000004, "Wrong size on TWLinearHealthBar_SetHealthBarPercentValue");
static_assert(offsetof(TWLinearHealthBar_SetHealthBarPercentValue, Value) == 0x000000, "Member 'TWLinearHealthBar_SetHealthBarPercentValue::Value' has a wrong offset!");

// Function TimeWatch.TWLinearHealthBar.SetHitFeedbackPercentValue
// 0x0004 (0x0004 - 0x0000)
struct TWLinearHealthBar_SetHitFeedbackPercentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLinearHealthBar_SetHitFeedbackPercentValue) == 0x000004, "Wrong alignment on TWLinearHealthBar_SetHitFeedbackPercentValue");
static_assert(sizeof(TWLinearHealthBar_SetHitFeedbackPercentValue) == 0x000004, "Wrong size on TWLinearHealthBar_SetHitFeedbackPercentValue");
static_assert(offsetof(TWLinearHealthBar_SetHitFeedbackPercentValue, Value) == 0x000000, "Member 'TWLinearHealthBar_SetHitFeedbackPercentValue::Value' has a wrong offset!");

// Function TimeWatch.TWLobbyGridPanelWidget.GetGridColumnByIndex
// 0x0010 (0x0010 - 0x0000)
struct TWLobbyGridPanelWidget_GetGridColumnByIndex final
{
public:
	int32                                         ColumnIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLobbyGridPanelWidget_GetGridColumnByIndex) == 0x000008, "Wrong alignment on TWLobbyGridPanelWidget_GetGridColumnByIndex");
static_assert(sizeof(TWLobbyGridPanelWidget_GetGridColumnByIndex) == 0x000010, "Wrong size on TWLobbyGridPanelWidget_GetGridColumnByIndex");
static_assert(offsetof(TWLobbyGridPanelWidget_GetGridColumnByIndex, ColumnIndex) == 0x000000, "Member 'TWLobbyGridPanelWidget_GetGridColumnByIndex::ColumnIndex' has a wrong offset!");
static_assert(offsetof(TWLobbyGridPanelWidget_GetGridColumnByIndex, ReturnValue) == 0x000008, "Member 'TWLobbyGridPanelWidget_GetGridColumnByIndex::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWLobbyPlayerRowWidget.SetPlayer
// 0x0028 (0x0028 - 0x0000)
struct TWLobbyPlayerRowWidget_SetPlayer final
{
public:
	class FString                                 InUserID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InUserName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTWLobbyChallengeWidget*                InOwner;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLobbyPlayerRowWidget_SetPlayer) == 0x000008, "Wrong alignment on TWLobbyPlayerRowWidget_SetPlayer");
static_assert(sizeof(TWLobbyPlayerRowWidget_SetPlayer) == 0x000028, "Wrong size on TWLobbyPlayerRowWidget_SetPlayer");
static_assert(offsetof(TWLobbyPlayerRowWidget_SetPlayer, InUserID) == 0x000000, "Member 'TWLobbyPlayerRowWidget_SetPlayer::InUserID' has a wrong offset!");
static_assert(offsetof(TWLobbyPlayerRowWidget_SetPlayer, InUserName) == 0x000010, "Member 'TWLobbyPlayerRowWidget_SetPlayer::InUserName' has a wrong offset!");
static_assert(offsetof(TWLobbyPlayerRowWidget_SetPlayer, InOwner) == 0x000020, "Member 'TWLobbyPlayerRowWidget_SetPlayer::InOwner' has a wrong offset!");

// Function TimeWatch.TWLobbyPlayerRowWidget.GetUserName
// 0x0010 (0x0010 - 0x0000)
struct TWLobbyPlayerRowWidget_GetUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWLobbyPlayerRowWidget_GetUserName) == 0x000008, "Wrong alignment on TWLobbyPlayerRowWidget_GetUserName");
static_assert(sizeof(TWLobbyPlayerRowWidget_GetUserName) == 0x000010, "Wrong size on TWLobbyPlayerRowWidget_GetUserName");
static_assert(offsetof(TWLobbyPlayerRowWidget_GetUserName, ReturnValue) == 0x000000, "Member 'TWLobbyPlayerRowWidget_GetUserName::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWMusicActor.BP_SetMusicLoop
// 0x0004 (0x0004 - 0x0000)
struct TWMusicActor_BP_SetMusicLoop final
{
public:
	int32                                         LoopIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWMusicActor_BP_SetMusicLoop) == 0x000004, "Wrong alignment on TWMusicActor_BP_SetMusicLoop");
static_assert(sizeof(TWMusicActor_BP_SetMusicLoop) == 0x000004, "Wrong size on TWMusicActor_BP_SetMusicLoop");
static_assert(offsetof(TWMusicActor_BP_SetMusicLoop, LoopIndex) == 0x000000, "Member 'TWMusicActor_BP_SetMusicLoop::LoopIndex' has a wrong offset!");

// Function TimeWatch.TWMusicActor.SetMusicLoop
// 0x0004 (0x0004 - 0x0000)
struct TWMusicActor_SetMusicLoop final
{
public:
	int32                                         LoopIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWMusicActor_SetMusicLoop) == 0x000004, "Wrong alignment on TWMusicActor_SetMusicLoop");
static_assert(sizeof(TWMusicActor_SetMusicLoop) == 0x000004, "Wrong size on TWMusicActor_SetMusicLoop");
static_assert(offsetof(TWMusicActor_SetMusicLoop, LoopIndex) == 0x000000, "Member 'TWMusicActor_SetMusicLoop::LoopIndex' has a wrong offset!");

// Function TimeWatch.TWOverheadCloneInfoWidget.SetCloneColorVisibility
// 0x0001 (0x0001 - 0x0000)
struct TWOverheadCloneInfoWidget_SetCloneColorVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadCloneInfoWidget_SetCloneColorVisibility) == 0x000001, "Wrong alignment on TWOverheadCloneInfoWidget_SetCloneColorVisibility");
static_assert(sizeof(TWOverheadCloneInfoWidget_SetCloneColorVisibility) == 0x000001, "Wrong size on TWOverheadCloneInfoWidget_SetCloneColorVisibility");
static_assert(offsetof(TWOverheadCloneInfoWidget_SetCloneColorVisibility, NewVisibility) == 0x000000, "Member 'TWOverheadCloneInfoWidget_SetCloneColorVisibility::NewVisibility' has a wrong offset!");

// Function TimeWatch.TWOverheadCloneInfoWidget.SetCloneIndexText
// 0x0004 (0x0004 - 0x0000)
struct TWOverheadCloneInfoWidget_SetCloneIndexText final
{
public:
	int32                                         CloneIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadCloneInfoWidget_SetCloneIndexText) == 0x000004, "Wrong alignment on TWOverheadCloneInfoWidget_SetCloneIndexText");
static_assert(sizeof(TWOverheadCloneInfoWidget_SetCloneIndexText) == 0x000004, "Wrong size on TWOverheadCloneInfoWidget_SetCloneIndexText");
static_assert(offsetof(TWOverheadCloneInfoWidget_SetCloneIndexText, CloneIndex) == 0x000000, "Member 'TWOverheadCloneInfoWidget_SetCloneIndexText::CloneIndex' has a wrong offset!");

// Function TimeWatch.TWOverheadCloneInfoWidget.SetOwner
// 0x0008 (0x0008 - 0x0000)
struct TWOverheadCloneInfoWidget_SetOwner final
{
public:
	class ATimeWatchCharacter*                    NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadCloneInfoWidget_SetOwner) == 0x000008, "Wrong alignment on TWOverheadCloneInfoWidget_SetOwner");
static_assert(sizeof(TWOverheadCloneInfoWidget_SetOwner) == 0x000008, "Wrong size on TWOverheadCloneInfoWidget_SetOwner");
static_assert(offsetof(TWOverheadCloneInfoWidget_SetOwner, NewOwner) == 0x000000, "Member 'TWOverheadCloneInfoWidget_SetOwner::NewOwner' has a wrong offset!");

// Function TimeWatch.TWOverheadCloneInfoWidget.SetPlayerInfoOverlayScale
// 0x0008 (0x0008 - 0x0000)
struct TWOverheadCloneInfoWidget_SetPlayerInfoOverlayScale final
{
public:
	struct FVector2D                              NewScale;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadCloneInfoWidget_SetPlayerInfoOverlayScale) == 0x000004, "Wrong alignment on TWOverheadCloneInfoWidget_SetPlayerInfoOverlayScale");
static_assert(sizeof(TWOverheadCloneInfoWidget_SetPlayerInfoOverlayScale) == 0x000008, "Wrong size on TWOverheadCloneInfoWidget_SetPlayerInfoOverlayScale");
static_assert(offsetof(TWOverheadCloneInfoWidget_SetPlayerInfoOverlayScale, NewScale) == 0x000000, "Member 'TWOverheadCloneInfoWidget_SetPlayerInfoOverlayScale::NewScale' has a wrong offset!");

// Function TimeWatch.TWOverheadCloneInfoWidget.UpdateWidgetStyle
// 0x0001 (0x0001 - 0x0000)
struct TWOverheadCloneInfoWidget_UpdateWidgetStyle final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWOverheadCloneInfoWidget_UpdateWidgetStyle) == 0x000001, "Wrong alignment on TWOverheadCloneInfoWidget_UpdateWidgetStyle");
static_assert(sizeof(TWOverheadCloneInfoWidget_UpdateWidgetStyle) == 0x000001, "Wrong size on TWOverheadCloneInfoWidget_UpdateWidgetStyle");
static_assert(offsetof(TWOverheadCloneInfoWidget_UpdateWidgetStyle, IsPlayer) == 0x000000, "Member 'TWOverheadCloneInfoWidget_UpdateWidgetStyle::IsPlayer' has a wrong offset!");

// Function TimeWatch.TWPlayerCameraManager.SetDefaultFOV
// 0x0004 (0x0004 - 0x0000)
struct TWPlayerCameraManager_SetDefaultFOV final
{
public:
	float                                         NewFloat;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerCameraManager_SetDefaultFOV) == 0x000004, "Wrong alignment on TWPlayerCameraManager_SetDefaultFOV");
static_assert(sizeof(TWPlayerCameraManager_SetDefaultFOV) == 0x000004, "Wrong size on TWPlayerCameraManager_SetDefaultFOV");
static_assert(offsetof(TWPlayerCameraManager_SetDefaultFOV, NewFloat) == 0x000000, "Member 'TWPlayerCameraManager_SetDefaultFOV::NewFloat' has a wrong offset!");

// Function TimeWatch.TWPlayerIntroActor.BP_StartIntro
// 0x0020 (0x0020 - 0x0000)
struct TWPlayerIntroActor_BP_StartIntro final
{
public:
	class USkeletalMesh*                          ActiveMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             ActiveMaterials;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ATWMatchIntroActor*                     MatchIntro;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerIntroActor_BP_StartIntro) == 0x000008, "Wrong alignment on TWPlayerIntroActor_BP_StartIntro");
static_assert(sizeof(TWPlayerIntroActor_BP_StartIntro) == 0x000020, "Wrong size on TWPlayerIntroActor_BP_StartIntro");
static_assert(offsetof(TWPlayerIntroActor_BP_StartIntro, ActiveMesh) == 0x000000, "Member 'TWPlayerIntroActor_BP_StartIntro::ActiveMesh' has a wrong offset!");
static_assert(offsetof(TWPlayerIntroActor_BP_StartIntro, ActiveMaterials) == 0x000008, "Member 'TWPlayerIntroActor_BP_StartIntro::ActiveMaterials' has a wrong offset!");
static_assert(offsetof(TWPlayerIntroActor_BP_StartIntro, MatchIntro) == 0x000018, "Member 'TWPlayerIntroActor_BP_StartIntro::MatchIntro' has a wrong offset!");

// Function TimeWatch.TWPlayerIntroActor.Cosmetic_SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct TWPlayerIntroActor_Cosmetic_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerIntroActor_Cosmetic_SetVisibility) == 0x000001, "Wrong alignment on TWPlayerIntroActor_Cosmetic_SetVisibility");
static_assert(sizeof(TWPlayerIntroActor_Cosmetic_SetVisibility) == 0x000001, "Wrong size on TWPlayerIntroActor_Cosmetic_SetVisibility");
static_assert(offsetof(TWPlayerIntroActor_Cosmetic_SetVisibility, bNewVisibility) == 0x000000, "Member 'TWPlayerIntroActor_Cosmetic_SetVisibility::bNewVisibility' has a wrong offset!");

// Function TimeWatch.TWPlayerIntroActor.StartIntro
// 0x0008 (0x0008 - 0x0000)
struct TWPlayerIntroActor_StartIntro final
{
public:
	class ATWMatchIntroActor*                     Owning_MatchIntro;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerIntroActor_StartIntro) == 0x000008, "Wrong alignment on TWPlayerIntroActor_StartIntro");
static_assert(sizeof(TWPlayerIntroActor_StartIntro) == 0x000008, "Wrong size on TWPlayerIntroActor_StartIntro");
static_assert(offsetof(TWPlayerIntroActor_StartIntro, Owning_MatchIntro) == 0x000000, "Member 'TWPlayerIntroActor_StartIntro::Owning_MatchIntro' has a wrong offset!");

// Function TimeWatch.TWPlayerIntroActor.GetPlayerID
// 0x0004 (0x0004 - 0x0000)
struct TWPlayerIntroActor_GetPlayerID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerIntroActor_GetPlayerID) == 0x000004, "Wrong alignment on TWPlayerIntroActor_GetPlayerID");
static_assert(sizeof(TWPlayerIntroActor_GetPlayerID) == 0x000004, "Wrong size on TWPlayerIntroActor_GetPlayerID");
static_assert(offsetof(TWPlayerIntroActor_GetPlayerID, ReturnValue) == 0x000000, "Member 'TWPlayerIntroActor_GetPlayerID::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPlayerIntroActor.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct TWPlayerIntroActor_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerIntroActor_GetTeamId) == 0x000004, "Wrong alignment on TWPlayerIntroActor_GetTeamId");
static_assert(sizeof(TWPlayerIntroActor_GetTeamId) == 0x000004, "Wrong size on TWPlayerIntroActor_GetTeamId");
static_assert(offsetof(TWPlayerIntroActor_GetTeamId, ReturnValue) == 0x000000, "Member 'TWPlayerIntroActor_GetTeamId::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWPlayerSkipConfirmation.GetOwner
// 0x0008 (0x0008 - 0x0000)
struct TWPlayerSkipConfirmation_GetOwner final
{
public:
	class APlayerState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWPlayerSkipConfirmation_GetOwner) == 0x000008, "Wrong alignment on TWPlayerSkipConfirmation_GetOwner");
static_assert(sizeof(TWPlayerSkipConfirmation_GetOwner) == 0x000008, "Wrong size on TWPlayerSkipConfirmation_GetOwner");
static_assert(offsetof(TWPlayerSkipConfirmation_GetOwner, ReturnValue) == 0x000000, "Member 'TWPlayerSkipConfirmation_GetOwner::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWProjectileGhost.Cosmetic_Setup
// 0x0008 (0x0008 - 0x0000)
struct TWProjectileGhost_Cosmetic_Setup final
{
public:
	class ATimeWatchCharacter*                    InstigatorCharacter;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWProjectileGhost_Cosmetic_Setup) == 0x000008, "Wrong alignment on TWProjectileGhost_Cosmetic_Setup");
static_assert(sizeof(TWProjectileGhost_Cosmetic_Setup) == 0x000008, "Wrong size on TWProjectileGhost_Cosmetic_Setup");
static_assert(offsetof(TWProjectileGhost_Cosmetic_Setup, InstigatorCharacter) == 0x000000, "Member 'TWProjectileGhost_Cosmetic_Setup::InstigatorCharacter' has a wrong offset!");

// Function TimeWatch.TWProjectileManager.CreateProjectile
// 0x0070 (0x0070 - 0x0000)
struct TWProjectileManager_CreateProjectile final
{
public:
	TSubclassOf<class ABaseProjectile>            InProjectileClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewOwner;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VolleyIndex;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CookTime;                                          // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MuzzleSpeed;                                       // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreationTime;                                      // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATimeWatchProjectile*                   ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWProjectileManager_CreateProjectile) == 0x000010, "Wrong alignment on TWProjectileManager_CreateProjectile");
static_assert(sizeof(TWProjectileManager_CreateProjectile) == 0x000070, "Wrong size on TWProjectileManager_CreateProjectile");
static_assert(offsetof(TWProjectileManager_CreateProjectile, InProjectileClass) == 0x000000, "Member 'TWProjectileManager_CreateProjectile::InProjectileClass' has a wrong offset!");
static_assert(offsetof(TWProjectileManager_CreateProjectile, NewOwner) == 0x000008, "Member 'TWProjectileManager_CreateProjectile::NewOwner' has a wrong offset!");
static_assert(offsetof(TWProjectileManager_CreateProjectile, BulletIndex) == 0x000010, "Member 'TWProjectileManager_CreateProjectile::BulletIndex' has a wrong offset!");
static_assert(offsetof(TWProjectileManager_CreateProjectile, VolleyIndex) == 0x000014, "Member 'TWProjectileManager_CreateProjectile::VolleyIndex' has a wrong offset!");
static_assert(offsetof(TWProjectileManager_CreateProjectile, SpawnTransform) == 0x000020, "Member 'TWProjectileManager_CreateProjectile::SpawnTransform' has a wrong offset!");
static_assert(offsetof(TWProjectileManager_CreateProjectile, CookTime) == 0x000050, "Member 'TWProjectileManager_CreateProjectile::CookTime' has a wrong offset!");
static_assert(offsetof(TWProjectileManager_CreateProjectile, MuzzleSpeed) == 0x000054, "Member 'TWProjectileManager_CreateProjectile::MuzzleSpeed' has a wrong offset!");
static_assert(offsetof(TWProjectileManager_CreateProjectile, CreationTime) == 0x000058, "Member 'TWProjectileManager_CreateProjectile::CreationTime' has a wrong offset!");
static_assert(offsetof(TWProjectileManager_CreateProjectile, ReturnValue) == 0x000060, "Member 'TWProjectileManager_CreateProjectile::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWProjectileManager.RegisterProjectile
// 0x0004 (0x0004 - 0x0000)
struct TWProjectileManager_RegisterProjectile final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWProjectileManager_RegisterProjectile) == 0x000004, "Wrong alignment on TWProjectileManager_RegisterProjectile");
static_assert(sizeof(TWProjectileManager_RegisterProjectile) == 0x000004, "Wrong size on TWProjectileManager_RegisterProjectile");
static_assert(offsetof(TWProjectileManager_RegisterProjectile, ReturnValue) == 0x000000, "Member 'TWProjectileManager_RegisterProjectile::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWProjectileMovementComponent.HandleBounceBroadcast
// 0x0094 (0x0094 - 0x0000)
struct TWProjectileMovementComponent_HandleBounceBroadcast final
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWProjectileMovementComponent_HandleBounceBroadcast) == 0x000004, "Wrong alignment on TWProjectileMovementComponent_HandleBounceBroadcast");
static_assert(sizeof(TWProjectileMovementComponent_HandleBounceBroadcast) == 0x000094, "Wrong size on TWProjectileMovementComponent_HandleBounceBroadcast");
static_assert(offsetof(TWProjectileMovementComponent_HandleBounceBroadcast, ImpactResult) == 0x000000, "Member 'TWProjectileMovementComponent_HandleBounceBroadcast::ImpactResult' has a wrong offset!");
static_assert(offsetof(TWProjectileMovementComponent_HandleBounceBroadcast, ImpactVelocity) == 0x000088, "Member 'TWProjectileMovementComponent_HandleBounceBroadcast::ImpactVelocity' has a wrong offset!");

// Function TimeWatch.TWProjectilePredictionComponent.DrawTrail
// 0x0128 (0x0128 - 0x0000)
struct TWProjectilePredictionComponent_DrawTrail final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProjectilePredictionData              PredictionData;                                    // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPredictProjectilePathResult           PredictResult;                                     // 0x0068(0x00B8)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DebugType;                                         // 0x0120(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0121(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWProjectilePredictionComponent_DrawTrail) == 0x000008, "Wrong alignment on TWProjectilePredictionComponent_DrawTrail");
static_assert(sizeof(TWProjectilePredictionComponent_DrawTrail) == 0x000128, "Wrong size on TWProjectilePredictionComponent_DrawTrail");
static_assert(offsetof(TWProjectilePredictionComponent_DrawTrail, Context) == 0x000000, "Member 'TWProjectilePredictionComponent_DrawTrail::Context' has a wrong offset!");
static_assert(offsetof(TWProjectilePredictionComponent_DrawTrail, PredictionData) == 0x000008, "Member 'TWProjectilePredictionComponent_DrawTrail::PredictionData' has a wrong offset!");
static_assert(offsetof(TWProjectilePredictionComponent_DrawTrail, PredictResult) == 0x000068, "Member 'TWProjectilePredictionComponent_DrawTrail::PredictResult' has a wrong offset!");
static_assert(offsetof(TWProjectilePredictionComponent_DrawTrail, DebugType) == 0x000120, "Member 'TWProjectilePredictionComponent_DrawTrail::DebugType' has a wrong offset!");
static_assert(offsetof(TWProjectilePredictionComponent_DrawTrail, ReturnValue) == 0x000121, "Member 'TWProjectilePredictionComponent_DrawTrail::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWRadialCloneInfo.SetAsDeactivated
// 0x0001 (0x0001 - 0x0000)
struct TWRadialCloneInfo_SetAsDeactivated final
{
public:
	bool                                          bInState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRadialCloneInfo_SetAsDeactivated) == 0x000001, "Wrong alignment on TWRadialCloneInfo_SetAsDeactivated");
static_assert(sizeof(TWRadialCloneInfo_SetAsDeactivated) == 0x000001, "Wrong size on TWRadialCloneInfo_SetAsDeactivated");
static_assert(offsetof(TWRadialCloneInfo_SetAsDeactivated, bInState) == 0x000000, "Member 'TWRadialCloneInfo_SetAsDeactivated::bInState' has a wrong offset!");

// Function TimeWatch.TWRadialCloneInfo.SetCloneColorVisibility
// 0x0001 (0x0001 - 0x0000)
struct TWRadialCloneInfo_SetCloneColorVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRadialCloneInfo_SetCloneColorVisibility) == 0x000001, "Wrong alignment on TWRadialCloneInfo_SetCloneColorVisibility");
static_assert(sizeof(TWRadialCloneInfo_SetCloneColorVisibility) == 0x000001, "Wrong size on TWRadialCloneInfo_SetCloneColorVisibility");
static_assert(offsetof(TWRadialCloneInfo_SetCloneColorVisibility, NewVisibility) == 0x000000, "Member 'TWRadialCloneInfo_SetCloneColorVisibility::NewVisibility' has a wrong offset!");

// Function TimeWatch.TWRadialCloneInfo.SetCloneIndexText
// 0x0004 (0x0004 - 0x0000)
struct TWRadialCloneInfo_SetCloneIndexText final
{
public:
	int32                                         CloneIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRadialCloneInfo_SetCloneIndexText) == 0x000004, "Wrong alignment on TWRadialCloneInfo_SetCloneIndexText");
static_assert(sizeof(TWRadialCloneInfo_SetCloneIndexText) == 0x000004, "Wrong size on TWRadialCloneInfo_SetCloneIndexText");
static_assert(offsetof(TWRadialCloneInfo_SetCloneIndexText, CloneIndex) == 0x000000, "Member 'TWRadialCloneInfo_SetCloneIndexText::CloneIndex' has a wrong offset!");

// Function TimeWatch.TWRadialCloneInfo.SetDeathVisibility
// 0x0001 (0x0001 - 0x0000)
struct TWRadialCloneInfo_SetDeathVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRadialCloneInfo_SetDeathVisibility) == 0x000001, "Wrong alignment on TWRadialCloneInfo_SetDeathVisibility");
static_assert(sizeof(TWRadialCloneInfo_SetDeathVisibility) == 0x000001, "Wrong size on TWRadialCloneInfo_SetDeathVisibility");
static_assert(offsetof(TWRadialCloneInfo_SetDeathVisibility, NewVisibility) == 0x000000, "Member 'TWRadialCloneInfo_SetDeathVisibility::NewVisibility' has a wrong offset!");

// Function TimeWatch.TWRadialCloneInfo.SetOwner
// 0x0008 (0x0008 - 0x0000)
struct TWRadialCloneInfo_SetOwner final
{
public:
	class ATimeWatchCharacter*                    NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRadialCloneInfo_SetOwner) == 0x000008, "Wrong alignment on TWRadialCloneInfo_SetOwner");
static_assert(sizeof(TWRadialCloneInfo_SetOwner) == 0x000008, "Wrong size on TWRadialCloneInfo_SetOwner");
static_assert(offsetof(TWRadialCloneInfo_SetOwner, NewOwner) == 0x000000, "Member 'TWRadialCloneInfo_SetOwner::NewOwner' has a wrong offset!");

// Function TimeWatch.TWRadialCloneInfo.SetPlayerInfoOverlayScale
// 0x0008 (0x0008 - 0x0000)
struct TWRadialCloneInfo_SetPlayerInfoOverlayScale final
{
public:
	struct FVector2D                              NewScale;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRadialCloneInfo_SetPlayerInfoOverlayScale) == 0x000004, "Wrong alignment on TWRadialCloneInfo_SetPlayerInfoOverlayScale");
static_assert(sizeof(TWRadialCloneInfo_SetPlayerInfoOverlayScale) == 0x000008, "Wrong size on TWRadialCloneInfo_SetPlayerInfoOverlayScale");
static_assert(offsetof(TWRadialCloneInfo_SetPlayerInfoOverlayScale, NewScale) == 0x000000, "Member 'TWRadialCloneInfo_SetPlayerInfoOverlayScale::NewScale' has a wrong offset!");

// Function TimeWatch.TWRadialCloneInfo.UpdateWidgetStyle
// 0x0001 (0x0001 - 0x0000)
struct TWRadialCloneInfo_UpdateWidgetStyle final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRadialCloneInfo_UpdateWidgetStyle) == 0x000001, "Wrong alignment on TWRadialCloneInfo_UpdateWidgetStyle");
static_assert(sizeof(TWRadialCloneInfo_UpdateWidgetStyle) == 0x000001, "Wrong size on TWRadialCloneInfo_UpdateWidgetStyle");
static_assert(offsetof(TWRadialCloneInfo_UpdateWidgetStyle, IsPlayer) == 0x000000, "Member 'TWRadialCloneInfo_UpdateWidgetStyle::IsPlayer' has a wrong offset!");

// Function TimeWatch.TWRewardItemPreviewActor.BP_SetMouseXInput
// 0x0004 (0x0004 - 0x0000)
struct TWRewardItemPreviewActor_BP_SetMouseXInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardItemPreviewActor_BP_SetMouseXInput) == 0x000004, "Wrong alignment on TWRewardItemPreviewActor_BP_SetMouseXInput");
static_assert(sizeof(TWRewardItemPreviewActor_BP_SetMouseXInput) == 0x000004, "Wrong size on TWRewardItemPreviewActor_BP_SetMouseXInput");
static_assert(offsetof(TWRewardItemPreviewActor_BP_SetMouseXInput, InValue) == 0x000000, "Member 'TWRewardItemPreviewActor_BP_SetMouseXInput::InValue' has a wrong offset!");

// Function TimeWatch.TWRewardItemPreviewActor.BP_SetupItem
// 0x0008 (0x0008 - 0x0000)
struct TWRewardItemPreviewActor_BP_SetupItem final
{
public:
	const class UTWItemDataAsset*                 InItemData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardItemPreviewActor_BP_SetupItem) == 0x000008, "Wrong alignment on TWRewardItemPreviewActor_BP_SetupItem");
static_assert(sizeof(TWRewardItemPreviewActor_BP_SetupItem) == 0x000008, "Wrong size on TWRewardItemPreviewActor_BP_SetupItem");
static_assert(offsetof(TWRewardItemPreviewActor_BP_SetupItem, InItemData) == 0x000000, "Member 'TWRewardItemPreviewActor_BP_SetupItem::InItemData' has a wrong offset!");

// Function TimeWatch.TWRewardItemPreviewActor.LoadItemPreview
// 0x0028 (0x0028 - 0x0000)
struct TWRewardItemPreviewActor_LoadItemPreview final
{
public:
	struct FNGDBackendReward                      InItemToPreview;                                   // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardItemPreviewActor_LoadItemPreview) == 0x000008, "Wrong alignment on TWRewardItemPreviewActor_LoadItemPreview");
static_assert(sizeof(TWRewardItemPreviewActor_LoadItemPreview) == 0x000028, "Wrong size on TWRewardItemPreviewActor_LoadItemPreview");
static_assert(offsetof(TWRewardItemPreviewActor_LoadItemPreview, InItemToPreview) == 0x000000, "Member 'TWRewardItemPreviewActor_LoadItemPreview::InItemToPreview' has a wrong offset!");

// Function TimeWatch.TWRewardItemPreviewActor.LoadItemPreviewBySKU
// 0x0010 (0x0010 - 0x0000)
struct TWRewardItemPreviewActor_LoadItemPreviewBySKU final
{
public:
	class FString                                 InItemToPreview;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardItemPreviewActor_LoadItemPreviewBySKU) == 0x000008, "Wrong alignment on TWRewardItemPreviewActor_LoadItemPreviewBySKU");
static_assert(sizeof(TWRewardItemPreviewActor_LoadItemPreviewBySKU) == 0x000010, "Wrong size on TWRewardItemPreviewActor_LoadItemPreviewBySKU");
static_assert(offsetof(TWRewardItemPreviewActor_LoadItemPreviewBySKU, InItemToPreview) == 0x000000, "Member 'TWRewardItemPreviewActor_LoadItemPreviewBySKU::InItemToPreview' has a wrong offset!");

// Function TimeWatch.TWRewardItemPreviewActor.OnYawInput
// 0x0004 (0x0004 - 0x0000)
struct TWRewardItemPreviewActor_OnYawInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardItemPreviewActor_OnYawInput) == 0x000004, "Wrong alignment on TWRewardItemPreviewActor_OnYawInput");
static_assert(sizeof(TWRewardItemPreviewActor_OnYawInput) == 0x000004, "Wrong size on TWRewardItemPreviewActor_OnYawInput");
static_assert(offsetof(TWRewardItemPreviewActor_OnYawInput, InValue) == 0x000000, "Member 'TWRewardItemPreviewActor_OnYawInput::InValue' has a wrong offset!");

// Function TimeWatch.TWRewardItemPreviewActor.SetScalarParameterOnDynamicMaterials
// 0x000C (0x000C - 0x0000)
struct TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials) == 0x000004, "Wrong alignment on TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials");
static_assert(sizeof(TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials) == 0x00000C, "Wrong size on TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials");
static_assert(offsetof(TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials, InParameterName) == 0x000000, "Member 'TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials::InParameterName' has a wrong offset!");
static_assert(offsetof(TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials, InValue) == 0x000008, "Member 'TWRewardItemPreviewActor_SetScalarParameterOnDynamicMaterials::InValue' has a wrong offset!");

// Function TimeWatch.TWRewardPopup.LoadItems
// 0x0010 (0x0010 - 0x0000)
struct TWRewardPopup_LoadItems final
{
public:
	TArray<struct FNGDBackendReward>              PendingRewards;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardPopup_LoadItems) == 0x000008, "Wrong alignment on TWRewardPopup_LoadItems");
static_assert(sizeof(TWRewardPopup_LoadItems) == 0x000010, "Wrong size on TWRewardPopup_LoadItems");
static_assert(offsetof(TWRewardPopup_LoadItems, PendingRewards) == 0x000000, "Member 'TWRewardPopup_LoadItems::PendingRewards' has a wrong offset!");

// Function TimeWatch.TWRewardPopup.SetDescription
// 0x0018 (0x0018 - 0x0000)
struct TWRewardPopup_SetDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardPopup_SetDescription) == 0x000008, "Wrong alignment on TWRewardPopup_SetDescription");
static_assert(sizeof(TWRewardPopup_SetDescription) == 0x000018, "Wrong size on TWRewardPopup_SetDescription");
static_assert(offsetof(TWRewardPopup_SetDescription, Description) == 0x000000, "Member 'TWRewardPopup_SetDescription::Description' has a wrong offset!");

// Function TimeWatch.TWRewardPopup.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct TWRewardPopup_SetTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWRewardPopup_SetTitle) == 0x000008, "Wrong alignment on TWRewardPopup_SetTitle");
static_assert(sizeof(TWRewardPopup_SetTitle) == 0x000018, "Wrong size on TWRewardPopup_SetTitle");
static_assert(offsetof(TWRewardPopup_SetTitle, Title) == 0x000000, "Member 'TWRewardPopup_SetTitle::Title' has a wrong offset!");

// Function TimeWatch.TWSelectedWeaponInfo.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct TWSelectedWeaponInfo_GetWeapon final
{
public:
	class ATemporalWeapon*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSelectedWeaponInfo_GetWeapon) == 0x000008, "Wrong alignment on TWSelectedWeaponInfo_GetWeapon");
static_assert(sizeof(TWSelectedWeaponInfo_GetWeapon) == 0x000008, "Wrong size on TWSelectedWeaponInfo_GetWeapon");
static_assert(offsetof(TWSelectedWeaponInfo_GetWeapon, ReturnValue) == 0x000000, "Member 'TWSelectedWeaponInfo_GetWeapon::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.BP_SetMouseXInput
// 0x0004 (0x0004 - 0x0000)
struct TWSkinPreviewActor_BP_SetMouseXInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_BP_SetMouseXInput) == 0x000004, "Wrong alignment on TWSkinPreviewActor_BP_SetMouseXInput");
static_assert(sizeof(TWSkinPreviewActor_BP_SetMouseXInput) == 0x000004, "Wrong size on TWSkinPreviewActor_BP_SetMouseXInput");
static_assert(offsetof(TWSkinPreviewActor_BP_SetMouseXInput, InValue) == 0x000000, "Member 'TWSkinPreviewActor_BP_SetMouseXInput::InValue' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.BP_SetupCharacterOutfit
// 0x0008 (0x0008 - 0x0000)
struct TWSkinPreviewActor_BP_SetupCharacterOutfit final
{
public:
	const class UTWStylesDataAsset*               InStyleDataAsset;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_BP_SetupCharacterOutfit) == 0x000008, "Wrong alignment on TWSkinPreviewActor_BP_SetupCharacterOutfit");
static_assert(sizeof(TWSkinPreviewActor_BP_SetupCharacterOutfit) == 0x000008, "Wrong size on TWSkinPreviewActor_BP_SetupCharacterOutfit");
static_assert(offsetof(TWSkinPreviewActor_BP_SetupCharacterOutfit, InStyleDataAsset) == 0x000000, "Member 'TWSkinPreviewActor_BP_SetupCharacterOutfit::InStyleDataAsset' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.ExpoRandomCustomization
// 0x0004 (0x0004 - 0x0000)
struct TWSkinPreviewActor_ExpoRandomCustomization final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_ExpoRandomCustomization) == 0x000004, "Wrong alignment on TWSkinPreviewActor_ExpoRandomCustomization");
static_assert(sizeof(TWSkinPreviewActor_ExpoRandomCustomization) == 0x000004, "Wrong size on TWSkinPreviewActor_ExpoRandomCustomization");
static_assert(offsetof(TWSkinPreviewActor_ExpoRandomCustomization, Limit) == 0x000000, "Member 'TWSkinPreviewActor_ExpoRandomCustomization::Limit' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.GetPreviewAnimationPlayStatus
// 0x0001 (0x0001 - 0x0000)
struct TWSkinPreviewActor_GetPreviewAnimationPlayStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_GetPreviewAnimationPlayStatus) == 0x000001, "Wrong alignment on TWSkinPreviewActor_GetPreviewAnimationPlayStatus");
static_assert(sizeof(TWSkinPreviewActor_GetPreviewAnimationPlayStatus) == 0x000001, "Wrong size on TWSkinPreviewActor_GetPreviewAnimationPlayStatus");
static_assert(offsetof(TWSkinPreviewActor_GetPreviewAnimationPlayStatus, ReturnValue) == 0x000000, "Member 'TWSkinPreviewActor_GetPreviewAnimationPlayStatus::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.LoadCharacterCustomization
// 0x0028 (0x0028 - 0x0000)
struct TWSkinPreviewActor_LoadCharacterCustomization final
{
public:
	struct FCharacterSelectionEntry               CharacterSelectionEntry;                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_LoadCharacterCustomization) == 0x000008, "Wrong alignment on TWSkinPreviewActor_LoadCharacterCustomization");
static_assert(sizeof(TWSkinPreviewActor_LoadCharacterCustomization) == 0x000028, "Wrong size on TWSkinPreviewActor_LoadCharacterCustomization");
static_assert(offsetof(TWSkinPreviewActor_LoadCharacterCustomization, CharacterSelectionEntry) == 0x000000, "Member 'TWSkinPreviewActor_LoadCharacterCustomization::CharacterSelectionEntry' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.OnInventoryUpdateCompleted
// 0x0018 (0x0018 - 0x0000)
struct TWSkinPreviewActor_OnInventoryUpdateCompleted final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_OnInventoryUpdateCompleted) == 0x000008, "Wrong alignment on TWSkinPreviewActor_OnInventoryUpdateCompleted");
static_assert(sizeof(TWSkinPreviewActor_OnInventoryUpdateCompleted) == 0x000018, "Wrong size on TWSkinPreviewActor_OnInventoryUpdateCompleted");
static_assert(offsetof(TWSkinPreviewActor_OnInventoryUpdateCompleted, bWasSuccessful) == 0x000000, "Member 'TWSkinPreviewActor_OnInventoryUpdateCompleted::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(TWSkinPreviewActor_OnInventoryUpdateCompleted, ErrorString) == 0x000008, "Member 'TWSkinPreviewActor_OnInventoryUpdateCompleted::ErrorString' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.OnYawInput
// 0x0004 (0x0004 - 0x0000)
struct TWSkinPreviewActor_OnYawInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_OnYawInput) == 0x000004, "Wrong alignment on TWSkinPreviewActor_OnYawInput");
static_assert(sizeof(TWSkinPreviewActor_OnYawInput) == 0x000004, "Wrong size on TWSkinPreviewActor_OnYawInput");
static_assert(offsetof(TWSkinPreviewActor_OnYawInput, InValue) == 0x000000, "Member 'TWSkinPreviewActor_OnYawInput::InValue' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.SetScalarParameterOnDynamicMaterials
// 0x000C (0x000C - 0x0000)
struct TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials final
{
public:
	class FName                                   InParameterName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials) == 0x000004, "Wrong alignment on TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials");
static_assert(sizeof(TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials) == 0x00000C, "Wrong size on TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials");
static_assert(offsetof(TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials, InParameterName) == 0x000000, "Member 'TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials::InParameterName' has a wrong offset!");
static_assert(offsetof(TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials, InValue) == 0x000008, "Member 'TWSkinPreviewActor_SetScalarParameterOnDynamicMaterials::InValue' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.GetCharacterBGImage
// 0x0008 (0x0008 - 0x0000)
struct TWSkinPreviewActor_GetCharacterBGImage final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_GetCharacterBGImage) == 0x000008, "Wrong alignment on TWSkinPreviewActor_GetCharacterBGImage");
static_assert(sizeof(TWSkinPreviewActor_GetCharacterBGImage) == 0x000008, "Wrong size on TWSkinPreviewActor_GetCharacterBGImage");
static_assert(offsetof(TWSkinPreviewActor_GetCharacterBGImage, ReturnValue) == 0x000000, "Member 'TWSkinPreviewActor_GetCharacterBGImage::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.GetCharacterFriendlyName
// 0x0010 (0x0010 - 0x0000)
struct TWSkinPreviewActor_GetCharacterFriendlyName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_GetCharacterFriendlyName) == 0x000008, "Wrong alignment on TWSkinPreviewActor_GetCharacterFriendlyName");
static_assert(sizeof(TWSkinPreviewActor_GetCharacterFriendlyName) == 0x000010, "Wrong size on TWSkinPreviewActor_GetCharacterFriendlyName");
static_assert(offsetof(TWSkinPreviewActor_GetCharacterFriendlyName, ReturnValue) == 0x000000, "Member 'TWSkinPreviewActor_GetCharacterFriendlyName::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWSkinPreviewActor.GetSkinRotation
// 0x000C (0x000C - 0x0000)
struct TWSkinPreviewActor_GetSkinRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSkinPreviewActor_GetSkinRotation) == 0x000004, "Wrong alignment on TWSkinPreviewActor_GetSkinRotation");
static_assert(sizeof(TWSkinPreviewActor_GetSkinRotation) == 0x00000C, "Wrong size on TWSkinPreviewActor_GetSkinRotation");
static_assert(offsetof(TWSkinPreviewActor_GetSkinRotation, ReturnValue) == 0x000000, "Member 'TWSkinPreviewActor_GetSkinRotation::ReturnValue' has a wrong offset!");

// Function TimeWatch.TWSpectatorPawn.OnGameStateChange
// 0x0002 (0x0002 - 0x0000)
struct TWSpectatorPawn_OnGameStateChange final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSpectatorPawn_OnGameStateChange) == 0x000001, "Wrong alignment on TWSpectatorPawn_OnGameStateChange");
static_assert(sizeof(TWSpectatorPawn_OnGameStateChange) == 0x000002, "Wrong size on TWSpectatorPawn_OnGameStateChange");
static_assert(offsetof(TWSpectatorPawn_OnGameStateChange, OldState) == 0x000000, "Member 'TWSpectatorPawn_OnGameStateChange::OldState' has a wrong offset!");
static_assert(offsetof(TWSpectatorPawn_OnGameStateChange, NewState) == 0x000001, "Member 'TWSpectatorPawn_OnGameStateChange::NewState' has a wrong offset!");

// Function TimeWatch.TWSpectatorPawn.SpectatorLookSmooth
// 0x0004 (0x0004 - 0x0000)
struct TWSpectatorPawn_SpectatorLookSmooth final
{
public:
	float                                         NewSmooth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSpectatorPawn_SpectatorLookSmooth) == 0x000004, "Wrong alignment on TWSpectatorPawn_SpectatorLookSmooth");
static_assert(sizeof(TWSpectatorPawn_SpectatorLookSmooth) == 0x000004, "Wrong size on TWSpectatorPawn_SpectatorLookSmooth");
static_assert(offsetof(TWSpectatorPawn_SpectatorLookSmooth, NewSmooth) == 0x000000, "Member 'TWSpectatorPawn_SpectatorLookSmooth::NewSmooth' has a wrong offset!");

// Function TimeWatch.TWSpectatorPawn.SpectatorMoveSmooth
// 0x0004 (0x0004 - 0x0000)
struct TWSpectatorPawn_SpectatorMoveSmooth final
{
public:
	float                                         NewSmooth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWSpectatorPawn_SpectatorMoveSmooth) == 0x000004, "Wrong alignment on TWSpectatorPawn_SpectatorMoveSmooth");
static_assert(sizeof(TWSpectatorPawn_SpectatorMoveSmooth) == 0x000004, "Wrong size on TWSpectatorPawn_SpectatorMoveSmooth");
static_assert(offsetof(TWSpectatorPawn_SpectatorMoveSmooth, NewSmooth) == 0x000000, "Member 'TWSpectatorPawn_SpectatorMoveSmooth::NewSmooth' has a wrong offset!");

// Function TimeWatch.TWStyleButtonWidget.OnStyleButtonFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct TWStyleButtonWidget_OnStyleButtonFocusChanged final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWStyleButtonWidget_OnStyleButtonFocusChanged) == 0x000001, "Wrong alignment on TWStyleButtonWidget_OnStyleButtonFocusChanged");
static_assert(sizeof(TWStyleButtonWidget_OnStyleButtonFocusChanged) == 0x000001, "Wrong size on TWStyleButtonWidget_OnStyleButtonFocusChanged");
static_assert(offsetof(TWStyleButtonWidget_OnStyleButtonFocusChanged, IsFocused) == 0x000000, "Member 'TWStyleButtonWidget_OnStyleButtonFocusChanged::IsFocused' has a wrong offset!");

// Function TimeWatch.TWTimelinesWidget.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TWTimelinesWidget_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWTimelinesWidget_OnGameStateChanged) == 0x000001, "Wrong alignment on TWTimelinesWidget_OnGameStateChanged");
static_assert(sizeof(TWTimelinesWidget_OnGameStateChanged) == 0x000002, "Wrong size on TWTimelinesWidget_OnGameStateChanged");
static_assert(offsetof(TWTimelinesWidget_OnGameStateChanged, OldState) == 0x000000, "Member 'TWTimelinesWidget_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TWTimelinesWidget_OnGameStateChanged, NewState) == 0x000001, "Member 'TWTimelinesWidget_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.TWTooltipListenerComponent.BP_BroadcastListenerRuleComplete
// 0x0058 (0x0058 - 0x0000)
struct TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 NotificationID;                                    // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotificationExpirationMax;                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidgetTipNotification>     DefaultWidgetClassOverride;                        // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete) == 0x000008, "Wrong alignment on TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete");
static_assert(sizeof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete) == 0x000058, "Wrong size on TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete");
static_assert(offsetof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete, Title) == 0x000000, "Member 'TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete::Title' has a wrong offset!");
static_assert(offsetof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete, Description) == 0x000018, "Member 'TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete::Description' has a wrong offset!");
static_assert(offsetof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete, NotificationID) == 0x000030, "Member 'TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete::NotificationID' has a wrong offset!");
static_assert(offsetof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete, Priority) == 0x000040, "Member 'TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete::Priority' has a wrong offset!");
static_assert(offsetof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete, Duration) == 0x000044, "Member 'TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete::Duration' has a wrong offset!");
static_assert(offsetof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete, NotificationExpirationMax) == 0x000048, "Member 'TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete::NotificationExpirationMax' has a wrong offset!");
static_assert(offsetof(TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete, DefaultWidgetClassOverride) == 0x000050, "Member 'TWTooltipListenerComponent_BP_BroadcastListenerRuleComplete::DefaultWidgetClassOverride' has a wrong offset!");

// Function TimeWatch.TWTrailComponent.SetCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct TWTrailComponent_SetCurrentTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWTrailComponent_SetCurrentTime) == 0x000004, "Wrong alignment on TWTrailComponent_SetCurrentTime");
static_assert(sizeof(TWTrailComponent_SetCurrentTime) == 0x000004, "Wrong size on TWTrailComponent_SetCurrentTime");
static_assert(offsetof(TWTrailComponent_SetCurrentTime, Time) == 0x000000, "Member 'TWTrailComponent_SetCurrentTime::Time' has a wrong offset!");

// Function TimeWatch.TWTrailComponent.SetTrackedProjectile
// 0x0008 (0x0008 - 0x0000)
struct TWTrailComponent_SetTrackedProjectile final
{
public:
	class UPrimitiveComponent*                    InProjectile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWTrailComponent_SetTrackedProjectile) == 0x000008, "Wrong alignment on TWTrailComponent_SetTrackedProjectile");
static_assert(sizeof(TWTrailComponent_SetTrackedProjectile) == 0x000008, "Wrong size on TWTrailComponent_SetTrackedProjectile");
static_assert(offsetof(TWTrailComponent_SetTrackedProjectile, InProjectile) == 0x000000, "Member 'TWTrailComponent_SetTrackedProjectile::InProjectile' has a wrong offset!");

// Function TimeWatch.TWTutorialTooltipManager.OnListenerRuleComplete
// 0x0058 (0x0058 - 0x0000)
struct TWTutorialTooltipManager_OnListenerRuleComplete final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 NotificationID;                                    // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotificationExpirationMax;                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidgetTipNotification>     DefaultWidgetClassOverride;                        // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWTutorialTooltipManager_OnListenerRuleComplete) == 0x000008, "Wrong alignment on TWTutorialTooltipManager_OnListenerRuleComplete");
static_assert(sizeof(TWTutorialTooltipManager_OnListenerRuleComplete) == 0x000058, "Wrong size on TWTutorialTooltipManager_OnListenerRuleComplete");
static_assert(offsetof(TWTutorialTooltipManager_OnListenerRuleComplete, Title) == 0x000000, "Member 'TWTutorialTooltipManager_OnListenerRuleComplete::Title' has a wrong offset!");
static_assert(offsetof(TWTutorialTooltipManager_OnListenerRuleComplete, Description) == 0x000018, "Member 'TWTutorialTooltipManager_OnListenerRuleComplete::Description' has a wrong offset!");
static_assert(offsetof(TWTutorialTooltipManager_OnListenerRuleComplete, NotificationID) == 0x000030, "Member 'TWTutorialTooltipManager_OnListenerRuleComplete::NotificationID' has a wrong offset!");
static_assert(offsetof(TWTutorialTooltipManager_OnListenerRuleComplete, Priority) == 0x000040, "Member 'TWTutorialTooltipManager_OnListenerRuleComplete::Priority' has a wrong offset!");
static_assert(offsetof(TWTutorialTooltipManager_OnListenerRuleComplete, Duration) == 0x000044, "Member 'TWTutorialTooltipManager_OnListenerRuleComplete::Duration' has a wrong offset!");
static_assert(offsetof(TWTutorialTooltipManager_OnListenerRuleComplete, NotificationExpirationMax) == 0x000048, "Member 'TWTutorialTooltipManager_OnListenerRuleComplete::NotificationExpirationMax' has a wrong offset!");
static_assert(offsetof(TWTutorialTooltipManager_OnListenerRuleComplete, DefaultWidgetClassOverride) == 0x000050, "Member 'TWTutorialTooltipManager_OnListenerRuleComplete::DefaultWidgetClassOverride' has a wrong offset!");

// Function TimeWatch.TWWeaponSelectionSlot.BP_SetDesiredStatus
// 0x0001 (0x0001 - 0x0000)
struct TWWeaponSelectionSlot_BP_SetDesiredStatus final
{
public:
	bool                                          bIsDesiredWeapon;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWWeaponSelectionSlot_BP_SetDesiredStatus) == 0x000001, "Wrong alignment on TWWeaponSelectionSlot_BP_SetDesiredStatus");
static_assert(sizeof(TWWeaponSelectionSlot_BP_SetDesiredStatus) == 0x000001, "Wrong size on TWWeaponSelectionSlot_BP_SetDesiredStatus");
static_assert(offsetof(TWWeaponSelectionSlot_BP_SetDesiredStatus, bIsDesiredWeapon) == 0x000000, "Member 'TWWeaponSelectionSlot_BP_SetDesiredStatus::bIsDesiredWeapon' has a wrong offset!");

// Function TimeWatch.TWWeaponSelectionSlot.SetDesiredStatus
// 0x0001 (0x0001 - 0x0000)
struct TWWeaponSelectionSlot_SetDesiredStatus final
{
public:
	bool                                          bIsDesiredWeapon;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWWeaponSelectionSlot_SetDesiredStatus) == 0x000001, "Wrong alignment on TWWeaponSelectionSlot_SetDesiredStatus");
static_assert(sizeof(TWWeaponSelectionSlot_SetDesiredStatus) == 0x000001, "Wrong size on TWWeaponSelectionSlot_SetDesiredStatus");
static_assert(offsetof(TWWeaponSelectionSlot_SetDesiredStatus, bIsDesiredWeapon) == 0x000000, "Member 'TWWeaponSelectionSlot_SetDesiredStatus::bIsDesiredWeapon' has a wrong offset!");

// Function TimeWatch.TWWeaponSelectionSlot.SetWeaponImage
// 0x0010 (0x0010 - 0x0000)
struct TWWeaponSelectionSlot_SetWeaponImage final
{
public:
	class UTexture2D*                             NewWeaponImage;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TWWeaponSelectionSlot_SetWeaponImage) == 0x000008, "Wrong alignment on TWWeaponSelectionSlot_SetWeaponImage");
static_assert(sizeof(TWWeaponSelectionSlot_SetWeaponImage) == 0x000010, "Wrong size on TWWeaponSelectionSlot_SetWeaponImage");
static_assert(offsetof(TWWeaponSelectionSlot_SetWeaponImage, NewWeaponImage) == 0x000000, "Member 'TWWeaponSelectionSlot_SetWeaponImage::NewWeaponImage' has a wrong offset!");
static_assert(offsetof(TWWeaponSelectionSlot_SetWeaponImage, bMatchSize) == 0x000008, "Member 'TWWeaponSelectionSlot_SetWeaponImage::bMatchSize' has a wrong offset!");

// Function TimeWatch.TWWeaponSelectionSlot.SetWeaponImageVisibility
// 0x0001 (0x0001 - 0x0000)
struct TWWeaponSelectionSlot_SetWeaponImageVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWWeaponSelectionSlot_SetWeaponImageVisibility) == 0x000001, "Wrong alignment on TWWeaponSelectionSlot_SetWeaponImageVisibility");
static_assert(sizeof(TWWeaponSelectionSlot_SetWeaponImageVisibility) == 0x000001, "Wrong size on TWWeaponSelectionSlot_SetWeaponImageVisibility");
static_assert(offsetof(TWWeaponSelectionSlot_SetWeaponImageVisibility, InVisibility) == 0x000000, "Member 'TWWeaponSelectionSlot_SetWeaponImageVisibility::InVisibility' has a wrong offset!");

// Function TimeWatch.TWWeaponSelectionSlot.SetWeaponName
// 0x0010 (0x0010 - 0x0000)
struct TWWeaponSelectionSlot_SetWeaponName final
{
public:
	class FString                                 WeaponName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWWeaponSelectionSlot_SetWeaponName) == 0x000008, "Wrong alignment on TWWeaponSelectionSlot_SetWeaponName");
static_assert(sizeof(TWWeaponSelectionSlot_SetWeaponName) == 0x000010, "Wrong size on TWWeaponSelectionSlot_SetWeaponName");
static_assert(offsetof(TWWeaponSelectionSlot_SetWeaponName, WeaponName) == 0x000000, "Member 'TWWeaponSelectionSlot_SetWeaponName::WeaponName' has a wrong offset!");

// Function TimeWatch.TWWeaponSelectionSlot.SetWeaponNumber
// 0x0004 (0x0004 - 0x0000)
struct TWWeaponSelectionSlot_SetWeaponNumber final
{
public:
	int32                                         WeaponNumber;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWWeaponSelectionSlot_SetWeaponNumber) == 0x000004, "Wrong alignment on TWWeaponSelectionSlot_SetWeaponNumber");
static_assert(sizeof(TWWeaponSelectionSlot_SetWeaponNumber) == 0x000004, "Wrong size on TWWeaponSelectionSlot_SetWeaponNumber");
static_assert(offsetof(TWWeaponSelectionSlot_SetWeaponNumber, WeaponNumber) == 0x000000, "Member 'TWWeaponSelectionSlot_SetWeaponNumber::WeaponNumber' has a wrong offset!");

// Function TimeWatch.TWWeaponSkinPreviewActor.OnYawInput
// 0x0004 (0x0004 - 0x0000)
struct TWWeaponSkinPreviewActor_OnYawInput final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TWWeaponSkinPreviewActor_OnYawInput) == 0x000004, "Wrong alignment on TWWeaponSkinPreviewActor_OnYawInput");
static_assert(sizeof(TWWeaponSkinPreviewActor_OnYawInput) == 0x000004, "Wrong size on TWWeaponSkinPreviewActor_OnYawInput");
static_assert(offsetof(TWWeaponSkinPreviewActor_OnYawInput, InValue) == 0x000000, "Member 'TWWeaponSkinPreviewActor_OnYawInput::InValue' has a wrong offset!");

// Function TimeWatch.WeaponSelectionComponent.OnGameStateChange
// 0x0002 (0x0002 - 0x0000)
struct WeaponSelectionComponent_OnGameStateChange final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSelectionComponent_OnGameStateChange) == 0x000001, "Wrong alignment on WeaponSelectionComponent_OnGameStateChange");
static_assert(sizeof(WeaponSelectionComponent_OnGameStateChange) == 0x000002, "Wrong size on WeaponSelectionComponent_OnGameStateChange");
static_assert(offsetof(WeaponSelectionComponent_OnGameStateChange, OldState) == 0x000000, "Member 'WeaponSelectionComponent_OnGameStateChange::OldState' has a wrong offset!");
static_assert(offsetof(WeaponSelectionComponent_OnGameStateChange, NewState) == 0x000001, "Member 'WeaponSelectionComponent_OnGameStateChange::NewState' has a wrong offset!");

// Function TimeWatch.WeaponSelectionComponent.OnHUDReset
// 0x0008 (0x0008 - 0x0000)
struct WeaponSelectionComponent_OnHUDReset final
{
public:
	class UWidgetContainerWeaponStatus*           InWeaponSelectionWidget;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSelectionComponent_OnHUDReset) == 0x000008, "Wrong alignment on WeaponSelectionComponent_OnHUDReset");
static_assert(sizeof(WeaponSelectionComponent_OnHUDReset) == 0x000008, "Wrong size on WeaponSelectionComponent_OnHUDReset");
static_assert(offsetof(WeaponSelectionComponent_OnHUDReset, InWeaponSelectionWidget) == 0x000000, "Member 'WeaponSelectionComponent_OnHUDReset::InWeaponSelectionWidget' has a wrong offset!");

// Function TimeWatch.WeaponSelectionComponent.GetCurrentWeaponSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct WeaponSelectionComponent_GetCurrentWeaponSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSelectionComponent_GetCurrentWeaponSlotIndex) == 0x000004, "Wrong alignment on WeaponSelectionComponent_GetCurrentWeaponSlotIndex");
static_assert(sizeof(WeaponSelectionComponent_GetCurrentWeaponSlotIndex) == 0x000004, "Wrong size on WeaponSelectionComponent_GetCurrentWeaponSlotIndex");
static_assert(offsetof(WeaponSelectionComponent_GetCurrentWeaponSlotIndex, ReturnValue) == 0x000000, "Member 'WeaponSelectionComponent_GetCurrentWeaponSlotIndex::ReturnValue' has a wrong offset!");

// Function TimeWatch.WeaponSelectionComponent.GetHoldsteredWeaponSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct WeaponSelectionComponent_GetHoldsteredWeaponSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSelectionComponent_GetHoldsteredWeaponSlotIndex) == 0x000004, "Wrong alignment on WeaponSelectionComponent_GetHoldsteredWeaponSlotIndex");
static_assert(sizeof(WeaponSelectionComponent_GetHoldsteredWeaponSlotIndex) == 0x000004, "Wrong size on WeaponSelectionComponent_GetHoldsteredWeaponSlotIndex");
static_assert(offsetof(WeaponSelectionComponent_GetHoldsteredWeaponSlotIndex, ReturnValue) == 0x000000, "Member 'WeaponSelectionComponent_GetHoldsteredWeaponSlotIndex::ReturnValue' has a wrong offset!");

// Function TimeWatch.WeaponSelectionComponent.HasSelectedWeapon
// 0x0001 (0x0001 - 0x0000)
struct WeaponSelectionComponent_HasSelectedWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSelectionComponent_HasSelectedWeapon) == 0x000001, "Wrong alignment on WeaponSelectionComponent_HasSelectedWeapon");
static_assert(sizeof(WeaponSelectionComponent_HasSelectedWeapon) == 0x000001, "Wrong size on WeaponSelectionComponent_HasSelectedWeapon");
static_assert(offsetof(WeaponSelectionComponent_HasSelectedWeapon, ReturnValue) == 0x000000, "Member 'WeaponSelectionComponent_HasSelectedWeapon::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainer2DCompasses.AddCompassInstance
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainer2DCompasses_AddCompassInstance final
{
public:
	TSubclassOf<class UTW2DCompass>               CompassClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTW2DCompass*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainer2DCompasses_AddCompassInstance) == 0x000008, "Wrong alignment on WidgetContainer2DCompasses_AddCompassInstance");
static_assert(sizeof(WidgetContainer2DCompasses_AddCompassInstance) == 0x000010, "Wrong size on WidgetContainer2DCompasses_AddCompassInstance");
static_assert(offsetof(WidgetContainer2DCompasses_AddCompassInstance, CompassClass) == 0x000000, "Member 'WidgetContainer2DCompasses_AddCompassInstance::CompassClass' has a wrong offset!");
static_assert(offsetof(WidgetContainer2DCompasses_AddCompassInstance, ReturnValue) == 0x000008, "Member 'WidgetContainer2DCompasses_AddCompassInstance::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainer2DCompasses.GetCompassInstances
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainer2DCompasses_GetCompassInstances final
{
public:
	TSubclassOf<class UTW2DCompass>               CompassClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTW2DCompass*>                   ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainer2DCompasses_GetCompassInstances) == 0x000008, "Wrong alignment on WidgetContainer2DCompasses_GetCompassInstances");
static_assert(sizeof(WidgetContainer2DCompasses_GetCompassInstances) == 0x000018, "Wrong size on WidgetContainer2DCompasses_GetCompassInstances");
static_assert(offsetof(WidgetContainer2DCompasses_GetCompassInstances, CompassClass) == 0x000000, "Member 'WidgetContainer2DCompasses_GetCompassInstances::CompassClass' has a wrong offset!");
static_assert(offsetof(WidgetContainer2DCompasses_GetCompassInstances, ReturnValue) == 0x000008, "Member 'WidgetContainer2DCompasses_GetCompassInstances::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainer2DCompasses.OnPingAdded
// 0x0040 (0x0040 - 0x0000)
struct WidgetContainer2DCompasses_OnPingAdded final
{
public:
	struct FPingMarker                            NewPing;                                           // 0x0000(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainer2DCompasses_OnPingAdded) == 0x000008, "Wrong alignment on WidgetContainer2DCompasses_OnPingAdded");
static_assert(sizeof(WidgetContainer2DCompasses_OnPingAdded) == 0x000040, "Wrong size on WidgetContainer2DCompasses_OnPingAdded");
static_assert(offsetof(WidgetContainer2DCompasses_OnPingAdded, NewPing) == 0x000000, "Member 'WidgetContainer2DCompasses_OnPingAdded::NewPing' has a wrong offset!");

// Function TimeWatch.WidgetContainer2DCompasses.OnPingRemoved
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainer2DCompasses_OnPingRemoved final
{
public:
	int32                                         PingID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainer2DCompasses_OnPingRemoved) == 0x000004, "Wrong alignment on WidgetContainer2DCompasses_OnPingRemoved");
static_assert(sizeof(WidgetContainer2DCompasses_OnPingRemoved) == 0x000004, "Wrong size on WidgetContainer2DCompasses_OnPingRemoved");
static_assert(offsetof(WidgetContainer2DCompasses_OnPingRemoved, PingID) == 0x000000, "Member 'WidgetContainer2DCompasses_OnPingRemoved::PingID' has a wrong offset!");

// Function TimeWatch.WidgetContainer2DCompasses.OnRevivedCloneEventReceived
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainer2DCompasses_OnRevivedCloneEventReceived final
{
public:
	class UTimeWatchEvent*                        Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainer2DCompasses_OnRevivedCloneEventReceived) == 0x000008, "Wrong alignment on WidgetContainer2DCompasses_OnRevivedCloneEventReceived");
static_assert(sizeof(WidgetContainer2DCompasses_OnRevivedCloneEventReceived) == 0x000008, "Wrong size on WidgetContainer2DCompasses_OnRevivedCloneEventReceived");
static_assert(offsetof(WidgetContainer2DCompasses_OnRevivedCloneEventReceived, Event) == 0x000000, "Member 'WidgetContainer2DCompasses_OnRevivedCloneEventReceived::Event' has a wrong offset!");

// Function TimeWatch.WidgetContainerCharSelection.HandleNavigation
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerCharSelection_HandleNavigation final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCharSelection_HandleNavigation) == 0x000004, "Wrong alignment on WidgetContainerCharSelection_HandleNavigation");
static_assert(sizeof(WidgetContainerCharSelection_HandleNavigation) == 0x000004, "Wrong size on WidgetContainerCharSelection_HandleNavigation");
static_assert(offsetof(WidgetContainerCharSelection_HandleNavigation, Value) == 0x000000, "Member 'WidgetContainerCharSelection_HandleNavigation::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerCharSelection.OnCharacterHovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCharSelection_OnCharacterHovered final
{
public:
	const class UTWCharacterDataAsset*            HoveredCharacterData;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCharSelection_OnCharacterHovered) == 0x000008, "Wrong alignment on WidgetContainerCharSelection_OnCharacterHovered");
static_assert(sizeof(WidgetContainerCharSelection_OnCharacterHovered) == 0x000008, "Wrong size on WidgetContainerCharSelection_OnCharacterHovered");
static_assert(offsetof(WidgetContainerCharSelection_OnCharacterHovered, HoveredCharacterData) == 0x000000, "Member 'WidgetContainerCharSelection_OnCharacterHovered::HoveredCharacterData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCharSelection.OnCharacterUnhovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCharSelection_OnCharacterUnhovered final
{
public:
	const class UTWCharacterDataAsset*            UnhoveredCharacterData;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCharSelection_OnCharacterUnhovered) == 0x000008, "Wrong alignment on WidgetContainerCharSelection_OnCharacterUnhovered");
static_assert(sizeof(WidgetContainerCharSelection_OnCharacterUnhovered) == 0x000008, "Wrong size on WidgetContainerCharSelection_OnCharacterUnhovered");
static_assert(offsetof(WidgetContainerCharSelection_OnCharacterUnhovered, UnhoveredCharacterData) == 0x000000, "Member 'WidgetContainerCharSelection_OnCharacterUnhovered::UnhoveredCharacterData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCharSelection.OnSelectCharacter
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCharSelection_OnSelectCharacter final
{
public:
	const class UTWCharacterDataAsset*            SelectedCharacterData;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCharSelection_OnSelectCharacter) == 0x000008, "Wrong alignment on WidgetContainerCharSelection_OnSelectCharacter");
static_assert(sizeof(WidgetContainerCharSelection_OnSelectCharacter) == 0x000008, "Wrong size on WidgetContainerCharSelection_OnSelectCharacter");
static_assert(offsetof(WidgetContainerCharSelection_OnSelectCharacter, SelectedCharacterData) == 0x000000, "Member 'WidgetContainerCharSelection_OnSelectCharacter::SelectedCharacterData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCornerPlayerProfile.OnPartyStatusUpdate
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCornerPlayerProfile_OnPartyStatusUpdate final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCornerPlayerProfile_OnPartyStatusUpdate) == 0x000001, "Wrong alignment on WidgetContainerCornerPlayerProfile_OnPartyStatusUpdate");
static_assert(sizeof(WidgetContainerCornerPlayerProfile_OnPartyStatusUpdate) == 0x000001, "Wrong size on WidgetContainerCornerPlayerProfile_OnPartyStatusUpdate");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_OnPartyStatusUpdate, bPartyStructureChanged) == 0x000000, "Member 'WidgetContainerCornerPlayerProfile_OnPartyStatusUpdate::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.WidgetContainerCornerPlayerProfile.OnPlayerDataUpdateComplete
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete) == 0x000008, "Wrong alignment on WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete");
static_assert(sizeof(WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete) == 0x000018, "Wrong size on WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete, ErrorString) == 0x000008, "Member 'WidgetContainerCornerPlayerProfile_OnPlayerDataUpdateComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetButtonsVisibility
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCornerPlayerProfile_SetButtonsVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCornerPlayerProfile_SetButtonsVisibility) == 0x000001, "Wrong alignment on WidgetContainerCornerPlayerProfile_SetButtonsVisibility");
static_assert(sizeof(WidgetContainerCornerPlayerProfile_SetButtonsVisibility) == 0x000001, "Wrong size on WidgetContainerCornerPlayerProfile_SetButtonsVisibility");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_SetButtonsVisibility, InVisibility) == 0x000000, "Member 'WidgetContainerCornerPlayerProfile_SetButtonsVisibility::InVisibility' has a wrong offset!");

// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetUserLevel
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerCornerPlayerProfile_SetUserLevel final
{
public:
	int32                                         InCurrentXP;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCornerPlayerProfile_SetUserLevel) == 0x000004, "Wrong alignment on WidgetContainerCornerPlayerProfile_SetUserLevel");
static_assert(sizeof(WidgetContainerCornerPlayerProfile_SetUserLevel) == 0x000004, "Wrong size on WidgetContainerCornerPlayerProfile_SetUserLevel");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_SetUserLevel, InCurrentXP) == 0x000000, "Member 'WidgetContainerCornerPlayerProfile_SetUserLevel::InCurrentXP' has a wrong offset!");

// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetUsername
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerCornerPlayerProfile_SetUsername final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCornerPlayerProfile_SetUsername) == 0x000008, "Wrong alignment on WidgetContainerCornerPlayerProfile_SetUsername");
static_assert(sizeof(WidgetContainerCornerPlayerProfile_SetUsername) == 0x000010, "Wrong size on WidgetContainerCornerPlayerProfile_SetUsername");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_SetUsername, Name_0) == 0x000000, "Member 'WidgetContainerCornerPlayerProfile_SetUsername::Name_0' has a wrong offset!");

// Function TimeWatch.WidgetContainerCornerPlayerProfile.SetXPBarProgress
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerCornerPlayerProfile_SetXPBarProgress final
{
public:
	int32                                         InCurrentXP;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCornerPlayerProfile_SetXPBarProgress) == 0x000004, "Wrong alignment on WidgetContainerCornerPlayerProfile_SetXPBarProgress");
static_assert(sizeof(WidgetContainerCornerPlayerProfile_SetXPBarProgress) == 0x000004, "Wrong size on WidgetContainerCornerPlayerProfile_SetXPBarProgress");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_SetXPBarProgress, InCurrentXP) == 0x000000, "Member 'WidgetContainerCornerPlayerProfile_SetXPBarProgress::InCurrentXP' has a wrong offset!");

// Function TimeWatch.WidgetContainerCornerPlayerProfile.UpdatePlayerData
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerCornerPlayerProfile_UpdatePlayerData final
{
public:
	class FString                                 InUserName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlayerXP;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerCornerPlayerProfile_UpdatePlayerData) == 0x000008, "Wrong alignment on WidgetContainerCornerPlayerProfile_UpdatePlayerData");
static_assert(sizeof(WidgetContainerCornerPlayerProfile_UpdatePlayerData) == 0x000018, "Wrong size on WidgetContainerCornerPlayerProfile_UpdatePlayerData");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_UpdatePlayerData, InUserName) == 0x000000, "Member 'WidgetContainerCornerPlayerProfile_UpdatePlayerData::InUserName' has a wrong offset!");
static_assert(offsetof(WidgetContainerCornerPlayerProfile_UpdatePlayerData, InPlayerXP) == 0x000010, "Member 'WidgetContainerCornerPlayerProfile_UpdatePlayerData::InPlayerXP' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.BP_OnActiveWidgetChanged
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCustomization_BP_OnActiveWidgetChanged final
{
public:
	ECustomizationFlowState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_BP_OnActiveWidgetChanged) == 0x000001, "Wrong alignment on WidgetContainerCustomization_BP_OnActiveWidgetChanged");
static_assert(sizeof(WidgetContainerCustomization_BP_OnActiveWidgetChanged) == 0x000001, "Wrong size on WidgetContainerCustomization_BP_OnActiveWidgetChanged");
static_assert(offsetof(WidgetContainerCustomization_BP_OnActiveWidgetChanged, State) == 0x000000, "Member 'WidgetContainerCustomization_BP_OnActiveWidgetChanged::State' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.OnBuyCharacterComplete
// 0x0030 (0x0030 - 0x0000)
struct WidgetContainerCustomization_OnBuyCharacterComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SKU;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         newCoinsAmmount;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerCustomization_OnBuyCharacterComplete) == 0x000008, "Wrong alignment on WidgetContainerCustomization_OnBuyCharacterComplete");
static_assert(sizeof(WidgetContainerCustomization_OnBuyCharacterComplete) == 0x000030, "Wrong size on WidgetContainerCustomization_OnBuyCharacterComplete");
static_assert(offsetof(WidgetContainerCustomization_OnBuyCharacterComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerCustomization_OnBuyCharacterComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerCustomization_OnBuyCharacterComplete, ErrorString) == 0x000008, "Member 'WidgetContainerCustomization_OnBuyCharacterComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerCustomization_OnBuyCharacterComplete, SKU) == 0x000018, "Member 'WidgetContainerCustomization_OnBuyCharacterComplete::SKU' has a wrong offset!");
static_assert(offsetof(WidgetContainerCustomization_OnBuyCharacterComplete, newCoinsAmmount) == 0x000028, "Member 'WidgetContainerCustomization_OnBuyCharacterComplete::newCoinsAmmount' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.OnBuyStyleComplete
// 0x0030 (0x0030 - 0x0000)
struct WidgetContainerCustomization_OnBuyStyleComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SKU;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         newCoinsAmmount;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerCustomization_OnBuyStyleComplete) == 0x000008, "Wrong alignment on WidgetContainerCustomization_OnBuyStyleComplete");
static_assert(sizeof(WidgetContainerCustomization_OnBuyStyleComplete) == 0x000030, "Wrong size on WidgetContainerCustomization_OnBuyStyleComplete");
static_assert(offsetof(WidgetContainerCustomization_OnBuyStyleComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerCustomization_OnBuyStyleComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerCustomization_OnBuyStyleComplete, ErrorString) == 0x000008, "Member 'WidgetContainerCustomization_OnBuyStyleComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerCustomization_OnBuyStyleComplete, SKU) == 0x000018, "Member 'WidgetContainerCustomization_OnBuyStyleComplete::SKU' has a wrong offset!");
static_assert(offsetof(WidgetContainerCustomization_OnBuyStyleComplete, newCoinsAmmount) == 0x000028, "Member 'WidgetContainerCustomization_OnBuyStyleComplete::newCoinsAmmount' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.OnCharacterClicked
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCustomization_OnCharacterClicked final
{
public:
	const class UTWCharacterDataAsset*            SelectedCharacterData;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_OnCharacterClicked) == 0x000008, "Wrong alignment on WidgetContainerCustomization_OnCharacterClicked");
static_assert(sizeof(WidgetContainerCustomization_OnCharacterClicked) == 0x000008, "Wrong size on WidgetContainerCustomization_OnCharacterClicked");
static_assert(offsetof(WidgetContainerCustomization_OnCharacterClicked, SelectedCharacterData) == 0x000000, "Member 'WidgetContainerCustomization_OnCharacterClicked::SelectedCharacterData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.OnCharacterHovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCustomization_OnCharacterHovered final
{
public:
	const class UTWCharacterDataAsset*            HoveredCharacterData;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_OnCharacterHovered) == 0x000008, "Wrong alignment on WidgetContainerCustomization_OnCharacterHovered");
static_assert(sizeof(WidgetContainerCustomization_OnCharacterHovered) == 0x000008, "Wrong size on WidgetContainerCustomization_OnCharacterHovered");
static_assert(offsetof(WidgetContainerCustomization_OnCharacterHovered, HoveredCharacterData) == 0x000000, "Member 'WidgetContainerCustomization_OnCharacterHovered::HoveredCharacterData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.OnCharacterRightClick
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCustomization_OnCharacterRightClick final
{
public:
	const class UTWCharacterDataAsset*            SelectedCharacterData;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_OnCharacterRightClick) == 0x000008, "Wrong alignment on WidgetContainerCustomization_OnCharacterRightClick");
static_assert(sizeof(WidgetContainerCustomization_OnCharacterRightClick) == 0x000008, "Wrong size on WidgetContainerCustomization_OnCharacterRightClick");
static_assert(offsetof(WidgetContainerCustomization_OnCharacterRightClick, SelectedCharacterData) == 0x000000, "Member 'WidgetContainerCustomization_OnCharacterRightClick::SelectedCharacterData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.OnStyleClicked
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCustomization_OnStyleClicked final
{
public:
	const class UTWItemDataAsset*                 SelectedStyleData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_OnStyleClicked) == 0x000008, "Wrong alignment on WidgetContainerCustomization_OnStyleClicked");
static_assert(sizeof(WidgetContainerCustomization_OnStyleClicked) == 0x000008, "Wrong size on WidgetContainerCustomization_OnStyleClicked");
static_assert(offsetof(WidgetContainerCustomization_OnStyleClicked, SelectedStyleData) == 0x000000, "Member 'WidgetContainerCustomization_OnStyleClicked::SelectedStyleData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.OnStyleHovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCustomization_OnStyleHovered final
{
public:
	const class UTWItemDataAsset*                 SelectedStyleData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_OnStyleHovered) == 0x000008, "Wrong alignment on WidgetContainerCustomization_OnStyleHovered");
static_assert(sizeof(WidgetContainerCustomization_OnStyleHovered) == 0x000008, "Wrong size on WidgetContainerCustomization_OnStyleHovered");
static_assert(offsetof(WidgetContainerCustomization_OnStyleHovered, SelectedStyleData) == 0x000000, "Member 'WidgetContainerCustomization_OnStyleHovered::SelectedStyleData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.SetFlowState
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCustomization_SetFlowState final
{
public:
	ECustomizationFlowState                       NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_SetFlowState) == 0x000001, "Wrong alignment on WidgetContainerCustomization_SetFlowState");
static_assert(sizeof(WidgetContainerCustomization_SetFlowState) == 0x000001, "Wrong size on WidgetContainerCustomization_SetFlowState");
static_assert(offsetof(WidgetContainerCustomization_SetFlowState, NewState) == 0x000000, "Member 'WidgetContainerCustomization_SetFlowState::NewState' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.TryEquipItem
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCustomization_TryEquipItem final
{
public:
	const class UTWItemDataAsset*                 SelectedStyleData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_TryEquipItem) == 0x000008, "Wrong alignment on WidgetContainerCustomization_TryEquipItem");
static_assert(sizeof(WidgetContainerCustomization_TryEquipItem) == 0x000008, "Wrong size on WidgetContainerCustomization_TryEquipItem");
static_assert(offsetof(WidgetContainerCustomization_TryEquipItem, SelectedStyleData) == 0x000000, "Member 'WidgetContainerCustomization_TryEquipItem::SelectedStyleData' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.GetMainMenuHud
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerCustomization_GetMainMenuHud final
{
public:
	class AMainMenuHUD*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_GetMainMenuHud) == 0x000008, "Wrong alignment on WidgetContainerCustomization_GetMainMenuHud");
static_assert(sizeof(WidgetContainerCustomization_GetMainMenuHud) == 0x000008, "Wrong size on WidgetContainerCustomization_GetMainMenuHud");
static_assert(offsetof(WidgetContainerCustomization_GetMainMenuHud, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomization_GetMainMenuHud::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.IsApplyStyleButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCustomization_IsApplyStyleButtonEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_IsApplyStyleButtonEnabled) == 0x000001, "Wrong alignment on WidgetContainerCustomization_IsApplyStyleButtonEnabled");
static_assert(sizeof(WidgetContainerCustomization_IsApplyStyleButtonEnabled) == 0x000001, "Wrong size on WidgetContainerCustomization_IsApplyStyleButtonEnabled");
static_assert(offsetof(WidgetContainerCustomization_IsApplyStyleButtonEnabled, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomization_IsApplyStyleButtonEnabled::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.IsApplyStyleButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCustomization_IsApplyStyleButtonVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_IsApplyStyleButtonVisible) == 0x000001, "Wrong alignment on WidgetContainerCustomization_IsApplyStyleButtonVisible");
static_assert(sizeof(WidgetContainerCustomization_IsApplyStyleButtonVisible) == 0x000001, "Wrong size on WidgetContainerCustomization_IsApplyStyleButtonVisible");
static_assert(offsetof(WidgetContainerCustomization_IsApplyStyleButtonVisible, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomization_IsApplyStyleButtonVisible::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.IsCustomizeCharacterButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCustomization_IsCustomizeCharacterButtonEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_IsCustomizeCharacterButtonEnabled) == 0x000001, "Wrong alignment on WidgetContainerCustomization_IsCustomizeCharacterButtonEnabled");
static_assert(sizeof(WidgetContainerCustomization_IsCustomizeCharacterButtonEnabled) == 0x000001, "Wrong size on WidgetContainerCustomization_IsCustomizeCharacterButtonEnabled");
static_assert(offsetof(WidgetContainerCustomization_IsCustomizeCharacterButtonEnabled, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomization_IsCustomizeCharacterButtonEnabled::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.IsSetActiveCharacterButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCustomization_IsSetActiveCharacterButtonEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_IsSetActiveCharacterButtonEnabled) == 0x000001, "Wrong alignment on WidgetContainerCustomization_IsSetActiveCharacterButtonEnabled");
static_assert(sizeof(WidgetContainerCustomization_IsSetActiveCharacterButtonEnabled) == 0x000001, "Wrong size on WidgetContainerCustomization_IsSetActiveCharacterButtonEnabled");
static_assert(offsetof(WidgetContainerCustomization_IsSetActiveCharacterButtonEnabled, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomization_IsSetActiveCharacterButtonEnabled::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.IsSetActiveCharacterButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCustomization_IsSetActiveCharacterButtonVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_IsSetActiveCharacterButtonVisible) == 0x000001, "Wrong alignment on WidgetContainerCustomization_IsSetActiveCharacterButtonVisible");
static_assert(sizeof(WidgetContainerCustomization_IsSetActiveCharacterButtonVisible) == 0x000001, "Wrong size on WidgetContainerCustomization_IsSetActiveCharacterButtonVisible");
static_assert(offsetof(WidgetContainerCustomization_IsSetActiveCharacterButtonVisible, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomization_IsSetActiveCharacterButtonVisible::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomization.IsStylesTabButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerCustomization_IsStylesTabButtonEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomization_IsStylesTabButtonEnabled) == 0x000001, "Wrong alignment on WidgetContainerCustomization_IsStylesTabButtonEnabled");
static_assert(sizeof(WidgetContainerCustomization_IsStylesTabButtonEnabled) == 0x000001, "Wrong size on WidgetContainerCustomization_IsStylesTabButtonEnabled");
static_assert(offsetof(WidgetContainerCustomization_IsStylesTabButtonEnabled, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomization_IsStylesTabButtonEnabled::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomMatch.OnFriendSelected
// 0x0020 (0x0020 - 0x0000)
struct WidgetContainerCustomMatch_OnFriendSelected final
{
public:
	class FString                                 FriendID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendName;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomMatch_OnFriendSelected) == 0x000008, "Wrong alignment on WidgetContainerCustomMatch_OnFriendSelected");
static_assert(sizeof(WidgetContainerCustomMatch_OnFriendSelected) == 0x000020, "Wrong size on WidgetContainerCustomMatch_OnFriendSelected");
static_assert(offsetof(WidgetContainerCustomMatch_OnFriendSelected, FriendID) == 0x000000, "Member 'WidgetContainerCustomMatch_OnFriendSelected::FriendID' has a wrong offset!");
static_assert(offsetof(WidgetContainerCustomMatch_OnFriendSelected, FriendName) == 0x000010, "Member 'WidgetContainerCustomMatch_OnFriendSelected::FriendName' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomMatch.OnLobbyCreated
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerCustomMatch_OnLobbyCreated final
{
public:
	class FString                                 LobbyID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomMatch_OnLobbyCreated) == 0x000008, "Wrong alignment on WidgetContainerCustomMatch_OnLobbyCreated");
static_assert(sizeof(WidgetContainerCustomMatch_OnLobbyCreated) == 0x000010, "Wrong size on WidgetContainerCustomMatch_OnLobbyCreated");
static_assert(offsetof(WidgetContainerCustomMatch_OnLobbyCreated, LobbyID) == 0x000000, "Member 'WidgetContainerCustomMatch_OnLobbyCreated::LobbyID' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomMatch.GetCurrentPageIndex
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerCustomMatch_GetCurrentPageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomMatch_GetCurrentPageIndex) == 0x000004, "Wrong alignment on WidgetContainerCustomMatch_GetCurrentPageIndex");
static_assert(sizeof(WidgetContainerCustomMatch_GetCurrentPageIndex) == 0x000004, "Wrong size on WidgetContainerCustomMatch_GetCurrentPageIndex");
static_assert(offsetof(WidgetContainerCustomMatch_GetCurrentPageIndex, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomMatch_GetCurrentPageIndex::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerCustomMatch.GetTotalPagesAmount
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerCustomMatch_GetTotalPagesAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerCustomMatch_GetTotalPagesAmount) == 0x000004, "Wrong alignment on WidgetContainerCustomMatch_GetTotalPagesAmount");
static_assert(sizeof(WidgetContainerCustomMatch_GetTotalPagesAmount) == 0x000004, "Wrong size on WidgetContainerCustomMatch_GetTotalPagesAmount");
static_assert(offsetof(WidgetContainerCustomMatch_GetTotalPagesAmount, ReturnValue) == 0x000000, "Member 'WidgetContainerCustomMatch_GetTotalPagesAmount::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerDailyBoost.OnPlayerDataUpdateComplete
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerDailyBoost_OnPlayerDataUpdateComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerDailyBoost_OnPlayerDataUpdateComplete) == 0x000008, "Wrong alignment on WidgetContainerDailyBoost_OnPlayerDataUpdateComplete");
static_assert(sizeof(WidgetContainerDailyBoost_OnPlayerDataUpdateComplete) == 0x000018, "Wrong size on WidgetContainerDailyBoost_OnPlayerDataUpdateComplete");
static_assert(offsetof(WidgetContainerDailyBoost_OnPlayerDataUpdateComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerDailyBoost_OnPlayerDataUpdateComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerDailyBoost_OnPlayerDataUpdateComplete, ErrorString) == 0x000008, "Member 'WidgetContainerDailyBoost_OnPlayerDataUpdateComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.WidgetContainerDeathsSummary.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WidgetContainerDeathsSummary_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerDeathsSummary_OnGameStateChanged) == 0x000001, "Wrong alignment on WidgetContainerDeathsSummary_OnGameStateChanged");
static_assert(sizeof(WidgetContainerDeathsSummary_OnGameStateChanged) == 0x000002, "Wrong size on WidgetContainerDeathsSummary_OnGameStateChanged");
static_assert(offsetof(WidgetContainerDeathsSummary_OnGameStateChanged, OldState) == 0x000000, "Member 'WidgetContainerDeathsSummary_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(WidgetContainerDeathsSummary_OnGameStateChanged, NewState) == 0x000001, "Member 'WidgetContainerDeathsSummary_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.WidgetContainerDeathsSummary.OnGenericEventReceived
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerDeathsSummary_OnGenericEventReceived final
{
public:
	class UTimeWatchEvent*                        Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerDeathsSummary_OnGenericEventReceived) == 0x000008, "Wrong alignment on WidgetContainerDeathsSummary_OnGenericEventReceived");
static_assert(sizeof(WidgetContainerDeathsSummary_OnGenericEventReceived) == 0x000008, "Wrong size on WidgetContainerDeathsSummary_OnGenericEventReceived");
static_assert(offsetof(WidgetContainerDeathsSummary_OnGenericEventReceived, Event) == 0x000000, "Member 'WidgetContainerDeathsSummary_OnGenericEventReceived::Event' has a wrong offset!");

// Function TimeWatch.WidgetContainerFluxStateIcon.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerFluxStateIcon_OnStateChanged final
{
public:
	EFluxCapacitorStates                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerFluxStateIcon_OnStateChanged) == 0x000001, "Wrong alignment on WidgetContainerFluxStateIcon_OnStateChanged");
static_assert(sizeof(WidgetContainerFluxStateIcon_OnStateChanged) == 0x000001, "Wrong size on WidgetContainerFluxStateIcon_OnStateChanged");
static_assert(offsetof(WidgetContainerFluxStateIcon_OnStateChanged, NewState) == 0x000000, "Member 'WidgetContainerFluxStateIcon_OnStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.WidgetContainerKillConfirmation.OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerKillConfirmation_OnEnemyKilled final
{
public:
	class ATimeWatchCharacter*                    Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerKillConfirmation_OnEnemyKilled) == 0x000008, "Wrong alignment on WidgetContainerKillConfirmation_OnEnemyKilled");
static_assert(sizeof(WidgetContainerKillConfirmation_OnEnemyKilled) == 0x000008, "Wrong size on WidgetContainerKillConfirmation_OnEnemyKilled");
static_assert(offsetof(WidgetContainerKillConfirmation_OnEnemyKilled, Character) == 0x000000, "Member 'WidgetContainerKillConfirmation_OnEnemyKilled::Character' has a wrong offset!");

// Function TimeWatch.WidgetContainerLeaderboardSlot.SetupLeaderboardSlot
// 0x0028 (0x0028 - 0x0000)
struct WidgetContainerLeaderboardSlot_SetupLeaderboardSlot final
{
public:
	int32                                         rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Elo;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dominance;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wins;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Losses;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLeaderboardSlot_SetupLeaderboardSlot) == 0x000008, "Wrong alignment on WidgetContainerLeaderboardSlot_SetupLeaderboardSlot");
static_assert(sizeof(WidgetContainerLeaderboardSlot_SetupLeaderboardSlot) == 0x000028, "Wrong size on WidgetContainerLeaderboardSlot_SetupLeaderboardSlot");
static_assert(offsetof(WidgetContainerLeaderboardSlot_SetupLeaderboardSlot, rank) == 0x000000, "Member 'WidgetContainerLeaderboardSlot_SetupLeaderboardSlot::rank' has a wrong offset!");
static_assert(offsetof(WidgetContainerLeaderboardSlot_SetupLeaderboardSlot, Name_0) == 0x000008, "Member 'WidgetContainerLeaderboardSlot_SetupLeaderboardSlot::Name_0' has a wrong offset!");
static_assert(offsetof(WidgetContainerLeaderboardSlot_SetupLeaderboardSlot, Elo) == 0x000018, "Member 'WidgetContainerLeaderboardSlot_SetupLeaderboardSlot::Elo' has a wrong offset!");
static_assert(offsetof(WidgetContainerLeaderboardSlot_SetupLeaderboardSlot, Dominance) == 0x00001C, "Member 'WidgetContainerLeaderboardSlot_SetupLeaderboardSlot::Dominance' has a wrong offset!");
static_assert(offsetof(WidgetContainerLeaderboardSlot_SetupLeaderboardSlot, Wins) == 0x000020, "Member 'WidgetContainerLeaderboardSlot_SetupLeaderboardSlot::Wins' has a wrong offset!");
static_assert(offsetof(WidgetContainerLeaderboardSlot_SetupLeaderboardSlot, Losses) == 0x000024, "Member 'WidgetContainerLeaderboardSlot_SetupLeaderboardSlot::Losses' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.CloneCountSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_CloneCountSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_CloneCountSelectionChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_CloneCountSelectionChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_CloneCountSelectionChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_CloneCountSelectionChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_CloneCountSelectionChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_CloneCountSelectionChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.HealingModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_HealingModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_HealingModeChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_HealingModeChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_HealingModeChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_HealingModeChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_HealingModeChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_HealingModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.HealthPackModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_HealthPackModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_HealthPackModeChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_HealthPackModeChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_HealthPackModeChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_HealthPackModeChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_HealthPackModeChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_HealthPackModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.MapSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_MapSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_MapSelectionChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_MapSelectionChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_MapSelectionChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_MapSelectionChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_MapSelectionChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_MapSelectionChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.MatchScoreSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_MatchScoreSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_MatchScoreSelectionChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_MatchScoreSelectionChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_MatchScoreSelectionChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_MatchScoreSelectionChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_MatchScoreSelectionChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_MatchScoreSelectionChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.OnMatchmakingTypeChange
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerLobbyMatchSettings_OnMatchmakingTypeChange final
{
public:
	ETWMatchmakingType                            MatchmakingType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_OnMatchmakingTypeChange) == 0x000001, "Wrong alignment on WidgetContainerLobbyMatchSettings_OnMatchmakingTypeChange");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_OnMatchmakingTypeChange) == 0x000001, "Wrong size on WidgetContainerLobbyMatchSettings_OnMatchmakingTypeChange");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_OnMatchmakingTypeChange, MatchmakingType) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_OnMatchmakingTypeChange::MatchmakingType' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.OnPartyDataUpdated
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerLobbyMatchSettings_OnPartyDataUpdated final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_OnPartyDataUpdated) == 0x000001, "Wrong alignment on WidgetContainerLobbyMatchSettings_OnPartyDataUpdated");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_OnPartyDataUpdated) == 0x000001, "Wrong size on WidgetContainerLobbyMatchSettings_OnPartyDataUpdated");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_OnPartyDataUpdated, bPartyStructureChanged) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_OnPartyDataUpdated::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.OvertimeModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_OvertimeModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_OvertimeModeChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_OvertimeModeChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_OvertimeModeChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_OvertimeModeChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_OvertimeModeChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_OvertimeModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.PassiveAbilitiesModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_PassiveAbilitiesModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_PassiveAbilitiesModeChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_PassiveAbilitiesModeChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_PassiveAbilitiesModeChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_PassiveAbilitiesModeChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_PassiveAbilitiesModeChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_PassiveAbilitiesModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.PlayersSetupChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_PlayersSetupChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_PlayersSetupChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_PlayersSetupChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_PlayersSetupChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_PlayersSetupChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_PlayersSetupChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_PlayersSetupChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.ToggleMatchSettingsSpinnerInteractable
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable final
{
public:
	class USpinner*                               Spinner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInteractable;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable, Spinner) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable::Spinner' has a wrong offset!");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable, bInteractable) == 0x000008, "Member 'WidgetContainerLobbyMatchSettings_ToggleMatchSettingsSpinnerInteractable::bInteractable' has a wrong offset!");

// Function TimeWatch.WidgetContainerLobbyMatchSettings.WeaponModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerLobbyMatchSettings_WeaponModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerLobbyMatchSettings_WeaponModeChanged) == 0x000008, "Wrong alignment on WidgetContainerLobbyMatchSettings_WeaponModeChanged");
static_assert(sizeof(WidgetContainerLobbyMatchSettings_WeaponModeChanged) == 0x000010, "Wrong size on WidgetContainerLobbyMatchSettings_WeaponModeChanged");
static_assert(offsetof(WidgetContainerLobbyMatchSettings_WeaponModeChanged, Value) == 0x000000, "Member 'WidgetContainerLobbyMatchSettings_WeaponModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMainMenu.EnableMainMenuButtons
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMainMenu_EnableMainMenuButtons final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMainMenu_EnableMainMenuButtons) == 0x000001, "Wrong alignment on WidgetContainerMainMenu_EnableMainMenuButtons");
static_assert(sizeof(WidgetContainerMainMenu_EnableMainMenuButtons) == 0x000001, "Wrong size on WidgetContainerMainMenu_EnableMainMenuButtons");
static_assert(offsetof(WidgetContainerMainMenu_EnableMainMenuButtons, bEnable) == 0x000000, "Member 'WidgetContainerMainMenu_EnableMainMenuButtons::bEnable' has a wrong offset!");

// Function TimeWatch.WidgetContainerMainMenu.OnMatchmakingChange
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMainMenu_OnMatchmakingChange final
{
public:
	ETWMatchmakingType                            MatchmakingType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMainMenu_OnMatchmakingChange) == 0x000001, "Wrong alignment on WidgetContainerMainMenu_OnMatchmakingChange");
static_assert(sizeof(WidgetContainerMainMenu_OnMatchmakingChange) == 0x000001, "Wrong size on WidgetContainerMainMenu_OnMatchmakingChange");
static_assert(offsetof(WidgetContainerMainMenu_OnMatchmakingChange, MatchmakingType) == 0x000000, "Member 'WidgetContainerMainMenu_OnMatchmakingChange::MatchmakingType' has a wrong offset!");

// Function TimeWatch.WidgetContainerMainMenu.OnPartyDataUpdated
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMainMenu_OnPartyDataUpdated final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMainMenu_OnPartyDataUpdated) == 0x000001, "Wrong alignment on WidgetContainerMainMenu_OnPartyDataUpdated");
static_assert(sizeof(WidgetContainerMainMenu_OnPartyDataUpdated) == 0x000001, "Wrong size on WidgetContainerMainMenu_OnPartyDataUpdated");
static_assert(offsetof(WidgetContainerMainMenu_OnPartyDataUpdated, bPartyStructureChanged) == 0x000000, "Member 'WidgetContainerMainMenu_OnPartyDataUpdated::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.WidgetContainerMainMenu.OpenPremiumPopup
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerMainMenu_OpenPremiumPopup final
{
public:
	class FText                                   PopupTitle;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMainMenu_OpenPremiumPopup) == 0x000008, "Wrong alignment on WidgetContainerMainMenu_OpenPremiumPopup");
static_assert(sizeof(WidgetContainerMainMenu_OpenPremiumPopup) == 0x000018, "Wrong size on WidgetContainerMainMenu_OpenPremiumPopup");
static_assert(offsetof(WidgetContainerMainMenu_OpenPremiumPopup, PopupTitle) == 0x000000, "Member 'WidgetContainerMainMenu_OpenPremiumPopup::PopupTitle' has a wrong offset!");

// Function TimeWatch.WidgetContainerMainMenu.SetNetWorkStatus
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerMainMenu_SetNetWorkStatus final
{
public:
	class FText                                   Version;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMainMenu_SetNetWorkStatus) == 0x000008, "Wrong alignment on WidgetContainerMainMenu_SetNetWorkStatus");
static_assert(sizeof(WidgetContainerMainMenu_SetNetWorkStatus) == 0x000018, "Wrong size on WidgetContainerMainMenu_SetNetWorkStatus");
static_assert(offsetof(WidgetContainerMainMenu_SetNetWorkStatus, Version) == 0x000000, "Member 'WidgetContainerMainMenu_SetNetWorkStatus::Version' has a wrong offset!");

// Function TimeWatch.WidgetContainerMainMenu.SetVersion
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerMainMenu_SetVersion final
{
public:
	class FString                                 Version;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMainMenu_SetVersion) == 0x000008, "Wrong alignment on WidgetContainerMainMenu_SetVersion");
static_assert(sizeof(WidgetContainerMainMenu_SetVersion) == 0x000010, "Wrong size on WidgetContainerMainMenu_SetVersion");
static_assert(offsetof(WidgetContainerMainMenu_SetVersion, Version) == 0x000000, "Member 'WidgetContainerMainMenu_SetVersion::Version' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchmaking.OnGameSessionPollComplete
// 0x0050 (0x0050 - 0x0000)
struct WidgetContainerMatchmaking_OnGameSessionPollComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSessionId;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IpAddress;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchmaking_OnGameSessionPollComplete) == 0x000008, "Wrong alignment on WidgetContainerMatchmaking_OnGameSessionPollComplete");
static_assert(sizeof(WidgetContainerMatchmaking_OnGameSessionPollComplete) == 0x000050, "Wrong size on WidgetContainerMatchmaking_OnGameSessionPollComplete");
static_assert(offsetof(WidgetContainerMatchmaking_OnGameSessionPollComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerMatchmaking_OnGameSessionPollComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnGameSessionPollComplete, Status) == 0x000008, "Member 'WidgetContainerMatchmaking_OnGameSessionPollComplete::Status' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnGameSessionPollComplete, PlayerSessionId) == 0x000018, "Member 'WidgetContainerMatchmaking_OnGameSessionPollComplete::PlayerSessionId' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnGameSessionPollComplete, IpAddress) == 0x000028, "Member 'WidgetContainerMatchmaking_OnGameSessionPollComplete::IpAddress' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnGameSessionPollComplete, Port) == 0x000038, "Member 'WidgetContainerMatchmaking_OnGameSessionPollComplete::Port' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnGameSessionPollComplete, ErrorString) == 0x000040, "Member 'WidgetContainerMatchmaking_OnGameSessionPollComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingChange
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchmaking_OnMatchmakingChange final
{
public:
	ETWMatchmakingType                            MatchmakingType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchmaking_OnMatchmakingChange) == 0x000001, "Wrong alignment on WidgetContainerMatchmaking_OnMatchmakingChange");
static_assert(sizeof(WidgetContainerMatchmaking_OnMatchmakingChange) == 0x000001, "Wrong size on WidgetContainerMatchmaking_OnMatchmakingChange");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingChange, MatchmakingType) == 0x000000, "Member 'WidgetContainerMatchmaking_OnMatchmakingChange::MatchmakingType' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingPollComplete
// 0x0050 (0x0050 - 0x0000)
struct WidgetContainerMatchmaking_OnMatchmakingPollComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSessionId;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IpAddress;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchmaking_OnMatchmakingPollComplete) == 0x000008, "Wrong alignment on WidgetContainerMatchmaking_OnMatchmakingPollComplete");
static_assert(sizeof(WidgetContainerMatchmaking_OnMatchmakingPollComplete) == 0x000050, "Wrong size on WidgetContainerMatchmaking_OnMatchmakingPollComplete");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingPollComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerMatchmaking_OnMatchmakingPollComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingPollComplete, Status) == 0x000008, "Member 'WidgetContainerMatchmaking_OnMatchmakingPollComplete::Status' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingPollComplete, PlayerSessionId) == 0x000018, "Member 'WidgetContainerMatchmaking_OnMatchmakingPollComplete::PlayerSessionId' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingPollComplete, IpAddress) == 0x000028, "Member 'WidgetContainerMatchmaking_OnMatchmakingPollComplete::IpAddress' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingPollComplete, Port) == 0x000038, "Member 'WidgetContainerMatchmaking_OnMatchmakingPollComplete::Port' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingPollComplete, ErrorString) == 0x000040, "Member 'WidgetContainerMatchmaking_OnMatchmakingPollComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingStarted
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchmaking_OnMatchmakingStarted final
{
public:
	ETWMatchmakingType                            MatchmakingType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchmaking_OnMatchmakingStarted) == 0x000001, "Wrong alignment on WidgetContainerMatchmaking_OnMatchmakingStarted");
static_assert(sizeof(WidgetContainerMatchmaking_OnMatchmakingStarted) == 0x000001, "Wrong size on WidgetContainerMatchmaking_OnMatchmakingStarted");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingStarted, MatchmakingType) == 0x000000, "Member 'WidgetContainerMatchmaking_OnMatchmakingStarted::MatchmakingType' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingStopComplete
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerMatchmaking_OnMatchmakingStopComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchmaking_OnMatchmakingStopComplete) == 0x000008, "Wrong alignment on WidgetContainerMatchmaking_OnMatchmakingStopComplete");
static_assert(sizeof(WidgetContainerMatchmaking_OnMatchmakingStopComplete) == 0x000018, "Wrong size on WidgetContainerMatchmaking_OnMatchmakingStopComplete");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingStopComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerMatchmaking_OnMatchmakingStopComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingStopComplete, ErrorString) == 0x000008, "Member 'WidgetContainerMatchmaking_OnMatchmakingStopComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchmaking.OnMatchmakingStopped
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchmaking_OnMatchmakingStopped final
{
public:
	ETWMatchmakingType                            MatchmakingType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchmaking_OnMatchmakingStopped) == 0x000001, "Wrong alignment on WidgetContainerMatchmaking_OnMatchmakingStopped");
static_assert(sizeof(WidgetContainerMatchmaking_OnMatchmakingStopped) == 0x000001, "Wrong size on WidgetContainerMatchmaking_OnMatchmakingStopped");
static_assert(offsetof(WidgetContainerMatchmaking_OnMatchmakingStopped, MatchmakingType) == 0x000000, "Member 'WidgetContainerMatchmaking_OnMatchmakingStopped::MatchmakingType' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchmaking.IsMatchmakingCancelable
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchmaking_IsMatchmakingCancelable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchmaking_IsMatchmakingCancelable) == 0x000001, "Wrong alignment on WidgetContainerMatchmaking_IsMatchmakingCancelable");
static_assert(sizeof(WidgetContainerMatchmaking_IsMatchmakingCancelable) == 0x000001, "Wrong size on WidgetContainerMatchmaking_IsMatchmakingCancelable");
static_assert(offsetof(WidgetContainerMatchmaking_IsMatchmakingCancelable, ReturnValue) == 0x000000, "Member 'WidgetContainerMatchmaking_IsMatchmakingCancelable::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchmaking.IsMatchmakingStarted
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchmaking_IsMatchmakingStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchmaking_IsMatchmakingStarted) == 0x000001, "Wrong alignment on WidgetContainerMatchmaking_IsMatchmakingStarted");
static_assert(sizeof(WidgetContainerMatchmaking_IsMatchmakingStarted) == 0x000001, "Wrong size on WidgetContainerMatchmaking_IsMatchmakingStarted");
static_assert(offsetof(WidgetContainerMatchmaking_IsMatchmakingStarted, ReturnValue) == 0x000000, "Member 'WidgetContainerMatchmaking_IsMatchmakingStarted::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchOptions.OnPartyDataUpdated
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchOptions_OnPartyDataUpdated final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchOptions_OnPartyDataUpdated) == 0x000001, "Wrong alignment on WidgetContainerMatchOptions_OnPartyDataUpdated");
static_assert(sizeof(WidgetContainerMatchOptions_OnPartyDataUpdated) == 0x000001, "Wrong size on WidgetContainerMatchOptions_OnPartyDataUpdated");
static_assert(offsetof(WidgetContainerMatchOptions_OnPartyDataUpdated, bPartyStructureChanged) == 0x000000, "Member 'WidgetContainerMatchOptions_OnPartyDataUpdated::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchOptions.UpdateButtonsStates
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchOptions_UpdateButtonsStates final
{
public:
	ETWMatchmakingType                            InMatchmakingType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchOptions_UpdateButtonsStates) == 0x000001, "Wrong alignment on WidgetContainerMatchOptions_UpdateButtonsStates");
static_assert(sizeof(WidgetContainerMatchOptions_UpdateButtonsStates) == 0x000001, "Wrong size on WidgetContainerMatchOptions_UpdateButtonsStates");
static_assert(offsetof(WidgetContainerMatchOptions_UpdateButtonsStates, InMatchmakingType) == 0x000000, "Member 'WidgetContainerMatchOptions_UpdateButtonsStates::InMatchmakingType' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchScore.FillPlayerNames
// 0x0020 (0x0020 - 0x0000)
struct WidgetContainerMatchScore_FillPlayerNames final
{
public:
	class FString                                 Team0;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team1;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchScore_FillPlayerNames) == 0x000008, "Wrong alignment on WidgetContainerMatchScore_FillPlayerNames");
static_assert(sizeof(WidgetContainerMatchScore_FillPlayerNames) == 0x000020, "Wrong size on WidgetContainerMatchScore_FillPlayerNames");
static_assert(offsetof(WidgetContainerMatchScore_FillPlayerNames, Team0) == 0x000000, "Member 'WidgetContainerMatchScore_FillPlayerNames::Team0' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchScore_FillPlayerNames, Team1) == 0x000010, "Member 'WidgetContainerMatchScore_FillPlayerNames::Team1' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchScore.FillRoundAndLoopText
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerMatchScore_FillRoundAndLoopText final
{
public:
	int32                                         Round;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Loop;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchScore_FillRoundAndLoopText) == 0x000004, "Wrong alignment on WidgetContainerMatchScore_FillRoundAndLoopText");
static_assert(sizeof(WidgetContainerMatchScore_FillRoundAndLoopText) == 0x000008, "Wrong size on WidgetContainerMatchScore_FillRoundAndLoopText");
static_assert(offsetof(WidgetContainerMatchScore_FillRoundAndLoopText, Round) == 0x000000, "Member 'WidgetContainerMatchScore_FillRoundAndLoopText::Round' has a wrong offset!");
static_assert(offsetof(WidgetContainerMatchScore_FillRoundAndLoopText, Loop) == 0x000004, "Member 'WidgetContainerMatchScore_FillRoundAndLoopText::Loop' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchScore.GetTWCharacter
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerMatchScore_GetTWCharacter final
{
public:
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchScore_GetTWCharacter) == 0x000008, "Wrong alignment on WidgetContainerMatchScore_GetTWCharacter");
static_assert(sizeof(WidgetContainerMatchScore_GetTWCharacter) == 0x000008, "Wrong size on WidgetContainerMatchScore_GetTWCharacter");
static_assert(offsetof(WidgetContainerMatchScore_GetTWCharacter, ReturnValue) == 0x000000, "Member 'WidgetContainerMatchScore_GetTWCharacter::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchScore.GetTWGameState
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerMatchScore_GetTWGameState final
{
public:
	class ATimeWatchGameState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchScore_GetTWGameState) == 0x000008, "Wrong alignment on WidgetContainerMatchScore_GetTWGameState");
static_assert(sizeof(WidgetContainerMatchScore_GetTWGameState) == 0x000008, "Wrong size on WidgetContainerMatchScore_GetTWGameState");
static_assert(offsetof(WidgetContainerMatchScore_GetTWGameState, ReturnValue) == 0x000000, "Member 'WidgetContainerMatchScore_GetTWGameState::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchSettings.CloneCountSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerMatchSettings_CloneCountSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchSettings_CloneCountSelectionChanged) == 0x000008, "Wrong alignment on WidgetContainerMatchSettings_CloneCountSelectionChanged");
static_assert(sizeof(WidgetContainerMatchSettings_CloneCountSelectionChanged) == 0x000010, "Wrong size on WidgetContainerMatchSettings_CloneCountSelectionChanged");
static_assert(offsetof(WidgetContainerMatchSettings_CloneCountSelectionChanged, Value) == 0x000000, "Member 'WidgetContainerMatchSettings_CloneCountSelectionChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchSettings.HealingModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerMatchSettings_HealingModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchSettings_HealingModeChanged) == 0x000008, "Wrong alignment on WidgetContainerMatchSettings_HealingModeChanged");
static_assert(sizeof(WidgetContainerMatchSettings_HealingModeChanged) == 0x000010, "Wrong size on WidgetContainerMatchSettings_HealingModeChanged");
static_assert(offsetof(WidgetContainerMatchSettings_HealingModeChanged, Value) == 0x000000, "Member 'WidgetContainerMatchSettings_HealingModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchSettings.HealthPackModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerMatchSettings_HealthPackModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchSettings_HealthPackModeChanged) == 0x000008, "Wrong alignment on WidgetContainerMatchSettings_HealthPackModeChanged");
static_assert(sizeof(WidgetContainerMatchSettings_HealthPackModeChanged) == 0x000010, "Wrong size on WidgetContainerMatchSettings_HealthPackModeChanged");
static_assert(offsetof(WidgetContainerMatchSettings_HealthPackModeChanged, Value) == 0x000000, "Member 'WidgetContainerMatchSettings_HealthPackModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchSettings.MapSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerMatchSettings_MapSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchSettings_MapSelectionChanged) == 0x000008, "Wrong alignment on WidgetContainerMatchSettings_MapSelectionChanged");
static_assert(sizeof(WidgetContainerMatchSettings_MapSelectionChanged) == 0x000010, "Wrong size on WidgetContainerMatchSettings_MapSelectionChanged");
static_assert(offsetof(WidgetContainerMatchSettings_MapSelectionChanged, Value) == 0x000000, "Member 'WidgetContainerMatchSettings_MapSelectionChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchSettings.MatchScoreSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerMatchSettings_MatchScoreSelectionChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchSettings_MatchScoreSelectionChanged) == 0x000008, "Wrong alignment on WidgetContainerMatchSettings_MatchScoreSelectionChanged");
static_assert(sizeof(WidgetContainerMatchSettings_MatchScoreSelectionChanged) == 0x000010, "Wrong size on WidgetContainerMatchSettings_MatchScoreSelectionChanged");
static_assert(offsetof(WidgetContainerMatchSettings_MatchScoreSelectionChanged, Value) == 0x000000, "Member 'WidgetContainerMatchSettings_MatchScoreSelectionChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchSettings.OvertimeModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerMatchSettings_OvertimeModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchSettings_OvertimeModeChanged) == 0x000008, "Wrong alignment on WidgetContainerMatchSettings_OvertimeModeChanged");
static_assert(sizeof(WidgetContainerMatchSettings_OvertimeModeChanged) == 0x000010, "Wrong size on WidgetContainerMatchSettings_OvertimeModeChanged");
static_assert(offsetof(WidgetContainerMatchSettings_OvertimeModeChanged, Value) == 0x000000, "Member 'WidgetContainerMatchSettings_OvertimeModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchSettings.WeaponModeChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerMatchSettings_WeaponModeChanged final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchSettings_WeaponModeChanged) == 0x000008, "Wrong alignment on WidgetContainerMatchSettings_WeaponModeChanged");
static_assert(sizeof(WidgetContainerMatchSettings_WeaponModeChanged) == 0x000010, "Wrong size on WidgetContainerMatchSettings_WeaponModeChanged");
static_assert(offsetof(WidgetContainerMatchSettings_WeaponModeChanged, Value) == 0x000000, "Member 'WidgetContainerMatchSettings_WeaponModeChanged::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchTally.BP_OnStandardMatchResultFinished
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchTally_BP_OnStandardMatchResultFinished final
{
public:
	ETWMatchType                                  FinishedMatchType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchTally_BP_OnStandardMatchResultFinished) == 0x000001, "Wrong alignment on WidgetContainerMatchTally_BP_OnStandardMatchResultFinished");
static_assert(sizeof(WidgetContainerMatchTally_BP_OnStandardMatchResultFinished) == 0x000001, "Wrong size on WidgetContainerMatchTally_BP_OnStandardMatchResultFinished");
static_assert(offsetof(WidgetContainerMatchTally_BP_OnStandardMatchResultFinished, FinishedMatchType) == 0x000000, "Member 'WidgetContainerMatchTally_BP_OnStandardMatchResultFinished::FinishedMatchType' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchTally.EnableRematchButton
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchTally_EnableRematchButton final
{
public:
	bool                                          bIsButtonEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchTally_EnableRematchButton) == 0x000001, "Wrong alignment on WidgetContainerMatchTally_EnableRematchButton");
static_assert(sizeof(WidgetContainerMatchTally_EnableRematchButton) == 0x000001, "Wrong size on WidgetContainerMatchTally_EnableRematchButton");
static_assert(offsetof(WidgetContainerMatchTally_EnableRematchButton, bIsButtonEnabled) == 0x000000, "Member 'WidgetContainerMatchTally_EnableRematchButton::bIsButtonEnabled' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchTally.SetAnimateXPBar
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchTally_SetAnimateXPBar final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchTally_SetAnimateXPBar) == 0x000001, "Wrong alignment on WidgetContainerMatchTally_SetAnimateXPBar");
static_assert(sizeof(WidgetContainerMatchTally_SetAnimateXPBar) == 0x000001, "Wrong size on WidgetContainerMatchTally_SetAnimateXPBar");
static_assert(offsetof(WidgetContainerMatchTally_SetAnimateXPBar, Value) == 0x000000, "Member 'WidgetContainerMatchTally_SetAnimateXPBar::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerMatchTally.SetWantsRematchVisibility
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerMatchTally_SetWantsRematchVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerMatchTally_SetWantsRematchVisibility) == 0x000001, "Wrong alignment on WidgetContainerMatchTally_SetWantsRematchVisibility");
static_assert(sizeof(WidgetContainerMatchTally_SetWantsRematchVisibility) == 0x000001, "Wrong size on WidgetContainerMatchTally_SetWantsRematchVisibility");
static_assert(offsetof(WidgetContainerMatchTally_SetWantsRematchVisibility, IsVisible_0) == 0x000000, "Member 'WidgetContainerMatchTally_SetWantsRematchVisibility::IsVisible_0' has a wrong offset!");

// Function TimeWatch.WidgetContainerNews.OnNewsItemSelected
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerNews_OnNewsItemSelected final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerNews_OnNewsItemSelected) == 0x000004, "Wrong alignment on WidgetContainerNews_OnNewsItemSelected");
static_assert(sizeof(WidgetContainerNews_OnNewsItemSelected) == 0x000004, "Wrong size on WidgetContainerNews_OnNewsItemSelected");
static_assert(offsetof(WidgetContainerNews_OnNewsItemSelected, Index_0) == 0x000000, "Member 'WidgetContainerNews_OnNewsItemSelected::Index_0' has a wrong offset!");

// Function TimeWatch.WidgetContainerNotification.OnChallengeDataLoaded
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerNotification_OnChallengeDataLoaded final
{
public:
	class UTWChallengeEventData*                  ChallengeEventData;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerNotification_OnChallengeDataLoaded) == 0x000008, "Wrong alignment on WidgetContainerNotification_OnChallengeDataLoaded");
static_assert(sizeof(WidgetContainerNotification_OnChallengeDataLoaded) == 0x000008, "Wrong size on WidgetContainerNotification_OnChallengeDataLoaded");
static_assert(offsetof(WidgetContainerNotification_OnChallengeDataLoaded, ChallengeEventData) == 0x000000, "Member 'WidgetContainerNotification_OnChallengeDataLoaded::ChallengeEventData' has a wrong offset!");

// Function TimeWatch.WidgetContainerNotification.OnChallengeProgress
// 0x0020 (0x0020 - 0x0000)
struct WidgetContainerNotification_OnChallengeProgress final
{
public:
	class UTWChallengeEvent*                      ChallengeEvent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTWChallengeRule                       Rule;                                              // 0x0008(0x0014)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerNotification_OnChallengeProgress) == 0x000008, "Wrong alignment on WidgetContainerNotification_OnChallengeProgress");
static_assert(sizeof(WidgetContainerNotification_OnChallengeProgress) == 0x000020, "Wrong size on WidgetContainerNotification_OnChallengeProgress");
static_assert(offsetof(WidgetContainerNotification_OnChallengeProgress, ChallengeEvent) == 0x000000, "Member 'WidgetContainerNotification_OnChallengeProgress::ChallengeEvent' has a wrong offset!");
static_assert(offsetof(WidgetContainerNotification_OnChallengeProgress, Rule) == 0x000008, "Member 'WidgetContainerNotification_OnChallengeProgress::Rule' has a wrong offset!");

// Function TimeWatch.WidgetContainerNotification.OnNotificationFromChallenge
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerNotification_OnNotificationFromChallenge final
{
public:
	class UTWChallengeEvent*                      Challenge;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerNotification_OnNotificationFromChallenge) == 0x000008, "Wrong alignment on WidgetContainerNotification_OnNotificationFromChallenge");
static_assert(sizeof(WidgetContainerNotification_OnNotificationFromChallenge) == 0x000008, "Wrong size on WidgetContainerNotification_OnNotificationFromChallenge");
static_assert(offsetof(WidgetContainerNotification_OnNotificationFromChallenge, Challenge) == 0x000000, "Member 'WidgetContainerNotification_OnNotificationFromChallenge::Challenge' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerMatchIntro.ShowPlayerCard
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerPlayerMatchIntro_ShowPlayerCard final
{
public:
	class AFluxPlayerState*                       NewPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerMatchIntro_ShowPlayerCard) == 0x000008, "Wrong alignment on WidgetContainerPlayerMatchIntro_ShowPlayerCard");
static_assert(sizeof(WidgetContainerPlayerMatchIntro_ShowPlayerCard) == 0x000008, "Wrong size on WidgetContainerPlayerMatchIntro_ShowPlayerCard");
static_assert(offsetof(WidgetContainerPlayerMatchIntro_ShowPlayerCard, NewPlayerState) == 0x000000, "Member 'WidgetContainerPlayerMatchIntro_ShowPlayerCard::NewPlayerState' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.InitializePlayerProfileWidget
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerPlayerProfile_InitializePlayerProfileWidget final
{
public:
	class FString                                 InUserName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlayerXP;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerPlayerProfile_InitializePlayerProfileWidget) == 0x000008, "Wrong alignment on WidgetContainerPlayerProfile_InitializePlayerProfileWidget");
static_assert(sizeof(WidgetContainerPlayerProfile_InitializePlayerProfileWidget) == 0x000018, "Wrong size on WidgetContainerPlayerProfile_InitializePlayerProfileWidget");
static_assert(offsetof(WidgetContainerPlayerProfile_InitializePlayerProfileWidget, InUserName) == 0x000000, "Member 'WidgetContainerPlayerProfile_InitializePlayerProfileWidget::InUserName' has a wrong offset!");
static_assert(offsetof(WidgetContainerPlayerProfile_InitializePlayerProfileWidget, InPlayerXP) == 0x000010, "Member 'WidgetContainerPlayerProfile_InitializePlayerProfileWidget::InPlayerXP' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.OnLeaderboardPeriodChanged
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerPlayerProfile_OnLeaderboardPeriodChanged final
{
public:
	class FString                                 SelectedOption;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_OnLeaderboardPeriodChanged) == 0x000008, "Wrong alignment on WidgetContainerPlayerProfile_OnLeaderboardPeriodChanged");
static_assert(sizeof(WidgetContainerPlayerProfile_OnLeaderboardPeriodChanged) == 0x000010, "Wrong size on WidgetContainerPlayerProfile_OnLeaderboardPeriodChanged");
static_assert(offsetof(WidgetContainerPlayerProfile_OnLeaderboardPeriodChanged, SelectedOption) == 0x000000, "Member 'WidgetContainerPlayerProfile_OnLeaderboardPeriodChanged::SelectedOption' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.OnLeaderboardsRequestComplete
// 0x0050 (0x0050 - 0x0000)
struct WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNGDBackendGlobalLeaderboardEntry> LeaderboardEntries;                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FNGDBackendGlobalLeaderboardEntry      OwnEntry;                                          // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete) == 0x000008, "Wrong alignment on WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete");
static_assert(sizeof(WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete) == 0x000050, "Wrong size on WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete");
static_assert(offsetof(WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete, ErrorString) == 0x000008, "Member 'WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete, LeaderboardEntries) == 0x000018, "Member 'WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete::LeaderboardEntries' has a wrong offset!");
static_assert(offsetof(WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete, OwnEntry) == 0x000028, "Member 'WidgetContainerPlayerProfile_OnLeaderboardsRequestComplete::OwnEntry' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.OnScrolled
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerPlayerProfile_OnScrolled final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_OnScrolled) == 0x000004, "Wrong alignment on WidgetContainerPlayerProfile_OnScrolled");
static_assert(sizeof(WidgetContainerPlayerProfile_OnScrolled) == 0x000004, "Wrong size on WidgetContainerPlayerProfile_OnScrolled");
static_assert(offsetof(WidgetContainerPlayerProfile_OnScrolled, Value) == 0x000000, "Member 'WidgetContainerPlayerProfile_OnScrolled::Value' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.SetGamesWon
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerPlayerProfile_SetGamesWon final
{
public:
	int32                                         GamesWonInt;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_SetGamesWon) == 0x000004, "Wrong alignment on WidgetContainerPlayerProfile_SetGamesWon");
static_assert(sizeof(WidgetContainerPlayerProfile_SetGamesWon) == 0x000004, "Wrong size on WidgetContainerPlayerProfile_SetGamesWon");
static_assert(offsetof(WidgetContainerPlayerProfile_SetGamesWon, GamesWonInt) == 0x000000, "Member 'WidgetContainerPlayerProfile_SetGamesWon::GamesWonInt' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.SetHighestMMR
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerPlayerProfile_SetHighestMMR final
{
public:
	int32                                         HighestMMRInt;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_SetHighestMMR) == 0x000004, "Wrong alignment on WidgetContainerPlayerProfile_SetHighestMMR");
static_assert(sizeof(WidgetContainerPlayerProfile_SetHighestMMR) == 0x000004, "Wrong size on WidgetContainerPlayerProfile_SetHighestMMR");
static_assert(offsetof(WidgetContainerPlayerProfile_SetHighestMMR, HighestMMRInt) == 0x000000, "Member 'WidgetContainerPlayerProfile_SetHighestMMR::HighestMMRInt' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.SetKillRate
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerPlayerProfile_SetKillRate final
{
public:
	int32                                         KillRateInt;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_SetKillRate) == 0x000004, "Wrong alignment on WidgetContainerPlayerProfile_SetKillRate");
static_assert(sizeof(WidgetContainerPlayerProfile_SetKillRate) == 0x000004, "Wrong size on WidgetContainerPlayerProfile_SetKillRate");
static_assert(offsetof(WidgetContainerPlayerProfile_SetKillRate, KillRateInt) == 0x000000, "Member 'WidgetContainerPlayerProfile_SetKillRate::KillRateInt' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.SetPlayerTitleCalloutVisibility
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerPlayerProfile_SetPlayerTitleCalloutVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_SetPlayerTitleCalloutVisibility) == 0x000001, "Wrong alignment on WidgetContainerPlayerProfile_SetPlayerTitleCalloutVisibility");
static_assert(sizeof(WidgetContainerPlayerProfile_SetPlayerTitleCalloutVisibility) == 0x000001, "Wrong size on WidgetContainerPlayerProfile_SetPlayerTitleCalloutVisibility");
static_assert(offsetof(WidgetContainerPlayerProfile_SetPlayerTitleCalloutVisibility, NewVisibility) == 0x000000, "Member 'WidgetContainerPlayerProfile_SetPlayerTitleCalloutVisibility::NewVisibility' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.SetUserLevel
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerPlayerProfile_SetUserLevel final
{
public:
	int32                                         InCurrentXP;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_SetUserLevel) == 0x000004, "Wrong alignment on WidgetContainerPlayerProfile_SetUserLevel");
static_assert(sizeof(WidgetContainerPlayerProfile_SetUserLevel) == 0x000004, "Wrong size on WidgetContainerPlayerProfile_SetUserLevel");
static_assert(offsetof(WidgetContainerPlayerProfile_SetUserLevel, InCurrentXP) == 0x000000, "Member 'WidgetContainerPlayerProfile_SetUserLevel::InCurrentXP' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.SetUsername
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerPlayerProfile_SetUsername final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_SetUsername) == 0x000008, "Wrong alignment on WidgetContainerPlayerProfile_SetUsername");
static_assert(sizeof(WidgetContainerPlayerProfile_SetUsername) == 0x000010, "Wrong size on WidgetContainerPlayerProfile_SetUsername");
static_assert(offsetof(WidgetContainerPlayerProfile_SetUsername, Name_0) == 0x000000, "Member 'WidgetContainerPlayerProfile_SetUsername::Name_0' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.SetWinRatio
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerPlayerProfile_SetWinRatio final
{
public:
	int32                                         WinRateInt;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_SetWinRatio) == 0x000004, "Wrong alignment on WidgetContainerPlayerProfile_SetWinRatio");
static_assert(sizeof(WidgetContainerPlayerProfile_SetWinRatio) == 0x000004, "Wrong size on WidgetContainerPlayerProfile_SetWinRatio");
static_assert(offsetof(WidgetContainerPlayerProfile_SetWinRatio, WinRateInt) == 0x000000, "Member 'WidgetContainerPlayerProfile_SetWinRatio::WinRateInt' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerProfile.SetXPBarProgress
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerPlayerProfile_SetXPBarProgress final
{
public:
	int32                                         InCurrentXP;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerProfile_SetXPBarProgress) == 0x000004, "Wrong alignment on WidgetContainerPlayerProfile_SetXPBarProgress");
static_assert(sizeof(WidgetContainerPlayerProfile_SetXPBarProgress) == 0x000004, "Wrong size on WidgetContainerPlayerProfile_SetXPBarProgress");
static_assert(offsetof(WidgetContainerPlayerProfile_SetXPBarProgress, InCurrentXP) == 0x000000, "Member 'WidgetContainerPlayerProfile_SetXPBarProgress::InCurrentXP' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerTitleSelect.OnStyleClicked
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerPlayerTitleSelect_OnStyleClicked final
{
public:
	const class UTWItemDataAsset*                 SelectedStyleData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerTitleSelect_OnStyleClicked) == 0x000008, "Wrong alignment on WidgetContainerPlayerTitleSelect_OnStyleClicked");
static_assert(sizeof(WidgetContainerPlayerTitleSelect_OnStyleClicked) == 0x000008, "Wrong size on WidgetContainerPlayerTitleSelect_OnStyleClicked");
static_assert(offsetof(WidgetContainerPlayerTitleSelect_OnStyleClicked, SelectedStyleData) == 0x000000, "Member 'WidgetContainerPlayerTitleSelect_OnStyleClicked::SelectedStyleData' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlayerTitleSelect.TryEquipItem
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerPlayerTitleSelect_TryEquipItem final
{
public:
	const class UTWItemDataAsset*                 SelectedStyleData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlayerTitleSelect_TryEquipItem) == 0x000008, "Wrong alignment on WidgetContainerPlayerTitleSelect_TryEquipItem");
static_assert(sizeof(WidgetContainerPlayerTitleSelect_TryEquipItem) == 0x000008, "Wrong size on WidgetContainerPlayerTitleSelect_TryEquipItem");
static_assert(offsetof(WidgetContainerPlayerTitleSelect_TryEquipItem, SelectedStyleData) == 0x000000, "Member 'WidgetContainerPlayerTitleSelect_TryEquipItem::SelectedStyleData' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlaySelection.GoToMainMenu
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerPlaySelection_GoToMainMenu final
{
public:
	ETWMatchQueueType                             MatchmakingType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlaySelection_GoToMainMenu) == 0x000001, "Wrong alignment on WidgetContainerPlaySelection_GoToMainMenu");
static_assert(sizeof(WidgetContainerPlaySelection_GoToMainMenu) == 0x000001, "Wrong size on WidgetContainerPlaySelection_GoToMainMenu");
static_assert(offsetof(WidgetContainerPlaySelection_GoToMainMenu, MatchmakingType) == 0x000000, "Member 'WidgetContainerPlaySelection_GoToMainMenu::MatchmakingType' has a wrong offset!");

// Function TimeWatch.WidgetContainerPlaySelection.OnPartyDataUpdated
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerPlaySelection_OnPartyDataUpdated final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerPlaySelection_OnPartyDataUpdated) == 0x000001, "Wrong alignment on WidgetContainerPlaySelection_OnPartyDataUpdated");
static_assert(sizeof(WidgetContainerPlaySelection_OnPartyDataUpdated) == 0x000001, "Wrong size on WidgetContainerPlaySelection_OnPartyDataUpdated");
static_assert(offsetof(WidgetContainerPlaySelection_OnPartyDataUpdated, bPartyStructureChanged) == 0x000000, "Member 'WidgetContainerPlaySelection_OnPartyDataUpdated::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.WidgetContainerQuickChat.GetEntriesCount
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerQuickChat_GetEntriesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerQuickChat_GetEntriesCount) == 0x000004, "Wrong alignment on WidgetContainerQuickChat_GetEntriesCount");
static_assert(sizeof(WidgetContainerQuickChat_GetEntriesCount) == 0x000004, "Wrong size on WidgetContainerQuickChat_GetEntriesCount");
static_assert(offsetof(WidgetContainerQuickChat_GetEntriesCount, ReturnValue) == 0x000000, "Member 'WidgetContainerQuickChat_GetEntriesCount::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerRadialFeedback.AddRadialFeedback
// 0x001C (0x001C - 0x0000)
struct WidgetContainerRadialFeedback_AddRadialFeedback final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFeedbackType                                 FeedbackType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRadialFeedback_AddRadialFeedback) == 0x000004, "Wrong alignment on WidgetContainerRadialFeedback_AddRadialFeedback");
static_assert(sizeof(WidgetContainerRadialFeedback_AddRadialFeedback) == 0x00001C, "Wrong size on WidgetContainerRadialFeedback_AddRadialFeedback");
static_assert(offsetof(WidgetContainerRadialFeedback_AddRadialFeedback, HitDirection) == 0x000000, "Member 'WidgetContainerRadialFeedback_AddRadialFeedback::HitDirection' has a wrong offset!");
static_assert(offsetof(WidgetContainerRadialFeedback_AddRadialFeedback, FeedbackType) == 0x00000C, "Member 'WidgetContainerRadialFeedback_AddRadialFeedback::FeedbackType' has a wrong offset!");
static_assert(offsetof(WidgetContainerRadialFeedback_AddRadialFeedback, Location) == 0x000010, "Member 'WidgetContainerRadialFeedback_AddRadialFeedback::Location' has a wrong offset!");

// Function TimeWatch.WidgetContainerRadialFeedback.UpdateFeedback
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerRadialFeedback_UpdateFeedback final
{
public:
	class UWidget*                                HitWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRadialFeedback_UpdateFeedback) == 0x000008, "Wrong alignment on WidgetContainerRadialFeedback_UpdateFeedback");
static_assert(sizeof(WidgetContainerRadialFeedback_UpdateFeedback) == 0x000018, "Wrong size on WidgetContainerRadialFeedback_UpdateFeedback");
static_assert(offsetof(WidgetContainerRadialFeedback_UpdateFeedback, HitWidget) == 0x000000, "Member 'WidgetContainerRadialFeedback_UpdateFeedback::HitWidget' has a wrong offset!");
static_assert(offsetof(WidgetContainerRadialFeedback_UpdateFeedback, Progress) == 0x000008, "Member 'WidgetContainerRadialFeedback_UpdateFeedback::Progress' has a wrong offset!");
static_assert(offsetof(WidgetContainerRadialFeedback_UpdateFeedback, Alpha) == 0x00000C, "Member 'WidgetContainerRadialFeedback_UpdateFeedback::Alpha' has a wrong offset!");
static_assert(offsetof(WidgetContainerRadialFeedback_UpdateFeedback, Scale) == 0x000010, "Member 'WidgetContainerRadialFeedback_UpdateFeedback::Scale' has a wrong offset!");
static_assert(offsetof(WidgetContainerRadialFeedback_UpdateFeedback, Rotation) == 0x000014, "Member 'WidgetContainerRadialFeedback_UpdateFeedback::Rotation' has a wrong offset!");

// Function TimeWatch.WidgetContainerRedeemCode.OnPlayerDataUpdate
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerRedeemCode_OnPlayerDataUpdate final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRedeemCode_OnPlayerDataUpdate) == 0x000008, "Wrong alignment on WidgetContainerRedeemCode_OnPlayerDataUpdate");
static_assert(sizeof(WidgetContainerRedeemCode_OnPlayerDataUpdate) == 0x000018, "Wrong size on WidgetContainerRedeemCode_OnPlayerDataUpdate");
static_assert(offsetof(WidgetContainerRedeemCode_OnPlayerDataUpdate, bWasSuccessful) == 0x000000, "Member 'WidgetContainerRedeemCode_OnPlayerDataUpdate::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerRedeemCode_OnPlayerDataUpdate, ErrorString) == 0x000008, "Member 'WidgetContainerRedeemCode_OnPlayerDataUpdate::ErrorString' has a wrong offset!");

// Function TimeWatch.WidgetContainerRedeemCode.OnRedeemCodeResponseReceived
// 0x0028 (0x0028 - 0x0000)
struct WidgetContainerRedeemCode_OnRedeemCodeResponseReceived final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RedeemCodeResult;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDBackendReceivedRewards             RewardData;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRedeemCode_OnRedeemCodeResponseReceived) == 0x000008, "Wrong alignment on WidgetContainerRedeemCode_OnRedeemCodeResponseReceived");
static_assert(sizeof(WidgetContainerRedeemCode_OnRedeemCodeResponseReceived) == 0x000028, "Wrong size on WidgetContainerRedeemCode_OnRedeemCodeResponseReceived");
static_assert(offsetof(WidgetContainerRedeemCode_OnRedeemCodeResponseReceived, bWasSuccessful) == 0x000000, "Member 'WidgetContainerRedeemCode_OnRedeemCodeResponseReceived::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerRedeemCode_OnRedeemCodeResponseReceived, RedeemCodeResult) == 0x000008, "Member 'WidgetContainerRedeemCode_OnRedeemCodeResponseReceived::RedeemCodeResult' has a wrong offset!");
static_assert(offsetof(WidgetContainerRedeemCode_OnRedeemCodeResponseReceived, RewardData) == 0x000018, "Member 'WidgetContainerRedeemCode_OnRedeemCodeResponseReceived::RewardData' has a wrong offset!");

// Function TimeWatch.WidgetContainerReplayControl.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WidgetContainerReplayControl_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerReplayControl_OnGameStateChanged) == 0x000001, "Wrong alignment on WidgetContainerReplayControl_OnGameStateChanged");
static_assert(sizeof(WidgetContainerReplayControl_OnGameStateChanged) == 0x000002, "Wrong size on WidgetContainerReplayControl_OnGameStateChanged");
static_assert(offsetof(WidgetContainerReplayControl_OnGameStateChanged, OldState) == 0x000000, "Member 'WidgetContainerReplayControl_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(WidgetContainerReplayControl_OnGameStateChanged, NewState) == 0x000001, "Member 'WidgetContainerReplayControl_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.WidgetContainerReviveFeedback.OnGenericEventReceived
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerReviveFeedback_OnGenericEventReceived final
{
public:
	class UTimeWatchEvent*                        Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerReviveFeedback_OnGenericEventReceived) == 0x000008, "Wrong alignment on WidgetContainerReviveFeedback_OnGenericEventReceived");
static_assert(sizeof(WidgetContainerReviveFeedback_OnGenericEventReceived) == 0x000008, "Wrong size on WidgetContainerReviveFeedback_OnGenericEventReceived");
static_assert(offsetof(WidgetContainerReviveFeedback_OnGenericEventReceived, Event) == 0x000000, "Member 'WidgetContainerReviveFeedback_OnGenericEventReceived::Event' has a wrong offset!");

// Function TimeWatch.WidgetContainerRewardTrack.OnRewardItemClicked
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerRewardTrack_OnRewardItemClicked final
{
public:
	class UTWRewardWidget*                        ClickedRewardWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRewardTrack_OnRewardItemClicked) == 0x000008, "Wrong alignment on WidgetContainerRewardTrack_OnRewardItemClicked");
static_assert(sizeof(WidgetContainerRewardTrack_OnRewardItemClicked) == 0x000008, "Wrong size on WidgetContainerRewardTrack_OnRewardItemClicked");
static_assert(offsetof(WidgetContainerRewardTrack_OnRewardItemClicked, ClickedRewardWidget) == 0x000000, "Member 'WidgetContainerRewardTrack_OnRewardItemClicked::ClickedRewardWidget' has a wrong offset!");

// Function TimeWatch.WidgetContainerRewardTrack.OnRewardItemHovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerRewardTrack_OnRewardItemHovered final
{
public:
	class UTWRewardWidget*                        ClickedRewardWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRewardTrack_OnRewardItemHovered) == 0x000008, "Wrong alignment on WidgetContainerRewardTrack_OnRewardItemHovered");
static_assert(sizeof(WidgetContainerRewardTrack_OnRewardItemHovered) == 0x000008, "Wrong size on WidgetContainerRewardTrack_OnRewardItemHovered");
static_assert(offsetof(WidgetContainerRewardTrack_OnRewardItemHovered, ClickedRewardWidget) == 0x000000, "Member 'WidgetContainerRewardTrack_OnRewardItemHovered::ClickedRewardWidget' has a wrong offset!");

// Function TimeWatch.WidgetContainerRewardTrack.OnRewardItemUnhovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerRewardTrack_OnRewardItemUnhovered final
{
public:
	class UTWRewardWidget*                        ClickedRewardWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRewardTrack_OnRewardItemUnhovered) == 0x000008, "Wrong alignment on WidgetContainerRewardTrack_OnRewardItemUnhovered");
static_assert(sizeof(WidgetContainerRewardTrack_OnRewardItemUnhovered) == 0x000008, "Wrong size on WidgetContainerRewardTrack_OnRewardItemUnhovered");
static_assert(offsetof(WidgetContainerRewardTrack_OnRewardItemUnhovered, ClickedRewardWidget) == 0x000000, "Member 'WidgetContainerRewardTrack_OnRewardItemUnhovered::ClickedRewardWidget' has a wrong offset!");

// Function TimeWatch.WidgetContainerRewardTrack.OnRewardsScrolled
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerRewardTrack_OnRewardsScrolled final
{
public:
	int32                                         ScrollingDirection;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRewardTrack_OnRewardsScrolled) == 0x000004, "Wrong alignment on WidgetContainerRewardTrack_OnRewardsScrolled");
static_assert(sizeof(WidgetContainerRewardTrack_OnRewardsScrolled) == 0x000004, "Wrong size on WidgetContainerRewardTrack_OnRewardsScrolled");
static_assert(offsetof(WidgetContainerRewardTrack_OnRewardsScrolled, ScrollingDirection) == 0x000000, "Member 'WidgetContainerRewardTrack_OnRewardsScrolled::ScrollingDirection' has a wrong offset!");

// Function TimeWatch.WidgetContainerRewardTrack.ScrollItemIntoView
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerRewardTrack_ScrollItemIntoView final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRewardTrack_ScrollItemIntoView) == 0x000004, "Wrong alignment on WidgetContainerRewardTrack_ScrollItemIntoView");
static_assert(sizeof(WidgetContainerRewardTrack_ScrollItemIntoView) == 0x000004, "Wrong size on WidgetContainerRewardTrack_ScrollItemIntoView");
static_assert(offsetof(WidgetContainerRewardTrack_ScrollItemIntoView, InIndex) == 0x000000, "Member 'WidgetContainerRewardTrack_ScrollItemIntoView::InIndex' has a wrong offset!");

// Function TimeWatch.WidgetContainerRewardTrack.UpdateRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerRewardTrack_UpdateRemainingTime final
{
public:
	int32                                         RemainingMinutes;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRewardTrack_UpdateRemainingTime) == 0x000004, "Wrong alignment on WidgetContainerRewardTrack_UpdateRemainingTime");
static_assert(sizeof(WidgetContainerRewardTrack_UpdateRemainingTime) == 0x000004, "Wrong size on WidgetContainerRewardTrack_UpdateRemainingTime");
static_assert(offsetof(WidgetContainerRewardTrack_UpdateRemainingTime, RemainingMinutes) == 0x000000, "Member 'WidgetContainerRewardTrack_UpdateRemainingTime::RemainingMinutes' has a wrong offset!");

// Function TimeWatch.WidgetContainerRewardTrack.GetMainMenuHud
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerRewardTrack_GetMainMenuHud final
{
public:
	class AMainMenuHUD*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerRewardTrack_GetMainMenuHud) == 0x000008, "Wrong alignment on WidgetContainerRewardTrack_GetMainMenuHud");
static_assert(sizeof(WidgetContainerRewardTrack_GetMainMenuHud) == 0x000008, "Wrong size on WidgetContainerRewardTrack_GetMainMenuHud");
static_assert(offsetof(WidgetContainerRewardTrack_GetMainMenuHud, ReturnValue) == 0x000000, "Member 'WidgetContainerRewardTrack_GetMainMenuHud::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerSpectatorDisplay.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WidgetContainerSpectatorDisplay_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerSpectatorDisplay_OnGameStateChanged) == 0x000001, "Wrong alignment on WidgetContainerSpectatorDisplay_OnGameStateChanged");
static_assert(sizeof(WidgetContainerSpectatorDisplay_OnGameStateChanged) == 0x000002, "Wrong size on WidgetContainerSpectatorDisplay_OnGameStateChanged");
static_assert(offsetof(WidgetContainerSpectatorDisplay_OnGameStateChanged, OldState) == 0x000000, "Member 'WidgetContainerSpectatorDisplay_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(WidgetContainerSpectatorDisplay_OnGameStateChanged, NewState) == 0x000001, "Member 'WidgetContainerSpectatorDisplay_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.MicroTxnFinished
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerStore_MicroTxnFinished final
{
public:
	bool                                          bWasSucessful;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_MicroTxnFinished) == 0x000001, "Wrong alignment on WidgetContainerStore_MicroTxnFinished");
static_assert(sizeof(WidgetContainerStore_MicroTxnFinished) == 0x000001, "Wrong size on WidgetContainerStore_MicroTxnFinished");
static_assert(offsetof(WidgetContainerStore_MicroTxnFinished, bWasSucessful) == 0x000000, "Member 'WidgetContainerStore_MicroTxnFinished::bWasSucessful' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OnBuyItemComplete
// 0x0030 (0x0030 - 0x0000)
struct WidgetContainerStore_OnBuyItemComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SKU;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         newCoinsAmmount;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerStore_OnBuyItemComplete) == 0x000008, "Wrong alignment on WidgetContainerStore_OnBuyItemComplete");
static_assert(sizeof(WidgetContainerStore_OnBuyItemComplete) == 0x000030, "Wrong size on WidgetContainerStore_OnBuyItemComplete");
static_assert(offsetof(WidgetContainerStore_OnBuyItemComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerStore_OnBuyItemComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnBuyItemComplete, ErrorString) == 0x000008, "Member 'WidgetContainerStore_OnBuyItemComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnBuyItemComplete, SKU) == 0x000018, "Member 'WidgetContainerStore_OnBuyItemComplete::SKU' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnBuyItemComplete, newCoinsAmmount) == 0x000028, "Member 'WidgetContainerStore_OnBuyItemComplete::newCoinsAmmount' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OnLoadDailyStoreRequestComplete
// 0x0078 (0x0078 - 0x0000)
struct WidgetContainerStore_OnLoadDailyStoreRequestComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDBackendDailyStoreData              DailyStoreData;                                    // 0x0018(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_OnLoadDailyStoreRequestComplete) == 0x000008, "Wrong alignment on WidgetContainerStore_OnLoadDailyStoreRequestComplete");
static_assert(sizeof(WidgetContainerStore_OnLoadDailyStoreRequestComplete) == 0x000078, "Wrong size on WidgetContainerStore_OnLoadDailyStoreRequestComplete");
static_assert(offsetof(WidgetContainerStore_OnLoadDailyStoreRequestComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerStore_OnLoadDailyStoreRequestComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnLoadDailyStoreRequestComplete, ErrorString) == 0x000008, "Member 'WidgetContainerStore_OnLoadDailyStoreRequestComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnLoadDailyStoreRequestComplete, DailyStoreData) == 0x000018, "Member 'WidgetContainerStore_OnLoadDailyStoreRequestComplete::DailyStoreData' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OnLoadQuarkStoreRequestComplete
// 0x0068 (0x0068 - 0x0000)
struct WidgetContainerStore_OnLoadQuarkStoreRequestComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDBackendQuarkStoreData              QuarksStoreData;                                   // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_OnLoadQuarkStoreRequestComplete) == 0x000008, "Wrong alignment on WidgetContainerStore_OnLoadQuarkStoreRequestComplete");
static_assert(sizeof(WidgetContainerStore_OnLoadQuarkStoreRequestComplete) == 0x000068, "Wrong size on WidgetContainerStore_OnLoadQuarkStoreRequestComplete");
static_assert(offsetof(WidgetContainerStore_OnLoadQuarkStoreRequestComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerStore_OnLoadQuarkStoreRequestComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnLoadQuarkStoreRequestComplete, ErrorString) == 0x000008, "Member 'WidgetContainerStore_OnLoadQuarkStoreRequestComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnLoadQuarkStoreRequestComplete, QuarksStoreData) == 0x000018, "Member 'WidgetContainerStore_OnLoadQuarkStoreRequestComplete::QuarksStoreData' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OnQuarkBundleClicked
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerStore_OnQuarkBundleClicked final
{
public:
	class FString                                 SlotID;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_OnQuarkBundleClicked) == 0x000008, "Wrong alignment on WidgetContainerStore_OnQuarkBundleClicked");
static_assert(sizeof(WidgetContainerStore_OnQuarkBundleClicked) == 0x000010, "Wrong size on WidgetContainerStore_OnQuarkBundleClicked");
static_assert(offsetof(WidgetContainerStore_OnQuarkBundleClicked, SlotID) == 0x000000, "Member 'WidgetContainerStore_OnQuarkBundleClicked::SlotID' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OnSlotClicked
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerStore_OnSlotClicked final
{
public:
	class FString                                 SlotID;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_OnSlotClicked) == 0x000008, "Wrong alignment on WidgetContainerStore_OnSlotClicked");
static_assert(sizeof(WidgetContainerStore_OnSlotClicked) == 0x000010, "Wrong size on WidgetContainerStore_OnSlotClicked");
static_assert(offsetof(WidgetContainerStore_OnSlotClicked, SlotID) == 0x000000, "Member 'WidgetContainerStore_OnSlotClicked::SlotID' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OnSlotHovered
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerStore_OnSlotHovered final
{
public:
	class FString                                 SlotID;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_OnSlotHovered) == 0x000008, "Wrong alignment on WidgetContainerStore_OnSlotHovered");
static_assert(sizeof(WidgetContainerStore_OnSlotHovered) == 0x000010, "Wrong size on WidgetContainerStore_OnSlotHovered");
static_assert(offsetof(WidgetContainerStore_OnSlotHovered, SlotID) == 0x000000, "Member 'WidgetContainerStore_OnSlotHovered::SlotID' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OnSteamMicroTxnReceived
// 0x0040 (0x0040 - 0x0000)
struct WidgetContainerStore_OnSteamMicroTxnReceived final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Authorized;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OrderId;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionId;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNGDBackendReceivedRewards             RewardData;                                        // 0x0030(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_OnSteamMicroTxnReceived) == 0x000008, "Wrong alignment on WidgetContainerStore_OnSteamMicroTxnReceived");
static_assert(sizeof(WidgetContainerStore_OnSteamMicroTxnReceived) == 0x000040, "Wrong size on WidgetContainerStore_OnSteamMicroTxnReceived");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnReceived, bWasSuccessful) == 0x000000, "Member 'WidgetContainerStore_OnSteamMicroTxnReceived::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnReceived, ErrorString) == 0x000008, "Member 'WidgetContainerStore_OnSteamMicroTxnReceived::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnReceived, Authorized) == 0x000018, "Member 'WidgetContainerStore_OnSteamMicroTxnReceived::Authorized' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnReceived, OrderId) == 0x00001C, "Member 'WidgetContainerStore_OnSteamMicroTxnReceived::OrderId' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnReceived, TransactionId) == 0x000020, "Member 'WidgetContainerStore_OnSteamMicroTxnReceived::TransactionId' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnReceived, RewardData) == 0x000030, "Member 'WidgetContainerStore_OnSteamMicroTxnReceived::RewardData' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OnSteamMicroTxnStart
// 0x0030 (0x0030 - 0x0000)
struct WidgetContainerStore_OnSteamMicroTxnStart final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrderId;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TransactionId;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_OnSteamMicroTxnStart) == 0x000008, "Wrong alignment on WidgetContainerStore_OnSteamMicroTxnStart");
static_assert(sizeof(WidgetContainerStore_OnSteamMicroTxnStart) == 0x000030, "Wrong size on WidgetContainerStore_OnSteamMicroTxnStart");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnStart, bWasSuccessful) == 0x000000, "Member 'WidgetContainerStore_OnSteamMicroTxnStart::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnStart, ErrorString) == 0x000008, "Member 'WidgetContainerStore_OnSteamMicroTxnStart::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnStart, OrderId) == 0x000018, "Member 'WidgetContainerStore_OnSteamMicroTxnStart::OrderId' has a wrong offset!");
static_assert(offsetof(WidgetContainerStore_OnSteamMicroTxnStart, TransactionId) == 0x000020, "Member 'WidgetContainerStore_OnSteamMicroTxnStart::TransactionId' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.OpenPremiumPopup
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerStore_OpenPremiumPopup final
{
public:
	class FText                                   PopupTitle;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_OpenPremiumPopup) == 0x000008, "Wrong alignment on WidgetContainerStore_OpenPremiumPopup");
static_assert(sizeof(WidgetContainerStore_OpenPremiumPopup) == 0x000018, "Wrong size on WidgetContainerStore_OpenPremiumPopup");
static_assert(offsetof(WidgetContainerStore_OpenPremiumPopup, PopupTitle) == 0x000000, "Member 'WidgetContainerStore_OpenPremiumPopup::PopupTitle' has a wrong offset!");

// Function TimeWatch.WidgetContainerStore.GetMainMenuHud
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerStore_GetMainMenuHud final
{
public:
	class AMainMenuHUD*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerStore_GetMainMenuHud) == 0x000008, "Wrong alignment on WidgetContainerStore_GetMainMenuHud");
static_assert(sizeof(WidgetContainerStore_GetMainMenuHud) == 0x000008, "Wrong size on WidgetContainerStore_GetMainMenuHud");
static_assert(offsetof(WidgetContainerStore_GetMainMenuHud, ReturnValue) == 0x000000, "Member 'WidgetContainerStore_GetMainMenuHud::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerTeamsInfo.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WidgetContainerTeamsInfo_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerTeamsInfo_OnGameStateChanged) == 0x000001, "Wrong alignment on WidgetContainerTeamsInfo_OnGameStateChanged");
static_assert(sizeof(WidgetContainerTeamsInfo_OnGameStateChanged) == 0x000002, "Wrong size on WidgetContainerTeamsInfo_OnGameStateChanged");
static_assert(offsetof(WidgetContainerTeamsInfo_OnGameStateChanged, OldState) == 0x000000, "Member 'WidgetContainerTeamsInfo_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(WidgetContainerTeamsInfo_OnGameStateChanged, NewState) == 0x000001, "Member 'WidgetContainerTeamsInfo_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.WidgetContainerTipNotification.OnHideEnd
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerTipNotification_OnHideEnd final
{
public:
	class UWidgetTipNotification*                 NotificationToRemove;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerTipNotification_OnHideEnd) == 0x000008, "Wrong alignment on WidgetContainerTipNotification_OnHideEnd");
static_assert(sizeof(WidgetContainerTipNotification_OnHideEnd) == 0x000008, "Wrong size on WidgetContainerTipNotification_OnHideEnd");
static_assert(offsetof(WidgetContainerTipNotification_OnHideEnd, NotificationToRemove) == 0x000000, "Member 'WidgetContainerTipNotification_OnHideEnd::NotificationToRemove' has a wrong offset!");

// Function TimeWatch.WidgetContainerTipNotification.ShowNotification
// 0x0058 (0x0058 - 0x0000)
struct WidgetContainerTipNotification_ShowNotification final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 NotificationID;                                    // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowPriority;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxExpiration;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetTipNotification*                 ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerTipNotification_ShowNotification) == 0x000008, "Wrong alignment on WidgetContainerTipNotification_ShowNotification");
static_assert(sizeof(WidgetContainerTipNotification_ShowNotification) == 0x000058, "Wrong size on WidgetContainerTipNotification_ShowNotification");
static_assert(offsetof(WidgetContainerTipNotification_ShowNotification, Title) == 0x000000, "Member 'WidgetContainerTipNotification_ShowNotification::Title' has a wrong offset!");
static_assert(offsetof(WidgetContainerTipNotification_ShowNotification, Description) == 0x000018, "Member 'WidgetContainerTipNotification_ShowNotification::Description' has a wrong offset!");
static_assert(offsetof(WidgetContainerTipNotification_ShowNotification, NotificationID) == 0x000030, "Member 'WidgetContainerTipNotification_ShowNotification::NotificationID' has a wrong offset!");
static_assert(offsetof(WidgetContainerTipNotification_ShowNotification, ShowPriority) == 0x000040, "Member 'WidgetContainerTipNotification_ShowNotification::ShowPriority' has a wrong offset!");
static_assert(offsetof(WidgetContainerTipNotification_ShowNotification, Duration) == 0x000044, "Member 'WidgetContainerTipNotification_ShowNotification::Duration' has a wrong offset!");
static_assert(offsetof(WidgetContainerTipNotification_ShowNotification, MaxExpiration) == 0x000048, "Member 'WidgetContainerTipNotification_ShowNotification::MaxExpiration' has a wrong offset!");
static_assert(offsetof(WidgetContainerTipNotification_ShowNotification, ReturnValue) == 0x000050, "Member 'WidgetContainerTipNotification_ShowNotification::ReturnValue' has a wrong offset!");

// Function TimeWatch.WidgetContainerTraining.OnPartyDataUpdated
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerTraining_OnPartyDataUpdated final
{
public:
	bool                                          bPartyStructureChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerTraining_OnPartyDataUpdated) == 0x000001, "Wrong alignment on WidgetContainerTraining_OnPartyDataUpdated");
static_assert(sizeof(WidgetContainerTraining_OnPartyDataUpdated) == 0x000001, "Wrong size on WidgetContainerTraining_OnPartyDataUpdated");
static_assert(offsetof(WidgetContainerTraining_OnPartyDataUpdated, bPartyStructureChanged) == 0x000000, "Member 'WidgetContainerTraining_OnPartyDataUpdated::bPartyStructureChanged' has a wrong offset!");

// Function TimeWatch.WidgetContainerTraining.OnSetRegistryResponseReceived
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerTraining_OnSetRegistryResponseReceived final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Result;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerTraining_OnSetRegistryResponseReceived) == 0x000008, "Wrong alignment on WidgetContainerTraining_OnSetRegistryResponseReceived");
static_assert(sizeof(WidgetContainerTraining_OnSetRegistryResponseReceived) == 0x000018, "Wrong size on WidgetContainerTraining_OnSetRegistryResponseReceived");
static_assert(offsetof(WidgetContainerTraining_OnSetRegistryResponseReceived, bWasSuccessful) == 0x000000, "Member 'WidgetContainerTraining_OnSetRegistryResponseReceived::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerTraining_OnSetRegistryResponseReceived, Result) == 0x000008, "Member 'WidgetContainerTraining_OnSetRegistryResponseReceived::Result' has a wrong offset!");

// Function TimeWatch.WidgetContainerTraining.OnTutorialEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerTraining_OnTutorialEntryClicked final
{
public:
	class UTWTutorialEntryWidget*                 TutorialEntryClicked;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerTraining_OnTutorialEntryClicked) == 0x000008, "Wrong alignment on WidgetContainerTraining_OnTutorialEntryClicked");
static_assert(sizeof(WidgetContainerTraining_OnTutorialEntryClicked) == 0x000008, "Wrong size on WidgetContainerTraining_OnTutorialEntryClicked");
static_assert(offsetof(WidgetContainerTraining_OnTutorialEntryClicked, TutorialEntryClicked) == 0x000000, "Member 'WidgetContainerTraining_OnTutorialEntryClicked::TutorialEntryClicked' has a wrong offset!");

// Function TimeWatch.WidgetContainerWatermarkNDA.OnLoginComplete
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerWatermarkNDA_OnLoginComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWatermarkNDA_OnLoginComplete) == 0x000008, "Wrong alignment on WidgetContainerWatermarkNDA_OnLoginComplete");
static_assert(sizeof(WidgetContainerWatermarkNDA_OnLoginComplete) == 0x000018, "Wrong size on WidgetContainerWatermarkNDA_OnLoginComplete");
static_assert(offsetof(WidgetContainerWatermarkNDA_OnLoginComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerWatermarkNDA_OnLoginComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerWatermarkNDA_OnLoginComplete, ErrorString) == 0x000008, "Member 'WidgetContainerWatermarkNDA_OnLoginComplete::ErrorString' has a wrong offset!");

// Function TimeWatch.WidgetContainerWatermarkNDA.SetUsername
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerWatermarkNDA_SetUsername final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWatermarkNDA_SetUsername) == 0x000008, "Wrong alignment on WidgetContainerWatermarkNDA_SetUsername");
static_assert(sizeof(WidgetContainerWatermarkNDA_SetUsername) == 0x000010, "Wrong size on WidgetContainerWatermarkNDA_SetUsername");
static_assert(offsetof(WidgetContainerWatermarkNDA_SetUsername, Name_0) == 0x000000, "Member 'WidgetContainerWatermarkNDA_SetUsername::Name_0' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponCustomization.OnBuyWeaponSkinComplete
// 0x0030 (0x0030 - 0x0000)
struct WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SKU;                                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         newCoinsAmmount;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete) == 0x000008, "Wrong alignment on WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete");
static_assert(sizeof(WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete) == 0x000030, "Wrong size on WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete");
static_assert(offsetof(WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete, bWasSuccessful) == 0x000000, "Member 'WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete, ErrorString) == 0x000008, "Member 'WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete::ErrorString' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete, SKU) == 0x000018, "Member 'WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete::SKU' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete, newCoinsAmmount) == 0x000028, "Member 'WidgetContainerWeaponCustomization_OnBuyWeaponSkinComplete::newCoinsAmmount' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponCustomization.OnStyleClicked
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerWeaponCustomization_OnStyleClicked final
{
public:
	const class UTWItemDataAsset*                 SelectedStyleData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponCustomization_OnStyleClicked) == 0x000008, "Wrong alignment on WidgetContainerWeaponCustomization_OnStyleClicked");
static_assert(sizeof(WidgetContainerWeaponCustomization_OnStyleClicked) == 0x000008, "Wrong size on WidgetContainerWeaponCustomization_OnStyleClicked");
static_assert(offsetof(WidgetContainerWeaponCustomization_OnStyleClicked, SelectedStyleData) == 0x000000, "Member 'WidgetContainerWeaponCustomization_OnStyleClicked::SelectedStyleData' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponCustomization.OnStyleHovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerWeaponCustomization_OnStyleHovered final
{
public:
	const class UTWItemDataAsset*                 SelectedStyleData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponCustomization_OnStyleHovered) == 0x000008, "Wrong alignment on WidgetContainerWeaponCustomization_OnStyleHovered");
static_assert(sizeof(WidgetContainerWeaponCustomization_OnStyleHovered) == 0x000008, "Wrong size on WidgetContainerWeaponCustomization_OnStyleHovered");
static_assert(offsetof(WidgetContainerWeaponCustomization_OnStyleHovered, SelectedStyleData) == 0x000000, "Member 'WidgetContainerWeaponCustomization_OnStyleHovered::SelectedStyleData' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponCustomization.TryEquipItem
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerWeaponCustomization_TryEquipItem final
{
public:
	const class UTWItemDataAsset*                 SelectedStyleData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponCustomization_TryEquipItem) == 0x000008, "Wrong alignment on WidgetContainerWeaponCustomization_TryEquipItem");
static_assert(sizeof(WidgetContainerWeaponCustomization_TryEquipItem) == 0x000008, "Wrong size on WidgetContainerWeaponCustomization_TryEquipItem");
static_assert(offsetof(WidgetContainerWeaponCustomization_TryEquipItem, SelectedStyleData) == 0x000000, "Member 'WidgetContainerWeaponCustomization_TryEquipItem::SelectedStyleData' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponSelection.OnSlotSelected
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerWeaponSelection_OnSlotSelected final
{
public:
	class FString                                 SlotSKU;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponSelection_OnSlotSelected) == 0x000008, "Wrong alignment on WidgetContainerWeaponSelection_OnSlotSelected");
static_assert(sizeof(WidgetContainerWeaponSelection_OnSlotSelected) == 0x000010, "Wrong size on WidgetContainerWeaponSelection_OnSlotSelected");
static_assert(offsetof(WidgetContainerWeaponSelection_OnSlotSelected, SlotSKU) == 0x000000, "Member 'WidgetContainerWeaponSelection_OnSlotSelected::SlotSKU' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponSight.BP_PlayHideSightAnim
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerWeaponSight_BP_PlayHideSightAnim final
{
public:
	class ATimeWatchCharacter*                    TWChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFirearm*                               Firearm;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerWeaponSight_BP_PlayHideSightAnim) == 0x000008, "Wrong alignment on WidgetContainerWeaponSight_BP_PlayHideSightAnim");
static_assert(sizeof(WidgetContainerWeaponSight_BP_PlayHideSightAnim) == 0x000018, "Wrong size on WidgetContainerWeaponSight_BP_PlayHideSightAnim");
static_assert(offsetof(WidgetContainerWeaponSight_BP_PlayHideSightAnim, TWChar) == 0x000000, "Member 'WidgetContainerWeaponSight_BP_PlayHideSightAnim::TWChar' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponSight_BP_PlayHideSightAnim, Firearm) == 0x000008, "Member 'WidgetContainerWeaponSight_BP_PlayHideSightAnim::Firearm' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponSight_BP_PlayHideSightAnim, Progress) == 0x000010, "Member 'WidgetContainerWeaponSight_BP_PlayHideSightAnim::Progress' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponSight.BP_PlaySightAnim
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerWeaponSight_BP_PlaySightAnim final
{
public:
	class ATimeWatchCharacter*                    TWChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFirearm*                               Firearm;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerWeaponSight_BP_PlaySightAnim) == 0x000008, "Wrong alignment on WidgetContainerWeaponSight_BP_PlaySightAnim");
static_assert(sizeof(WidgetContainerWeaponSight_BP_PlaySightAnim) == 0x000018, "Wrong size on WidgetContainerWeaponSight_BP_PlaySightAnim");
static_assert(offsetof(WidgetContainerWeaponSight_BP_PlaySightAnim, TWChar) == 0x000000, "Member 'WidgetContainerWeaponSight_BP_PlaySightAnim::TWChar' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponSight_BP_PlaySightAnim, Firearm) == 0x000008, "Member 'WidgetContainerWeaponSight_BP_PlaySightAnim::Firearm' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponSight_BP_PlaySightAnim, Progress) == 0x000010, "Member 'WidgetContainerWeaponSight_BP_PlaySightAnim::Progress' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponSight.BP_ResetWidget
// 0x0018 (0x0018 - 0x0000)
struct WidgetContainerWeaponSight_BP_ResetWidget final
{
public:
	class ATimeWatchCharacter*                    TWChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFirearm*                               Firearm;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetMesh;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetContainerWeaponSight_BP_ResetWidget) == 0x000008, "Wrong alignment on WidgetContainerWeaponSight_BP_ResetWidget");
static_assert(sizeof(WidgetContainerWeaponSight_BP_ResetWidget) == 0x000018, "Wrong size on WidgetContainerWeaponSight_BP_ResetWidget");
static_assert(offsetof(WidgetContainerWeaponSight_BP_ResetWidget, TWChar) == 0x000000, "Member 'WidgetContainerWeaponSight_BP_ResetWidget::TWChar' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponSight_BP_ResetWidget, Firearm) == 0x000008, "Member 'WidgetContainerWeaponSight_BP_ResetWidget::Firearm' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponSight_BP_ResetWidget, ResetMesh) == 0x000010, "Member 'WidgetContainerWeaponSight_BP_ResetWidget::ResetMesh' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponSight.RegisterCharacter
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerWeaponSight_RegisterCharacter final
{
public:
	class ATimeWatchCharacter*                    TWChar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponSight_RegisterCharacter) == 0x000008, "Wrong alignment on WidgetContainerWeaponSight_RegisterCharacter");
static_assert(sizeof(WidgetContainerWeaponSight_RegisterCharacter) == 0x000008, "Wrong size on WidgetContainerWeaponSight_RegisterCharacter");
static_assert(offsetof(WidgetContainerWeaponSight_RegisterCharacter, TWChar) == 0x000000, "Member 'WidgetContainerWeaponSight_RegisterCharacter::TWChar' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.BP_OnWeaponSelected
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerWeaponStatus_BP_OnWeaponSelected final
{
public:
	int32                                         SelectedWeaponIndex;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_BP_OnWeaponSelected) == 0x000004, "Wrong alignment on WidgetContainerWeaponStatus_BP_OnWeaponSelected");
static_assert(sizeof(WidgetContainerWeaponStatus_BP_OnWeaponSelected) == 0x000004, "Wrong size on WidgetContainerWeaponStatus_BP_OnWeaponSelected");
static_assert(offsetof(WidgetContainerWeaponStatus_BP_OnWeaponSelected, SelectedWeaponIndex) == 0x000000, "Member 'WidgetContainerWeaponStatus_BP_OnWeaponSelected::SelectedWeaponIndex' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.BP_PlayCollapseToBottomAnimation
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerWeaponStatus_BP_PlayCollapseToBottomAnimation final
{
public:
	float                                         FromTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_BP_PlayCollapseToBottomAnimation) == 0x000004, "Wrong alignment on WidgetContainerWeaponStatus_BP_PlayCollapseToBottomAnimation");
static_assert(sizeof(WidgetContainerWeaponStatus_BP_PlayCollapseToBottomAnimation) == 0x000004, "Wrong size on WidgetContainerWeaponStatus_BP_PlayCollapseToBottomAnimation");
static_assert(offsetof(WidgetContainerWeaponStatus_BP_PlayCollapseToBottomAnimation, FromTime) == 0x000000, "Member 'WidgetContainerWeaponStatus_BP_PlayCollapseToBottomAnimation::FromTime' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WidgetContainerWeaponStatus_OnGameStateChanged final
{
public:
	EFluxCapacitorStates                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFluxCapacitorStates                          NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_OnGameStateChanged) == 0x000001, "Wrong alignment on WidgetContainerWeaponStatus_OnGameStateChanged");
static_assert(sizeof(WidgetContainerWeaponStatus_OnGameStateChanged) == 0x000002, "Wrong size on WidgetContainerWeaponStatus_OnGameStateChanged");
static_assert(offsetof(WidgetContainerWeaponStatus_OnGameStateChanged, OldState) == 0x000000, "Member 'WidgetContainerWeaponStatus_OnGameStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponStatus_OnGameStateChanged, NewState) == 0x000001, "Member 'WidgetContainerWeaponStatus_OnGameStateChanged::NewState' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.OnReset
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerWeaponStatus_OnReset final
{
public:
	class ATimeWatchCharacter*                    OwnerTWCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_OnReset) == 0x000008, "Wrong alignment on WidgetContainerWeaponStatus_OnReset");
static_assert(sizeof(WidgetContainerWeaponStatus_OnReset) == 0x000008, "Wrong size on WidgetContainerWeaponStatus_OnReset");
static_assert(offsetof(WidgetContainerWeaponStatus_OnReset, OwnerTWCharacter) == 0x000000, "Member 'WidgetContainerWeaponStatus_OnReset::OwnerTWCharacter' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.OnWeaponDrawed
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerWeaponStatus_OnWeaponDrawed final
{
public:
	class ATemporalWeapon*                        TWWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATemporalWeapon*                        HoldTWWeapon;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_OnWeaponDrawed) == 0x000008, "Wrong alignment on WidgetContainerWeaponStatus_OnWeaponDrawed");
static_assert(sizeof(WidgetContainerWeaponStatus_OnWeaponDrawed) == 0x000010, "Wrong size on WidgetContainerWeaponStatus_OnWeaponDrawed");
static_assert(offsetof(WidgetContainerWeaponStatus_OnWeaponDrawed, TWWeapon) == 0x000000, "Member 'WidgetContainerWeaponStatus_OnWeaponDrawed::TWWeapon' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponStatus_OnWeaponDrawed, HoldTWWeapon) == 0x000008, "Member 'WidgetContainerWeaponStatus_OnWeaponDrawed::HoldTWWeapon' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.OnWeaponSelected
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerWeaponStatus_OnWeaponSelected final
{
public:
	int32                                         WeaponIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_OnWeaponSelected) == 0x000004, "Wrong alignment on WidgetContainerWeaponStatus_OnWeaponSelected");
static_assert(sizeof(WidgetContainerWeaponStatus_OnWeaponSelected) == 0x000004, "Wrong size on WidgetContainerWeaponStatus_OnWeaponSelected");
static_assert(offsetof(WidgetContainerWeaponStatus_OnWeaponSelected, WeaponIndex) == 0x000000, "Member 'WidgetContainerWeaponStatus_OnWeaponSelected::WeaponIndex' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.SetDesiredWeapon
// 0x0004 (0x0004 - 0x0000)
struct WidgetContainerWeaponStatus_SetDesiredWeapon final
{
public:
	int32                                         DesiredWeaponIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_SetDesiredWeapon) == 0x000004, "Wrong alignment on WidgetContainerWeaponStatus_SetDesiredWeapon");
static_assert(sizeof(WidgetContainerWeaponStatus_SetDesiredWeapon) == 0x000004, "Wrong size on WidgetContainerWeaponStatus_SetDesiredWeapon");
static_assert(offsetof(WidgetContainerWeaponStatus_SetDesiredWeapon, DesiredWeaponIndex) == 0x000000, "Member 'WidgetContainerWeaponStatus_SetDesiredWeapon::DesiredWeaponIndex' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.SetWeaponImageType
// 0x0010 (0x0010 - 0x0000)
struct WidgetContainerWeaponStatus_SetWeaponImageType final
{
public:
	EWeaponIconType                               WeaponIconType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATemporalWeapon*                        TemporalWeapon;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_SetWeaponImageType) == 0x000008, "Wrong alignment on WidgetContainerWeaponStatus_SetWeaponImageType");
static_assert(sizeof(WidgetContainerWeaponStatus_SetWeaponImageType) == 0x000010, "Wrong size on WidgetContainerWeaponStatus_SetWeaponImageType");
static_assert(offsetof(WidgetContainerWeaponStatus_SetWeaponImageType, WeaponIconType) == 0x000000, "Member 'WidgetContainerWeaponStatus_SetWeaponImageType::WeaponIconType' has a wrong offset!");
static_assert(offsetof(WidgetContainerWeaponStatus_SetWeaponImageType, TemporalWeapon) == 0x000008, "Member 'WidgetContainerWeaponStatus_SetWeaponImageType::TemporalWeapon' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.SetWeaponsImageType
// 0x0001 (0x0001 - 0x0000)
struct WidgetContainerWeaponStatus_SetWeaponsImageType final
{
public:
	EWeaponIconType                               WeaponIconType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_SetWeaponsImageType) == 0x000001, "Wrong alignment on WidgetContainerWeaponStatus_SetWeaponsImageType");
static_assert(sizeof(WidgetContainerWeaponStatus_SetWeaponsImageType) == 0x000001, "Wrong size on WidgetContainerWeaponStatus_SetWeaponsImageType");
static_assert(offsetof(WidgetContainerWeaponStatus_SetWeaponsImageType, WeaponIconType) == 0x000000, "Member 'WidgetContainerWeaponStatus_SetWeaponsImageType::WeaponIconType' has a wrong offset!");

// Function TimeWatch.WidgetContainerWeaponStatus.GetTimeWatchOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct WidgetContainerWeaponStatus_GetTimeWatchOwnerCharacter final
{
public:
	class ATimeWatchCharacter*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetContainerWeaponStatus_GetTimeWatchOwnerCharacter) == 0x000008, "Wrong alignment on WidgetContainerWeaponStatus_GetTimeWatchOwnerCharacter");
static_assert(sizeof(WidgetContainerWeaponStatus_GetTimeWatchOwnerCharacter) == 0x000008, "Wrong size on WidgetContainerWeaponStatus_GetTimeWatchOwnerCharacter");
static_assert(offsetof(WidgetContainerWeaponStatus_GetTimeWatchOwnerCharacter, ReturnValue) == 0x000000, "Member 'WidgetContainerWeaponStatus_GetTimeWatchOwnerCharacter::ReturnValue' has a wrong offset!");

}

