#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Impact_Laser_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Impact_Laser_Base.BP_Impact_Laser_Base_C
// 0x0060 (0x0278 - 0x0218)
class ABP_Impact_Laser_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0218(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_LaserImpact;                                    // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SphereColor;                                       // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ParticlesColor;                                    // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Impact_Laser_Base(int32 EntryPoint);
	void ReceiveBeginPlay();
	void StartVFX();
	void StopVFX();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Impact_Laser_Base_C">();
	}
	static class ABP_Impact_Laser_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Impact_Laser_Base_C>();
	}
};
static_assert(alignof(ABP_Impact_Laser_Base_C) == 0x000008, "Wrong alignment on ABP_Impact_Laser_Base_C");
static_assert(sizeof(ABP_Impact_Laser_Base_C) == 0x000278, "Wrong size on ABP_Impact_Laser_Base_C");
static_assert(offsetof(ABP_Impact_Laser_Base_C, UberGraphFrame) == 0x000218, "Member 'ABP_Impact_Laser_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Impact_Laser_Base_C, PointLight) == 0x000220, "Member 'ABP_Impact_Laser_Base_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Impact_Laser_Base_C, Sphere) == 0x000228, "Member 'ABP_Impact_Laser_Base_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Impact_Laser_Base_C, PS_LaserImpact) == 0x000230, "Member 'ABP_Impact_Laser_Base_C::PS_LaserImpact' has a wrong offset!");
static_assert(offsetof(ABP_Impact_Laser_Base_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_Impact_Laser_Base_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Impact_Laser_Base_C, DynamicMaterial) == 0x000240, "Member 'ABP_Impact_Laser_Base_C::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Impact_Laser_Base_C, LightColor) == 0x000248, "Member 'ABP_Impact_Laser_Base_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_Impact_Laser_Base_C, SphereColor) == 0x000258, "Member 'ABP_Impact_Laser_Base_C::SphereColor' has a wrong offset!");
static_assert(offsetof(ABP_Impact_Laser_Base_C, ParticlesColor) == 0x000268, "Member 'ABP_Impact_Laser_Base_C::ParticlesColor' has a wrong offset!");

}

