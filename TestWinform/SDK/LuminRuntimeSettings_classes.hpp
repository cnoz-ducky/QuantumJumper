#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LuminRuntimeSettings

#include "Basic.hpp"

#include "LuminRuntimeSettings_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class LuminRuntimeSettings.LuminRuntimeSettings
// 0x0100 (0x0128 - 0x0028)
class ULuminRuntimeSettings final : public UObject
{
public:
	class FString                                 PackageName;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApplicationDisplayName;                            // 0x0038(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsScreensApp;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELuminFrameTimingHint                         FrameTimingHint;                                   // 0x0049(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProtectedContent;                                 // 0x004A(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMobileRendering;                               // 0x004B(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVulkan;                                        // 0x004C(0x0001)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilePath                              Certificate;                                       // 0x0050(0x0010)(Edit, Config, GlobalConfig, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         IconModelPath;                                     // 0x0060(0x0010)(Edit, Config, GlobalConfig, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         IconPortalPath;                                    // 0x0070(0x0010)(Edit, Config, GlobalConfig, NativeAccessSpecifierPublic)
	int32                                         VersionCode;                                       // 0x0080(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumAPILevel;                                   // 0x0084(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ELuminPrivilege>                       AppPrivileges;                                     // 0x0088(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLuminComponentSubElement>      ExtraComponentSubElements;                         // 0x0098(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLuminComponentElement>         ExtraComponentElements;                            // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class FString                                 SpatializationPlugin;                              // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReverbPlugin;                                      // 0x00C8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OcclusionPlugin;                                   // 0x00D8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundCueCookQualityIndex;                          // 0x00E8(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveDebugInfo;                                  // 0x00EC(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         VulkanValidationLayerLibs;                         // 0x00F0(0x0010)(Edit, Config, GlobalConfig, NativeAccessSpecifierPublic)
	bool                                          bFrameVignette;                                    // 0x0100(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x27];                                     // 0x0101(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LuminRuntimeSettings">();
	}
	static class ULuminRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULuminRuntimeSettings>();
	}
};
static_assert(alignof(ULuminRuntimeSettings) == 0x000008, "Wrong alignment on ULuminRuntimeSettings");
static_assert(sizeof(ULuminRuntimeSettings) == 0x000128, "Wrong size on ULuminRuntimeSettings");
static_assert(offsetof(ULuminRuntimeSettings, PackageName) == 0x000028, "Member 'ULuminRuntimeSettings::PackageName' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, ApplicationDisplayName) == 0x000038, "Member 'ULuminRuntimeSettings::ApplicationDisplayName' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, bIsScreensApp) == 0x000048, "Member 'ULuminRuntimeSettings::bIsScreensApp' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, FrameTimingHint) == 0x000049, "Member 'ULuminRuntimeSettings::FrameTimingHint' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, bProtectedContent) == 0x00004A, "Member 'ULuminRuntimeSettings::bProtectedContent' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, bUseMobileRendering) == 0x00004B, "Member 'ULuminRuntimeSettings::bUseMobileRendering' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, bUseVulkan) == 0x00004C, "Member 'ULuminRuntimeSettings::bUseVulkan' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, Certificate) == 0x000050, "Member 'ULuminRuntimeSettings::Certificate' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, IconModelPath) == 0x000060, "Member 'ULuminRuntimeSettings::IconModelPath' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, IconPortalPath) == 0x000070, "Member 'ULuminRuntimeSettings::IconPortalPath' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, VersionCode) == 0x000080, "Member 'ULuminRuntimeSettings::VersionCode' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, MinimumAPILevel) == 0x000084, "Member 'ULuminRuntimeSettings::MinimumAPILevel' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, AppPrivileges) == 0x000088, "Member 'ULuminRuntimeSettings::AppPrivileges' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, ExtraComponentSubElements) == 0x000098, "Member 'ULuminRuntimeSettings::ExtraComponentSubElements' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, ExtraComponentElements) == 0x0000A8, "Member 'ULuminRuntimeSettings::ExtraComponentElements' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, SpatializationPlugin) == 0x0000B8, "Member 'ULuminRuntimeSettings::SpatializationPlugin' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, ReverbPlugin) == 0x0000C8, "Member 'ULuminRuntimeSettings::ReverbPlugin' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, OcclusionPlugin) == 0x0000D8, "Member 'ULuminRuntimeSettings::OcclusionPlugin' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, SoundCueCookQualityIndex) == 0x0000E8, "Member 'ULuminRuntimeSettings::SoundCueCookQualityIndex' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, bRemoveDebugInfo) == 0x0000EC, "Member 'ULuminRuntimeSettings::bRemoveDebugInfo' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, VulkanValidationLayerLibs) == 0x0000F0, "Member 'ULuminRuntimeSettings::VulkanValidationLayerLibs' has a wrong offset!");
static_assert(offsetof(ULuminRuntimeSettings, bFrameVignette) == 0x000100, "Member 'ULuminRuntimeSettings::bFrameVignette' has a wrong offset!");

}

