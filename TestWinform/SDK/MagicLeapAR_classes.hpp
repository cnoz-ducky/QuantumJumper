#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapAR

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MagicLeapAR_structs.hpp"
#include "Engine_classes.hpp"
#include "MagicLeapPlanes_structs.hpp"
#include "AugmentedReality_classes.hpp"


namespace SDK
{

// Class MagicLeapAR.LuminARUObjectManager
// 0x0100 (0x0128 - 0x0028)
class ULuminARUObjectManager final : public UObject
{
public:
	TArray<class UARPin*>                         AllAnchors;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0xF0];                                      // 0x0038(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LuminARUObjectManager">();
	}
	static class ULuminARUObjectManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULuminARUObjectManager>();
	}
};
static_assert(alignof(ULuminARUObjectManager) == 0x000008, "Wrong alignment on ULuminARUObjectManager");
static_assert(sizeof(ULuminARUObjectManager) == 0x000128, "Wrong size on ULuminARUObjectManager");
static_assert(offsetof(ULuminARUObjectManager, AllAnchors) == 0x000028, "Member 'ULuminARUObjectManager::AllAnchors' has a wrong offset!");

// Class MagicLeapAR.LuminARSessionFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class ULuminARSessionFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void StartLuminARSession(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class ULuminARSessionConfig* Configuration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LuminARSessionFunctionLibrary">();
	}
	static class ULuminARSessionFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULuminARSessionFunctionLibrary>();
	}
};
static_assert(alignof(ULuminARSessionFunctionLibrary) == 0x000008, "Wrong alignment on ULuminARSessionFunctionLibrary");
static_assert(sizeof(ULuminARSessionFunctionLibrary) == 0x000028, "Wrong size on ULuminARSessionFunctionLibrary");

// Class MagicLeapAR.LuminARFrameFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class ULuminARFrameFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetLightEstimation(struct FLuminARLightEstimate* OutLightEstimate);
	static ELuminARTrackingState GetTrackingState();
	static bool LuminARLineTrace(class UObject* WorldContextObject, const struct FVector2D& ScreenPosition, const TSet<ELuminARLineTraceChannel>& TraceChannels, TArray<struct FARTraceResult>* OutHitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LuminARFrameFunctionLibrary">();
	}
	static class ULuminARFrameFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULuminARFrameFunctionLibrary>();
	}
};
static_assert(alignof(ULuminARFrameFunctionLibrary) == 0x000008, "Wrong alignment on ULuminARFrameFunctionLibrary");
static_assert(sizeof(ULuminARFrameFunctionLibrary) == 0x000028, "Wrong size on ULuminARFrameFunctionLibrary");

// Class MagicLeapAR.LuminARSessionConfig
// 0x0030 (0x00D8 - 0x00A8)
class ULuminARSessionConfig final : public UARSessionConfig
{
public:
	int32                                         MaxPlaneQueryResults;                              // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPlaneArea;                                      // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bArbitraryOrientationPlaneDetection;               // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaneSearchExtents;                                // 0x00B4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EMagicLeapPlaneQueryFlags>             PlaneQueryFlags;                                   // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDiscardZeroExtentPlanes;                          // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LuminARSessionConfig">();
	}
	static class ULuminARSessionConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULuminARSessionConfig>();
	}
};
static_assert(alignof(ULuminARSessionConfig) == 0x000008, "Wrong alignment on ULuminARSessionConfig");
static_assert(sizeof(ULuminARSessionConfig) == 0x0000D8, "Wrong size on ULuminARSessionConfig");
static_assert(offsetof(ULuminARSessionConfig, MaxPlaneQueryResults) == 0x0000A8, "Member 'ULuminARSessionConfig::MaxPlaneQueryResults' has a wrong offset!");
static_assert(offsetof(ULuminARSessionConfig, MinPlaneArea) == 0x0000AC, "Member 'ULuminARSessionConfig::MinPlaneArea' has a wrong offset!");
static_assert(offsetof(ULuminARSessionConfig, bArbitraryOrientationPlaneDetection) == 0x0000B0, "Member 'ULuminARSessionConfig::bArbitraryOrientationPlaneDetection' has a wrong offset!");
static_assert(offsetof(ULuminARSessionConfig, PlaneSearchExtents) == 0x0000B4, "Member 'ULuminARSessionConfig::PlaneSearchExtents' has a wrong offset!");
static_assert(offsetof(ULuminARSessionConfig, PlaneQueryFlags) == 0x0000C0, "Member 'ULuminARSessionConfig::PlaneQueryFlags' has a wrong offset!");
static_assert(offsetof(ULuminARSessionConfig, bDiscardZeroExtentPlanes) == 0x0000D0, "Member 'ULuminARSessionConfig::bDiscardZeroExtentPlanes' has a wrong offset!");

}

