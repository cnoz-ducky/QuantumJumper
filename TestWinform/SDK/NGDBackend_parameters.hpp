#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NGDBackend

#include "Basic.hpp"

#include "NGDBackend_structs.hpp"


namespace SDK::Params
{

// Function NGDBackend.NGDBackendAccount.AwsLatencyFake
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_AwsLatencyFake final
{
public:
	class FString                                 TargetRegion;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_AwsLatencyFake) == 0x000008, "Wrong alignment on NGDBackendAccount_AwsLatencyFake");
static_assert(sizeof(NGDBackendAccount_AwsLatencyFake) == 0x000010, "Wrong size on NGDBackendAccount_AwsLatencyFake");
static_assert(offsetof(NGDBackendAccount_AwsLatencyFake, TargetRegion) == 0x000000, "Member 'NGDBackendAccount_AwsLatencyFake::TargetRegion' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.CheckGameSessionStatusResponse
// 0x0018 (0x0018 - 0x0000)
struct NGDBackendAccount_CheckGameSessionStatusResponse final
{
public:
	class FString                                 BackendResult;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENGDBackendGameSessionResult                  ExpectedResult;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDBackendAccount_CheckGameSessionStatusResponse) == 0x000008, "Wrong alignment on NGDBackendAccount_CheckGameSessionStatusResponse");
static_assert(sizeof(NGDBackendAccount_CheckGameSessionStatusResponse) == 0x000018, "Wrong size on NGDBackendAccount_CheckGameSessionStatusResponse");
static_assert(offsetof(NGDBackendAccount_CheckGameSessionStatusResponse, BackendResult) == 0x000000, "Member 'NGDBackendAccount_CheckGameSessionStatusResponse::BackendResult' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_CheckGameSessionStatusResponse, ExpectedResult) == 0x000010, "Member 'NGDBackendAccount_CheckGameSessionStatusResponse::ExpectedResult' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_CheckGameSessionStatusResponse, ReturnValue) == 0x000011, "Member 'NGDBackendAccount_CheckGameSessionStatusResponse::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.CheckMatchmakingStatusResponse
// 0x0018 (0x0018 - 0x0000)
struct NGDBackendAccount_CheckMatchmakingStatusResponse final
{
public:
	class FString                                 BackendResult;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENGDBackendMatchmakingResult                  ExpectedResult;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDBackendAccount_CheckMatchmakingStatusResponse) == 0x000008, "Wrong alignment on NGDBackendAccount_CheckMatchmakingStatusResponse");
static_assert(sizeof(NGDBackendAccount_CheckMatchmakingStatusResponse) == 0x000018, "Wrong size on NGDBackendAccount_CheckMatchmakingStatusResponse");
static_assert(offsetof(NGDBackendAccount_CheckMatchmakingStatusResponse, BackendResult) == 0x000000, "Member 'NGDBackendAccount_CheckMatchmakingStatusResponse::BackendResult' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_CheckMatchmakingStatusResponse, ExpectedResult) == 0x000010, "Member 'NGDBackendAccount_CheckMatchmakingStatusResponse::ExpectedResult' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_CheckMatchmakingStatusResponse, ReturnValue) == 0x000011, "Member 'NGDBackendAccount_CheckMatchmakingStatusResponse::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.GameSessionPlacementAutoconnectStart
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_GameSessionPlacementAutoconnectStart final
{
public:
	class FString                                 PlacementId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_GameSessionPlacementAutoconnectStart) == 0x000008, "Wrong alignment on NGDBackendAccount_GameSessionPlacementAutoconnectStart");
static_assert(sizeof(NGDBackendAccount_GameSessionPlacementAutoconnectStart) == 0x000010, "Wrong size on NGDBackendAccount_GameSessionPlacementAutoconnectStart");
static_assert(offsetof(NGDBackendAccount_GameSessionPlacementAutoconnectStart, PlacementId) == 0x000000, "Member 'NGDBackendAccount_GameSessionPlacementAutoconnectStart::PlacementId' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.JoinTournament
// 0x0004 (0x0004 - 0x0000)
struct NGDBackendAccount_JoinTournament final
{
public:
	int32                                         AttemptIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_JoinTournament) == 0x000004, "Wrong alignment on NGDBackendAccount_JoinTournament");
static_assert(sizeof(NGDBackendAccount_JoinTournament) == 0x000004, "Wrong size on NGDBackendAccount_JoinTournament");
static_assert(offsetof(NGDBackendAccount_JoinTournament, AttemptIndex) == 0x000000, "Member 'NGDBackendAccount_JoinTournament::AttemptIndex' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.MatchmakingAutoconnectStart
// 0x0030 (0x0030 - 0x0000)
struct NGDBackendAccount_MatchmakingAutoconnectStart final
{
public:
	class FString                                 RuleName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientGameVersion;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastPlayedMap;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_MatchmakingAutoconnectStart) == 0x000008, "Wrong alignment on NGDBackendAccount_MatchmakingAutoconnectStart");
static_assert(sizeof(NGDBackendAccount_MatchmakingAutoconnectStart) == 0x000030, "Wrong size on NGDBackendAccount_MatchmakingAutoconnectStart");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStart, RuleName) == 0x000000, "Member 'NGDBackendAccount_MatchmakingAutoconnectStart::RuleName' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStart, ClientGameVersion) == 0x000010, "Member 'NGDBackendAccount_MatchmakingAutoconnectStart::ClientGameVersion' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStart, LastPlayedMap) == 0x000020, "Member 'NGDBackendAccount_MatchmakingAutoconnectStart::LastPlayedMap' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.MatchmakingAutoconnectStartWithLobby
// 0x0060 (0x0060 - 0x0000)
struct NGDBackendAccount_MatchmakingAutoconnectStartWithLobby final
{
public:
	class FString                                 QueueName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientGameVersion;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastPlayedMap;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyRuleName;                                     // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchData;                                         // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_MatchmakingAutoconnectStartWithLobby) == 0x000008, "Wrong alignment on NGDBackendAccount_MatchmakingAutoconnectStartWithLobby");
static_assert(sizeof(NGDBackendAccount_MatchmakingAutoconnectStartWithLobby) == 0x000060, "Wrong size on NGDBackendAccount_MatchmakingAutoconnectStartWithLobby");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStartWithLobby, QueueName) == 0x000000, "Member 'NGDBackendAccount_MatchmakingAutoconnectStartWithLobby::QueueName' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStartWithLobby, LobbyID) == 0x000010, "Member 'NGDBackendAccount_MatchmakingAutoconnectStartWithLobby::LobbyID' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStartWithLobby, ClientGameVersion) == 0x000020, "Member 'NGDBackendAccount_MatchmakingAutoconnectStartWithLobby::ClientGameVersion' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStartWithLobby, LastPlayedMap) == 0x000030, "Member 'NGDBackendAccount_MatchmakingAutoconnectStartWithLobby::LastPlayedMap' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStartWithLobby, LobbyRuleName) == 0x000040, "Member 'NGDBackendAccount_MatchmakingAutoconnectStartWithLobby::LobbyRuleName' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStartWithLobby, MatchData) == 0x000050, "Member 'NGDBackendAccount_MatchmakingAutoconnectStartWithLobby::MatchData' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.MatchmakingAutoconnectStartWithTicket
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_MatchmakingAutoconnectStartWithTicket final
{
public:
	class FString                                 MatchmakingTicketId;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_MatchmakingAutoconnectStartWithTicket) == 0x000008, "Wrong alignment on NGDBackendAccount_MatchmakingAutoconnectStartWithTicket");
static_assert(sizeof(NGDBackendAccount_MatchmakingAutoconnectStartWithTicket) == 0x000010, "Wrong size on NGDBackendAccount_MatchmakingAutoconnectStartWithTicket");
static_assert(offsetof(NGDBackendAccount_MatchmakingAutoconnectStartWithTicket, MatchmakingTicketId) == 0x000000, "Member 'NGDBackendAccount_MatchmakingAutoconnectStartWithTicket::MatchmakingTicketId' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.MatchmakingStart
// 0x0030 (0x0030 - 0x0000)
struct NGDBackendAccount_MatchmakingStart final
{
public:
	class FString                                 RuleName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientGameVersion;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastPlayedMap;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_MatchmakingStart) == 0x000008, "Wrong alignment on NGDBackendAccount_MatchmakingStart");
static_assert(sizeof(NGDBackendAccount_MatchmakingStart) == 0x000030, "Wrong size on NGDBackendAccount_MatchmakingStart");
static_assert(offsetof(NGDBackendAccount_MatchmakingStart, RuleName) == 0x000000, "Member 'NGDBackendAccount_MatchmakingStart::RuleName' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingStart, ClientGameVersion) == 0x000010, "Member 'NGDBackendAccount_MatchmakingStart::ClientGameVersion' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_MatchmakingStart, LastPlayedMap) == 0x000020, "Member 'NGDBackendAccount_MatchmakingStart::LastPlayedMap' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.RequestDailyStoreBuy
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_RequestDailyStoreBuy final
{
public:
	class FString                                 SKU;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_RequestDailyStoreBuy) == 0x000008, "Wrong alignment on NGDBackendAccount_RequestDailyStoreBuy");
static_assert(sizeof(NGDBackendAccount_RequestDailyStoreBuy) == 0x000010, "Wrong size on NGDBackendAccount_RequestDailyStoreBuy");
static_assert(offsetof(NGDBackendAccount_RequestDailyStoreBuy, SKU) == 0x000000, "Member 'NGDBackendAccount_RequestDailyStoreBuy::SKU' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.RequestGlobalLeaderboards
// 0x0048 (0x0048 - 0x0000)
struct NGDBackendAccount_RequestGlobalLeaderboards final
{
public:
	int32                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stop;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoardType;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchType;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamType;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Period;                                            // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_RequestGlobalLeaderboards) == 0x000008, "Wrong alignment on NGDBackendAccount_RequestGlobalLeaderboards");
static_assert(sizeof(NGDBackendAccount_RequestGlobalLeaderboards) == 0x000048, "Wrong size on NGDBackendAccount_RequestGlobalLeaderboards");
static_assert(offsetof(NGDBackendAccount_RequestGlobalLeaderboards, Start) == 0x000000, "Member 'NGDBackendAccount_RequestGlobalLeaderboards::Start' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_RequestGlobalLeaderboards, Stop) == 0x000004, "Member 'NGDBackendAccount_RequestGlobalLeaderboards::Stop' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_RequestGlobalLeaderboards, BoardType) == 0x000008, "Member 'NGDBackendAccount_RequestGlobalLeaderboards::BoardType' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_RequestGlobalLeaderboards, MatchType) == 0x000018, "Member 'NGDBackendAccount_RequestGlobalLeaderboards::MatchType' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_RequestGlobalLeaderboards, TeamType) == 0x000028, "Member 'NGDBackendAccount_RequestGlobalLeaderboards::TeamType' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_RequestGlobalLeaderboards, Period) == 0x000038, "Member 'NGDBackendAccount_RequestGlobalLeaderboards::Period' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.SetImpostorServerAddress
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_SetImpostorServerAddress final
{
public:
	class FString                                 NewImpostorServerAddress;                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_SetImpostorServerAddress) == 0x000008, "Wrong alignment on NGDBackendAccount_SetImpostorServerAddress");
static_assert(sizeof(NGDBackendAccount_SetImpostorServerAddress) == 0x000010, "Wrong size on NGDBackendAccount_SetImpostorServerAddress");
static_assert(offsetof(NGDBackendAccount_SetImpostorServerAddress, NewImpostorServerAddress) == 0x000000, "Member 'NGDBackendAccount_SetImpostorServerAddress::NewImpostorServerAddress' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.GetAccountTicket
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_GetAccountTicket final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_GetAccountTicket) == 0x000008, "Wrong alignment on NGDBackendAccount_GetAccountTicket");
static_assert(sizeof(NGDBackendAccount_GetAccountTicket) == 0x000010, "Wrong size on NGDBackendAccount_GetAccountTicket");
static_assert(offsetof(NGDBackendAccount_GetAccountTicket, ReturnValue) == 0x000000, "Member 'NGDBackendAccount_GetAccountTicket::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_GetPlayerName) == 0x000008, "Wrong alignment on NGDBackendAccount_GetPlayerName");
static_assert(sizeof(NGDBackendAccount_GetPlayerName) == 0x000010, "Wrong size on NGDBackendAccount_GetPlayerName");
static_assert(offsetof(NGDBackendAccount_GetPlayerName, ReturnValue) == 0x000000, "Member 'NGDBackendAccount_GetPlayerName::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.GetSavedUserName
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_GetSavedUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_GetSavedUserName) == 0x000008, "Wrong alignment on NGDBackendAccount_GetSavedUserName");
static_assert(sizeof(NGDBackendAccount_GetSavedUserName) == 0x000010, "Wrong size on NGDBackendAccount_GetSavedUserName");
static_assert(offsetof(NGDBackendAccount_GetSavedUserName, ReturnValue) == 0x000000, "Member 'NGDBackendAccount_GetSavedUserName::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.GetUserAvatar
// 0x0008 (0x0008 - 0x0000)
struct NGDBackendAccount_GetUserAvatar final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_GetUserAvatar) == 0x000008, "Wrong alignment on NGDBackendAccount_GetUserAvatar");
static_assert(sizeof(NGDBackendAccount_GetUserAvatar) == 0x000008, "Wrong size on NGDBackendAccount_GetUserAvatar");
static_assert(offsetof(NGDBackendAccount_GetUserAvatar, ReturnValue) == 0x000000, "Member 'NGDBackendAccount_GetUserAvatar::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.GetUserId
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendAccount_GetUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_GetUserId) == 0x000008, "Wrong alignment on NGDBackendAccount_GetUserId");
static_assert(sizeof(NGDBackendAccount_GetUserId) == 0x000010, "Wrong size on NGDBackendAccount_GetUserId");
static_assert(offsetof(NGDBackendAccount_GetUserId, ReturnValue) == 0x000000, "Member 'NGDBackendAccount_GetUserId::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.GetWalletBalance
// 0x0018 (0x0018 - 0x0000)
struct NGDBackendAccount_GetWalletBalance final
{
public:
	class FString                                 Currency;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NGDBackendAccount_GetWalletBalance) == 0x000008, "Wrong alignment on NGDBackendAccount_GetWalletBalance");
static_assert(sizeof(NGDBackendAccount_GetWalletBalance) == 0x000018, "Wrong size on NGDBackendAccount_GetWalletBalance");
static_assert(offsetof(NGDBackendAccount_GetWalletBalance, Currency) == 0x000000, "Member 'NGDBackendAccount_GetWalletBalance::Currency' has a wrong offset!");
static_assert(offsetof(NGDBackendAccount_GetWalletBalance, ReturnValue) == 0x000010, "Member 'NGDBackendAccount_GetWalletBalance::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct NGDBackendAccount_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_IsLoggedIn) == 0x000001, "Wrong alignment on NGDBackendAccount_IsLoggedIn");
static_assert(sizeof(NGDBackendAccount_IsLoggedIn) == 0x000001, "Wrong size on NGDBackendAccount_IsLoggedIn");
static_assert(offsetof(NGDBackendAccount_IsLoggedIn, ReturnValue) == 0x000000, "Member 'NGDBackendAccount_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendAccount.IsMatchmaking
// 0x0001 (0x0001 - 0x0000)
struct NGDBackendAccount_IsMatchmaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendAccount_IsMatchmaking) == 0x000001, "Wrong alignment on NGDBackendAccount_IsMatchmaking");
static_assert(sizeof(NGDBackendAccount_IsMatchmaking) == 0x000001, "Wrong size on NGDBackendAccount_IsMatchmaking");
static_assert(offsetof(NGDBackendAccount_IsMatchmaking, ReturnValue) == 0x000000, "Member 'NGDBackendAccount_IsMatchmaking::ReturnValue' has a wrong offset!");

// Function NGDBackend.NGDBackendLobby.InvitePlayerToTeam
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendLobby_InvitePlayerToTeam final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendLobby_InvitePlayerToTeam) == 0x000008, "Wrong alignment on NGDBackendLobby_InvitePlayerToTeam");
static_assert(sizeof(NGDBackendLobby_InvitePlayerToTeam) == 0x000010, "Wrong size on NGDBackendLobby_InvitePlayerToTeam");
static_assert(offsetof(NGDBackendLobby_InvitePlayerToTeam, UserId) == 0x000000, "Member 'NGDBackendLobby_InvitePlayerToTeam::UserId' has a wrong offset!");

// Function NGDBackend.NGDBackendLobby.StartLobby
// 0x0010 (0x0010 - 0x0000)
struct NGDBackendLobby_StartLobby final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendLobby_StartLobby) == 0x000008, "Wrong alignment on NGDBackendLobby_StartLobby");
static_assert(sizeof(NGDBackendLobby_StartLobby) == 0x000010, "Wrong size on NGDBackendLobby_StartLobby");
static_assert(offsetof(NGDBackendLobby_StartLobby, UserName) == 0x000000, "Member 'NGDBackendLobby_StartLobby::UserName' has a wrong offset!");

// Function NGDBackend.NGDBackendLobby.IsTeamOwner
// 0x0001 (0x0001 - 0x0000)
struct NGDBackendLobby_IsTeamOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NGDBackendLobby_IsTeamOwner) == 0x000001, "Wrong alignment on NGDBackendLobby_IsTeamOwner");
static_assert(sizeof(NGDBackendLobby_IsTeamOwner) == 0x000001, "Wrong size on NGDBackendLobby_IsTeamOwner");
static_assert(offsetof(NGDBackendLobby_IsTeamOwner, ReturnValue) == 0x000000, "Member 'NGDBackendLobby_IsTeamOwner::ReturnValue' has a wrong offset!");

}

