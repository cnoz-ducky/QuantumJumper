#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tutorial_Target_BP2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Tutorial_Target_BP2.Tutorial_Target_BP2_C
// 0x0010 (0x0238 - 0x0228)
class ATutorial_Target_BP2_C final : public AStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          TargetShot;                                        // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsChallenge;                                       // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0x2];                                      // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastShootTime;                                     // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Tutorial_Target_BP2(int32 EntryPoint);
	void SetTargetShoot(bool NewShoot);
	void BndEvt__StaticMeshComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnImpactBP(class AActor* Victim);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Tutorial_Target_BP2_C">();
	}
	static class ATutorial_Target_BP2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATutorial_Target_BP2_C>();
	}
};
static_assert(alignof(ATutorial_Target_BP2_C) == 0x000008, "Wrong alignment on ATutorial_Target_BP2_C");
static_assert(sizeof(ATutorial_Target_BP2_C) == 0x000238, "Wrong size on ATutorial_Target_BP2_C");
static_assert(offsetof(ATutorial_Target_BP2_C, UberGraphFrame) == 0x000228, "Member 'ATutorial_Target_BP2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP2_C, TargetShot) == 0x000230, "Member 'ATutorial_Target_BP2_C::TargetShot' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP2_C, IsChallenge) == 0x000231, "Member 'ATutorial_Target_BP2_C::IsChallenge' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP2_C, LastShootTime) == 0x000234, "Member 'ATutorial_Target_BP2_C::LastShootTime' has a wrong offset!");

}

