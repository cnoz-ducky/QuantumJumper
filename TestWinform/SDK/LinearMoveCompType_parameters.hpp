#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LinearMoveCompType

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function LinearMoveCompType.LinearMoveCompType_C.GetInterpolatedOffset
// 0x003C (0x003C - 0x0000)
struct LinearMoveCompType_C_GetInterpolatedOffset final
{
public:
	struct FVector                                NewRelativeLocation;                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeTimeBetweenPoints;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMod_Remainder;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VEase_ReturnValue;                        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(LinearMoveCompType_C_GetInterpolatedOffset) == 0x000004, "Wrong alignment on LinearMoveCompType_C_GetInterpolatedOffset");
static_assert(sizeof(LinearMoveCompType_C_GetInterpolatedOffset) == 0x00003C, "Wrong size on LinearMoveCompType_C_GetInterpolatedOffset");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, NewRelativeLocation) == 0x000000, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::NewRelativeLocation' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, RelativeTimeBetweenPoints) == 0x00000C, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::RelativeTimeBetweenPoints' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_FMod_Remainder) == 0x000010, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_FMod_Remainder' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_FMod_ReturnValue) == 0x000014, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_FMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000028, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetInterpolatedOffset, CallFunc_VEase_ReturnValue) == 0x000030, "Member 'LinearMoveCompType_C_GetInterpolatedOffset::CallFunc_VEase_ReturnValue' has a wrong offset!");

// Function LinearMoveCompType.LinearMoveCompType_C.GetRelativePosition
// 0x002C (0x002C - 0x0000)
struct LinearMoveCompType_C_GetRelativePosition final
{
public:
	struct FVector                                NewParam;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRelativePosition_NewParam;             // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetInterpolatedOffset_NewRelativeLocation; // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(LinearMoveCompType_C_GetRelativePosition) == 0x000004, "Wrong alignment on LinearMoveCompType_C_GetRelativePosition");
static_assert(sizeof(LinearMoveCompType_C_GetRelativePosition) == 0x00002C, "Wrong size on LinearMoveCompType_C_GetRelativePosition");
static_assert(offsetof(LinearMoveCompType_C_GetRelativePosition, NewParam) == 0x000000, "Member 'LinearMoveCompType_C_GetRelativePosition::NewParam' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetRelativePosition, CallFunc_GetRelativePosition_NewParam) == 0x00000C, "Member 'LinearMoveCompType_C_GetRelativePosition::CallFunc_GetRelativePosition_NewParam' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetRelativePosition, CallFunc_GetInterpolatedOffset_NewRelativeLocation) == 0x000018, "Member 'LinearMoveCompType_C_GetRelativePosition::CallFunc_GetInterpolatedOffset_NewRelativeLocation' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetRelativePosition, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'LinearMoveCompType_C_GetRelativePosition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(LinearMoveCompType_C_GetRelativePosition, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'LinearMoveCompType_C_GetRelativePosition::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

