#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tutorial_Target_BP

#include "Basic.hpp"

#include "TimeWatch_classes.hpp"
#include "Engine_structs.hpp"
#include "DummyStates_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Tutorial_Target_BP.Tutorial_Target_BP_C
// 0x0138 (0x0390 - 0x0258)
class ATutorial_Target_BP_C final : public ATWDamageableActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCyclicMovementComponent_C*             CyclicMovementComponent;                           // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCircularMoveCompType_C*                CircularMovementComponent;                         // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULinearMoveCompType_C*                  LinearMovementComponent;                           // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UMaterialInterface*>        DefaultMaterials;                                  // 0x0280(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	TMap<int32, class UMaterialInterface*>        AliveMaterials;                                    // 0x02D0(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	TMap<int32, class UMaterialInterface*>        DeadMaterials;                                     // 0x0320(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         LastShootTime;                                     // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDummyStates                                  DummyState;                                        // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitPos;                                            // 0x0378(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hit_Time;                                          // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnTime;                                       // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          autoRespawn;                                       // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Tutorial_Target_BP(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnProjectileImpact(const struct FHitResult& HitData);
	void ReceiveTick(float DeltaSeconds);
	void SetState(EDummyStates NewState);
	void BP_OnDeath(const struct FNGDDamageEvent& DamageEvent, class AController* InstigatorController, class AActor* DamageCauser);
	void SetMaterials(const TMap<int32, class UMaterialInterface*>& NewParam);
	float BP_OnTakeDamage(float Damage, const struct FNGDDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Tutorial_Target_BP_C">();
	}
	static class ATutorial_Target_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATutorial_Target_BP_C>();
	}
};
static_assert(alignof(ATutorial_Target_BP_C) == 0x000008, "Wrong alignment on ATutorial_Target_BP_C");
static_assert(sizeof(ATutorial_Target_BP_C) == 0x000390, "Wrong size on ATutorial_Target_BP_C");
static_assert(offsetof(ATutorial_Target_BP_C, UberGraphFrame) == 0x000258, "Member 'ATutorial_Target_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, CyclicMovementComponent) == 0x000260, "Member 'ATutorial_Target_BP_C::CyclicMovementComponent' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, CircularMovementComponent) == 0x000268, "Member 'ATutorial_Target_BP_C::CircularMovementComponent' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, LinearMovementComponent) == 0x000270, "Member 'ATutorial_Target_BP_C::LinearMovementComponent' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, IsActive) == 0x000278, "Member 'ATutorial_Target_BP_C::IsActive' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, DefaultMaterials) == 0x000280, "Member 'ATutorial_Target_BP_C::DefaultMaterials' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, AliveMaterials) == 0x0002D0, "Member 'ATutorial_Target_BP_C::AliveMaterials' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, DeadMaterials) == 0x000320, "Member 'ATutorial_Target_BP_C::DeadMaterials' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, LastShootTime) == 0x000370, "Member 'ATutorial_Target_BP_C::LastShootTime' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, DummyState) == 0x000374, "Member 'ATutorial_Target_BP_C::DummyState' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, HitPos) == 0x000378, "Member 'ATutorial_Target_BP_C::HitPos' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, Hit_Time) == 0x000384, "Member 'ATutorial_Target_BP_C::Hit_Time' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, RespawnTime) == 0x000388, "Member 'ATutorial_Target_BP_C::RespawnTime' has a wrong offset!");
static_assert(offsetof(ATutorial_Target_BP_C, autoRespawn) == 0x00038C, "Member 'ATutorial_Target_BP_C::autoRespawn' has a wrong offset!");

}

